
DiodePID_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012400  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001d38  080126a0  080126a0  000136a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080143d8  080143d8  000161d8  2**0
                  CONTENTS
  4 .ARM          00000008  080143d8  080143d8  000153d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080143e0  080143e0  000161d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080143e0  080143e0  000153e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080143e4  080143e4  000153e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  24000000  080143e8  00016000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003a8  240001d8  080145c0  000161d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24000580  080145c0  00016580  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000161d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00022310  00000000  00000000  00016206  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003f96  00000000  00000000  00038516  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a08  00000000  00000000  0003c4b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000143f  00000000  00000000  0003deb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003f51f  00000000  00000000  0003f2f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002608c  00000000  00000000  0007e816  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0019ea42  00000000  00000000  000a48a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  002432e4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008494  00000000  00000000  00243328  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004c  00000000  00000000  0024b7bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001d8 	.word	0x240001d8
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08012688 	.word	0x08012688

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001dc 	.word	0x240001dc
 80002dc:	08012688 	.word	0x08012688

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_drsub>:
 8000390:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000394:	e002      	b.n	800039c <__adddf3>
 8000396:	bf00      	nop

08000398 <__aeabi_dsub>:
 8000398:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800039c <__adddf3>:
 800039c:	b530      	push	{r4, r5, lr}
 800039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003a6:	ea94 0f05 	teq	r4, r5
 80003aa:	bf08      	it	eq
 80003ac:	ea90 0f02 	teqeq	r0, r2
 80003b0:	bf1f      	itttt	ne
 80003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003c2:	f000 80e2 	beq.w	800058a <__adddf3+0x1ee>
 80003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ce:	bfb8      	it	lt
 80003d0:	426d      	neglt	r5, r5
 80003d2:	dd0c      	ble.n	80003ee <__adddf3+0x52>
 80003d4:	442c      	add	r4, r5
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	ea82 0000 	eor.w	r0, r2, r0
 80003e2:	ea83 0101 	eor.w	r1, r3, r1
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	2d36      	cmp	r5, #54	@ 0x36
 80003f0:	bf88      	it	hi
 80003f2:	bd30      	pophi	{r4, r5, pc}
 80003f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000404:	d002      	beq.n	800040c <__adddf3+0x70>
 8000406:	4240      	negs	r0, r0
 8000408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800040c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x84>
 800041a:	4252      	negs	r2, r2
 800041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000420:	ea94 0f05 	teq	r4, r5
 8000424:	f000 80a7 	beq.w	8000576 <__adddf3+0x1da>
 8000428:	f1a4 0401 	sub.w	r4, r4, #1
 800042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000430:	db0d      	blt.n	800044e <__adddf3+0xb2>
 8000432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000436:	fa22 f205 	lsr.w	r2, r2, r5
 800043a:	1880      	adds	r0, r0, r2
 800043c:	f141 0100 	adc.w	r1, r1, #0
 8000440:	fa03 f20e 	lsl.w	r2, r3, lr
 8000444:	1880      	adds	r0, r0, r2
 8000446:	fa43 f305 	asr.w	r3, r3, r5
 800044a:	4159      	adcs	r1, r3
 800044c:	e00e      	b.n	800046c <__adddf3+0xd0>
 800044e:	f1a5 0520 	sub.w	r5, r5, #32
 8000452:	f10e 0e20 	add.w	lr, lr, #32
 8000456:	2a01      	cmp	r2, #1
 8000458:	fa03 fc0e 	lsl.w	ip, r3, lr
 800045c:	bf28      	it	cs
 800045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000462:	fa43 f305 	asr.w	r3, r3, r5
 8000466:	18c0      	adds	r0, r0, r3
 8000468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800046c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000470:	d507      	bpl.n	8000482 <__adddf3+0xe6>
 8000472:	f04f 0e00 	mov.w	lr, #0
 8000476:	f1dc 0c00 	rsbs	ip, ip, #0
 800047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000482:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000486:	d31b      	bcc.n	80004c0 <__adddf3+0x124>
 8000488:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800048c:	d30c      	bcc.n	80004a8 <__adddf3+0x10c>
 800048e:	0849      	lsrs	r1, r1, #1
 8000490:	ea5f 0030 	movs.w	r0, r0, rrx
 8000494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000498:	f104 0401 	add.w	r4, r4, #1
 800049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004a4:	f080 809a 	bcs.w	80005dc <__adddf3+0x240>
 80004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004ac:	bf08      	it	eq
 80004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004b2:	f150 0000 	adcs.w	r0, r0, #0
 80004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ba:	ea41 0105 	orr.w	r1, r1, r5
 80004be:	bd30      	pop	{r4, r5, pc}
 80004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004c4:	4140      	adcs	r0, r0
 80004c6:	eb41 0101 	adc.w	r1, r1, r1
 80004ca:	3c01      	subs	r4, #1
 80004cc:	bf28      	it	cs
 80004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004d2:	d2e9      	bcs.n	80004a8 <__adddf3+0x10c>
 80004d4:	f091 0f00 	teq	r1, #0
 80004d8:	bf04      	itt	eq
 80004da:	4601      	moveq	r1, r0
 80004dc:	2000      	moveq	r0, #0
 80004de:	fab1 f381 	clz	r3, r1
 80004e2:	bf08      	it	eq
 80004e4:	3320      	addeq	r3, #32
 80004e6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ea:	f1b3 0220 	subs.w	r2, r3, #32
 80004ee:	da0c      	bge.n	800050a <__adddf3+0x16e>
 80004f0:	320c      	adds	r2, #12
 80004f2:	dd08      	ble.n	8000506 <__adddf3+0x16a>
 80004f4:	f102 0c14 	add.w	ip, r2, #20
 80004f8:	f1c2 020c 	rsb	r2, r2, #12
 80004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000500:	fa21 f102 	lsr.w	r1, r1, r2
 8000504:	e00c      	b.n	8000520 <__adddf3+0x184>
 8000506:	f102 0214 	add.w	r2, r2, #20
 800050a:	bfd8      	it	le
 800050c:	f1c2 0c20 	rsble	ip, r2, #32
 8000510:	fa01 f102 	lsl.w	r1, r1, r2
 8000514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000518:	bfdc      	itt	le
 800051a:	ea41 010c 	orrle.w	r1, r1, ip
 800051e:	4090      	lslle	r0, r2
 8000520:	1ae4      	subs	r4, r4, r3
 8000522:	bfa2      	ittt	ge
 8000524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000528:	4329      	orrge	r1, r5
 800052a:	bd30      	popge	{r4, r5, pc}
 800052c:	ea6f 0404 	mvn.w	r4, r4
 8000530:	3c1f      	subs	r4, #31
 8000532:	da1c      	bge.n	800056e <__adddf3+0x1d2>
 8000534:	340c      	adds	r4, #12
 8000536:	dc0e      	bgt.n	8000556 <__adddf3+0x1ba>
 8000538:	f104 0414 	add.w	r4, r4, #20
 800053c:	f1c4 0220 	rsb	r2, r4, #32
 8000540:	fa20 f004 	lsr.w	r0, r0, r4
 8000544:	fa01 f302 	lsl.w	r3, r1, r2
 8000548:	ea40 0003 	orr.w	r0, r0, r3
 800054c:	fa21 f304 	lsr.w	r3, r1, r4
 8000550:	ea45 0103 	orr.w	r1, r5, r3
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	f1c4 040c 	rsb	r4, r4, #12
 800055a:	f1c4 0220 	rsb	r2, r4, #32
 800055e:	fa20 f002 	lsr.w	r0, r0, r2
 8000562:	fa01 f304 	lsl.w	r3, r1, r4
 8000566:	ea40 0003 	orr.w	r0, r0, r3
 800056a:	4629      	mov	r1, r5
 800056c:	bd30      	pop	{r4, r5, pc}
 800056e:	fa21 f004 	lsr.w	r0, r1, r4
 8000572:	4629      	mov	r1, r5
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f094 0f00 	teq	r4, #0
 800057a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800057e:	bf06      	itte	eq
 8000580:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000584:	3401      	addeq	r4, #1
 8000586:	3d01      	subne	r5, #1
 8000588:	e74e      	b.n	8000428 <__adddf3+0x8c>
 800058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800058e:	bf18      	it	ne
 8000590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000594:	d029      	beq.n	80005ea <__adddf3+0x24e>
 8000596:	ea94 0f05 	teq	r4, r5
 800059a:	bf08      	it	eq
 800059c:	ea90 0f02 	teqeq	r0, r2
 80005a0:	d005      	beq.n	80005ae <__adddf3+0x212>
 80005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005a6:	bf04      	itt	eq
 80005a8:	4619      	moveq	r1, r3
 80005aa:	4610      	moveq	r0, r2
 80005ac:	bd30      	pop	{r4, r5, pc}
 80005ae:	ea91 0f03 	teq	r1, r3
 80005b2:	bf1e      	ittt	ne
 80005b4:	2100      	movne	r1, #0
 80005b6:	2000      	movne	r0, #0
 80005b8:	bd30      	popne	{r4, r5, pc}
 80005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005be:	d105      	bne.n	80005cc <__adddf3+0x230>
 80005c0:	0040      	lsls	r0, r0, #1
 80005c2:	4149      	adcs	r1, r1
 80005c4:	bf28      	it	cs
 80005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005ca:	bd30      	pop	{r4, r5, pc}
 80005cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005d0:	bf3c      	itt	cc
 80005d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005d6:	bd30      	popcc	{r4, r5, pc}
 80005d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80005e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80005e4:	f04f 0000 	mov.w	r0, #0
 80005e8:	bd30      	pop	{r4, r5, pc}
 80005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ee:	bf1a      	itte	ne
 80005f0:	4619      	movne	r1, r3
 80005f2:	4610      	movne	r0, r2
 80005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005f8:	bf1c      	itt	ne
 80005fa:	460b      	movne	r3, r1
 80005fc:	4602      	movne	r2, r0
 80005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000602:	bf06      	itte	eq
 8000604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000608:	ea91 0f03 	teqeq	r1, r3
 800060c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	bf00      	nop

08000614 <__aeabi_ui2d>:
 8000614:	f090 0f00 	teq	r0, #0
 8000618:	bf04      	itt	eq
 800061a:	2100      	moveq	r1, #0
 800061c:	4770      	bxeq	lr
 800061e:	b530      	push	{r4, r5, lr}
 8000620:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000624:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000628:	f04f 0500 	mov.w	r5, #0
 800062c:	f04f 0100 	mov.w	r1, #0
 8000630:	e750      	b.n	80004d4 <__adddf3+0x138>
 8000632:	bf00      	nop

08000634 <__aeabi_i2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000648:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800064c:	bf48      	it	mi
 800064e:	4240      	negmi	r0, r0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e73e      	b.n	80004d4 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_f2d>:
 8000658:	0042      	lsls	r2, r0, #1
 800065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000666:	bf1f      	itttt	ne
 8000668:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800066c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000670:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000674:	4770      	bxne	lr
 8000676:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800067a:	bf08      	it	eq
 800067c:	4770      	bxeq	lr
 800067e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000682:	bf04      	itt	eq
 8000684:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000688:	4770      	bxeq	lr
 800068a:	b530      	push	{r4, r5, lr}
 800068c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000690:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000694:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000698:	e71c      	b.n	80004d4 <__adddf3+0x138>
 800069a:	bf00      	nop

0800069c <__aeabi_ul2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f04f 0500 	mov.w	r5, #0
 80006aa:	e00a      	b.n	80006c2 <__aeabi_l2d+0x16>

080006ac <__aeabi_l2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006ba:	d502      	bpl.n	80006c2 <__aeabi_l2d+0x16>
 80006bc:	4240      	negs	r0, r0
 80006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ce:	f43f aed8 	beq.w	8000482 <__adddf3+0xe6>
 80006d2:	f04f 0203 	mov.w	r2, #3
 80006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006da:	bf18      	it	ne
 80006dc:	3203      	addne	r2, #3
 80006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006e2:	bf18      	it	ne
 80006e4:	3203      	addne	r2, #3
 80006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ea:	f1c2 0320 	rsb	r3, r2, #32
 80006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80006f2:	fa20 f002 	lsr.w	r0, r0, r2
 80006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006fa:	ea40 000e 	orr.w	r0, r0, lr
 80006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000702:	4414      	add	r4, r2
 8000704:	e6bd      	b.n	8000482 <__adddf3+0xe6>
 8000706:	bf00      	nop

08000708 <__aeabi_uldivmod>:
 8000708:	b953      	cbnz	r3, 8000720 <__aeabi_uldivmod+0x18>
 800070a:	b94a      	cbnz	r2, 8000720 <__aeabi_uldivmod+0x18>
 800070c:	2900      	cmp	r1, #0
 800070e:	bf08      	it	eq
 8000710:	2800      	cmpeq	r0, #0
 8000712:	bf1c      	itt	ne
 8000714:	f04f 31ff 	movne.w	r1, #4294967295
 8000718:	f04f 30ff 	movne.w	r0, #4294967295
 800071c:	f000 b9a2 	b.w	8000a64 <__aeabi_idiv0>
 8000720:	f1ad 0c08 	sub.w	ip, sp, #8
 8000724:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000728:	f000 f83e 	bl	80007a8 <__udivmoddi4>
 800072c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000730:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000734:	b004      	add	sp, #16
 8000736:	4770      	bx	lr

08000738 <__aeabi_d2lz>:
 8000738:	b508      	push	{r3, lr}
 800073a:	4602      	mov	r2, r0
 800073c:	460b      	mov	r3, r1
 800073e:	ec43 2b17 	vmov	d7, r2, r3
 8000742:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800074a:	d403      	bmi.n	8000754 <__aeabi_d2lz+0x1c>
 800074c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000750:	f000 b80a 	b.w	8000768 <__aeabi_d2ulz>
 8000754:	eeb1 7b47 	vneg.f64	d7, d7
 8000758:	ec51 0b17 	vmov	r0, r1, d7
 800075c:	f000 f804 	bl	8000768 <__aeabi_d2ulz>
 8000760:	4240      	negs	r0, r0
 8000762:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000766:	bd08      	pop	{r3, pc}

08000768 <__aeabi_d2ulz>:
 8000768:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 8000798 <__aeabi_d2ulz+0x30>
 800076c:	ec41 0b17 	vmov	d7, r0, r1
 8000770:	ed9f 5b0b 	vldr	d5, [pc, #44]	@ 80007a0 <__aeabi_d2ulz+0x38>
 8000774:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000778:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800077c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000780:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000784:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000788:	ee16 1a10 	vmov	r1, s12
 800078c:	ee17 0a90 	vmov	r0, s15
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	f3af 8000 	nop.w
 8000798:	00000000 	.word	0x00000000
 800079c:	3df00000 	.word	0x3df00000
 80007a0:	00000000 	.word	0x00000000
 80007a4:	41f00000 	.word	0x41f00000

080007a8 <__udivmoddi4>:
 80007a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007ac:	9d08      	ldr	r5, [sp, #32]
 80007ae:	460c      	mov	r4, r1
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d14e      	bne.n	8000852 <__udivmoddi4+0xaa>
 80007b4:	4694      	mov	ip, r2
 80007b6:	458c      	cmp	ip, r1
 80007b8:	4686      	mov	lr, r0
 80007ba:	fab2 f282 	clz	r2, r2
 80007be:	d962      	bls.n	8000886 <__udivmoddi4+0xde>
 80007c0:	b14a      	cbz	r2, 80007d6 <__udivmoddi4+0x2e>
 80007c2:	f1c2 0320 	rsb	r3, r2, #32
 80007c6:	4091      	lsls	r1, r2
 80007c8:	fa20 f303 	lsr.w	r3, r0, r3
 80007cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80007d0:	4319      	orrs	r1, r3
 80007d2:	fa00 fe02 	lsl.w	lr, r0, r2
 80007d6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80007da:	fa1f f68c 	uxth.w	r6, ip
 80007de:	fbb1 f4f7 	udiv	r4, r1, r7
 80007e2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80007e6:	fb07 1114 	mls	r1, r7, r4, r1
 80007ea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80007ee:	fb04 f106 	mul.w	r1, r4, r6
 80007f2:	4299      	cmp	r1, r3
 80007f4:	d90a      	bls.n	800080c <__udivmoddi4+0x64>
 80007f6:	eb1c 0303 	adds.w	r3, ip, r3
 80007fa:	f104 30ff 	add.w	r0, r4, #4294967295
 80007fe:	f080 8112 	bcs.w	8000a26 <__udivmoddi4+0x27e>
 8000802:	4299      	cmp	r1, r3
 8000804:	f240 810f 	bls.w	8000a26 <__udivmoddi4+0x27e>
 8000808:	3c02      	subs	r4, #2
 800080a:	4463      	add	r3, ip
 800080c:	1a59      	subs	r1, r3, r1
 800080e:	fa1f f38e 	uxth.w	r3, lr
 8000812:	fbb1 f0f7 	udiv	r0, r1, r7
 8000816:	fb07 1110 	mls	r1, r7, r0, r1
 800081a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800081e:	fb00 f606 	mul.w	r6, r0, r6
 8000822:	429e      	cmp	r6, r3
 8000824:	d90a      	bls.n	800083c <__udivmoddi4+0x94>
 8000826:	eb1c 0303 	adds.w	r3, ip, r3
 800082a:	f100 31ff 	add.w	r1, r0, #4294967295
 800082e:	f080 80fc 	bcs.w	8000a2a <__udivmoddi4+0x282>
 8000832:	429e      	cmp	r6, r3
 8000834:	f240 80f9 	bls.w	8000a2a <__udivmoddi4+0x282>
 8000838:	4463      	add	r3, ip
 800083a:	3802      	subs	r0, #2
 800083c:	1b9b      	subs	r3, r3, r6
 800083e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000842:	2100      	movs	r1, #0
 8000844:	b11d      	cbz	r5, 800084e <__udivmoddi4+0xa6>
 8000846:	40d3      	lsrs	r3, r2
 8000848:	2200      	movs	r2, #0
 800084a:	e9c5 3200 	strd	r3, r2, [r5]
 800084e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000852:	428b      	cmp	r3, r1
 8000854:	d905      	bls.n	8000862 <__udivmoddi4+0xba>
 8000856:	b10d      	cbz	r5, 800085c <__udivmoddi4+0xb4>
 8000858:	e9c5 0100 	strd	r0, r1, [r5]
 800085c:	2100      	movs	r1, #0
 800085e:	4608      	mov	r0, r1
 8000860:	e7f5      	b.n	800084e <__udivmoddi4+0xa6>
 8000862:	fab3 f183 	clz	r1, r3
 8000866:	2900      	cmp	r1, #0
 8000868:	d146      	bne.n	80008f8 <__udivmoddi4+0x150>
 800086a:	42a3      	cmp	r3, r4
 800086c:	d302      	bcc.n	8000874 <__udivmoddi4+0xcc>
 800086e:	4290      	cmp	r0, r2
 8000870:	f0c0 80f0 	bcc.w	8000a54 <__udivmoddi4+0x2ac>
 8000874:	1a86      	subs	r6, r0, r2
 8000876:	eb64 0303 	sbc.w	r3, r4, r3
 800087a:	2001      	movs	r0, #1
 800087c:	2d00      	cmp	r5, #0
 800087e:	d0e6      	beq.n	800084e <__udivmoddi4+0xa6>
 8000880:	e9c5 6300 	strd	r6, r3, [r5]
 8000884:	e7e3      	b.n	800084e <__udivmoddi4+0xa6>
 8000886:	2a00      	cmp	r2, #0
 8000888:	f040 8090 	bne.w	80009ac <__udivmoddi4+0x204>
 800088c:	eba1 040c 	sub.w	r4, r1, ip
 8000890:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000894:	fa1f f78c 	uxth.w	r7, ip
 8000898:	2101      	movs	r1, #1
 800089a:	fbb4 f6f8 	udiv	r6, r4, r8
 800089e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80008a2:	fb08 4416 	mls	r4, r8, r6, r4
 80008a6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80008aa:	fb07 f006 	mul.w	r0, r7, r6
 80008ae:	4298      	cmp	r0, r3
 80008b0:	d908      	bls.n	80008c4 <__udivmoddi4+0x11c>
 80008b2:	eb1c 0303 	adds.w	r3, ip, r3
 80008b6:	f106 34ff 	add.w	r4, r6, #4294967295
 80008ba:	d202      	bcs.n	80008c2 <__udivmoddi4+0x11a>
 80008bc:	4298      	cmp	r0, r3
 80008be:	f200 80cd 	bhi.w	8000a5c <__udivmoddi4+0x2b4>
 80008c2:	4626      	mov	r6, r4
 80008c4:	1a1c      	subs	r4, r3, r0
 80008c6:	fa1f f38e 	uxth.w	r3, lr
 80008ca:	fbb4 f0f8 	udiv	r0, r4, r8
 80008ce:	fb08 4410 	mls	r4, r8, r0, r4
 80008d2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80008d6:	fb00 f707 	mul.w	r7, r0, r7
 80008da:	429f      	cmp	r7, r3
 80008dc:	d908      	bls.n	80008f0 <__udivmoddi4+0x148>
 80008de:	eb1c 0303 	adds.w	r3, ip, r3
 80008e2:	f100 34ff 	add.w	r4, r0, #4294967295
 80008e6:	d202      	bcs.n	80008ee <__udivmoddi4+0x146>
 80008e8:	429f      	cmp	r7, r3
 80008ea:	f200 80b0 	bhi.w	8000a4e <__udivmoddi4+0x2a6>
 80008ee:	4620      	mov	r0, r4
 80008f0:	1bdb      	subs	r3, r3, r7
 80008f2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80008f6:	e7a5      	b.n	8000844 <__udivmoddi4+0x9c>
 80008f8:	f1c1 0620 	rsb	r6, r1, #32
 80008fc:	408b      	lsls	r3, r1
 80008fe:	fa22 f706 	lsr.w	r7, r2, r6
 8000902:	431f      	orrs	r7, r3
 8000904:	fa20 fc06 	lsr.w	ip, r0, r6
 8000908:	fa04 f301 	lsl.w	r3, r4, r1
 800090c:	ea43 030c 	orr.w	r3, r3, ip
 8000910:	40f4      	lsrs	r4, r6
 8000912:	fa00 f801 	lsl.w	r8, r0, r1
 8000916:	0c38      	lsrs	r0, r7, #16
 8000918:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800091c:	fbb4 fef0 	udiv	lr, r4, r0
 8000920:	fa1f fc87 	uxth.w	ip, r7
 8000924:	fb00 441e 	mls	r4, r0, lr, r4
 8000928:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800092c:	fb0e f90c 	mul.w	r9, lr, ip
 8000930:	45a1      	cmp	r9, r4
 8000932:	fa02 f201 	lsl.w	r2, r2, r1
 8000936:	d90a      	bls.n	800094e <__udivmoddi4+0x1a6>
 8000938:	193c      	adds	r4, r7, r4
 800093a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800093e:	f080 8084 	bcs.w	8000a4a <__udivmoddi4+0x2a2>
 8000942:	45a1      	cmp	r9, r4
 8000944:	f240 8081 	bls.w	8000a4a <__udivmoddi4+0x2a2>
 8000948:	f1ae 0e02 	sub.w	lr, lr, #2
 800094c:	443c      	add	r4, r7
 800094e:	eba4 0409 	sub.w	r4, r4, r9
 8000952:	fa1f f983 	uxth.w	r9, r3
 8000956:	fbb4 f3f0 	udiv	r3, r4, r0
 800095a:	fb00 4413 	mls	r4, r0, r3, r4
 800095e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000962:	fb03 fc0c 	mul.w	ip, r3, ip
 8000966:	45a4      	cmp	ip, r4
 8000968:	d907      	bls.n	800097a <__udivmoddi4+0x1d2>
 800096a:	193c      	adds	r4, r7, r4
 800096c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000970:	d267      	bcs.n	8000a42 <__udivmoddi4+0x29a>
 8000972:	45a4      	cmp	ip, r4
 8000974:	d965      	bls.n	8000a42 <__udivmoddi4+0x29a>
 8000976:	3b02      	subs	r3, #2
 8000978:	443c      	add	r4, r7
 800097a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800097e:	fba0 9302 	umull	r9, r3, r0, r2
 8000982:	eba4 040c 	sub.w	r4, r4, ip
 8000986:	429c      	cmp	r4, r3
 8000988:	46ce      	mov	lr, r9
 800098a:	469c      	mov	ip, r3
 800098c:	d351      	bcc.n	8000a32 <__udivmoddi4+0x28a>
 800098e:	d04e      	beq.n	8000a2e <__udivmoddi4+0x286>
 8000990:	b155      	cbz	r5, 80009a8 <__udivmoddi4+0x200>
 8000992:	ebb8 030e 	subs.w	r3, r8, lr
 8000996:	eb64 040c 	sbc.w	r4, r4, ip
 800099a:	fa04 f606 	lsl.w	r6, r4, r6
 800099e:	40cb      	lsrs	r3, r1
 80009a0:	431e      	orrs	r6, r3
 80009a2:	40cc      	lsrs	r4, r1
 80009a4:	e9c5 6400 	strd	r6, r4, [r5]
 80009a8:	2100      	movs	r1, #0
 80009aa:	e750      	b.n	800084e <__udivmoddi4+0xa6>
 80009ac:	f1c2 0320 	rsb	r3, r2, #32
 80009b0:	fa20 f103 	lsr.w	r1, r0, r3
 80009b4:	fa0c fc02 	lsl.w	ip, ip, r2
 80009b8:	fa24 f303 	lsr.w	r3, r4, r3
 80009bc:	4094      	lsls	r4, r2
 80009be:	430c      	orrs	r4, r1
 80009c0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80009c4:	fa00 fe02 	lsl.w	lr, r0, r2
 80009c8:	fa1f f78c 	uxth.w	r7, ip
 80009cc:	fbb3 f0f8 	udiv	r0, r3, r8
 80009d0:	fb08 3110 	mls	r1, r8, r0, r3
 80009d4:	0c23      	lsrs	r3, r4, #16
 80009d6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80009da:	fb00 f107 	mul.w	r1, r0, r7
 80009de:	4299      	cmp	r1, r3
 80009e0:	d908      	bls.n	80009f4 <__udivmoddi4+0x24c>
 80009e2:	eb1c 0303 	adds.w	r3, ip, r3
 80009e6:	f100 36ff 	add.w	r6, r0, #4294967295
 80009ea:	d22c      	bcs.n	8000a46 <__udivmoddi4+0x29e>
 80009ec:	4299      	cmp	r1, r3
 80009ee:	d92a      	bls.n	8000a46 <__udivmoddi4+0x29e>
 80009f0:	3802      	subs	r0, #2
 80009f2:	4463      	add	r3, ip
 80009f4:	1a5b      	subs	r3, r3, r1
 80009f6:	b2a4      	uxth	r4, r4
 80009f8:	fbb3 f1f8 	udiv	r1, r3, r8
 80009fc:	fb08 3311 	mls	r3, r8, r1, r3
 8000a00:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a04:	fb01 f307 	mul.w	r3, r1, r7
 8000a08:	42a3      	cmp	r3, r4
 8000a0a:	d908      	bls.n	8000a1e <__udivmoddi4+0x276>
 8000a0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000a10:	f101 36ff 	add.w	r6, r1, #4294967295
 8000a14:	d213      	bcs.n	8000a3e <__udivmoddi4+0x296>
 8000a16:	42a3      	cmp	r3, r4
 8000a18:	d911      	bls.n	8000a3e <__udivmoddi4+0x296>
 8000a1a:	3902      	subs	r1, #2
 8000a1c:	4464      	add	r4, ip
 8000a1e:	1ae4      	subs	r4, r4, r3
 8000a20:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000a24:	e739      	b.n	800089a <__udivmoddi4+0xf2>
 8000a26:	4604      	mov	r4, r0
 8000a28:	e6f0      	b.n	800080c <__udivmoddi4+0x64>
 8000a2a:	4608      	mov	r0, r1
 8000a2c:	e706      	b.n	800083c <__udivmoddi4+0x94>
 8000a2e:	45c8      	cmp	r8, r9
 8000a30:	d2ae      	bcs.n	8000990 <__udivmoddi4+0x1e8>
 8000a32:	ebb9 0e02 	subs.w	lr, r9, r2
 8000a36:	eb63 0c07 	sbc.w	ip, r3, r7
 8000a3a:	3801      	subs	r0, #1
 8000a3c:	e7a8      	b.n	8000990 <__udivmoddi4+0x1e8>
 8000a3e:	4631      	mov	r1, r6
 8000a40:	e7ed      	b.n	8000a1e <__udivmoddi4+0x276>
 8000a42:	4603      	mov	r3, r0
 8000a44:	e799      	b.n	800097a <__udivmoddi4+0x1d2>
 8000a46:	4630      	mov	r0, r6
 8000a48:	e7d4      	b.n	80009f4 <__udivmoddi4+0x24c>
 8000a4a:	46d6      	mov	lr, sl
 8000a4c:	e77f      	b.n	800094e <__udivmoddi4+0x1a6>
 8000a4e:	4463      	add	r3, ip
 8000a50:	3802      	subs	r0, #2
 8000a52:	e74d      	b.n	80008f0 <__udivmoddi4+0x148>
 8000a54:	4606      	mov	r6, r0
 8000a56:	4623      	mov	r3, r4
 8000a58:	4608      	mov	r0, r1
 8000a5a:	e70f      	b.n	800087c <__udivmoddi4+0xd4>
 8000a5c:	3e02      	subs	r6, #2
 8000a5e:	4463      	add	r3, ip
 8000a60:	e730      	b.n	80008c4 <__udivmoddi4+0x11c>
 8000a62:	bf00      	nop

08000a64 <__aeabi_idiv0>:
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop

08000a68 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000a6c:	4b3d      	ldr	r3, [pc, #244]	@ (8000b64 <SystemInit+0xfc>)
 8000a6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a72:	4a3c      	ldr	r2, [pc, #240]	@ (8000b64 <SystemInit+0xfc>)
 8000a74:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a78:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000a7c:	4b39      	ldr	r3, [pc, #228]	@ (8000b64 <SystemInit+0xfc>)
 8000a7e:	691b      	ldr	r3, [r3, #16]
 8000a80:	4a38      	ldr	r2, [pc, #224]	@ (8000b64 <SystemInit+0xfc>)
 8000a82:	f043 0310 	orr.w	r3, r3, #16
 8000a86:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000a88:	4b37      	ldr	r3, [pc, #220]	@ (8000b68 <SystemInit+0x100>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	f003 030f 	and.w	r3, r3, #15
 8000a90:	2b06      	cmp	r3, #6
 8000a92:	d807      	bhi.n	8000aa4 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000a94:	4b34      	ldr	r3, [pc, #208]	@ (8000b68 <SystemInit+0x100>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	f023 030f 	bic.w	r3, r3, #15
 8000a9c:	4a32      	ldr	r2, [pc, #200]	@ (8000b68 <SystemInit+0x100>)
 8000a9e:	f043 0307 	orr.w	r3, r3, #7
 8000aa2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000aa4:	4b31      	ldr	r3, [pc, #196]	@ (8000b6c <SystemInit+0x104>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	4a30      	ldr	r2, [pc, #192]	@ (8000b6c <SystemInit+0x104>)
 8000aaa:	f043 0301 	orr.w	r3, r3, #1
 8000aae:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000ab0:	4b2e      	ldr	r3, [pc, #184]	@ (8000b6c <SystemInit+0x104>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000ab6:	4b2d      	ldr	r3, [pc, #180]	@ (8000b6c <SystemInit+0x104>)
 8000ab8:	681a      	ldr	r2, [r3, #0]
 8000aba:	492c      	ldr	r1, [pc, #176]	@ (8000b6c <SystemInit+0x104>)
 8000abc:	4b2c      	ldr	r3, [pc, #176]	@ (8000b70 <SystemInit+0x108>)
 8000abe:	4013      	ands	r3, r2
 8000ac0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000ac2:	4b29      	ldr	r3, [pc, #164]	@ (8000b68 <SystemInit+0x100>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	f003 0308 	and.w	r3, r3, #8
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d007      	beq.n	8000ade <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000ace:	4b26      	ldr	r3, [pc, #152]	@ (8000b68 <SystemInit+0x100>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	f023 030f 	bic.w	r3, r3, #15
 8000ad6:	4a24      	ldr	r2, [pc, #144]	@ (8000b68 <SystemInit+0x100>)
 8000ad8:	f043 0307 	orr.w	r3, r3, #7
 8000adc:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000ade:	4b23      	ldr	r3, [pc, #140]	@ (8000b6c <SystemInit+0x104>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000ae4:	4b21      	ldr	r3, [pc, #132]	@ (8000b6c <SystemInit+0x104>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000aea:	4b20      	ldr	r3, [pc, #128]	@ (8000b6c <SystemInit+0x104>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000af0:	4b1e      	ldr	r3, [pc, #120]	@ (8000b6c <SystemInit+0x104>)
 8000af2:	4a20      	ldr	r2, [pc, #128]	@ (8000b74 <SystemInit+0x10c>)
 8000af4:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000af6:	4b1d      	ldr	r3, [pc, #116]	@ (8000b6c <SystemInit+0x104>)
 8000af8:	4a1f      	ldr	r2, [pc, #124]	@ (8000b78 <SystemInit+0x110>)
 8000afa:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000afc:	4b1b      	ldr	r3, [pc, #108]	@ (8000b6c <SystemInit+0x104>)
 8000afe:	4a1f      	ldr	r2, [pc, #124]	@ (8000b7c <SystemInit+0x114>)
 8000b00:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000b02:	4b1a      	ldr	r3, [pc, #104]	@ (8000b6c <SystemInit+0x104>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000b08:	4b18      	ldr	r3, [pc, #96]	@ (8000b6c <SystemInit+0x104>)
 8000b0a:	4a1c      	ldr	r2, [pc, #112]	@ (8000b7c <SystemInit+0x114>)
 8000b0c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000b0e:	4b17      	ldr	r3, [pc, #92]	@ (8000b6c <SystemInit+0x104>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000b14:	4b15      	ldr	r3, [pc, #84]	@ (8000b6c <SystemInit+0x104>)
 8000b16:	4a19      	ldr	r2, [pc, #100]	@ (8000b7c <SystemInit+0x114>)
 8000b18:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000b1a:	4b14      	ldr	r3, [pc, #80]	@ (8000b6c <SystemInit+0x104>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000b20:	4b12      	ldr	r3, [pc, #72]	@ (8000b6c <SystemInit+0x104>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	4a11      	ldr	r2, [pc, #68]	@ (8000b6c <SystemInit+0x104>)
 8000b26:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000b2a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000b2c:	4b0f      	ldr	r3, [pc, #60]	@ (8000b6c <SystemInit+0x104>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000b32:	4b13      	ldr	r3, [pc, #76]	@ (8000b80 <SystemInit+0x118>)
 8000b34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b36:	4a12      	ldr	r2, [pc, #72]	@ (8000b80 <SystemInit+0x118>)
 8000b38:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b3c:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000b3e:	4b11      	ldr	r3, [pc, #68]	@ (8000b84 <SystemInit+0x11c>)
 8000b40:	681a      	ldr	r2, [r3, #0]
 8000b42:	4b11      	ldr	r3, [pc, #68]	@ (8000b88 <SystemInit+0x120>)
 8000b44:	4013      	ands	r3, r2
 8000b46:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000b4a:	d202      	bcs.n	8000b52 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000b4c:	4b0f      	ldr	r3, [pc, #60]	@ (8000b8c <SystemInit+0x124>)
 8000b4e:	2201      	movs	r2, #1
 8000b50:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000b52:	4b0f      	ldr	r3, [pc, #60]	@ (8000b90 <SystemInit+0x128>)
 8000b54:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000b58:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000b5a:	bf00      	nop
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b62:	4770      	bx	lr
 8000b64:	e000ed00 	.word	0xe000ed00
 8000b68:	52002000 	.word	0x52002000
 8000b6c:	58024400 	.word	0x58024400
 8000b70:	eaf6ed7f 	.word	0xeaf6ed7f
 8000b74:	02020200 	.word	0x02020200
 8000b78:	01ff0000 	.word	0x01ff0000
 8000b7c:	01010280 	.word	0x01010280
 8000b80:	580000c0 	.word	0x580000c0
 8000b84:	5c001000 	.word	0x5c001000
 8000b88:	ffff0000 	.word	0xffff0000
 8000b8c:	51008108 	.word	0x51008108
 8000b90:	52004000 	.word	0x52004000

08000b94 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b08a      	sub	sp, #40	@ 0x28
 8000b98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000b9a:	f107 031c 	add.w	r3, r7, #28
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	601a      	str	r2, [r3, #0]
 8000ba2:	605a      	str	r2, [r3, #4]
 8000ba4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000ba6:	463b      	mov	r3, r7
 8000ba8:	2200      	movs	r2, #0
 8000baa:	601a      	str	r2, [r3, #0]
 8000bac:	605a      	str	r2, [r3, #4]
 8000bae:	609a      	str	r2, [r3, #8]
 8000bb0:	60da      	str	r2, [r3, #12]
 8000bb2:	611a      	str	r2, [r3, #16]
 8000bb4:	615a      	str	r2, [r3, #20]
 8000bb6:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000bb8:	4b35      	ldr	r3, [pc, #212]	@ (8000c90 <MX_ADC1_Init+0xfc>)
 8000bba:	4a36      	ldr	r2, [pc, #216]	@ (8000c94 <MX_ADC1_Init+0x100>)
 8000bbc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000bbe:	4b34      	ldr	r3, [pc, #208]	@ (8000c90 <MX_ADC1_Init+0xfc>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000bc4:	4b32      	ldr	r3, [pc, #200]	@ (8000c90 <MX_ADC1_Init+0xfc>)
 8000bc6:	2204      	movs	r2, #4
 8000bc8:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000bca:	4b31      	ldr	r3, [pc, #196]	@ (8000c90 <MX_ADC1_Init+0xfc>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000bd0:	4b2f      	ldr	r3, [pc, #188]	@ (8000c90 <MX_ADC1_Init+0xfc>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8000bd6:	4b2e      	ldr	r3, [pc, #184]	@ (8000c90 <MX_ADC1_Init+0xfc>)
 8000bd8:	2201      	movs	r2, #1
 8000bda:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000bdc:	4b2c      	ldr	r3, [pc, #176]	@ (8000c90 <MX_ADC1_Init+0xfc>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000be2:	4b2b      	ldr	r3, [pc, #172]	@ (8000c90 <MX_ADC1_Init+0xfc>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000be8:	4b29      	ldr	r3, [pc, #164]	@ (8000c90 <MX_ADC1_Init+0xfc>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000bee:	4b28      	ldr	r3, [pc, #160]	@ (8000c90 <MX_ADC1_Init+0xfc>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000bf4:	4b26      	ldr	r3, [pc, #152]	@ (8000c90 <MX_ADC1_Init+0xfc>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000bfa:	4b25      	ldr	r3, [pc, #148]	@ (8000c90 <MX_ADC1_Init+0xfc>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000c00:	4b23      	ldr	r3, [pc, #140]	@ (8000c90 <MX_ADC1_Init+0xfc>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Oversampling.Ratio = 1;
 8000c08:	4b21      	ldr	r3, [pc, #132]	@ (8000c90 <MX_ADC1_Init+0xfc>)
 8000c0a:	2201      	movs	r2, #1
 8000c0c:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000c0e:	4820      	ldr	r0, [pc, #128]	@ (8000c90 <MX_ADC1_Init+0xfc>)
 8000c10:	f001 fa8c 	bl	800212c <HAL_ADC_Init>
 8000c14:	4603      	mov	r3, r0
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d001      	beq.n	8000c1e <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8000c1a:	f000 fd03 	bl	8001624 <Error_Handler>
  }
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000c1e:	4b1c      	ldr	r3, [pc, #112]	@ (8000c90 <MX_ADC1_Init+0xfc>)
 8000c20:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000c24:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000c26:	4b1a      	ldr	r3, [pc, #104]	@ (8000c90 <MX_ADC1_Init+0xfc>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000c2c:	4818      	ldr	r0, [pc, #96]	@ (8000c90 <MX_ADC1_Init+0xfc>)
 8000c2e:	f001 fa7d 	bl	800212c <HAL_ADC_Init>
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d001      	beq.n	8000c3c <MX_ADC1_Init+0xa8>
  {
    Error_Handler();
 8000c38:	f000 fcf4 	bl	8001624 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000c40:	f107 031c 	add.w	r3, r7, #28
 8000c44:	4619      	mov	r1, r3
 8000c46:	4812      	ldr	r0, [pc, #72]	@ (8000c90 <MX_ADC1_Init+0xfc>)
 8000c48:	f002 faf6 	bl	8003238 <HAL_ADCEx_MultiModeConfigChannel>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d001      	beq.n	8000c56 <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 8000c52:	f000 fce7 	bl	8001624 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_19;
 8000c56:	4b10      	ldr	r3, [pc, #64]	@ (8000c98 <MX_ADC1_Init+0x104>)
 8000c58:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c5a:	2306      	movs	r3, #6
 8000c5c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000c62:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000c66:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000c68:	2304      	movs	r3, #4
 8000c6a:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000c70:	2300      	movs	r3, #0
 8000c72:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c74:	463b      	mov	r3, r7
 8000c76:	4619      	mov	r1, r3
 8000c78:	4805      	ldr	r0, [pc, #20]	@ (8000c90 <MX_ADC1_Init+0xfc>)
 8000c7a:	f001 fdc5 	bl	8002808 <HAL_ADC_ConfigChannel>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d001      	beq.n	8000c88 <MX_ADC1_Init+0xf4>
  {
    Error_Handler();
 8000c84:	f000 fcce 	bl	8001624 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000c88:	bf00      	nop
 8000c8a:	3728      	adds	r7, #40	@ 0x28
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bd80      	pop	{r7, pc}
 8000c90:	240001f4 	.word	0x240001f4
 8000c94:	40022000 	.word	0x40022000
 8000c98:	4fb80000 	.word	0x4fb80000

08000c9c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b0ba      	sub	sp, #232	@ 0xe8
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000ca8:	2200      	movs	r2, #0
 8000caa:	601a      	str	r2, [r3, #0]
 8000cac:	605a      	str	r2, [r3, #4]
 8000cae:	609a      	str	r2, [r3, #8]
 8000cb0:	60da      	str	r2, [r3, #12]
 8000cb2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000cb4:	f107 0310 	add.w	r3, r7, #16
 8000cb8:	22c0      	movs	r2, #192	@ 0xc0
 8000cba:	2100      	movs	r1, #0
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	f00d fed4 	bl	800ea6a <memset>
  if(adcHandle->Instance==ADC1)
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	4a43      	ldr	r2, [pc, #268]	@ (8000dd4 <HAL_ADC_MspInit+0x138>)
 8000cc8:	4293      	cmp	r3, r2
 8000cca:	d17f      	bne.n	8000dcc <HAL_ADC_MspInit+0x130>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000ccc:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000cd0:	f04f 0300 	mov.w	r3, #0
 8000cd4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 4;
 8000cd8:	2304      	movs	r3, #4
 8000cda:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 10;
 8000cdc:	230a      	movs	r3, #10
 8000cde:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000ce0:	2302      	movs	r3, #2
 8000ce2:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000ce4:	2302      	movs	r3, #2
 8000ce6:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000ce8:	2302      	movs	r3, #2
 8000cea:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000cec:	23c0      	movs	r3, #192	@ 0xc0
 8000cee:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8000cf0:	2320      	movs	r3, #32
 8000cf2:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0.0;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cfe:	f107 0310 	add.w	r3, r7, #16
 8000d02:	4618      	mov	r0, r3
 8000d04:	f006 fd30 	bl	8007768 <HAL_RCCEx_PeriphCLKConfig>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d001      	beq.n	8000d12 <HAL_ADC_MspInit+0x76>
    {
      Error_Handler();
 8000d0e:	f000 fc89 	bl	8001624 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000d12:	4b31      	ldr	r3, [pc, #196]	@ (8000dd8 <HAL_ADC_MspInit+0x13c>)
 8000d14:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000d18:	4a2f      	ldr	r2, [pc, #188]	@ (8000dd8 <HAL_ADC_MspInit+0x13c>)
 8000d1a:	f043 0320 	orr.w	r3, r3, #32
 8000d1e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000d22:	4b2d      	ldr	r3, [pc, #180]	@ (8000dd8 <HAL_ADC_MspInit+0x13c>)
 8000d24:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000d28:	f003 0320 	and.w	r3, r3, #32
 8000d2c:	60fb      	str	r3, [r7, #12]
 8000d2e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d30:	4b29      	ldr	r3, [pc, #164]	@ (8000dd8 <HAL_ADC_MspInit+0x13c>)
 8000d32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d36:	4a28      	ldr	r2, [pc, #160]	@ (8000dd8 <HAL_ADC_MspInit+0x13c>)
 8000d38:	f043 0301 	orr.w	r3, r3, #1
 8000d3c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d40:	4b25      	ldr	r3, [pc, #148]	@ (8000dd8 <HAL_ADC_MspInit+0x13c>)
 8000d42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d46:	f003 0301 	and.w	r3, r3, #1
 8000d4a:	60bb      	str	r3, [r7, #8]
 8000d4c:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA5     ------> ADC1_INP19
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000d4e:	2320      	movs	r3, #32
 8000d50:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d54:	2303      	movs	r3, #3
 8000d56:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d60:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000d64:	4619      	mov	r1, r3
 8000d66:	481d      	ldr	r0, [pc, #116]	@ (8000ddc <HAL_ADC_MspInit+0x140>)
 8000d68:	f004 fe7a 	bl	8005a60 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8000d6c:	4b1c      	ldr	r3, [pc, #112]	@ (8000de0 <HAL_ADC_MspInit+0x144>)
 8000d6e:	4a1d      	ldr	r2, [pc, #116]	@ (8000de4 <HAL_ADC_MspInit+0x148>)
 8000d70:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000d72:	4b1b      	ldr	r3, [pc, #108]	@ (8000de0 <HAL_ADC_MspInit+0x144>)
 8000d74:	2209      	movs	r2, #9
 8000d76:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d78:	4b19      	ldr	r3, [pc, #100]	@ (8000de0 <HAL_ADC_MspInit+0x144>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d7e:	4b18      	ldr	r3, [pc, #96]	@ (8000de0 <HAL_ADC_MspInit+0x144>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000d84:	4b16      	ldr	r3, [pc, #88]	@ (8000de0 <HAL_ADC_MspInit+0x144>)
 8000d86:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000d8a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000d8c:	4b14      	ldr	r3, [pc, #80]	@ (8000de0 <HAL_ADC_MspInit+0x144>)
 8000d8e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000d92:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000d94:	4b12      	ldr	r3, [pc, #72]	@ (8000de0 <HAL_ADC_MspInit+0x144>)
 8000d96:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000d9a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000d9c:	4b10      	ldr	r3, [pc, #64]	@ (8000de0 <HAL_ADC_MspInit+0x144>)
 8000d9e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000da2:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000da4:	4b0e      	ldr	r3, [pc, #56]	@ (8000de0 <HAL_ADC_MspInit+0x144>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000daa:	4b0d      	ldr	r3, [pc, #52]	@ (8000de0 <HAL_ADC_MspInit+0x144>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000db0:	480b      	ldr	r0, [pc, #44]	@ (8000de0 <HAL_ADC_MspInit+0x144>)
 8000db2:	f002 fc2f 	bl	8003614 <HAL_DMA_Init>
 8000db6:	4603      	mov	r3, r0
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d001      	beq.n	8000dc0 <HAL_ADC_MspInit+0x124>
    {
      Error_Handler();
 8000dbc:	f000 fc32 	bl	8001624 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	4a07      	ldr	r2, [pc, #28]	@ (8000de0 <HAL_ADC_MspInit+0x144>)
 8000dc4:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000dc6:	4a06      	ldr	r2, [pc, #24]	@ (8000de0 <HAL_ADC_MspInit+0x144>)
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000dcc:	bf00      	nop
 8000dce:	37e8      	adds	r7, #232	@ 0xe8
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	40022000 	.word	0x40022000
 8000dd8:	58024400 	.word	0x58024400
 8000ddc:	58020000 	.word	0x58020000
 8000de0:	24000258 	.word	0x24000258
 8000de4:	40020010 	.word	0x40020010

08000de8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b082      	sub	sp, #8
 8000dec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000dee:	4b0d      	ldr	r3, [pc, #52]	@ (8000e24 <MX_DMA_Init+0x3c>)
 8000df0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000df4:	4a0b      	ldr	r2, [pc, #44]	@ (8000e24 <MX_DMA_Init+0x3c>)
 8000df6:	f043 0301 	orr.w	r3, r3, #1
 8000dfa:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000dfe:	4b09      	ldr	r3, [pc, #36]	@ (8000e24 <MX_DMA_Init+0x3c>)
 8000e00:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000e04:	f003 0301 	and.w	r3, r3, #1
 8000e08:	607b      	str	r3, [r7, #4]
 8000e0a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	2100      	movs	r1, #0
 8000e10:	200b      	movs	r0, #11
 8000e12:	f002 fbca 	bl	80035aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000e16:	200b      	movs	r0, #11
 8000e18:	f002 fbe1 	bl	80035de <HAL_NVIC_EnableIRQ>

}
 8000e1c:	bf00      	nop
 8000e1e:	3708      	adds	r7, #8
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	58024400 	.word	0x58024400

08000e28 <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b08a      	sub	sp, #40	@ 0x28
 8000e2c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e2e:	f107 0314 	add.w	r3, r7, #20
 8000e32:	2200      	movs	r2, #0
 8000e34:	601a      	str	r2, [r3, #0]
 8000e36:	605a      	str	r2, [r3, #4]
 8000e38:	609a      	str	r2, [r3, #8]
 8000e3a:	60da      	str	r2, [r3, #12]
 8000e3c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e3e:	4b51      	ldr	r3, [pc, #324]	@ (8000f84 <MX_GPIO_Init+0x15c>)
 8000e40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e44:	4a4f      	ldr	r2, [pc, #316]	@ (8000f84 <MX_GPIO_Init+0x15c>)
 8000e46:	f043 0304 	orr.w	r3, r3, #4
 8000e4a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e4e:	4b4d      	ldr	r3, [pc, #308]	@ (8000f84 <MX_GPIO_Init+0x15c>)
 8000e50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e54:	f003 0304 	and.w	r3, r3, #4
 8000e58:	613b      	str	r3, [r7, #16]
 8000e5a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e5c:	4b49      	ldr	r3, [pc, #292]	@ (8000f84 <MX_GPIO_Init+0x15c>)
 8000e5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e62:	4a48      	ldr	r2, [pc, #288]	@ (8000f84 <MX_GPIO_Init+0x15c>)
 8000e64:	f043 0301 	orr.w	r3, r3, #1
 8000e68:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e6c:	4b45      	ldr	r3, [pc, #276]	@ (8000f84 <MX_GPIO_Init+0x15c>)
 8000e6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e72:	f003 0301 	and.w	r3, r3, #1
 8000e76:	60fb      	str	r3, [r7, #12]
 8000e78:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e7a:	4b42      	ldr	r3, [pc, #264]	@ (8000f84 <MX_GPIO_Init+0x15c>)
 8000e7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e80:	4a40      	ldr	r2, [pc, #256]	@ (8000f84 <MX_GPIO_Init+0x15c>)
 8000e82:	f043 0302 	orr.w	r3, r3, #2
 8000e86:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e8a:	4b3e      	ldr	r3, [pc, #248]	@ (8000f84 <MX_GPIO_Init+0x15c>)
 8000e8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e90:	f003 0302 	and.w	r3, r3, #2
 8000e94:	60bb      	str	r3, [r7, #8]
 8000e96:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e98:	4b3a      	ldr	r3, [pc, #232]	@ (8000f84 <MX_GPIO_Init+0x15c>)
 8000e9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e9e:	4a39      	ldr	r2, [pc, #228]	@ (8000f84 <MX_GPIO_Init+0x15c>)
 8000ea0:	f043 0308 	orr.w	r3, r3, #8
 8000ea4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ea8:	4b36      	ldr	r3, [pc, #216]	@ (8000f84 <MX_GPIO_Init+0x15c>)
 8000eaa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000eae:	f003 0308 	and.w	r3, r3, #8
 8000eb2:	607b      	str	r3, [r7, #4]
 8000eb4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000eb6:	4b33      	ldr	r3, [pc, #204]	@ (8000f84 <MX_GPIO_Init+0x15c>)
 8000eb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ebc:	4a31      	ldr	r2, [pc, #196]	@ (8000f84 <MX_GPIO_Init+0x15c>)
 8000ebe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000ec2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ec6:	4b2f      	ldr	r3, [pc, #188]	@ (8000f84 <MX_GPIO_Init+0x15c>)
 8000ec8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ecc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000ed0:	603b      	str	r3, [r7, #0]
 8000ed2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000ed4:	2332      	movs	r3, #50	@ 0x32
 8000ed6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ed8:	2302      	movs	r3, #2
 8000eda:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000edc:	2300      	movs	r3, #0
 8000ede:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ee4:	230b      	movs	r3, #11
 8000ee6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ee8:	f107 0314 	add.w	r3, r7, #20
 8000eec:	4619      	mov	r1, r3
 8000eee:	4826      	ldr	r0, [pc, #152]	@ (8000f88 <MX_GPIO_Init+0x160>)
 8000ef0:	f004 fdb6 	bl	8005a60 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000ef4:	2386      	movs	r3, #134	@ 0x86
 8000ef6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ef8:	2302      	movs	r3, #2
 8000efa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efc:	2300      	movs	r3, #0
 8000efe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f00:	2300      	movs	r3, #0
 8000f02:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f04:	230b      	movs	r3, #11
 8000f06:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f08:	f107 0314 	add.w	r3, r7, #20
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	481f      	ldr	r0, [pc, #124]	@ (8000f8c <MX_GPIO_Init+0x164>)
 8000f10:	f004 fda6 	bl	8005a60 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000f14:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000f18:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f1a:	2302      	movs	r3, #2
 8000f1c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f22:	2300      	movs	r3, #0
 8000f24:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f26:	230b      	movs	r3, #11
 8000f28:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f2a:	f107 0314 	add.w	r3, r7, #20
 8000f2e:	4619      	mov	r1, r3
 8000f30:	4817      	ldr	r0, [pc, #92]	@ (8000f90 <MX_GPIO_Init+0x168>)
 8000f32:	f004 fd95 	bl	8005a60 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000f36:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 8000f3a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f3c:	2302      	movs	r3, #2
 8000f3e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f40:	2300      	movs	r3, #0
 8000f42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f44:	2300      	movs	r3, #0
 8000f46:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000f48:	230a      	movs	r3, #10
 8000f4a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f4c:	f107 0314 	add.w	r3, r7, #20
 8000f50:	4619      	mov	r1, r3
 8000f52:	480e      	ldr	r0, [pc, #56]	@ (8000f8c <MX_GPIO_Init+0x164>)
 8000f54:	f004 fd84 	bl	8005a60 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG11 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000f58:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000f5c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f5e:	2302      	movs	r3, #2
 8000f60:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f62:	2300      	movs	r3, #0
 8000f64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f66:	2300      	movs	r3, #0
 8000f68:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f6a:	230b      	movs	r3, #11
 8000f6c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f6e:	f107 0314 	add.w	r3, r7, #20
 8000f72:	4619      	mov	r1, r3
 8000f74:	4807      	ldr	r0, [pc, #28]	@ (8000f94 <MX_GPIO_Init+0x16c>)
 8000f76:	f004 fd73 	bl	8005a60 <HAL_GPIO_Init>

}
 8000f7a:	bf00      	nop
 8000f7c:	3728      	adds	r7, #40	@ 0x28
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	58024400 	.word	0x58024400
 8000f88:	58020800 	.word	0x58020800
 8000f8c:	58020000 	.word	0x58020000
 8000f90:	58020400 	.word	0x58020400
 8000f94:	58021800 	.word	0x58021800

08000f98 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000f9c:	4b1b      	ldr	r3, [pc, #108]	@ (800100c <MX_I2C2_Init+0x74>)
 8000f9e:	4a1c      	ldr	r2, [pc, #112]	@ (8001010 <MX_I2C2_Init+0x78>)
 8000fa0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00707CBB;
 8000fa2:	4b1a      	ldr	r3, [pc, #104]	@ (800100c <MX_I2C2_Init+0x74>)
 8000fa4:	4a1b      	ldr	r2, [pc, #108]	@ (8001014 <MX_I2C2_Init+0x7c>)
 8000fa6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000fa8:	4b18      	ldr	r3, [pc, #96]	@ (800100c <MX_I2C2_Init+0x74>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000fae:	4b17      	ldr	r3, [pc, #92]	@ (800100c <MX_I2C2_Init+0x74>)
 8000fb0:	2201      	movs	r2, #1
 8000fb2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000fb4:	4b15      	ldr	r3, [pc, #84]	@ (800100c <MX_I2C2_Init+0x74>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000fba:	4b14      	ldr	r3, [pc, #80]	@ (800100c <MX_I2C2_Init+0x74>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000fc0:	4b12      	ldr	r3, [pc, #72]	@ (800100c <MX_I2C2_Init+0x74>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000fc6:	4b11      	ldr	r3, [pc, #68]	@ (800100c <MX_I2C2_Init+0x74>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000fcc:	4b0f      	ldr	r3, [pc, #60]	@ (800100c <MX_I2C2_Init+0x74>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000fd2:	480e      	ldr	r0, [pc, #56]	@ (800100c <MX_I2C2_Init+0x74>)
 8000fd4:	f004 ff22 	bl	8005e1c <HAL_I2C_Init>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d001      	beq.n	8000fe2 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000fde:	f000 fb21 	bl	8001624 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000fe2:	2100      	movs	r1, #0
 8000fe4:	4809      	ldr	r0, [pc, #36]	@ (800100c <MX_I2C2_Init+0x74>)
 8000fe6:	f005 fae7 	bl	80065b8 <HAL_I2CEx_ConfigAnalogFilter>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d001      	beq.n	8000ff4 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000ff0:	f000 fb18 	bl	8001624 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000ff4:	2100      	movs	r1, #0
 8000ff6:	4805      	ldr	r0, [pc, #20]	@ (800100c <MX_I2C2_Init+0x74>)
 8000ff8:	f005 fb29 	bl	800664e <HAL_I2CEx_ConfigDigitalFilter>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d001      	beq.n	8001006 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001002:	f000 fb0f 	bl	8001624 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001006:	bf00      	nop
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	240002d0 	.word	0x240002d0
 8001010:	40005800 	.word	0x40005800
 8001014:	00707cbb 	.word	0x00707cbb

08001018 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b0ba      	sub	sp, #232	@ 0xe8
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001020:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001024:	2200      	movs	r2, #0
 8001026:	601a      	str	r2, [r3, #0]
 8001028:	605a      	str	r2, [r3, #4]
 800102a:	609a      	str	r2, [r3, #8]
 800102c:	60da      	str	r2, [r3, #12]
 800102e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001030:	f107 0310 	add.w	r3, r7, #16
 8001034:	22c0      	movs	r2, #192	@ 0xc0
 8001036:	2100      	movs	r1, #0
 8001038:	4618      	mov	r0, r3
 800103a:	f00d fd16 	bl	800ea6a <memset>
  if(i2cHandle->Instance==I2C2)
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	4a27      	ldr	r2, [pc, #156]	@ (80010e0 <HAL_I2C_MspInit+0xc8>)
 8001044:	4293      	cmp	r3, r2
 8001046:	d146      	bne.n	80010d6 <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001048:	f04f 0208 	mov.w	r2, #8
 800104c:	f04f 0300 	mov.w	r3, #0
 8001050:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8001054:	2300      	movs	r3, #0
 8001056:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800105a:	f107 0310 	add.w	r3, r7, #16
 800105e:	4618      	mov	r0, r3
 8001060:	f006 fb82 	bl	8007768 <HAL_RCCEx_PeriphCLKConfig>
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	d001      	beq.n	800106e <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 800106a:	f000 fadb 	bl	8001624 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800106e:	4b1d      	ldr	r3, [pc, #116]	@ (80010e4 <HAL_I2C_MspInit+0xcc>)
 8001070:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001074:	4a1b      	ldr	r2, [pc, #108]	@ (80010e4 <HAL_I2C_MspInit+0xcc>)
 8001076:	f043 0302 	orr.w	r3, r3, #2
 800107a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800107e:	4b19      	ldr	r3, [pc, #100]	@ (80010e4 <HAL_I2C_MspInit+0xcc>)
 8001080:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001084:	f003 0302 	and.w	r3, r3, #2
 8001088:	60fb      	str	r3, [r7, #12]
 800108a:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800108c:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001090:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001094:	2312      	movs	r3, #18
 8001096:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109a:	2300      	movs	r3, #0
 800109c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a0:	2300      	movs	r3, #0
 80010a2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80010a6:	2304      	movs	r3, #4
 80010a8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010ac:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80010b0:	4619      	mov	r1, r3
 80010b2:	480d      	ldr	r0, [pc, #52]	@ (80010e8 <HAL_I2C_MspInit+0xd0>)
 80010b4:	f004 fcd4 	bl	8005a60 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80010b8:	4b0a      	ldr	r3, [pc, #40]	@ (80010e4 <HAL_I2C_MspInit+0xcc>)
 80010ba:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80010be:	4a09      	ldr	r2, [pc, #36]	@ (80010e4 <HAL_I2C_MspInit+0xcc>)
 80010c0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80010c4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80010c8:	4b06      	ldr	r3, [pc, #24]	@ (80010e4 <HAL_I2C_MspInit+0xcc>)
 80010ca:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80010ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80010d2:	60bb      	str	r3, [r7, #8]
 80010d4:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80010d6:	bf00      	nop
 80010d8:	37e8      	adds	r7, #232	@ 0xe8
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	40005800 	.word	0x40005800
 80010e4:	58024400 	.word	0x58024400
 80010e8:	58020400 	.word	0x58020400

080010ec <lcd_init>:
#include "i2c.h"



void lcd_init(struct lcd_disp * lcd)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b084      	sub	sp, #16
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
	uint8_t xpin = 0;
 80010f4:	2300      	movs	r3, #0
 80010f6:	73fb      	strb	r3, [r7, #15]
	/* set backlight */
	if(lcd->bl)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d001      	beq.n	8001106 <lcd_init+0x1a>
	{
		xpin = BL_PIN;
 8001102:	2308      	movs	r3, #8
 8001104:	73fb      	strb	r3, [r7, #15]
	}

	/* init sequence */
	HAL_Delay(40);
 8001106:	2028      	movs	r0, #40	@ 0x28
 8001108:	f000 fdfe 	bl	8001d08 <HAL_Delay>
	lcd_write(lcd->addr, INIT_8_BIT_MODE, xpin);
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	7bfa      	ldrb	r2, [r7, #15]
 8001112:	2130      	movs	r1, #48	@ 0x30
 8001114:	4618      	mov	r0, r3
 8001116:	f000 f829 	bl	800116c <lcd_write>
	HAL_Delay(5);
 800111a:	2005      	movs	r0, #5
 800111c:	f000 fdf4 	bl	8001d08 <HAL_Delay>
	lcd_write(lcd->addr, INIT_8_BIT_MODE, xpin);
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	7bfa      	ldrb	r2, [r7, #15]
 8001126:	2130      	movs	r1, #48	@ 0x30
 8001128:	4618      	mov	r0, r3
 800112a:	f000 f81f 	bl	800116c <lcd_write>
	HAL_Delay(1);
 800112e:	2001      	movs	r0, #1
 8001130:	f000 fdea 	bl	8001d08 <HAL_Delay>
	lcd_write(lcd->addr, INIT_8_BIT_MODE, xpin);
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	781b      	ldrb	r3, [r3, #0]
 8001138:	7bfa      	ldrb	r2, [r7, #15]
 800113a:	2130      	movs	r1, #48	@ 0x30
 800113c:	4618      	mov	r0, r3
 800113e:	f000 f815 	bl	800116c <lcd_write>

	/* set 4-bit mode */
	lcd_write(lcd->addr, INIT_4_BIT_MODE, xpin);
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	781b      	ldrb	r3, [r3, #0]
 8001146:	7bfa      	ldrb	r2, [r7, #15]
 8001148:	2102      	movs	r1, #2
 800114a:	4618      	mov	r0, r3
 800114c:	f000 f80e 	bl	800116c <lcd_write>

	/* set cursor mode */
	lcd_write(lcd->addr, UNDERLINE_OFF_BLINK_OFF, xpin);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	781b      	ldrb	r3, [r3, #0]
 8001154:	7bfa      	ldrb	r2, [r7, #15]
 8001156:	210c      	movs	r1, #12
 8001158:	4618      	mov	r0, r3
 800115a:	f000 f807 	bl	800116c <lcd_write>

	/* clear */
	lcd_clear(lcd);
 800115e:	6878      	ldr	r0, [r7, #4]
 8001160:	f000 f89f 	bl	80012a2 <lcd_clear>

}
 8001164:	bf00      	nop
 8001166:	3710      	adds	r7, #16
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}

0800116c <lcd_write>:

void lcd_write(uint8_t addr, uint8_t data, uint8_t xpin)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b086      	sub	sp, #24
 8001170:	af02      	add	r7, sp, #8
 8001172:	4603      	mov	r3, r0
 8001174:	71fb      	strb	r3, [r7, #7]
 8001176:	460b      	mov	r3, r1
 8001178:	71bb      	strb	r3, [r7, #6]
 800117a:	4613      	mov	r3, r2
 800117c:	717b      	strb	r3, [r7, #5]
	uint8_t tx_data[4];

	/* split data */
	tx_data[0] = (data & 0xF0) | EN_PIN | xpin;
 800117e:	79bb      	ldrb	r3, [r7, #6]
 8001180:	f023 030f 	bic.w	r3, r3, #15
 8001184:	b2da      	uxtb	r2, r3
 8001186:	797b      	ldrb	r3, [r7, #5]
 8001188:	4313      	orrs	r3, r2
 800118a:	b2db      	uxtb	r3, r3
 800118c:	f043 0304 	orr.w	r3, r3, #4
 8001190:	b2db      	uxtb	r3, r3
 8001192:	733b      	strb	r3, [r7, #12]
	tx_data[1] = (data & 0xF0) | xpin;
 8001194:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001198:	f023 030f 	bic.w	r3, r3, #15
 800119c:	b25a      	sxtb	r2, r3
 800119e:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80011a2:	4313      	orrs	r3, r2
 80011a4:	b25b      	sxtb	r3, r3
 80011a6:	b2db      	uxtb	r3, r3
 80011a8:	737b      	strb	r3, [r7, #13]
	tx_data[2] = (data << 4) | EN_PIN | xpin;
 80011aa:	79bb      	ldrb	r3, [r7, #6]
 80011ac:	011b      	lsls	r3, r3, #4
 80011ae:	b2da      	uxtb	r2, r3
 80011b0:	797b      	ldrb	r3, [r7, #5]
 80011b2:	4313      	orrs	r3, r2
 80011b4:	b2db      	uxtb	r3, r3
 80011b6:	f043 0304 	orr.w	r3, r3, #4
 80011ba:	b2db      	uxtb	r3, r3
 80011bc:	73bb      	strb	r3, [r7, #14]
	tx_data[3] = (data << 4) | xpin;
 80011be:	79bb      	ldrb	r3, [r7, #6]
 80011c0:	011b      	lsls	r3, r3, #4
 80011c2:	b25a      	sxtb	r2, r3
 80011c4:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80011c8:	4313      	orrs	r3, r2
 80011ca:	b25b      	sxtb	r3, r3
 80011cc:	b2db      	uxtb	r3, r3
 80011ce:	73fb      	strb	r3, [r7, #15]

	/* send data via i2c */
	HAL_I2C_Master_Transmit(&HI2C_DEF, addr, tx_data, 4, 100);
 80011d0:	79fb      	ldrb	r3, [r7, #7]
 80011d2:	b299      	uxth	r1, r3
 80011d4:	f107 020c 	add.w	r2, r7, #12
 80011d8:	2364      	movs	r3, #100	@ 0x64
 80011da:	9300      	str	r3, [sp, #0]
 80011dc:	2304      	movs	r3, #4
 80011de:	4805      	ldr	r0, [pc, #20]	@ (80011f4 <lcd_write+0x88>)
 80011e0:	f004 feb8 	bl	8005f54 <HAL_I2C_Master_Transmit>

	HAL_Delay(5);
 80011e4:	2005      	movs	r0, #5
 80011e6:	f000 fd8f 	bl	8001d08 <HAL_Delay>
}
 80011ea:	bf00      	nop
 80011ec:	3710      	adds	r7, #16
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	240002d0 	.word	0x240002d0

080011f8 <lcd_display>:

void lcd_display(struct lcd_disp * lcd)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b084      	sub	sp, #16
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
	uint8_t xpin = 0, i = 0;
 8001200:	2300      	movs	r3, #0
 8001202:	73fb      	strb	r3, [r7, #15]
 8001204:	2300      	movs	r3, #0
 8001206:	73bb      	strb	r3, [r7, #14]

	/* set backlight */
	if(lcd->bl)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 800120e:	2b00      	cmp	r3, #0
 8001210:	d001      	beq.n	8001216 <lcd_display+0x1e>
	{
		xpin = BL_PIN;
 8001212:	2308      	movs	r3, #8
 8001214:	73fb      	strb	r3, [r7, #15]
	}

	lcd_clear(lcd);
 8001216:	6878      	ldr	r0, [r7, #4]
 8001218:	f000 f843 	bl	80012a2 <lcd_clear>

	/* send first line data */
	lcd_write(lcd->addr, FIRST_CHAR_LINE_1, xpin);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	781b      	ldrb	r3, [r3, #0]
 8001220:	7bfa      	ldrb	r2, [r7, #15]
 8001222:	2180      	movs	r1, #128	@ 0x80
 8001224:	4618      	mov	r0, r3
 8001226:	f7ff ffa1 	bl	800116c <lcd_write>
	while(lcd->f_line[i])
 800122a:	e00f      	b.n	800124c <lcd_display+0x54>
	{
		lcd_write(lcd->addr, lcd->f_line[i], (xpin | RS_PIN));
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	7818      	ldrb	r0, [r3, #0]
 8001230:	7bbb      	ldrb	r3, [r7, #14]
 8001232:	687a      	ldr	r2, [r7, #4]
 8001234:	4413      	add	r3, r2
 8001236:	7859      	ldrb	r1, [r3, #1]
 8001238:	7bfb      	ldrb	r3, [r7, #15]
 800123a:	f043 0301 	orr.w	r3, r3, #1
 800123e:	b2db      	uxtb	r3, r3
 8001240:	461a      	mov	r2, r3
 8001242:	f7ff ff93 	bl	800116c <lcd_write>
		i++;
 8001246:	7bbb      	ldrb	r3, [r7, #14]
 8001248:	3301      	adds	r3, #1
 800124a:	73bb      	strb	r3, [r7, #14]
	while(lcd->f_line[i])
 800124c:	7bbb      	ldrb	r3, [r7, #14]
 800124e:	687a      	ldr	r2, [r7, #4]
 8001250:	4413      	add	r3, r2
 8001252:	785b      	ldrb	r3, [r3, #1]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d1e9      	bne.n	800122c <lcd_display+0x34>
	}

	/* send second line data */
	i = 0;
 8001258:	2300      	movs	r3, #0
 800125a:	73bb      	strb	r3, [r7, #14]
	lcd_write(lcd->addr, FIRST_CHAR_LINE_2, xpin);
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	781b      	ldrb	r3, [r3, #0]
 8001260:	7bfa      	ldrb	r2, [r7, #15]
 8001262:	21c0      	movs	r1, #192	@ 0xc0
 8001264:	4618      	mov	r0, r3
 8001266:	f7ff ff81 	bl	800116c <lcd_write>
	while(lcd->s_line[i])
 800126a:	e00f      	b.n	800128c <lcd_display+0x94>
	{
		lcd_write(lcd->addr, lcd->s_line[i], (xpin | RS_PIN));
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	7818      	ldrb	r0, [r3, #0]
 8001270:	7bbb      	ldrb	r3, [r7, #14]
 8001272:	687a      	ldr	r2, [r7, #4]
 8001274:	4413      	add	r3, r2
 8001276:	7c99      	ldrb	r1, [r3, #18]
 8001278:	7bfb      	ldrb	r3, [r7, #15]
 800127a:	f043 0301 	orr.w	r3, r3, #1
 800127e:	b2db      	uxtb	r3, r3
 8001280:	461a      	mov	r2, r3
 8001282:	f7ff ff73 	bl	800116c <lcd_write>
		i++;
 8001286:	7bbb      	ldrb	r3, [r7, #14]
 8001288:	3301      	adds	r3, #1
 800128a:	73bb      	strb	r3, [r7, #14]
	while(lcd->s_line[i])
 800128c:	7bbb      	ldrb	r3, [r7, #14]
 800128e:	687a      	ldr	r2, [r7, #4]
 8001290:	4413      	add	r3, r2
 8001292:	7c9b      	ldrb	r3, [r3, #18]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d1e9      	bne.n	800126c <lcd_display+0x74>
	}
}
 8001298:	bf00      	nop
 800129a:	bf00      	nop
 800129c:	3710      	adds	r7, #16
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}

080012a2 <lcd_clear>:

void lcd_clear(struct lcd_disp * lcd)
{
 80012a2:	b580      	push	{r7, lr}
 80012a4:	b084      	sub	sp, #16
 80012a6:	af00      	add	r7, sp, #0
 80012a8:	6078      	str	r0, [r7, #4]
	uint8_t xpin = 0;
 80012aa:	2300      	movs	r3, #0
 80012ac:	73fb      	strb	r3, [r7, #15]

	/* set backlight */
	if(lcd->bl)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d001      	beq.n	80012bc <lcd_clear+0x1a>
	{
		xpin = BL_PIN;
 80012b8:	2308      	movs	r3, #8
 80012ba:	73fb      	strb	r3, [r7, #15]
	}

	/* clear display */
	lcd_write(lcd->addr, CLEAR_LCD, xpin);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	781b      	ldrb	r3, [r3, #0]
 80012c0:	7bfa      	ldrb	r2, [r7, #15]
 80012c2:	2101      	movs	r1, #1
 80012c4:	4618      	mov	r0, r3
 80012c6:	f7ff ff51 	bl	800116c <lcd_write>
}
 80012ca:	bf00      	nop
 80012cc:	3710      	adds	r7, #16
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
	...

080012d4 <SendDebugMessage>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void SendDebugMessage(const char* message) {
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b082      	sub	sp, #8
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart3, (uint8_t*)message, strlen(message), HAL_MAX_DELAY);
 80012dc:	6878      	ldr	r0, [r7, #4]
 80012de:	f7ff f84f 	bl	8000380 <strlen>
 80012e2:	4603      	mov	r3, r0
 80012e4:	b29a      	uxth	r2, r3
 80012e6:	f04f 33ff 	mov.w	r3, #4294967295
 80012ea:	6879      	ldr	r1, [r7, #4]
 80012ec:	4803      	ldr	r0, [pc, #12]	@ (80012fc <SendDebugMessage+0x28>)
 80012ee:	f00a f875 	bl	800b3dc <HAL_UART_Transmit>
}
 80012f2:	bf00      	nop
 80012f4:	3708      	adds	r7, #8
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	2400039c 	.word	0x2400039c

08001300 <HAL_UART_RxCpltCallback>:
    snprintf(buffer, sizeof(buffer), "%.2f", value);
    SendDebugMessage(buffer);
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b084      	sub	sp, #16
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
	SendDebugMessage(rx_data);
 8001308:	4811      	ldr	r0, [pc, #68]	@ (8001350 <HAL_UART_RxCpltCallback+0x50>)
 800130a:	f7ff ffe3 	bl	80012d4 <SendDebugMessage>
	int rx_data_int = 100*(rx_data[0]-'0') + 10*(rx_data[1]-'0') + (rx_data[2]-'0');
 800130e:	4b10      	ldr	r3, [pc, #64]	@ (8001350 <HAL_UART_RxCpltCallback+0x50>)
 8001310:	781b      	ldrb	r3, [r3, #0]
 8001312:	3b30      	subs	r3, #48	@ 0x30
 8001314:	2264      	movs	r2, #100	@ 0x64
 8001316:	fb02 f103 	mul.w	r1, r2, r3
 800131a:	4b0d      	ldr	r3, [pc, #52]	@ (8001350 <HAL_UART_RxCpltCallback+0x50>)
 800131c:	785b      	ldrb	r3, [r3, #1]
 800131e:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 8001322:	4613      	mov	r3, r2
 8001324:	009b      	lsls	r3, r3, #2
 8001326:	4413      	add	r3, r2
 8001328:	005b      	lsls	r3, r3, #1
 800132a:	18ca      	adds	r2, r1, r3
 800132c:	4b08      	ldr	r3, [pc, #32]	@ (8001350 <HAL_UART_RxCpltCallback+0x50>)
 800132e:	789b      	ldrb	r3, [r3, #2]
 8001330:	3b30      	subs	r3, #48	@ 0x30
 8001332:	4413      	add	r3, r2
 8001334:	60fb      	str	r3, [r7, #12]
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, rx_data_int);
 8001336:	4b07      	ldr	r3, [pc, #28]	@ (8001354 <HAL_UART_RxCpltCallback+0x54>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	68fa      	ldr	r2, [r7, #12]
 800133c:	635a      	str	r2, [r3, #52]	@ 0x34

	HAL_UART_Receive_IT(&huart3, &rx_data, 3);
 800133e:	2203      	movs	r2, #3
 8001340:	4903      	ldr	r1, [pc, #12]	@ (8001350 <HAL_UART_RxCpltCallback+0x50>)
 8001342:	4805      	ldr	r0, [pc, #20]	@ (8001358 <HAL_UART_RxCpltCallback+0x58>)
 8001344:	f00a f8d8 	bl	800b4f8 <HAL_UART_Receive_IT>
}
 8001348:	bf00      	nop
 800134a:	3710      	adds	r7, #16
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}
 8001350:	24000324 	.word	0x24000324
 8001354:	24000350 	.word	0x24000350
 8001358:	2400039c 	.word	0x2400039c
 800135c:	00000000 	.word	0x00000000

08001360 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b086      	sub	sp, #24
 8001364:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8001366:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800136a:	617b      	str	r3, [r7, #20]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 800136c:	bf00      	nop
 800136e:	4b6a      	ldr	r3, [pc, #424]	@ (8001518 <main+0x1b8>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001376:	2b00      	cmp	r3, #0
 8001378:	d004      	beq.n	8001384 <main+0x24>
 800137a:	697b      	ldr	r3, [r7, #20]
 800137c:	1e5a      	subs	r2, r3, #1
 800137e:	617a      	str	r2, [r7, #20]
 8001380:	2b00      	cmp	r3, #0
 8001382:	dcf4      	bgt.n	800136e <main+0xe>
  if ( timeout < 0 )
 8001384:	697b      	ldr	r3, [r7, #20]
 8001386:	2b00      	cmp	r3, #0
 8001388:	da01      	bge.n	800138e <main+0x2e>
  {
  Error_Handler();
 800138a:	f000 f94b 	bl	8001624 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800138e:	f000 fc29 	bl	8001be4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001392:	f000 f8d5 	bl	8001540 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8001396:	4b60      	ldr	r3, [pc, #384]	@ (8001518 <main+0x1b8>)
 8001398:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800139c:	4a5e      	ldr	r2, [pc, #376]	@ (8001518 <main+0x1b8>)
 800139e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80013a2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80013a6:	4b5c      	ldr	r3, [pc, #368]	@ (8001518 <main+0x1b8>)
 80013a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80013b0:	603b      	str	r3, [r7, #0]
 80013b2:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 80013b4:	2000      	movs	r0, #0
 80013b6:	f004 fd03 	bl	8005dc0 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 80013ba:	2100      	movs	r1, #0
 80013bc:	2000      	movs	r0, #0
 80013be:	f004 fd19 	bl	8005df4 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 80013c2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80013c6:	617b      	str	r3, [r7, #20]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 80013c8:	bf00      	nop
 80013ca:	4b53      	ldr	r3, [pc, #332]	@ (8001518 <main+0x1b8>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d104      	bne.n	80013e0 <main+0x80>
 80013d6:	697b      	ldr	r3, [r7, #20]
 80013d8:	1e5a      	subs	r2, r3, #1
 80013da:	617a      	str	r2, [r7, #20]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	dcf4      	bgt.n	80013ca <main+0x6a>
if ( timeout < 0 )
 80013e0:	697b      	ldr	r3, [r7, #20]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	da01      	bge.n	80013ea <main+0x8a>
{
Error_Handler();
 80013e6:	f000 f91d 	bl	8001624 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013ea:	f7ff fd1d 	bl	8000e28 <MX_GPIO_Init>
  MX_DMA_Init();
 80013ee:	f7ff fcfb 	bl	8000de8 <MX_DMA_Init>
  MX_ADC1_Init();
 80013f2:	f7ff fbcf 	bl	8000b94 <MX_ADC1_Init>
  MX_TIM2_Init();
 80013f6:	f000 fa3f 	bl	8001878 <MX_TIM2_Init>
  MX_USART3_UART_Init();
 80013fa:	f000 fb0b 	bl	8001a14 <MX_USART3_UART_Init>
  MX_I2C2_Init();
 80013fe:	f7ff fdcb 	bl	8000f98 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
	disp.addr = (0x27 << 1);
 8001402:	4b46      	ldr	r3, [pc, #280]	@ (800151c <main+0x1bc>)
 8001404:	224e      	movs	r2, #78	@ 0x4e
 8001406:	701a      	strb	r2, [r3, #0]
	disp.bl = true;
 8001408:	4b44      	ldr	r3, [pc, #272]	@ (800151c <main+0x1bc>)
 800140a:	2201      	movs	r2, #1
 800140c:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
	lcd_init(&disp);
 8001410:	4842      	ldr	r0, [pc, #264]	@ (800151c <main+0x1bc>)
 8001412:	f7ff fe6b 	bl	80010ec <lcd_init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	  TIM2->CCR1 = 100;
 8001416:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800141a:	2264      	movs	r2, #100	@ 0x64
 800141c:	635a      	str	r2, [r3, #52]	@ 0x34
	  HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_1);
 800141e:	2100      	movs	r1, #0
 8001420:	483f      	ldr	r0, [pc, #252]	@ (8001520 <main+0x1c0>)
 8001422:	f008 ff57 	bl	800a2d4 <HAL_TIM_PWM_Start_IT>
	  HAL_UART_Receive_IT(&huart3, &rx_data, 3);
 8001426:	2203      	movs	r2, #3
 8001428:	493e      	ldr	r1, [pc, #248]	@ (8001524 <main+0x1c4>)
 800142a:	483f      	ldr	r0, [pc, #252]	@ (8001528 <main+0x1c8>)
 800142c:	f00a f864 	bl	800b4f8 <HAL_UART_Receive_IT>
  while (1)
  {
	HAL_ADC_Start(&hadc1);
 8001430:	483e      	ldr	r0, [pc, #248]	@ (800152c <main+0x1cc>)
 8001432:	f001 f81d 	bl	8002470 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1,20);
 8001436:	2114      	movs	r1, #20
 8001438:	483c      	ldr	r0, [pc, #240]	@ (800152c <main+0x1cc>)
 800143a:	f001 f8e3 	bl	8002604 <HAL_ADC_PollForConversion>
	uint16_t v = HAL_ADC_GetValue(&hadc1);
 800143e:	483b      	ldr	r0, [pc, #236]	@ (800152c <main+0x1cc>)
 8001440:	f001 f9d4 	bl	80027ec <HAL_ADC_GetValue>
 8001444:	4603      	mov	r3, r0
 8001446:	827b      	strh	r3, [r7, #18]

	float voltage = 3.3 * v / 65535;
 8001448:	8a7b      	ldrh	r3, [r7, #18]
 800144a:	ee07 3a90 	vmov	s15, r3
 800144e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001452:	ed9f 6b27 	vldr	d6, [pc, #156]	@ 80014f0 <main+0x190>
 8001456:	ee27 6b06 	vmul.f64	d6, d7, d6
 800145a:	ed9f 5b27 	vldr	d5, [pc, #156]	@ 80014f8 <main+0x198>
 800145e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001462:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001466:	edc7 7a03 	vstr	s15, [r7, #12]
	float resistance = (( voltage)/(3.3 - voltage) * 4700);
 800146a:	edd7 7a03 	vldr	s15, [r7, #12]
 800146e:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8001472:	edd7 7a03 	vldr	s15, [r7, #12]
 8001476:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800147a:	ed9f 6b1d 	vldr	d6, [pc, #116]	@ 80014f0 <main+0x190>
 800147e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8001482:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001486:	ed9f 6b1e 	vldr	d6, [pc, #120]	@ 8001500 <main+0x1a0>
 800148a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800148e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001492:	edc7 7a02 	vstr	s15, [r7, #8]
	float lux = (10 * pow(8000, 1/0.6)) / pow(resistance, 1/0.6);
 8001496:	edd7 7a02 	vldr	s15, [r7, #8]
 800149a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800149e:	ed9f 1b1a 	vldr	d1, [pc, #104]	@ 8001508 <main+0x1a8>
 80014a2:	eeb0 0b47 	vmov.f64	d0, d7
 80014a6:	f010 fe2b 	bl	8012100 <pow>
 80014aa:	eeb0 6b40 	vmov.f64	d6, d0
 80014ae:	ed9f 5b18 	vldr	d5, [pc, #96]	@ 8001510 <main+0x1b0>
 80014b2:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80014b6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80014ba:	edc7 7a01 	vstr	s15, [r7, #4]

	sprintf((char *)disp.f_line, "%.2f", lux);
 80014be:	edd7 7a01 	vldr	s15, [r7, #4]
 80014c2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80014c6:	ec53 2b17 	vmov	r2, r3, d7
 80014ca:	4919      	ldr	r1, [pc, #100]	@ (8001530 <main+0x1d0>)
 80014cc:	4819      	ldr	r0, [pc, #100]	@ (8001534 <main+0x1d4>)
 80014ce:	f00d fa69 	bl	800e9a4 <siprintf>
	sprintf((char *)disp.s_line, "uwu");
 80014d2:	4919      	ldr	r1, [pc, #100]	@ (8001538 <main+0x1d8>)
 80014d4:	4819      	ldr	r0, [pc, #100]	@ (800153c <main+0x1dc>)
 80014d6:	f00d fa65 	bl	800e9a4 <siprintf>
	lcd_display(&disp);
 80014da:	4810      	ldr	r0, [pc, #64]	@ (800151c <main+0x1bc>)
 80014dc:	f7ff fe8c 	bl	80011f8 <lcd_display>
	HAL_Delay(500);
 80014e0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80014e4:	f000 fc10 	bl	8001d08 <HAL_Delay>
  {
 80014e8:	bf00      	nop
 80014ea:	e7a1      	b.n	8001430 <main+0xd0>
 80014ec:	f3af 8000 	nop.w
 80014f0:	66666666 	.word	0x66666666
 80014f4:	400a6666 	.word	0x400a6666
 80014f8:	00000000 	.word	0x00000000
 80014fc:	40efffe0 	.word	0x40efffe0
 8001500:	00000000 	.word	0x00000000
 8001504:	40b25c00 	.word	0x40b25c00
 8001508:	aaaaaaab 	.word	0xaaaaaaab
 800150c:	3ffaaaaa 	.word	0x3ffaaaaa
 8001510:	00000006 	.word	0x00000006
 8001514:	417e8480 	.word	0x417e8480
 8001518:	58024400 	.word	0x58024400
 800151c:	24000328 	.word	0x24000328
 8001520:	24000350 	.word	0x24000350
 8001524:	24000324 	.word	0x24000324
 8001528:	2400039c 	.word	0x2400039c
 800152c:	240001f4 	.word	0x240001f4
 8001530:	080126a4 	.word	0x080126a4
 8001534:	24000329 	.word	0x24000329
 8001538:	080126ac 	.word	0x080126ac
 800153c:	2400033a 	.word	0x2400033a

08001540 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b09c      	sub	sp, #112	@ 0x70
 8001544:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001546:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800154a:	224c      	movs	r2, #76	@ 0x4c
 800154c:	2100      	movs	r1, #0
 800154e:	4618      	mov	r0, r3
 8001550:	f00d fa8b 	bl	800ea6a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001554:	1d3b      	adds	r3, r7, #4
 8001556:	2220      	movs	r2, #32
 8001558:	2100      	movs	r1, #0
 800155a:	4618      	mov	r0, r3
 800155c:	f00d fa85 	bl	800ea6a <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8001560:	2004      	movs	r0, #4
 8001562:	f005 f8c1 	bl	80066e8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001566:	2300      	movs	r3, #0
 8001568:	603b      	str	r3, [r7, #0]
 800156a:	4b2b      	ldr	r3, [pc, #172]	@ (8001618 <SystemClock_Config+0xd8>)
 800156c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800156e:	4a2a      	ldr	r2, [pc, #168]	@ (8001618 <SystemClock_Config+0xd8>)
 8001570:	f023 0301 	bic.w	r3, r3, #1
 8001574:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8001576:	4b28      	ldr	r3, [pc, #160]	@ (8001618 <SystemClock_Config+0xd8>)
 8001578:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800157a:	f003 0301 	and.w	r3, r3, #1
 800157e:	603b      	str	r3, [r7, #0]
 8001580:	4b26      	ldr	r3, [pc, #152]	@ (800161c <SystemClock_Config+0xdc>)
 8001582:	699b      	ldr	r3, [r3, #24]
 8001584:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001588:	4a24      	ldr	r2, [pc, #144]	@ (800161c <SystemClock_Config+0xdc>)
 800158a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800158e:	6193      	str	r3, [r2, #24]
 8001590:	4b22      	ldr	r3, [pc, #136]	@ (800161c <SystemClock_Config+0xdc>)
 8001592:	699b      	ldr	r3, [r3, #24]
 8001594:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001598:	603b      	str	r3, [r7, #0]
 800159a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800159c:	bf00      	nop
 800159e:	4b1f      	ldr	r3, [pc, #124]	@ (800161c <SystemClock_Config+0xdc>)
 80015a0:	699b      	ldr	r3, [r3, #24]
 80015a2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80015a6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80015aa:	d1f8      	bne.n	800159e <SystemClock_Config+0x5e>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 80015ac:	4b1c      	ldr	r3, [pc, #112]	@ (8001620 <SystemClock_Config+0xe0>)
 80015ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015b0:	4a1b      	ldr	r2, [pc, #108]	@ (8001620 <SystemClock_Config+0xe0>)
 80015b2:	f023 0303 	bic.w	r3, r3, #3
 80015b6:	6293      	str	r3, [r2, #40]	@ 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80015b8:	2302      	movs	r3, #2
 80015ba:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80015bc:	2301      	movs	r3, #1
 80015be:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80015c0:	2340      	movs	r3, #64	@ 0x40
 80015c2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80015c4:	2300      	movs	r3, #0
 80015c6:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015c8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015cc:	4618      	mov	r0, r3
 80015ce:	f005 f8e5 	bl	800679c <HAL_RCC_OscConfig>
 80015d2:	4603      	mov	r3, r0
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d001      	beq.n	80015dc <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80015d8:	f000 f824 	bl	8001624 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015dc:	233f      	movs	r3, #63	@ 0x3f
 80015de:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80015e0:	2300      	movs	r3, #0
 80015e2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80015e4:	2300      	movs	r3, #0
 80015e6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80015e8:	2300      	movs	r3, #0
 80015ea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80015ec:	2300      	movs	r3, #0
 80015ee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80015f0:	2340      	movs	r3, #64	@ 0x40
 80015f2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80015f4:	2300      	movs	r3, #0
 80015f6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80015f8:	2300      	movs	r3, #0
 80015fa:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80015fc:	1d3b      	adds	r3, r7, #4
 80015fe:	2101      	movs	r1, #1
 8001600:	4618      	mov	r0, r3
 8001602:	f005 fd25 	bl	8007050 <HAL_RCC_ClockConfig>
 8001606:	4603      	mov	r3, r0
 8001608:	2b00      	cmp	r3, #0
 800160a:	d001      	beq.n	8001610 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 800160c:	f000 f80a 	bl	8001624 <Error_Handler>
  }
}
 8001610:	bf00      	nop
 8001612:	3770      	adds	r7, #112	@ 0x70
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}
 8001618:	58000400 	.word	0x58000400
 800161c:	58024800 	.word	0x58024800
 8001620:	58024400 	.word	0x58024400

08001624 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001624:	b480      	push	{r7}
 8001626:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001628:	b672      	cpsid	i
}
 800162a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800162c:	bf00      	nop
 800162e:	e7fd      	b.n	800162c <Error_Handler+0x8>

08001630 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001630:	b480      	push	{r7}
 8001632:	b083      	sub	sp, #12
 8001634:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001636:	4b0a      	ldr	r3, [pc, #40]	@ (8001660 <HAL_MspInit+0x30>)
 8001638:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800163c:	4a08      	ldr	r2, [pc, #32]	@ (8001660 <HAL_MspInit+0x30>)
 800163e:	f043 0302 	orr.w	r3, r3, #2
 8001642:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001646:	4b06      	ldr	r3, [pc, #24]	@ (8001660 <HAL_MspInit+0x30>)
 8001648:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800164c:	f003 0302 	and.w	r3, r3, #2
 8001650:	607b      	str	r3, [r7, #4]
 8001652:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001654:	bf00      	nop
 8001656:	370c      	adds	r7, #12
 8001658:	46bd      	mov	sp, r7
 800165a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165e:	4770      	bx	lr
 8001660:	58024400 	.word	0x58024400

08001664 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001664:	b480      	push	{r7}
 8001666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001668:	bf00      	nop
 800166a:	e7fd      	b.n	8001668 <NMI_Handler+0x4>

0800166c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800166c:	b480      	push	{r7}
 800166e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001670:	bf00      	nop
 8001672:	e7fd      	b.n	8001670 <HardFault_Handler+0x4>

08001674 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001674:	b480      	push	{r7}
 8001676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001678:	bf00      	nop
 800167a:	e7fd      	b.n	8001678 <MemManage_Handler+0x4>

0800167c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800167c:	b480      	push	{r7}
 800167e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001680:	bf00      	nop
 8001682:	e7fd      	b.n	8001680 <BusFault_Handler+0x4>

08001684 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001688:	bf00      	nop
 800168a:	e7fd      	b.n	8001688 <UsageFault_Handler+0x4>

0800168c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800168c:	b480      	push	{r7}
 800168e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001690:	bf00      	nop
 8001692:	46bd      	mov	sp, r7
 8001694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001698:	4770      	bx	lr

0800169a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800169a:	b480      	push	{r7}
 800169c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800169e:	bf00      	nop
 80016a0:	46bd      	mov	sp, r7
 80016a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a6:	4770      	bx	lr

080016a8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016a8:	b480      	push	{r7}
 80016aa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016ac:	bf00      	nop
 80016ae:	46bd      	mov	sp, r7
 80016b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b4:	4770      	bx	lr

080016b6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016b6:	b580      	push	{r7, lr}
 80016b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016ba:	f000 fb05 	bl	8001cc8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016be:	bf00      	nop
 80016c0:	bd80      	pop	{r7, pc}
	...

080016c4 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80016c8:	4802      	ldr	r0, [pc, #8]	@ (80016d4 <DMA1_Stream0_IRQHandler+0x10>)
 80016ca:	f003 f863 	bl	8004794 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80016ce:	bf00      	nop
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	24000258 	.word	0x24000258

080016d8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80016dc:	4802      	ldr	r0, [pc, #8]	@ (80016e8 <USART3_IRQHandler+0x10>)
 80016de:	f009 ff57 	bl	800b590 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80016e2:	bf00      	nop
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	2400039c 	.word	0x2400039c

080016ec <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80016ec:	b480      	push	{r7}
 80016ee:	af00      	add	r7, sp, #0
  return 1;
 80016f0:	2301      	movs	r3, #1
}
 80016f2:	4618      	mov	r0, r3
 80016f4:	46bd      	mov	sp, r7
 80016f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fa:	4770      	bx	lr

080016fc <_kill>:

int _kill(int pid, int sig)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b082      	sub	sp, #8
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
 8001704:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001706:	f00d fa03 	bl	800eb10 <__errno>
 800170a:	4603      	mov	r3, r0
 800170c:	2216      	movs	r2, #22
 800170e:	601a      	str	r2, [r3, #0]
  return -1;
 8001710:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001714:	4618      	mov	r0, r3
 8001716:	3708      	adds	r7, #8
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}

0800171c <_exit>:

void _exit (int status)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b082      	sub	sp, #8
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001724:	f04f 31ff 	mov.w	r1, #4294967295
 8001728:	6878      	ldr	r0, [r7, #4]
 800172a:	f7ff ffe7 	bl	80016fc <_kill>
  while (1) {}    /* Make sure we hang here */
 800172e:	bf00      	nop
 8001730:	e7fd      	b.n	800172e <_exit+0x12>

08001732 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001732:	b580      	push	{r7, lr}
 8001734:	b086      	sub	sp, #24
 8001736:	af00      	add	r7, sp, #0
 8001738:	60f8      	str	r0, [r7, #12]
 800173a:	60b9      	str	r1, [r7, #8]
 800173c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800173e:	2300      	movs	r3, #0
 8001740:	617b      	str	r3, [r7, #20]
 8001742:	e00a      	b.n	800175a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001744:	f3af 8000 	nop.w
 8001748:	4601      	mov	r1, r0
 800174a:	68bb      	ldr	r3, [r7, #8]
 800174c:	1c5a      	adds	r2, r3, #1
 800174e:	60ba      	str	r2, [r7, #8]
 8001750:	b2ca      	uxtb	r2, r1
 8001752:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001754:	697b      	ldr	r3, [r7, #20]
 8001756:	3301      	adds	r3, #1
 8001758:	617b      	str	r3, [r7, #20]
 800175a:	697a      	ldr	r2, [r7, #20]
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	429a      	cmp	r2, r3
 8001760:	dbf0      	blt.n	8001744 <_read+0x12>
  }

  return len;
 8001762:	687b      	ldr	r3, [r7, #4]
}
 8001764:	4618      	mov	r0, r3
 8001766:	3718      	adds	r7, #24
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}

0800176c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b086      	sub	sp, #24
 8001770:	af00      	add	r7, sp, #0
 8001772:	60f8      	str	r0, [r7, #12]
 8001774:	60b9      	str	r1, [r7, #8]
 8001776:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001778:	2300      	movs	r3, #0
 800177a:	617b      	str	r3, [r7, #20]
 800177c:	e009      	b.n	8001792 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800177e:	68bb      	ldr	r3, [r7, #8]
 8001780:	1c5a      	adds	r2, r3, #1
 8001782:	60ba      	str	r2, [r7, #8]
 8001784:	781b      	ldrb	r3, [r3, #0]
 8001786:	4618      	mov	r0, r3
 8001788:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800178c:	697b      	ldr	r3, [r7, #20]
 800178e:	3301      	adds	r3, #1
 8001790:	617b      	str	r3, [r7, #20]
 8001792:	697a      	ldr	r2, [r7, #20]
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	429a      	cmp	r2, r3
 8001798:	dbf1      	blt.n	800177e <_write+0x12>
  }
  return len;
 800179a:	687b      	ldr	r3, [r7, #4]
}
 800179c:	4618      	mov	r0, r3
 800179e:	3718      	adds	r7, #24
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}

080017a4 <_close>:

int _close(int file)
{
 80017a4:	b480      	push	{r7}
 80017a6:	b083      	sub	sp, #12
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80017ac:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017b0:	4618      	mov	r0, r3
 80017b2:	370c      	adds	r7, #12
 80017b4:	46bd      	mov	sp, r7
 80017b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ba:	4770      	bx	lr

080017bc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80017bc:	b480      	push	{r7}
 80017be:	b083      	sub	sp, #12
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
 80017c4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80017cc:	605a      	str	r2, [r3, #4]
  return 0;
 80017ce:	2300      	movs	r3, #0
}
 80017d0:	4618      	mov	r0, r3
 80017d2:	370c      	adds	r7, #12
 80017d4:	46bd      	mov	sp, r7
 80017d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017da:	4770      	bx	lr

080017dc <_isatty>:

int _isatty(int file)
{
 80017dc:	b480      	push	{r7}
 80017de:	b083      	sub	sp, #12
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80017e4:	2301      	movs	r3, #1
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	370c      	adds	r7, #12
 80017ea:	46bd      	mov	sp, r7
 80017ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f0:	4770      	bx	lr

080017f2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80017f2:	b480      	push	{r7}
 80017f4:	b085      	sub	sp, #20
 80017f6:	af00      	add	r7, sp, #0
 80017f8:	60f8      	str	r0, [r7, #12]
 80017fa:	60b9      	str	r1, [r7, #8]
 80017fc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80017fe:	2300      	movs	r3, #0
}
 8001800:	4618      	mov	r0, r3
 8001802:	3714      	adds	r7, #20
 8001804:	46bd      	mov	sp, r7
 8001806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180a:	4770      	bx	lr

0800180c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b086      	sub	sp, #24
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001814:	4a14      	ldr	r2, [pc, #80]	@ (8001868 <_sbrk+0x5c>)
 8001816:	4b15      	ldr	r3, [pc, #84]	@ (800186c <_sbrk+0x60>)
 8001818:	1ad3      	subs	r3, r2, r3
 800181a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001820:	4b13      	ldr	r3, [pc, #76]	@ (8001870 <_sbrk+0x64>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d102      	bne.n	800182e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001828:	4b11      	ldr	r3, [pc, #68]	@ (8001870 <_sbrk+0x64>)
 800182a:	4a12      	ldr	r2, [pc, #72]	@ (8001874 <_sbrk+0x68>)
 800182c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800182e:	4b10      	ldr	r3, [pc, #64]	@ (8001870 <_sbrk+0x64>)
 8001830:	681a      	ldr	r2, [r3, #0]
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	4413      	add	r3, r2
 8001836:	693a      	ldr	r2, [r7, #16]
 8001838:	429a      	cmp	r2, r3
 800183a:	d207      	bcs.n	800184c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800183c:	f00d f968 	bl	800eb10 <__errno>
 8001840:	4603      	mov	r3, r0
 8001842:	220c      	movs	r2, #12
 8001844:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001846:	f04f 33ff 	mov.w	r3, #4294967295
 800184a:	e009      	b.n	8001860 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800184c:	4b08      	ldr	r3, [pc, #32]	@ (8001870 <_sbrk+0x64>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001852:	4b07      	ldr	r3, [pc, #28]	@ (8001870 <_sbrk+0x64>)
 8001854:	681a      	ldr	r2, [r3, #0]
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	4413      	add	r3, r2
 800185a:	4a05      	ldr	r2, [pc, #20]	@ (8001870 <_sbrk+0x64>)
 800185c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800185e:	68fb      	ldr	r3, [r7, #12]
}
 8001860:	4618      	mov	r0, r3
 8001862:	3718      	adds	r7, #24
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}
 8001868:	24080000 	.word	0x24080000
 800186c:	00000400 	.word	0x00000400
 8001870:	2400034c 	.word	0x2400034c
 8001874:	24000580 	.word	0x24000580

08001878 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b08e      	sub	sp, #56	@ 0x38
 800187c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800187e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001882:	2200      	movs	r2, #0
 8001884:	601a      	str	r2, [r3, #0]
 8001886:	605a      	str	r2, [r3, #4]
 8001888:	609a      	str	r2, [r3, #8]
 800188a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800188c:	f107 031c 	add.w	r3, r7, #28
 8001890:	2200      	movs	r2, #0
 8001892:	601a      	str	r2, [r3, #0]
 8001894:	605a      	str	r2, [r3, #4]
 8001896:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001898:	463b      	mov	r3, r7
 800189a:	2200      	movs	r2, #0
 800189c:	601a      	str	r2, [r3, #0]
 800189e:	605a      	str	r2, [r3, #4]
 80018a0:	609a      	str	r2, [r3, #8]
 80018a2:	60da      	str	r2, [r3, #12]
 80018a4:	611a      	str	r2, [r3, #16]
 80018a6:	615a      	str	r2, [r3, #20]
 80018a8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80018aa:	4b2d      	ldr	r3, [pc, #180]	@ (8001960 <MX_TIM2_Init+0xe8>)
 80018ac:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80018b0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 63;
 80018b2:	4b2b      	ldr	r3, [pc, #172]	@ (8001960 <MX_TIM2_Init+0xe8>)
 80018b4:	223f      	movs	r2, #63	@ 0x3f
 80018b6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018b8:	4b29      	ldr	r3, [pc, #164]	@ (8001960 <MX_TIM2_Init+0xe8>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 80018be:	4b28      	ldr	r3, [pc, #160]	@ (8001960 <MX_TIM2_Init+0xe8>)
 80018c0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80018c4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018c6:	4b26      	ldr	r3, [pc, #152]	@ (8001960 <MX_TIM2_Init+0xe8>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018cc:	4b24      	ldr	r3, [pc, #144]	@ (8001960 <MX_TIM2_Init+0xe8>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80018d2:	4823      	ldr	r0, [pc, #140]	@ (8001960 <MX_TIM2_Init+0xe8>)
 80018d4:	f008 fc46 	bl	800a164 <HAL_TIM_Base_Init>
 80018d8:	4603      	mov	r3, r0
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d001      	beq.n	80018e2 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80018de:	f7ff fea1 	bl	8001624 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018e2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80018e6:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80018e8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80018ec:	4619      	mov	r1, r3
 80018ee:	481c      	ldr	r0, [pc, #112]	@ (8001960 <MX_TIM2_Init+0xe8>)
 80018f0:	f008 ff5e 	bl	800a7b0 <HAL_TIM_ConfigClockSource>
 80018f4:	4603      	mov	r3, r0
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d001      	beq.n	80018fe <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80018fa:	f7ff fe93 	bl	8001624 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80018fe:	4818      	ldr	r0, [pc, #96]	@ (8001960 <MX_TIM2_Init+0xe8>)
 8001900:	f008 fc87 	bl	800a212 <HAL_TIM_PWM_Init>
 8001904:	4603      	mov	r3, r0
 8001906:	2b00      	cmp	r3, #0
 8001908:	d001      	beq.n	800190e <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800190a:	f7ff fe8b 	bl	8001624 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800190e:	2300      	movs	r3, #0
 8001910:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001912:	2300      	movs	r3, #0
 8001914:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001916:	f107 031c 	add.w	r3, r7, #28
 800191a:	4619      	mov	r1, r3
 800191c:	4810      	ldr	r0, [pc, #64]	@ (8001960 <MX_TIM2_Init+0xe8>)
 800191e:	f009 fc7f 	bl	800b220 <HAL_TIMEx_MasterConfigSynchronization>
 8001922:	4603      	mov	r3, r0
 8001924:	2b00      	cmp	r3, #0
 8001926:	d001      	beq.n	800192c <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001928:	f7ff fe7c 	bl	8001624 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800192c:	2360      	movs	r3, #96	@ 0x60
 800192e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001930:	2300      	movs	r3, #0
 8001932:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001934:	2300      	movs	r3, #0
 8001936:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001938:	2300      	movs	r3, #0
 800193a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800193c:	463b      	mov	r3, r7
 800193e:	2200      	movs	r2, #0
 8001940:	4619      	mov	r1, r3
 8001942:	4807      	ldr	r0, [pc, #28]	@ (8001960 <MX_TIM2_Init+0xe8>)
 8001944:	f008 fe20 	bl	800a588 <HAL_TIM_PWM_ConfigChannel>
 8001948:	4603      	mov	r3, r0
 800194a:	2b00      	cmp	r3, #0
 800194c:	d001      	beq.n	8001952 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800194e:	f7ff fe69 	bl	8001624 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001952:	4803      	ldr	r0, [pc, #12]	@ (8001960 <MX_TIM2_Init+0xe8>)
 8001954:	f000 f826 	bl	80019a4 <HAL_TIM_MspPostInit>

}
 8001958:	bf00      	nop
 800195a:	3738      	adds	r7, #56	@ 0x38
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}
 8001960:	24000350 	.word	0x24000350

08001964 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001964:	b480      	push	{r7}
 8001966:	b085      	sub	sp, #20
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001974:	d10e      	bne.n	8001994 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001976:	4b0a      	ldr	r3, [pc, #40]	@ (80019a0 <HAL_TIM_Base_MspInit+0x3c>)
 8001978:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800197c:	4a08      	ldr	r2, [pc, #32]	@ (80019a0 <HAL_TIM_Base_MspInit+0x3c>)
 800197e:	f043 0301 	orr.w	r3, r3, #1
 8001982:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001986:	4b06      	ldr	r3, [pc, #24]	@ (80019a0 <HAL_TIM_Base_MspInit+0x3c>)
 8001988:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800198c:	f003 0301 	and.w	r3, r3, #1
 8001990:	60fb      	str	r3, [r7, #12]
 8001992:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001994:	bf00      	nop
 8001996:	3714      	adds	r7, #20
 8001998:	46bd      	mov	sp, r7
 800199a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199e:	4770      	bx	lr
 80019a0:	58024400 	.word	0x58024400

080019a4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b088      	sub	sp, #32
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019ac:	f107 030c 	add.w	r3, r7, #12
 80019b0:	2200      	movs	r2, #0
 80019b2:	601a      	str	r2, [r3, #0]
 80019b4:	605a      	str	r2, [r3, #4]
 80019b6:	609a      	str	r2, [r3, #8]
 80019b8:	60da      	str	r2, [r3, #12]
 80019ba:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80019c4:	d11e      	bne.n	8001a04 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019c6:	4b11      	ldr	r3, [pc, #68]	@ (8001a0c <HAL_TIM_MspPostInit+0x68>)
 80019c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80019cc:	4a0f      	ldr	r2, [pc, #60]	@ (8001a0c <HAL_TIM_MspPostInit+0x68>)
 80019ce:	f043 0301 	orr.w	r3, r3, #1
 80019d2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80019d6:	4b0d      	ldr	r3, [pc, #52]	@ (8001a0c <HAL_TIM_MspPostInit+0x68>)
 80019d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80019dc:	f003 0301 	and.w	r3, r3, #1
 80019e0:	60bb      	str	r3, [r7, #8]
 80019e2:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80019e4:	2301      	movs	r3, #1
 80019e6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019e8:	2302      	movs	r3, #2
 80019ea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ec:	2300      	movs	r3, #0
 80019ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019f0:	2300      	movs	r3, #0
 80019f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80019f4:	2301      	movs	r3, #1
 80019f6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019f8:	f107 030c 	add.w	r3, r7, #12
 80019fc:	4619      	mov	r1, r3
 80019fe:	4804      	ldr	r0, [pc, #16]	@ (8001a10 <HAL_TIM_MspPostInit+0x6c>)
 8001a00:	f004 f82e 	bl	8005a60 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001a04:	bf00      	nop
 8001a06:	3720      	adds	r7, #32
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}
 8001a0c:	58024400 	.word	0x58024400
 8001a10:	58020000 	.word	0x58020000

08001a14 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001a18:	4b22      	ldr	r3, [pc, #136]	@ (8001aa4 <MX_USART3_UART_Init+0x90>)
 8001a1a:	4a23      	ldr	r2, [pc, #140]	@ (8001aa8 <MX_USART3_UART_Init+0x94>)
 8001a1c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001a1e:	4b21      	ldr	r3, [pc, #132]	@ (8001aa4 <MX_USART3_UART_Init+0x90>)
 8001a20:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001a24:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001a26:	4b1f      	ldr	r3, [pc, #124]	@ (8001aa4 <MX_USART3_UART_Init+0x90>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001a2c:	4b1d      	ldr	r3, [pc, #116]	@ (8001aa4 <MX_USART3_UART_Init+0x90>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001a32:	4b1c      	ldr	r3, [pc, #112]	@ (8001aa4 <MX_USART3_UART_Init+0x90>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001a38:	4b1a      	ldr	r3, [pc, #104]	@ (8001aa4 <MX_USART3_UART_Init+0x90>)
 8001a3a:	220c      	movs	r2, #12
 8001a3c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a3e:	4b19      	ldr	r3, [pc, #100]	@ (8001aa4 <MX_USART3_UART_Init+0x90>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a44:	4b17      	ldr	r3, [pc, #92]	@ (8001aa4 <MX_USART3_UART_Init+0x90>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a4a:	4b16      	ldr	r3, [pc, #88]	@ (8001aa4 <MX_USART3_UART_Init+0x90>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001a50:	4b14      	ldr	r3, [pc, #80]	@ (8001aa4 <MX_USART3_UART_Init+0x90>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a56:	4b13      	ldr	r3, [pc, #76]	@ (8001aa4 <MX_USART3_UART_Init+0x90>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001a5c:	4811      	ldr	r0, [pc, #68]	@ (8001aa4 <MX_USART3_UART_Init+0x90>)
 8001a5e:	f009 fc6d 	bl	800b33c <HAL_UART_Init>
 8001a62:	4603      	mov	r3, r0
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d001      	beq.n	8001a6c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001a68:	f7ff fddc 	bl	8001624 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a6c:	2100      	movs	r1, #0
 8001a6e:	480d      	ldr	r0, [pc, #52]	@ (8001aa4 <MX_USART3_UART_Init+0x90>)
 8001a70:	f00b ffc7 	bl	800da02 <HAL_UARTEx_SetTxFifoThreshold>
 8001a74:	4603      	mov	r3, r0
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d001      	beq.n	8001a7e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001a7a:	f7ff fdd3 	bl	8001624 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a7e:	2100      	movs	r1, #0
 8001a80:	4808      	ldr	r0, [pc, #32]	@ (8001aa4 <MX_USART3_UART_Init+0x90>)
 8001a82:	f00b fffc 	bl	800da7e <HAL_UARTEx_SetRxFifoThreshold>
 8001a86:	4603      	mov	r3, r0
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d001      	beq.n	8001a90 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001a8c:	f7ff fdca 	bl	8001624 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001a90:	4804      	ldr	r0, [pc, #16]	@ (8001aa4 <MX_USART3_UART_Init+0x90>)
 8001a92:	f00b ff7d 	bl	800d990 <HAL_UARTEx_DisableFifoMode>
 8001a96:	4603      	mov	r3, r0
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d001      	beq.n	8001aa0 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001a9c:	f7ff fdc2 	bl	8001624 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001aa0:	bf00      	nop
 8001aa2:	bd80      	pop	{r7, pc}
 8001aa4:	2400039c 	.word	0x2400039c
 8001aa8:	40004800 	.word	0x40004800

08001aac <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b0ba      	sub	sp, #232	@ 0xe8
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ab4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001ab8:	2200      	movs	r2, #0
 8001aba:	601a      	str	r2, [r3, #0]
 8001abc:	605a      	str	r2, [r3, #4]
 8001abe:	609a      	str	r2, [r3, #8]
 8001ac0:	60da      	str	r2, [r3, #12]
 8001ac2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ac4:	f107 0310 	add.w	r3, r7, #16
 8001ac8:	22c0      	movs	r2, #192	@ 0xc0
 8001aca:	2100      	movs	r1, #0
 8001acc:	4618      	mov	r0, r3
 8001ace:	f00c ffcc 	bl	800ea6a <memset>
  if(uartHandle->Instance==USART3)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4a2b      	ldr	r2, [pc, #172]	@ (8001b84 <HAL_UART_MspInit+0xd8>)
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	d14e      	bne.n	8001b7a <HAL_UART_MspInit+0xce>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001adc:	f04f 0202 	mov.w	r2, #2
 8001ae0:	f04f 0300 	mov.w	r3, #0
 8001ae4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001aee:	f107 0310 	add.w	r3, r7, #16
 8001af2:	4618      	mov	r0, r3
 8001af4:	f005 fe38 	bl	8007768 <HAL_RCCEx_PeriphCLKConfig>
 8001af8:	4603      	mov	r3, r0
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d001      	beq.n	8001b02 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001afe:	f7ff fd91 	bl	8001624 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001b02:	4b21      	ldr	r3, [pc, #132]	@ (8001b88 <HAL_UART_MspInit+0xdc>)
 8001b04:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001b08:	4a1f      	ldr	r2, [pc, #124]	@ (8001b88 <HAL_UART_MspInit+0xdc>)
 8001b0a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001b0e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001b12:	4b1d      	ldr	r3, [pc, #116]	@ (8001b88 <HAL_UART_MspInit+0xdc>)
 8001b14:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001b18:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001b1c:	60fb      	str	r3, [r7, #12]
 8001b1e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b20:	4b19      	ldr	r3, [pc, #100]	@ (8001b88 <HAL_UART_MspInit+0xdc>)
 8001b22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b26:	4a18      	ldr	r2, [pc, #96]	@ (8001b88 <HAL_UART_MspInit+0xdc>)
 8001b28:	f043 0308 	orr.w	r3, r3, #8
 8001b2c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001b30:	4b15      	ldr	r3, [pc, #84]	@ (8001b88 <HAL_UART_MspInit+0xdc>)
 8001b32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b36:	f003 0308 	and.w	r3, r3, #8
 8001b3a:	60bb      	str	r3, [r7, #8]
 8001b3c:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001b3e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001b42:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b46:	2302      	movs	r3, #2
 8001b48:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b52:	2300      	movs	r3, #0
 8001b54:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001b58:	2307      	movs	r3, #7
 8001b5a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b5e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001b62:	4619      	mov	r1, r3
 8001b64:	4809      	ldr	r0, [pc, #36]	@ (8001b8c <HAL_UART_MspInit+0xe0>)
 8001b66:	f003 ff7b 	bl	8005a60 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	2100      	movs	r1, #0
 8001b6e:	2027      	movs	r0, #39	@ 0x27
 8001b70:	f001 fd1b 	bl	80035aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001b74:	2027      	movs	r0, #39	@ 0x27
 8001b76:	f001 fd32 	bl	80035de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001b7a:	bf00      	nop
 8001b7c:	37e8      	adds	r7, #232	@ 0xe8
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	bf00      	nop
 8001b84:	40004800 	.word	0x40004800
 8001b88:	58024400 	.word	0x58024400
 8001b8c:	58020c00 	.word	0x58020c00

08001b90 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001b90:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001bc8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001b94:	f7fe ff68 	bl	8000a68 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b98:	480c      	ldr	r0, [pc, #48]	@ (8001bcc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001b9a:	490d      	ldr	r1, [pc, #52]	@ (8001bd0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001b9c:	4a0d      	ldr	r2, [pc, #52]	@ (8001bd4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001b9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ba0:	e002      	b.n	8001ba8 <LoopCopyDataInit>

08001ba2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ba2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ba4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ba6:	3304      	adds	r3, #4

08001ba8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ba8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001baa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bac:	d3f9      	bcc.n	8001ba2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bae:	4a0a      	ldr	r2, [pc, #40]	@ (8001bd8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001bb0:	4c0a      	ldr	r4, [pc, #40]	@ (8001bdc <LoopFillZerobss+0x22>)
  movs r3, #0
 8001bb2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bb4:	e001      	b.n	8001bba <LoopFillZerobss>

08001bb6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bb6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bb8:	3204      	adds	r2, #4

08001bba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bbc:	d3fb      	bcc.n	8001bb6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001bbe:	f00c ffad 	bl	800eb1c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001bc2:	f7ff fbcd 	bl	8001360 <main>
  bx  lr
 8001bc6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001bc8:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001bcc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001bd0:	240001d8 	.word	0x240001d8
  ldr r2, =_sidata
 8001bd4:	080143e8 	.word	0x080143e8
  ldr r2, =_sbss
 8001bd8:	240001d8 	.word	0x240001d8
  ldr r4, =_ebss
 8001bdc:	24000580 	.word	0x24000580

08001be0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001be0:	e7fe      	b.n	8001be0 <ADC3_IRQHandler>
	...

08001be4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b082      	sub	sp, #8
 8001be8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bea:	2003      	movs	r0, #3
 8001bec:	f001 fcd2 	bl	8003594 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001bf0:	f005 fbe4 	bl	80073bc <HAL_RCC_GetSysClockFreq>
 8001bf4:	4602      	mov	r2, r0
 8001bf6:	4b15      	ldr	r3, [pc, #84]	@ (8001c4c <HAL_Init+0x68>)
 8001bf8:	699b      	ldr	r3, [r3, #24]
 8001bfa:	0a1b      	lsrs	r3, r3, #8
 8001bfc:	f003 030f 	and.w	r3, r3, #15
 8001c00:	4913      	ldr	r1, [pc, #76]	@ (8001c50 <HAL_Init+0x6c>)
 8001c02:	5ccb      	ldrb	r3, [r1, r3]
 8001c04:	f003 031f 	and.w	r3, r3, #31
 8001c08:	fa22 f303 	lsr.w	r3, r2, r3
 8001c0c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001c0e:	4b0f      	ldr	r3, [pc, #60]	@ (8001c4c <HAL_Init+0x68>)
 8001c10:	699b      	ldr	r3, [r3, #24]
 8001c12:	f003 030f 	and.w	r3, r3, #15
 8001c16:	4a0e      	ldr	r2, [pc, #56]	@ (8001c50 <HAL_Init+0x6c>)
 8001c18:	5cd3      	ldrb	r3, [r2, r3]
 8001c1a:	f003 031f 	and.w	r3, r3, #31
 8001c1e:	687a      	ldr	r2, [r7, #4]
 8001c20:	fa22 f303 	lsr.w	r3, r2, r3
 8001c24:	4a0b      	ldr	r2, [pc, #44]	@ (8001c54 <HAL_Init+0x70>)
 8001c26:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001c28:	4a0b      	ldr	r2, [pc, #44]	@ (8001c58 <HAL_Init+0x74>)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c2e:	2000      	movs	r0, #0
 8001c30:	f000 f814 	bl	8001c5c <HAL_InitTick>
 8001c34:	4603      	mov	r3, r0
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d001      	beq.n	8001c3e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	e002      	b.n	8001c44 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001c3e:	f7ff fcf7 	bl	8001630 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c42:	2300      	movs	r3, #0
}
 8001c44:	4618      	mov	r0, r3
 8001c46:	3708      	adds	r7, #8
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}
 8001c4c:	58024400 	.word	0x58024400
 8001c50:	080126b0 	.word	0x080126b0
 8001c54:	24000004 	.word	0x24000004
 8001c58:	24000000 	.word	0x24000000

08001c5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b082      	sub	sp, #8
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001c64:	4b15      	ldr	r3, [pc, #84]	@ (8001cbc <HAL_InitTick+0x60>)
 8001c66:	781b      	ldrb	r3, [r3, #0]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d101      	bne.n	8001c70 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	e021      	b.n	8001cb4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001c70:	4b13      	ldr	r3, [pc, #76]	@ (8001cc0 <HAL_InitTick+0x64>)
 8001c72:	681a      	ldr	r2, [r3, #0]
 8001c74:	4b11      	ldr	r3, [pc, #68]	@ (8001cbc <HAL_InitTick+0x60>)
 8001c76:	781b      	ldrb	r3, [r3, #0]
 8001c78:	4619      	mov	r1, r3
 8001c7a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c82:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c86:	4618      	mov	r0, r3
 8001c88:	f001 fcb7 	bl	80035fa <HAL_SYSTICK_Config>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d001      	beq.n	8001c96 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001c92:	2301      	movs	r3, #1
 8001c94:	e00e      	b.n	8001cb4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2b0f      	cmp	r3, #15
 8001c9a:	d80a      	bhi.n	8001cb2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	6879      	ldr	r1, [r7, #4]
 8001ca0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ca4:	f001 fc81 	bl	80035aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ca8:	4a06      	ldr	r2, [pc, #24]	@ (8001cc4 <HAL_InitTick+0x68>)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	e000      	b.n	8001cb4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001cb2:	2301      	movs	r3, #1
}
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	3708      	adds	r7, #8
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}
 8001cbc:	2400000c 	.word	0x2400000c
 8001cc0:	24000000 	.word	0x24000000
 8001cc4:	24000008 	.word	0x24000008

08001cc8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001ccc:	4b06      	ldr	r3, [pc, #24]	@ (8001ce8 <HAL_IncTick+0x20>)
 8001cce:	781b      	ldrb	r3, [r3, #0]
 8001cd0:	461a      	mov	r2, r3
 8001cd2:	4b06      	ldr	r3, [pc, #24]	@ (8001cec <HAL_IncTick+0x24>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4413      	add	r3, r2
 8001cd8:	4a04      	ldr	r2, [pc, #16]	@ (8001cec <HAL_IncTick+0x24>)
 8001cda:	6013      	str	r3, [r2, #0]
}
 8001cdc:	bf00      	nop
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce4:	4770      	bx	lr
 8001ce6:	bf00      	nop
 8001ce8:	2400000c 	.word	0x2400000c
 8001cec:	24000430 	.word	0x24000430

08001cf0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	af00      	add	r7, sp, #0
  return uwTick;
 8001cf4:	4b03      	ldr	r3, [pc, #12]	@ (8001d04 <HAL_GetTick+0x14>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
}
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d00:	4770      	bx	lr
 8001d02:	bf00      	nop
 8001d04:	24000430 	.word	0x24000430

08001d08 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b084      	sub	sp, #16
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d10:	f7ff ffee 	bl	8001cf0 <HAL_GetTick>
 8001d14:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d20:	d005      	beq.n	8001d2e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d22:	4b0a      	ldr	r3, [pc, #40]	@ (8001d4c <HAL_Delay+0x44>)
 8001d24:	781b      	ldrb	r3, [r3, #0]
 8001d26:	461a      	mov	r2, r3
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	4413      	add	r3, r2
 8001d2c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d2e:	bf00      	nop
 8001d30:	f7ff ffde 	bl	8001cf0 <HAL_GetTick>
 8001d34:	4602      	mov	r2, r0
 8001d36:	68bb      	ldr	r3, [r7, #8]
 8001d38:	1ad3      	subs	r3, r2, r3
 8001d3a:	68fa      	ldr	r2, [r7, #12]
 8001d3c:	429a      	cmp	r2, r3
 8001d3e:	d8f7      	bhi.n	8001d30 <HAL_Delay+0x28>
  {
  }
}
 8001d40:	bf00      	nop
 8001d42:	bf00      	nop
 8001d44:	3710      	adds	r7, #16
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	2400000c 	.word	0x2400000c

08001d50 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001d50:	b480      	push	{r7}
 8001d52:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001d54:	4b03      	ldr	r3, [pc, #12]	@ (8001d64 <HAL_GetREVID+0x14>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	0c1b      	lsrs	r3, r3, #16
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d62:	4770      	bx	lr
 8001d64:	5c001000 	.word	0x5c001000

08001d68 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b083      	sub	sp, #12
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
 8001d70:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	689b      	ldr	r3, [r3, #8]
 8001d76:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	431a      	orrs	r2, r3
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	609a      	str	r2, [r3, #8]
}
 8001d82:	bf00      	nop
 8001d84:	370c      	adds	r7, #12
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr

08001d8e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001d8e:	b480      	push	{r7}
 8001d90:	b083      	sub	sp, #12
 8001d92:	af00      	add	r7, sp, #0
 8001d94:	6078      	str	r0, [r7, #4]
 8001d96:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	689b      	ldr	r3, [r3, #8]
 8001d9c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	431a      	orrs	r2, r3
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	609a      	str	r2, [r3, #8]
}
 8001da8:	bf00      	nop
 8001daa:	370c      	adds	r7, #12
 8001dac:	46bd      	mov	sp, r7
 8001dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db2:	4770      	bx	lr

08001db4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b083      	sub	sp, #12
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	689b      	ldr	r3, [r3, #8]
 8001dc0:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	370c      	adds	r7, #12
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dce:	4770      	bx	lr

08001dd0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b087      	sub	sp, #28
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	60f8      	str	r0, [r7, #12]
 8001dd8:	60b9      	str	r1, [r7, #8]
 8001dda:	607a      	str	r2, [r7, #4]
 8001ddc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	3360      	adds	r3, #96	@ 0x60
 8001de2:	461a      	mov	r2, r3
 8001de4:	68bb      	ldr	r3, [r7, #8]
 8001de6:	009b      	lsls	r3, r3, #2
 8001de8:	4413      	add	r3, r2
 8001dea:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8001dec:	697b      	ldr	r3, [r7, #20]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	430b      	orrs	r3, r1
 8001dfe:	431a      	orrs	r2, r3
 8001e00:	697b      	ldr	r3, [r7, #20]
 8001e02:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8001e04:	bf00      	nop
 8001e06:	371c      	adds	r7, #28
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0e:	4770      	bx	lr

08001e10 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b085      	sub	sp, #20
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	60f8      	str	r0, [r7, #12]
 8001e18:	60b9      	str	r1, [r7, #8]
 8001e1a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	691b      	ldr	r3, [r3, #16]
 8001e20:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8001e24:	68bb      	ldr	r3, [r7, #8]
 8001e26:	f003 031f 	and.w	r3, r3, #31
 8001e2a:	6879      	ldr	r1, [r7, #4]
 8001e2c:	fa01 f303 	lsl.w	r3, r1, r3
 8001e30:	431a      	orrs	r2, r3
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	611a      	str	r2, [r3, #16]
}
 8001e36:	bf00      	nop
 8001e38:	3714      	adds	r7, #20
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e40:	4770      	bx	lr

08001e42 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8001e42:	b480      	push	{r7}
 8001e44:	b087      	sub	sp, #28
 8001e46:	af00      	add	r7, sp, #0
 8001e48:	60f8      	str	r0, [r7, #12]
 8001e4a:	60b9      	str	r1, [r7, #8]
 8001e4c:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	3360      	adds	r3, #96	@ 0x60
 8001e52:	461a      	mov	r2, r3
 8001e54:	68bb      	ldr	r3, [r7, #8]
 8001e56:	009b      	lsls	r3, r3, #2
 8001e58:	4413      	add	r3, r2
 8001e5a:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001e5c:	697b      	ldr	r3, [r7, #20]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	431a      	orrs	r2, r3
 8001e68:	697b      	ldr	r3, [r7, #20]
 8001e6a:	601a      	str	r2, [r3, #0]
  }
}
 8001e6c:	bf00      	nop
 8001e6e:	371c      	adds	r7, #28
 8001e70:	46bd      	mov	sp, r7
 8001e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e76:	4770      	bx	lr

08001e78 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b083      	sub	sp, #12
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	68db      	ldr	r3, [r3, #12]
 8001e84:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d101      	bne.n	8001e90 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	e000      	b.n	8001e92 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001e90:	2300      	movs	r3, #0
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	370c      	adds	r7, #12
 8001e96:	46bd      	mov	sp, r7
 8001e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9c:	4770      	bx	lr

08001e9e <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001e9e:	b480      	push	{r7}
 8001ea0:	b087      	sub	sp, #28
 8001ea2:	af00      	add	r7, sp, #0
 8001ea4:	60f8      	str	r0, [r7, #12]
 8001ea6:	60b9      	str	r1, [r7, #8]
 8001ea8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	3330      	adds	r3, #48	@ 0x30
 8001eae:	461a      	mov	r2, r3
 8001eb0:	68bb      	ldr	r3, [r7, #8]
 8001eb2:	0a1b      	lsrs	r3, r3, #8
 8001eb4:	009b      	lsls	r3, r3, #2
 8001eb6:	f003 030c 	and.w	r3, r3, #12
 8001eba:	4413      	add	r3, r2
 8001ebc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001ebe:	697b      	ldr	r3, [r7, #20]
 8001ec0:	681a      	ldr	r2, [r3, #0]
 8001ec2:	68bb      	ldr	r3, [r7, #8]
 8001ec4:	f003 031f 	and.w	r3, r3, #31
 8001ec8:	211f      	movs	r1, #31
 8001eca:	fa01 f303 	lsl.w	r3, r1, r3
 8001ece:	43db      	mvns	r3, r3
 8001ed0:	401a      	ands	r2, r3
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	0e9b      	lsrs	r3, r3, #26
 8001ed6:	f003 011f 	and.w	r1, r3, #31
 8001eda:	68bb      	ldr	r3, [r7, #8]
 8001edc:	f003 031f 	and.w	r3, r3, #31
 8001ee0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ee4:	431a      	orrs	r2, r3
 8001ee6:	697b      	ldr	r3, [r7, #20]
 8001ee8:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001eea:	bf00      	nop
 8001eec:	371c      	adds	r7, #28
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef4:	4770      	bx	lr

08001ef6 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001ef6:	b480      	push	{r7}
 8001ef8:	b087      	sub	sp, #28
 8001efa:	af00      	add	r7, sp, #0
 8001efc:	60f8      	str	r0, [r7, #12]
 8001efe:	60b9      	str	r1, [r7, #8]
 8001f00:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	3314      	adds	r3, #20
 8001f06:	461a      	mov	r2, r3
 8001f08:	68bb      	ldr	r3, [r7, #8]
 8001f0a:	0e5b      	lsrs	r3, r3, #25
 8001f0c:	009b      	lsls	r3, r3, #2
 8001f0e:	f003 0304 	and.w	r3, r3, #4
 8001f12:	4413      	add	r3, r2
 8001f14:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001f16:	697b      	ldr	r3, [r7, #20]
 8001f18:	681a      	ldr	r2, [r3, #0]
 8001f1a:	68bb      	ldr	r3, [r7, #8]
 8001f1c:	0d1b      	lsrs	r3, r3, #20
 8001f1e:	f003 031f 	and.w	r3, r3, #31
 8001f22:	2107      	movs	r1, #7
 8001f24:	fa01 f303 	lsl.w	r3, r1, r3
 8001f28:	43db      	mvns	r3, r3
 8001f2a:	401a      	ands	r2, r3
 8001f2c:	68bb      	ldr	r3, [r7, #8]
 8001f2e:	0d1b      	lsrs	r3, r3, #20
 8001f30:	f003 031f 	and.w	r3, r3, #31
 8001f34:	6879      	ldr	r1, [r7, #4]
 8001f36:	fa01 f303 	lsl.w	r3, r1, r3
 8001f3a:	431a      	orrs	r2, r3
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001f40:	bf00      	nop
 8001f42:	371c      	adds	r7, #28
 8001f44:	46bd      	mov	sp, r7
 8001f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4a:	4770      	bx	lr

08001f4c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b085      	sub	sp, #20
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	60f8      	str	r0, [r7, #12]
 8001f54:	60b9      	str	r1, [r7, #8]
 8001f56:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8001f5e:	68bb      	ldr	r3, [r7, #8]
 8001f60:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001f64:	43db      	mvns	r3, r3
 8001f66:	401a      	ands	r2, r3
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	f003 0318 	and.w	r3, r3, #24
 8001f6e:	4908      	ldr	r1, [pc, #32]	@ (8001f90 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001f70:	40d9      	lsrs	r1, r3
 8001f72:	68bb      	ldr	r3, [r7, #8]
 8001f74:	400b      	ands	r3, r1
 8001f76:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001f7a:	431a      	orrs	r2, r3
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8001f82:	bf00      	nop
 8001f84:	3714      	adds	r7, #20
 8001f86:	46bd      	mov	sp, r7
 8001f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8c:	4770      	bx	lr
 8001f8e:	bf00      	nop
 8001f90:	000fffff 	.word	0x000fffff

08001f94 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001f94:	b480      	push	{r7}
 8001f96:	b083      	sub	sp, #12
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	689b      	ldr	r3, [r3, #8]
 8001fa0:	f003 031f 	and.w	r3, r3, #31
}
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	370c      	adds	r7, #12
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fae:	4770      	bx	lr

08001fb0 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b083      	sub	sp, #12
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	689b      	ldr	r3, [r3, #8]
 8001fbc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	370c      	adds	r7, #12
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fca:	4770      	bx	lr

08001fcc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b083      	sub	sp, #12
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	689a      	ldr	r2, [r3, #8]
 8001fd8:	4b04      	ldr	r3, [pc, #16]	@ (8001fec <LL_ADC_DisableDeepPowerDown+0x20>)
 8001fda:	4013      	ands	r3, r2
 8001fdc:	687a      	ldr	r2, [r7, #4]
 8001fde:	6093      	str	r3, [r2, #8]
}
 8001fe0:	bf00      	nop
 8001fe2:	370c      	adds	r7, #12
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fea:	4770      	bx	lr
 8001fec:	5fffffc0 	.word	0x5fffffc0

08001ff0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b083      	sub	sp, #12
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	689b      	ldr	r3, [r3, #8]
 8001ffc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002000:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002004:	d101      	bne.n	800200a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002006:	2301      	movs	r3, #1
 8002008:	e000      	b.n	800200c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800200a:	2300      	movs	r3, #0
}
 800200c:	4618      	mov	r0, r3
 800200e:	370c      	adds	r7, #12
 8002010:	46bd      	mov	sp, r7
 8002012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002016:	4770      	bx	lr

08002018 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002018:	b480      	push	{r7}
 800201a:	b083      	sub	sp, #12
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	689a      	ldr	r2, [r3, #8]
 8002024:	4b05      	ldr	r3, [pc, #20]	@ (800203c <LL_ADC_EnableInternalRegulator+0x24>)
 8002026:	4013      	ands	r3, r2
 8002028:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002030:	bf00      	nop
 8002032:	370c      	adds	r7, #12
 8002034:	46bd      	mov	sp, r7
 8002036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203a:	4770      	bx	lr
 800203c:	6fffffc0 	.word	0x6fffffc0

08002040 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002040:	b480      	push	{r7}
 8002042:	b083      	sub	sp, #12
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	689b      	ldr	r3, [r3, #8]
 800204c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002050:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002054:	d101      	bne.n	800205a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002056:	2301      	movs	r3, #1
 8002058:	e000      	b.n	800205c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800205a:	2300      	movs	r3, #0
}
 800205c:	4618      	mov	r0, r3
 800205e:	370c      	adds	r7, #12
 8002060:	46bd      	mov	sp, r7
 8002062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002066:	4770      	bx	lr

08002068 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002068:	b480      	push	{r7}
 800206a:	b083      	sub	sp, #12
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	689a      	ldr	r2, [r3, #8]
 8002074:	4b05      	ldr	r3, [pc, #20]	@ (800208c <LL_ADC_Enable+0x24>)
 8002076:	4013      	ands	r3, r2
 8002078:	f043 0201 	orr.w	r2, r3, #1
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002080:	bf00      	nop
 8002082:	370c      	adds	r7, #12
 8002084:	46bd      	mov	sp, r7
 8002086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208a:	4770      	bx	lr
 800208c:	7fffffc0 	.word	0x7fffffc0

08002090 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002090:	b480      	push	{r7}
 8002092:	b083      	sub	sp, #12
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	689b      	ldr	r3, [r3, #8]
 800209c:	f003 0301 	and.w	r3, r3, #1
 80020a0:	2b01      	cmp	r3, #1
 80020a2:	d101      	bne.n	80020a8 <LL_ADC_IsEnabled+0x18>
 80020a4:	2301      	movs	r3, #1
 80020a6:	e000      	b.n	80020aa <LL_ADC_IsEnabled+0x1a>
 80020a8:	2300      	movs	r3, #0
}
 80020aa:	4618      	mov	r0, r3
 80020ac:	370c      	adds	r7, #12
 80020ae:	46bd      	mov	sp, r7
 80020b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b4:	4770      	bx	lr
	...

080020b8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b083      	sub	sp, #12
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	689a      	ldr	r2, [r3, #8]
 80020c4:	4b05      	ldr	r3, [pc, #20]	@ (80020dc <LL_ADC_REG_StartConversion+0x24>)
 80020c6:	4013      	ands	r3, r2
 80020c8:	f043 0204 	orr.w	r2, r3, #4
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80020d0:	bf00      	nop
 80020d2:	370c      	adds	r7, #12
 80020d4:	46bd      	mov	sp, r7
 80020d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020da:	4770      	bx	lr
 80020dc:	7fffffc0 	.word	0x7fffffc0

080020e0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b083      	sub	sp, #12
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	689b      	ldr	r3, [r3, #8]
 80020ec:	f003 0304 	and.w	r3, r3, #4
 80020f0:	2b04      	cmp	r3, #4
 80020f2:	d101      	bne.n	80020f8 <LL_ADC_REG_IsConversionOngoing+0x18>
 80020f4:	2301      	movs	r3, #1
 80020f6:	e000      	b.n	80020fa <LL_ADC_REG_IsConversionOngoing+0x1a>
 80020f8:	2300      	movs	r3, #0
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	370c      	adds	r7, #12
 80020fe:	46bd      	mov	sp, r7
 8002100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002104:	4770      	bx	lr

08002106 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002106:	b480      	push	{r7}
 8002108:	b083      	sub	sp, #12
 800210a:	af00      	add	r7, sp, #0
 800210c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	689b      	ldr	r3, [r3, #8]
 8002112:	f003 0308 	and.w	r3, r3, #8
 8002116:	2b08      	cmp	r3, #8
 8002118:	d101      	bne.n	800211e <LL_ADC_INJ_IsConversionOngoing+0x18>
 800211a:	2301      	movs	r3, #1
 800211c:	e000      	b.n	8002120 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800211e:	2300      	movs	r3, #0
}
 8002120:	4618      	mov	r0, r3
 8002122:	370c      	adds	r7, #12
 8002124:	46bd      	mov	sp, r7
 8002126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212a:	4770      	bx	lr

0800212c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800212c:	b590      	push	{r4, r7, lr}
 800212e:	b089      	sub	sp, #36	@ 0x24
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002134:	2300      	movs	r3, #0
 8002136:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002138:	2300      	movs	r3, #0
 800213a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d101      	bne.n	8002146 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002142:	2301      	movs	r3, #1
 8002144:	e18f      	b.n	8002466 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	68db      	ldr	r3, [r3, #12]
 800214a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002150:	2b00      	cmp	r3, #0
 8002152:	d109      	bne.n	8002168 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002154:	6878      	ldr	r0, [r7, #4]
 8002156:	f7fe fda1 	bl	8000c9c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2200      	movs	r2, #0
 800215e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2200      	movs	r2, #0
 8002164:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4618      	mov	r0, r3
 800216e:	f7ff ff3f 	bl	8001ff0 <LL_ADC_IsDeepPowerDownEnabled>
 8002172:	4603      	mov	r3, r0
 8002174:	2b00      	cmp	r3, #0
 8002176:	d004      	beq.n	8002182 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4618      	mov	r0, r3
 800217e:	f7ff ff25 	bl	8001fcc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4618      	mov	r0, r3
 8002188:	f7ff ff5a 	bl	8002040 <LL_ADC_IsInternalRegulatorEnabled>
 800218c:	4603      	mov	r3, r0
 800218e:	2b00      	cmp	r3, #0
 8002190:	d114      	bne.n	80021bc <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4618      	mov	r0, r3
 8002198:	f7ff ff3e 	bl	8002018 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800219c:	4b87      	ldr	r3, [pc, #540]	@ (80023bc <HAL_ADC_Init+0x290>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	099b      	lsrs	r3, r3, #6
 80021a2:	4a87      	ldr	r2, [pc, #540]	@ (80023c0 <HAL_ADC_Init+0x294>)
 80021a4:	fba2 2303 	umull	r2, r3, r2, r3
 80021a8:	099b      	lsrs	r3, r3, #6
 80021aa:	3301      	adds	r3, #1
 80021ac:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80021ae:	e002      	b.n	80021b6 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80021b0:	68bb      	ldr	r3, [r7, #8]
 80021b2:	3b01      	subs	r3, #1
 80021b4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80021b6:	68bb      	ldr	r3, [r7, #8]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d1f9      	bne.n	80021b0 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4618      	mov	r0, r3
 80021c2:	f7ff ff3d 	bl	8002040 <LL_ADC_IsInternalRegulatorEnabled>
 80021c6:	4603      	mov	r3, r0
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d10d      	bne.n	80021e8 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021d0:	f043 0210 	orr.w	r2, r3, #16
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021dc:	f043 0201 	orr.w	r2, r3, #1
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80021e4:	2301      	movs	r3, #1
 80021e6:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4618      	mov	r0, r3
 80021ee:	f7ff ff77 	bl	80020e0 <LL_ADC_REG_IsConversionOngoing>
 80021f2:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021f8:	f003 0310 	and.w	r3, r3, #16
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	f040 8129 	bne.w	8002454 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002202:	697b      	ldr	r3, [r7, #20]
 8002204:	2b00      	cmp	r3, #0
 8002206:	f040 8125 	bne.w	8002454 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800220e:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002212:	f043 0202 	orr.w	r2, r3, #2
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4618      	mov	r0, r3
 8002220:	f7ff ff36 	bl	8002090 <LL_ADC_IsEnabled>
 8002224:	4603      	mov	r3, r0
 8002226:	2b00      	cmp	r3, #0
 8002228:	d136      	bne.n	8002298 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4a65      	ldr	r2, [pc, #404]	@ (80023c4 <HAL_ADC_Init+0x298>)
 8002230:	4293      	cmp	r3, r2
 8002232:	d004      	beq.n	800223e <HAL_ADC_Init+0x112>
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a63      	ldr	r2, [pc, #396]	@ (80023c8 <HAL_ADC_Init+0x29c>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d10e      	bne.n	800225c <HAL_ADC_Init+0x130>
 800223e:	4861      	ldr	r0, [pc, #388]	@ (80023c4 <HAL_ADC_Init+0x298>)
 8002240:	f7ff ff26 	bl	8002090 <LL_ADC_IsEnabled>
 8002244:	4604      	mov	r4, r0
 8002246:	4860      	ldr	r0, [pc, #384]	@ (80023c8 <HAL_ADC_Init+0x29c>)
 8002248:	f7ff ff22 	bl	8002090 <LL_ADC_IsEnabled>
 800224c:	4603      	mov	r3, r0
 800224e:	4323      	orrs	r3, r4
 8002250:	2b00      	cmp	r3, #0
 8002252:	bf0c      	ite	eq
 8002254:	2301      	moveq	r3, #1
 8002256:	2300      	movne	r3, #0
 8002258:	b2db      	uxtb	r3, r3
 800225a:	e008      	b.n	800226e <HAL_ADC_Init+0x142>
 800225c:	485b      	ldr	r0, [pc, #364]	@ (80023cc <HAL_ADC_Init+0x2a0>)
 800225e:	f7ff ff17 	bl	8002090 <LL_ADC_IsEnabled>
 8002262:	4603      	mov	r3, r0
 8002264:	2b00      	cmp	r3, #0
 8002266:	bf0c      	ite	eq
 8002268:	2301      	moveq	r3, #1
 800226a:	2300      	movne	r3, #0
 800226c:	b2db      	uxtb	r3, r3
 800226e:	2b00      	cmp	r3, #0
 8002270:	d012      	beq.n	8002298 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4a53      	ldr	r2, [pc, #332]	@ (80023c4 <HAL_ADC_Init+0x298>)
 8002278:	4293      	cmp	r3, r2
 800227a:	d004      	beq.n	8002286 <HAL_ADC_Init+0x15a>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a51      	ldr	r2, [pc, #324]	@ (80023c8 <HAL_ADC_Init+0x29c>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d101      	bne.n	800228a <HAL_ADC_Init+0x15e>
 8002286:	4a52      	ldr	r2, [pc, #328]	@ (80023d0 <HAL_ADC_Init+0x2a4>)
 8002288:	e000      	b.n	800228c <HAL_ADC_Init+0x160>
 800228a:	4a52      	ldr	r2, [pc, #328]	@ (80023d4 <HAL_ADC_Init+0x2a8>)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	4619      	mov	r1, r3
 8002292:	4610      	mov	r0, r2
 8002294:	f7ff fd68 	bl	8001d68 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8002298:	f7ff fd5a 	bl	8001d50 <HAL_GetREVID>
 800229c:	4603      	mov	r3, r0
 800229e:	f241 0203 	movw	r2, #4099	@ 0x1003
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d914      	bls.n	80022d0 <HAL_ADC_Init+0x1a4>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	689b      	ldr	r3, [r3, #8]
 80022aa:	2b10      	cmp	r3, #16
 80022ac:	d110      	bne.n	80022d0 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	7d5b      	ldrb	r3, [r3, #21]
 80022b2:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80022b8:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80022be:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	7f1b      	ldrb	r3, [r3, #28]
 80022c4:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80022c6:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80022c8:	f043 030c 	orr.w	r3, r3, #12
 80022cc:	61bb      	str	r3, [r7, #24]
 80022ce:	e00d      	b.n	80022ec <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	7d5b      	ldrb	r3, [r3, #21]
 80022d4:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80022da:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80022e0:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	7f1b      	ldrb	r3, [r3, #28]
 80022e6:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80022e8:	4313      	orrs	r3, r2
 80022ea:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	7f1b      	ldrb	r3, [r3, #28]
 80022f0:	2b01      	cmp	r3, #1
 80022f2:	d106      	bne.n	8002302 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6a1b      	ldr	r3, [r3, #32]
 80022f8:	3b01      	subs	r3, #1
 80022fa:	045b      	lsls	r3, r3, #17
 80022fc:	69ba      	ldr	r2, [r7, #24]
 80022fe:	4313      	orrs	r3, r2
 8002300:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002306:	2b00      	cmp	r3, #0
 8002308:	d009      	beq.n	800231e <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800230e:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002316:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002318:	69ba      	ldr	r2, [r7, #24]
 800231a:	4313      	orrs	r3, r2
 800231c:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	68da      	ldr	r2, [r3, #12]
 8002324:	4b2c      	ldr	r3, [pc, #176]	@ (80023d8 <HAL_ADC_Init+0x2ac>)
 8002326:	4013      	ands	r3, r2
 8002328:	687a      	ldr	r2, [r7, #4]
 800232a:	6812      	ldr	r2, [r2, #0]
 800232c:	69b9      	ldr	r1, [r7, #24]
 800232e:	430b      	orrs	r3, r1
 8002330:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4618      	mov	r0, r3
 8002338:	f7ff fed2 	bl	80020e0 <LL_ADC_REG_IsConversionOngoing>
 800233c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4618      	mov	r0, r3
 8002344:	f7ff fedf 	bl	8002106 <LL_ADC_INJ_IsConversionOngoing>
 8002348:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800234a:	693b      	ldr	r3, [r7, #16]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d15f      	bne.n	8002410 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d15c      	bne.n	8002410 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	7d1b      	ldrb	r3, [r3, #20]
 800235a:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 8002360:	4313      	orrs	r3, r2
 8002362:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	68da      	ldr	r2, [r3, #12]
 800236a:	4b1c      	ldr	r3, [pc, #112]	@ (80023dc <HAL_ADC_Init+0x2b0>)
 800236c:	4013      	ands	r3, r2
 800236e:	687a      	ldr	r2, [r7, #4]
 8002370:	6812      	ldr	r2, [r2, #0]
 8002372:	69b9      	ldr	r1, [r7, #24]
 8002374:	430b      	orrs	r3, r1
 8002376:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800237e:	2b01      	cmp	r3, #1
 8002380:	d130      	bne.n	80023e4 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002386:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	691a      	ldr	r2, [r3, #16]
 800238e:	4b14      	ldr	r3, [pc, #80]	@ (80023e0 <HAL_ADC_Init+0x2b4>)
 8002390:	4013      	ands	r3, r2
 8002392:	687a      	ldr	r2, [r7, #4]
 8002394:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002396:	3a01      	subs	r2, #1
 8002398:	0411      	lsls	r1, r2, #16
 800239a:	687a      	ldr	r2, [r7, #4]
 800239c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800239e:	4311      	orrs	r1, r2
 80023a0:	687a      	ldr	r2, [r7, #4]
 80023a2:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80023a4:	4311      	orrs	r1, r2
 80023a6:	687a      	ldr	r2, [r7, #4]
 80023a8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80023aa:	430a      	orrs	r2, r1
 80023ac:	431a      	orrs	r2, r3
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f042 0201 	orr.w	r2, r2, #1
 80023b6:	611a      	str	r2, [r3, #16]
 80023b8:	e01c      	b.n	80023f4 <HAL_ADC_Init+0x2c8>
 80023ba:	bf00      	nop
 80023bc:	24000000 	.word	0x24000000
 80023c0:	053e2d63 	.word	0x053e2d63
 80023c4:	40022000 	.word	0x40022000
 80023c8:	40022100 	.word	0x40022100
 80023cc:	58026000 	.word	0x58026000
 80023d0:	40022300 	.word	0x40022300
 80023d4:	58026300 	.word	0x58026300
 80023d8:	fff0c003 	.word	0xfff0c003
 80023dc:	ffffbffc 	.word	0xffffbffc
 80023e0:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	691a      	ldr	r2, [r3, #16]
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f022 0201 	bic.w	r2, r2, #1
 80023f2:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	691b      	ldr	r3, [r3, #16]
 80023fa:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	430a      	orrs	r2, r1
 8002408:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 800240a:	6878      	ldr	r0, [r7, #4]
 800240c:	f000 fde2 	bl	8002fd4 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	68db      	ldr	r3, [r3, #12]
 8002414:	2b01      	cmp	r3, #1
 8002416:	d10c      	bne.n	8002432 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800241e:	f023 010f 	bic.w	r1, r3, #15
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	699b      	ldr	r3, [r3, #24]
 8002426:	1e5a      	subs	r2, r3, #1
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	430a      	orrs	r2, r1
 800242e:	631a      	str	r2, [r3, #48]	@ 0x30
 8002430:	e007      	b.n	8002442 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f022 020f 	bic.w	r2, r2, #15
 8002440:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002446:	f023 0303 	bic.w	r3, r3, #3
 800244a:	f043 0201 	orr.w	r2, r3, #1
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	655a      	str	r2, [r3, #84]	@ 0x54
 8002452:	e007      	b.n	8002464 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002458:	f043 0210 	orr.w	r2, r3, #16
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002460:	2301      	movs	r3, #1
 8002462:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002464:	7ffb      	ldrb	r3, [r7, #31]
}
 8002466:	4618      	mov	r0, r3
 8002468:	3724      	adds	r7, #36	@ 0x24
 800246a:	46bd      	mov	sp, r7
 800246c:	bd90      	pop	{r4, r7, pc}
 800246e:	bf00      	nop

08002470 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b086      	sub	sp, #24
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a5c      	ldr	r2, [pc, #368]	@ (80025f0 <HAL_ADC_Start+0x180>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d004      	beq.n	800248c <HAL_ADC_Start+0x1c>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4a5b      	ldr	r2, [pc, #364]	@ (80025f4 <HAL_ADC_Start+0x184>)
 8002488:	4293      	cmp	r3, r2
 800248a:	d101      	bne.n	8002490 <HAL_ADC_Start+0x20>
 800248c:	4b5a      	ldr	r3, [pc, #360]	@ (80025f8 <HAL_ADC_Start+0x188>)
 800248e:	e000      	b.n	8002492 <HAL_ADC_Start+0x22>
 8002490:	4b5a      	ldr	r3, [pc, #360]	@ (80025fc <HAL_ADC_Start+0x18c>)
 8002492:	4618      	mov	r0, r3
 8002494:	f7ff fd7e 	bl	8001f94 <LL_ADC_GetMultimode>
 8002498:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4618      	mov	r0, r3
 80024a0:	f7ff fe1e 	bl	80020e0 <LL_ADC_REG_IsConversionOngoing>
 80024a4:	4603      	mov	r3, r0
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	f040 809a 	bne.w	80025e0 <HAL_ADC_Start+0x170>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80024b2:	2b01      	cmp	r3, #1
 80024b4:	d101      	bne.n	80024ba <HAL_ADC_Start+0x4a>
 80024b6:	2302      	movs	r3, #2
 80024b8:	e095      	b.n	80025e6 <HAL_ADC_Start+0x176>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2201      	movs	r2, #1
 80024be:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80024c2:	6878      	ldr	r0, [r7, #4]
 80024c4:	f000 fcfc 	bl	8002ec0 <ADC_Enable>
 80024c8:	4603      	mov	r3, r0
 80024ca:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80024cc:	7dfb      	ldrb	r3, [r7, #23]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	f040 8081 	bne.w	80025d6 <HAL_ADC_Start+0x166>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80024d8:	4b49      	ldr	r3, [pc, #292]	@ (8002600 <HAL_ADC_Start+0x190>)
 80024da:	4013      	ands	r3, r2
 80024dc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a42      	ldr	r2, [pc, #264]	@ (80025f4 <HAL_ADC_Start+0x184>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d002      	beq.n	80024f4 <HAL_ADC_Start+0x84>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	e000      	b.n	80024f6 <HAL_ADC_Start+0x86>
 80024f4:	4b3e      	ldr	r3, [pc, #248]	@ (80025f0 <HAL_ADC_Start+0x180>)
 80024f6:	687a      	ldr	r2, [r7, #4]
 80024f8:	6812      	ldr	r2, [r2, #0]
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d002      	beq.n	8002504 <HAL_ADC_Start+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d105      	bne.n	8002510 <HAL_ADC_Start+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002508:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	655a      	str	r2, [r3, #84]	@ 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002514:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002518:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800251c:	d106      	bne.n	800252c <HAL_ADC_Start+0xbc>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002522:	f023 0206 	bic.w	r2, r3, #6
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	659a      	str	r2, [r3, #88]	@ 0x58
 800252a:	e002      	b.n	8002532 <HAL_ADC_Start+0xc2>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2200      	movs	r2, #0
 8002530:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	221c      	movs	r2, #28
 8002538:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2200      	movs	r2, #0
 800253e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4a2b      	ldr	r2, [pc, #172]	@ (80025f4 <HAL_ADC_Start+0x184>)
 8002548:	4293      	cmp	r3, r2
 800254a:	d002      	beq.n	8002552 <HAL_ADC_Start+0xe2>
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	e000      	b.n	8002554 <HAL_ADC_Start+0xe4>
 8002552:	4b27      	ldr	r3, [pc, #156]	@ (80025f0 <HAL_ADC_Start+0x180>)
 8002554:	687a      	ldr	r2, [r7, #4]
 8002556:	6812      	ldr	r2, [r2, #0]
 8002558:	4293      	cmp	r3, r2
 800255a:	d008      	beq.n	800256e <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800255c:	693b      	ldr	r3, [r7, #16]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d005      	beq.n	800256e <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002562:	693b      	ldr	r3, [r7, #16]
 8002564:	2b05      	cmp	r3, #5
 8002566:	d002      	beq.n	800256e <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002568:	693b      	ldr	r3, [r7, #16]
 800256a:	2b09      	cmp	r3, #9
 800256c:	d114      	bne.n	8002598 <HAL_ADC_Start+0x128>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	68db      	ldr	r3, [r3, #12]
 8002574:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002578:	2b00      	cmp	r3, #0
 800257a:	d007      	beq.n	800258c <HAL_ADC_Start+0x11c>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002580:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002584:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4618      	mov	r0, r3
 8002592:	f7ff fd91 	bl	80020b8 <LL_ADC_REG_StartConversion>
 8002596:	e025      	b.n	80025e4 <HAL_ADC_Start+0x174>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800259c:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	655a      	str	r2, [r3, #84]	@ 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a12      	ldr	r2, [pc, #72]	@ (80025f4 <HAL_ADC_Start+0x184>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d002      	beq.n	80025b4 <HAL_ADC_Start+0x144>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	e000      	b.n	80025b6 <HAL_ADC_Start+0x146>
 80025b4:	4b0e      	ldr	r3, [pc, #56]	@ (80025f0 <HAL_ADC_Start+0x180>)
 80025b6:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	68db      	ldr	r3, [r3, #12]
 80025bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d00f      	beq.n	80025e4 <HAL_ADC_Start+0x174>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025c8:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80025cc:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	655a      	str	r2, [r3, #84]	@ 0x54
 80025d4:	e006      	b.n	80025e4 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2200      	movs	r2, #0
 80025da:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 80025de:	e001      	b.n	80025e4 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80025e0:	2302      	movs	r3, #2
 80025e2:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80025e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80025e6:	4618      	mov	r0, r3
 80025e8:	3718      	adds	r7, #24
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}
 80025ee:	bf00      	nop
 80025f0:	40022000 	.word	0x40022000
 80025f4:	40022100 	.word	0x40022100
 80025f8:	40022300 	.word	0x40022300
 80025fc:	58026300 	.word	0x58026300
 8002600:	fffff0fe 	.word	0xfffff0fe

08002604 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b088      	sub	sp, #32
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
 800260c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4a72      	ldr	r2, [pc, #456]	@ (80027dc <HAL_ADC_PollForConversion+0x1d8>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d004      	beq.n	8002622 <HAL_ADC_PollForConversion+0x1e>
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a70      	ldr	r2, [pc, #448]	@ (80027e0 <HAL_ADC_PollForConversion+0x1dc>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d101      	bne.n	8002626 <HAL_ADC_PollForConversion+0x22>
 8002622:	4b70      	ldr	r3, [pc, #448]	@ (80027e4 <HAL_ADC_PollForConversion+0x1e0>)
 8002624:	e000      	b.n	8002628 <HAL_ADC_PollForConversion+0x24>
 8002626:	4b70      	ldr	r3, [pc, #448]	@ (80027e8 <HAL_ADC_PollForConversion+0x1e4>)
 8002628:	4618      	mov	r0, r3
 800262a:	f7ff fcb3 	bl	8001f94 <LL_ADC_GetMultimode>
 800262e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	691b      	ldr	r3, [r3, #16]
 8002634:	2b08      	cmp	r3, #8
 8002636:	d102      	bne.n	800263e <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8002638:	2308      	movs	r3, #8
 800263a:	61fb      	str	r3, [r7, #28]
 800263c:	e037      	b.n	80026ae <HAL_ADC_PollForConversion+0xaa>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800263e:	697b      	ldr	r3, [r7, #20]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d005      	beq.n	8002650 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	2b05      	cmp	r3, #5
 8002648:	d002      	beq.n	8002650 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800264a:	697b      	ldr	r3, [r7, #20]
 800264c:	2b09      	cmp	r3, #9
 800264e:	d111      	bne.n	8002674 <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	68db      	ldr	r3, [r3, #12]
 8002656:	f003 0301 	and.w	r3, r3, #1
 800265a:	2b00      	cmp	r3, #0
 800265c:	d007      	beq.n	800266e <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002662:	f043 0220 	orr.w	r2, r3, #32
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 800266a:	2301      	movs	r3, #1
 800266c:	e0b1      	b.n	80027d2 <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800266e:	2304      	movs	r3, #4
 8002670:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8002672:	e01c      	b.n	80026ae <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4a58      	ldr	r2, [pc, #352]	@ (80027dc <HAL_ADC_PollForConversion+0x1d8>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d004      	beq.n	8002688 <HAL_ADC_PollForConversion+0x84>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4a57      	ldr	r2, [pc, #348]	@ (80027e0 <HAL_ADC_PollForConversion+0x1dc>)
 8002684:	4293      	cmp	r3, r2
 8002686:	d101      	bne.n	800268c <HAL_ADC_PollForConversion+0x88>
 8002688:	4b56      	ldr	r3, [pc, #344]	@ (80027e4 <HAL_ADC_PollForConversion+0x1e0>)
 800268a:	e000      	b.n	800268e <HAL_ADC_PollForConversion+0x8a>
 800268c:	4b56      	ldr	r3, [pc, #344]	@ (80027e8 <HAL_ADC_PollForConversion+0x1e4>)
 800268e:	4618      	mov	r0, r3
 8002690:	f7ff fc8e 	bl	8001fb0 <LL_ADC_GetMultiDMATransfer>
 8002694:	4603      	mov	r3, r0
 8002696:	2b00      	cmp	r3, #0
 8002698:	d007      	beq.n	80026aa <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800269e:	f043 0220 	orr.w	r2, r3, #32
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 80026a6:	2301      	movs	r3, #1
 80026a8:	e093      	b.n	80027d2 <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80026aa:	2304      	movs	r3, #4
 80026ac:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80026ae:	f7ff fb1f 	bl	8001cf0 <HAL_GetTick>
 80026b2:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80026b4:	e021      	b.n	80026fa <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026bc:	d01d      	beq.n	80026fa <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80026be:	f7ff fb17 	bl	8001cf0 <HAL_GetTick>
 80026c2:	4602      	mov	r2, r0
 80026c4:	693b      	ldr	r3, [r7, #16]
 80026c6:	1ad3      	subs	r3, r2, r3
 80026c8:	683a      	ldr	r2, [r7, #0]
 80026ca:	429a      	cmp	r2, r3
 80026cc:	d302      	bcc.n	80026d4 <HAL_ADC_PollForConversion+0xd0>
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d112      	bne.n	80026fa <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	681a      	ldr	r2, [r3, #0]
 80026da:	69fb      	ldr	r3, [r7, #28]
 80026dc:	4013      	ands	r3, r2
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d10b      	bne.n	80026fa <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026e6:	f043 0204 	orr.w	r2, r3, #4
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2200      	movs	r2, #0
 80026f2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

          return HAL_TIMEOUT;
 80026f6:	2303      	movs	r3, #3
 80026f8:	e06b      	b.n	80027d2 <HAL_ADC_PollForConversion+0x1ce>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	681a      	ldr	r2, [r3, #0]
 8002700:	69fb      	ldr	r3, [r7, #28]
 8002702:	4013      	ands	r3, r2
 8002704:	2b00      	cmp	r3, #0
 8002706:	d0d6      	beq.n	80026b6 <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800270c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4618      	mov	r0, r3
 800271a:	f7ff fbad 	bl	8001e78 <LL_ADC_REG_IsTriggerSourceSWStart>
 800271e:	4603      	mov	r3, r0
 8002720:	2b00      	cmp	r3, #0
 8002722:	d01c      	beq.n	800275e <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	7d5b      	ldrb	r3, [r3, #21]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d118      	bne.n	800275e <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f003 0308 	and.w	r3, r3, #8
 8002736:	2b08      	cmp	r3, #8
 8002738:	d111      	bne.n	800275e <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800273e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	655a      	str	r2, [r3, #84]	@ 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800274a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800274e:	2b00      	cmp	r3, #0
 8002750:	d105      	bne.n	800275e <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002756:	f043 0201 	orr.w	r2, r3, #1
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4a1f      	ldr	r2, [pc, #124]	@ (80027e0 <HAL_ADC_PollForConversion+0x1dc>)
 8002764:	4293      	cmp	r3, r2
 8002766:	d002      	beq.n	800276e <HAL_ADC_PollForConversion+0x16a>
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	e000      	b.n	8002770 <HAL_ADC_PollForConversion+0x16c>
 800276e:	4b1b      	ldr	r3, [pc, #108]	@ (80027dc <HAL_ADC_PollForConversion+0x1d8>)
 8002770:	687a      	ldr	r2, [r7, #4]
 8002772:	6812      	ldr	r2, [r2, #0]
 8002774:	4293      	cmp	r3, r2
 8002776:	d008      	beq.n	800278a <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002778:	697b      	ldr	r3, [r7, #20]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d005      	beq.n	800278a <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800277e:	697b      	ldr	r3, [r7, #20]
 8002780:	2b05      	cmp	r3, #5
 8002782:	d002      	beq.n	800278a <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002784:	697b      	ldr	r3, [r7, #20]
 8002786:	2b09      	cmp	r3, #9
 8002788:	d104      	bne.n	8002794 <HAL_ADC_PollForConversion+0x190>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	68db      	ldr	r3, [r3, #12]
 8002790:	61bb      	str	r3, [r7, #24]
 8002792:	e00c      	b.n	80027ae <HAL_ADC_PollForConversion+0x1aa>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a11      	ldr	r2, [pc, #68]	@ (80027e0 <HAL_ADC_PollForConversion+0x1dc>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d002      	beq.n	80027a4 <HAL_ADC_PollForConversion+0x1a0>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	e000      	b.n	80027a6 <HAL_ADC_PollForConversion+0x1a2>
 80027a4:	4b0d      	ldr	r3, [pc, #52]	@ (80027dc <HAL_ADC_PollForConversion+0x1d8>)
 80027a6:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	68db      	ldr	r3, [r3, #12]
 80027ac:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80027ae:	69fb      	ldr	r3, [r7, #28]
 80027b0:	2b08      	cmp	r3, #8
 80027b2:	d104      	bne.n	80027be <HAL_ADC_PollForConversion+0x1ba>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	2208      	movs	r2, #8
 80027ba:	601a      	str	r2, [r3, #0]
 80027bc:	e008      	b.n	80027d0 <HAL_ADC_PollForConversion+0x1cc>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80027be:	69bb      	ldr	r3, [r7, #24]
 80027c0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d103      	bne.n	80027d0 <HAL_ADC_PollForConversion+0x1cc>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	220c      	movs	r2, #12
 80027ce:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80027d0:	2300      	movs	r3, #0
}
 80027d2:	4618      	mov	r0, r3
 80027d4:	3720      	adds	r7, #32
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}
 80027da:	bf00      	nop
 80027dc:	40022000 	.word	0x40022000
 80027e0:	40022100 	.word	0x40022100
 80027e4:	40022300 	.word	0x40022300
 80027e8:	58026300 	.word	0x58026300

080027ec <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80027ec:	b480      	push	{r7}
 80027ee:	b083      	sub	sp, #12
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 80027fa:	4618      	mov	r0, r3
 80027fc:	370c      	adds	r7, #12
 80027fe:	46bd      	mov	sp, r7
 8002800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002804:	4770      	bx	lr
	...

08002808 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002808:	b590      	push	{r4, r7, lr}
 800280a:	b0a1      	sub	sp, #132	@ 0x84
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
 8002810:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002812:	2300      	movs	r3, #0
 8002814:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002818:	2300      	movs	r3, #0
 800281a:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	68db      	ldr	r3, [r3, #12]
 8002820:	4a65      	ldr	r2, [pc, #404]	@ (80029b8 <HAL_ADC_ConfigChannel+0x1b0>)
 8002822:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800282a:	2b01      	cmp	r3, #1
 800282c:	d101      	bne.n	8002832 <HAL_ADC_ConfigChannel+0x2a>
 800282e:	2302      	movs	r3, #2
 8002830:	e32e      	b.n	8002e90 <HAL_ADC_ConfigChannel+0x688>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2201      	movs	r2, #1
 8002836:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4618      	mov	r0, r3
 8002840:	f7ff fc4e 	bl	80020e0 <LL_ADC_REG_IsConversionOngoing>
 8002844:	4603      	mov	r3, r0
 8002846:	2b00      	cmp	r3, #0
 8002848:	f040 8313 	bne.w	8002e72 <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	2b00      	cmp	r3, #0
 8002852:	db2c      	blt.n	80028ae <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800285c:	2b00      	cmp	r3, #0
 800285e:	d108      	bne.n	8002872 <HAL_ADC_ConfigChannel+0x6a>
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	0e9b      	lsrs	r3, r3, #26
 8002866:	f003 031f 	and.w	r3, r3, #31
 800286a:	2201      	movs	r2, #1
 800286c:	fa02 f303 	lsl.w	r3, r2, r3
 8002870:	e016      	b.n	80028a0 <HAL_ADC_ConfigChannel+0x98>
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	667b      	str	r3, [r7, #100]	@ 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002878:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800287a:	fa93 f3a3 	rbit	r3, r3
 800287e:	663b      	str	r3, [r7, #96]	@ 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002880:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002882:	66bb      	str	r3, [r7, #104]	@ 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002884:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002886:	2b00      	cmp	r3, #0
 8002888:	d101      	bne.n	800288e <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 800288a:	2320      	movs	r3, #32
 800288c:	e003      	b.n	8002896 <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 800288e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002890:	fab3 f383 	clz	r3, r3
 8002894:	b2db      	uxtb	r3, r3
 8002896:	f003 031f 	and.w	r3, r3, #31
 800289a:	2201      	movs	r2, #1
 800289c:	fa02 f303 	lsl.w	r3, r2, r3
 80028a0:	687a      	ldr	r2, [r7, #4]
 80028a2:	6812      	ldr	r2, [r2, #0]
 80028a4:	69d1      	ldr	r1, [r2, #28]
 80028a6:	687a      	ldr	r2, [r7, #4]
 80028a8:	6812      	ldr	r2, [r2, #0]
 80028aa:	430b      	orrs	r3, r1
 80028ac:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6818      	ldr	r0, [r3, #0]
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	6859      	ldr	r1, [r3, #4]
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	461a      	mov	r2, r3
 80028bc:	f7ff faef 	bl	8001e9e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4618      	mov	r0, r3
 80028c6:	f7ff fc0b 	bl	80020e0 <LL_ADC_REG_IsConversionOngoing>
 80028ca:	67b8      	str	r0, [r7, #120]	@ 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4618      	mov	r0, r3
 80028d2:	f7ff fc18 	bl	8002106 <LL_ADC_INJ_IsConversionOngoing>
 80028d6:	6778      	str	r0, [r7, #116]	@ 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80028d8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80028da:	2b00      	cmp	r3, #0
 80028dc:	f040 80b8 	bne.w	8002a50 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80028e0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	f040 80b4 	bne.w	8002a50 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6818      	ldr	r0, [r3, #0]
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	6819      	ldr	r1, [r3, #0]
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	689b      	ldr	r3, [r3, #8]
 80028f4:	461a      	mov	r2, r3
 80028f6:	f7ff fafe 	bl	8001ef6 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80028fa:	4b30      	ldr	r3, [pc, #192]	@ (80029bc <HAL_ADC_ConfigChannel+0x1b4>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8002902:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002906:	d10b      	bne.n	8002920 <HAL_ADC_ConfigChannel+0x118>
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	695a      	ldr	r2, [r3, #20]
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	68db      	ldr	r3, [r3, #12]
 8002912:	089b      	lsrs	r3, r3, #2
 8002914:	f003 0307 	and.w	r3, r3, #7
 8002918:	005b      	lsls	r3, r3, #1
 800291a:	fa02 f303 	lsl.w	r3, r2, r3
 800291e:	e01d      	b.n	800295c <HAL_ADC_ConfigChannel+0x154>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	68db      	ldr	r3, [r3, #12]
 8002926:	f003 0310 	and.w	r3, r3, #16
 800292a:	2b00      	cmp	r3, #0
 800292c:	d10b      	bne.n	8002946 <HAL_ADC_ConfigChannel+0x13e>
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	695a      	ldr	r2, [r3, #20]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	68db      	ldr	r3, [r3, #12]
 8002938:	089b      	lsrs	r3, r3, #2
 800293a:	f003 0307 	and.w	r3, r3, #7
 800293e:	005b      	lsls	r3, r3, #1
 8002940:	fa02 f303 	lsl.w	r3, r2, r3
 8002944:	e00a      	b.n	800295c <HAL_ADC_ConfigChannel+0x154>
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	695a      	ldr	r2, [r3, #20]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	68db      	ldr	r3, [r3, #12]
 8002950:	089b      	lsrs	r3, r3, #2
 8002952:	f003 0304 	and.w	r3, r3, #4
 8002956:	005b      	lsls	r3, r3, #1
 8002958:	fa02 f303 	lsl.w	r3, r2, r3
 800295c:	673b      	str	r3, [r7, #112]	@ 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	691b      	ldr	r3, [r3, #16]
 8002962:	2b04      	cmp	r3, #4
 8002964:	d02c      	beq.n	80029c0 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6818      	ldr	r0, [r3, #0]
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	6919      	ldr	r1, [r3, #16]
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	681a      	ldr	r2, [r3, #0]
 8002972:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002974:	f7ff fa2c 	bl	8001dd0 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6818      	ldr	r0, [r3, #0]
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	6919      	ldr	r1, [r3, #16]
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	7e5b      	ldrb	r3, [r3, #25]
 8002984:	2b01      	cmp	r3, #1
 8002986:	d102      	bne.n	800298e <HAL_ADC_ConfigChannel+0x186>
 8002988:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800298c:	e000      	b.n	8002990 <HAL_ADC_ConfigChannel+0x188>
 800298e:	2300      	movs	r3, #0
 8002990:	461a      	mov	r2, r3
 8002992:	f7ff fa56 	bl	8001e42 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6818      	ldr	r0, [r3, #0]
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	6919      	ldr	r1, [r3, #16]
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	7e1b      	ldrb	r3, [r3, #24]
 80029a2:	2b01      	cmp	r3, #1
 80029a4:	d102      	bne.n	80029ac <HAL_ADC_ConfigChannel+0x1a4>
 80029a6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80029aa:	e000      	b.n	80029ae <HAL_ADC_ConfigChannel+0x1a6>
 80029ac:	2300      	movs	r3, #0
 80029ae:	461a      	mov	r2, r3
 80029b0:	f7ff fa2e 	bl	8001e10 <LL_ADC_SetDataRightShift>
 80029b4:	e04c      	b.n	8002a50 <HAL_ADC_ConfigChannel+0x248>
 80029b6:	bf00      	nop
 80029b8:	47ff0000 	.word	0x47ff0000
 80029bc:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029c6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	069b      	lsls	r3, r3, #26
 80029d0:	429a      	cmp	r2, r3
 80029d2:	d107      	bne.n	80029e4 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80029e2:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80029ea:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	069b      	lsls	r3, r3, #26
 80029f4:	429a      	cmp	r2, r3
 80029f6:	d107      	bne.n	8002a08 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002a06:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002a0e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	069b      	lsls	r3, r3, #26
 8002a18:	429a      	cmp	r2, r3
 8002a1a:	d107      	bne.n	8002a2c <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002a2a:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002a32:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	069b      	lsls	r3, r3, #26
 8002a3c:	429a      	cmp	r2, r3
 8002a3e:	d107      	bne.n	8002a50 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002a4e:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4618      	mov	r0, r3
 8002a56:	f7ff fb1b 	bl	8002090 <LL_ADC_IsEnabled>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	f040 8211 	bne.w	8002e84 <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6818      	ldr	r0, [r3, #0]
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	6819      	ldr	r1, [r3, #0]
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	68db      	ldr	r3, [r3, #12]
 8002a6e:	461a      	mov	r2, r3
 8002a70:	f7ff fa6c 	bl	8001f4c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	68db      	ldr	r3, [r3, #12]
 8002a78:	4aa1      	ldr	r2, [pc, #644]	@ (8002d00 <HAL_ADC_ConfigChannel+0x4f8>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	f040 812e 	bne.w	8002cdc <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d10b      	bne.n	8002aa8 <HAL_ADC_ConfigChannel+0x2a0>
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	0e9b      	lsrs	r3, r3, #26
 8002a96:	3301      	adds	r3, #1
 8002a98:	f003 031f 	and.w	r3, r3, #31
 8002a9c:	2b09      	cmp	r3, #9
 8002a9e:	bf94      	ite	ls
 8002aa0:	2301      	movls	r3, #1
 8002aa2:	2300      	movhi	r3, #0
 8002aa4:	b2db      	uxtb	r3, r3
 8002aa6:	e019      	b.n	8002adc <HAL_ADC_ConfigChannel+0x2d4>
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aae:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002ab0:	fa93 f3a3 	rbit	r3, r3
 8002ab4:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8002ab6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ab8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8002aba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d101      	bne.n	8002ac4 <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 8002ac0:	2320      	movs	r3, #32
 8002ac2:	e003      	b.n	8002acc <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 8002ac4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002ac6:	fab3 f383 	clz	r3, r3
 8002aca:	b2db      	uxtb	r3, r3
 8002acc:	3301      	adds	r3, #1
 8002ace:	f003 031f 	and.w	r3, r3, #31
 8002ad2:	2b09      	cmp	r3, #9
 8002ad4:	bf94      	ite	ls
 8002ad6:	2301      	movls	r3, #1
 8002ad8:	2300      	movhi	r3, #0
 8002ada:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d079      	beq.n	8002bd4 <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d107      	bne.n	8002afc <HAL_ADC_ConfigChannel+0x2f4>
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	0e9b      	lsrs	r3, r3, #26
 8002af2:	3301      	adds	r3, #1
 8002af4:	069b      	lsls	r3, r3, #26
 8002af6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002afa:	e015      	b.n	8002b28 <HAL_ADC_ConfigChannel+0x320>
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b02:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002b04:	fa93 f3a3 	rbit	r3, r3
 8002b08:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8002b0a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002b0c:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8002b0e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d101      	bne.n	8002b18 <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 8002b14:	2320      	movs	r3, #32
 8002b16:	e003      	b.n	8002b20 <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 8002b18:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002b1a:	fab3 f383 	clz	r3, r3
 8002b1e:	b2db      	uxtb	r3, r3
 8002b20:	3301      	adds	r3, #1
 8002b22:	069b      	lsls	r3, r3, #26
 8002b24:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d109      	bne.n	8002b48 <HAL_ADC_ConfigChannel+0x340>
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	0e9b      	lsrs	r3, r3, #26
 8002b3a:	3301      	adds	r3, #1
 8002b3c:	f003 031f 	and.w	r3, r3, #31
 8002b40:	2101      	movs	r1, #1
 8002b42:	fa01 f303 	lsl.w	r3, r1, r3
 8002b46:	e017      	b.n	8002b78 <HAL_ADC_ConfigChannel+0x370>
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b4e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002b50:	fa93 f3a3 	rbit	r3, r3
 8002b54:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8002b56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002b58:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8002b5a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d101      	bne.n	8002b64 <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 8002b60:	2320      	movs	r3, #32
 8002b62:	e003      	b.n	8002b6c <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 8002b64:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002b66:	fab3 f383 	clz	r3, r3
 8002b6a:	b2db      	uxtb	r3, r3
 8002b6c:	3301      	adds	r3, #1
 8002b6e:	f003 031f 	and.w	r3, r3, #31
 8002b72:	2101      	movs	r1, #1
 8002b74:	fa01 f303 	lsl.w	r3, r1, r3
 8002b78:	ea42 0103 	orr.w	r1, r2, r3
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d10a      	bne.n	8002b9e <HAL_ADC_ConfigChannel+0x396>
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	0e9b      	lsrs	r3, r3, #26
 8002b8e:	3301      	adds	r3, #1
 8002b90:	f003 021f 	and.w	r2, r3, #31
 8002b94:	4613      	mov	r3, r2
 8002b96:	005b      	lsls	r3, r3, #1
 8002b98:	4413      	add	r3, r2
 8002b9a:	051b      	lsls	r3, r3, #20
 8002b9c:	e018      	b.n	8002bd0 <HAL_ADC_ConfigChannel+0x3c8>
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ba4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ba6:	fa93 f3a3 	rbit	r3, r3
 8002baa:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8002bac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bae:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8002bb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d101      	bne.n	8002bba <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 8002bb6:	2320      	movs	r3, #32
 8002bb8:	e003      	b.n	8002bc2 <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 8002bba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002bbc:	fab3 f383 	clz	r3, r3
 8002bc0:	b2db      	uxtb	r3, r3
 8002bc2:	3301      	adds	r3, #1
 8002bc4:	f003 021f 	and.w	r2, r3, #31
 8002bc8:	4613      	mov	r3, r2
 8002bca:	005b      	lsls	r3, r3, #1
 8002bcc:	4413      	add	r3, r2
 8002bce:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002bd0:	430b      	orrs	r3, r1
 8002bd2:	e07e      	b.n	8002cd2 <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d107      	bne.n	8002bf0 <HAL_ADC_ConfigChannel+0x3e8>
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	0e9b      	lsrs	r3, r3, #26
 8002be6:	3301      	adds	r3, #1
 8002be8:	069b      	lsls	r3, r3, #26
 8002bea:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002bee:	e015      	b.n	8002c1c <HAL_ADC_ConfigChannel+0x414>
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bf6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bf8:	fa93 f3a3 	rbit	r3, r3
 8002bfc:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8002bfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c00:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8002c02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d101      	bne.n	8002c0c <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 8002c08:	2320      	movs	r3, #32
 8002c0a:	e003      	b.n	8002c14 <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 8002c0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c0e:	fab3 f383 	clz	r3, r3
 8002c12:	b2db      	uxtb	r3, r3
 8002c14:	3301      	adds	r3, #1
 8002c16:	069b      	lsls	r3, r3, #26
 8002c18:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d109      	bne.n	8002c3c <HAL_ADC_ConfigChannel+0x434>
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	0e9b      	lsrs	r3, r3, #26
 8002c2e:	3301      	adds	r3, #1
 8002c30:	f003 031f 	and.w	r3, r3, #31
 8002c34:	2101      	movs	r1, #1
 8002c36:	fa01 f303 	lsl.w	r3, r1, r3
 8002c3a:	e017      	b.n	8002c6c <HAL_ADC_ConfigChannel+0x464>
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c42:	69fb      	ldr	r3, [r7, #28]
 8002c44:	fa93 f3a3 	rbit	r3, r3
 8002c48:	61bb      	str	r3, [r7, #24]
  return result;
 8002c4a:	69bb      	ldr	r3, [r7, #24]
 8002c4c:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002c4e:	6a3b      	ldr	r3, [r7, #32]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d101      	bne.n	8002c58 <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 8002c54:	2320      	movs	r3, #32
 8002c56:	e003      	b.n	8002c60 <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 8002c58:	6a3b      	ldr	r3, [r7, #32]
 8002c5a:	fab3 f383 	clz	r3, r3
 8002c5e:	b2db      	uxtb	r3, r3
 8002c60:	3301      	adds	r3, #1
 8002c62:	f003 031f 	and.w	r3, r3, #31
 8002c66:	2101      	movs	r1, #1
 8002c68:	fa01 f303 	lsl.w	r3, r1, r3
 8002c6c:	ea42 0103 	orr.w	r1, r2, r3
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d10d      	bne.n	8002c98 <HAL_ADC_ConfigChannel+0x490>
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	0e9b      	lsrs	r3, r3, #26
 8002c82:	3301      	adds	r3, #1
 8002c84:	f003 021f 	and.w	r2, r3, #31
 8002c88:	4613      	mov	r3, r2
 8002c8a:	005b      	lsls	r3, r3, #1
 8002c8c:	4413      	add	r3, r2
 8002c8e:	3b1e      	subs	r3, #30
 8002c90:	051b      	lsls	r3, r3, #20
 8002c92:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002c96:	e01b      	b.n	8002cd0 <HAL_ADC_ConfigChannel+0x4c8>
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c9e:	693b      	ldr	r3, [r7, #16]
 8002ca0:	fa93 f3a3 	rbit	r3, r3
 8002ca4:	60fb      	str	r3, [r7, #12]
  return result;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d101      	bne.n	8002cb4 <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 8002cb0:	2320      	movs	r3, #32
 8002cb2:	e003      	b.n	8002cbc <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 8002cb4:	697b      	ldr	r3, [r7, #20]
 8002cb6:	fab3 f383 	clz	r3, r3
 8002cba:	b2db      	uxtb	r3, r3
 8002cbc:	3301      	adds	r3, #1
 8002cbe:	f003 021f 	and.w	r2, r3, #31
 8002cc2:	4613      	mov	r3, r2
 8002cc4:	005b      	lsls	r3, r3, #1
 8002cc6:	4413      	add	r3, r2
 8002cc8:	3b1e      	subs	r3, #30
 8002cca:	051b      	lsls	r3, r3, #20
 8002ccc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002cd0:	430b      	orrs	r3, r1
 8002cd2:	683a      	ldr	r2, [r7, #0]
 8002cd4:	6892      	ldr	r2, [r2, #8]
 8002cd6:	4619      	mov	r1, r3
 8002cd8:	f7ff f90d 	bl	8001ef6 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	f280 80cf 	bge.w	8002e84 <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4a06      	ldr	r2, [pc, #24]	@ (8002d04 <HAL_ADC_ConfigChannel+0x4fc>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d004      	beq.n	8002cfa <HAL_ADC_ConfigChannel+0x4f2>
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a04      	ldr	r2, [pc, #16]	@ (8002d08 <HAL_ADC_ConfigChannel+0x500>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d10a      	bne.n	8002d10 <HAL_ADC_ConfigChannel+0x508>
 8002cfa:	4b04      	ldr	r3, [pc, #16]	@ (8002d0c <HAL_ADC_ConfigChannel+0x504>)
 8002cfc:	e009      	b.n	8002d12 <HAL_ADC_ConfigChannel+0x50a>
 8002cfe:	bf00      	nop
 8002d00:	47ff0000 	.word	0x47ff0000
 8002d04:	40022000 	.word	0x40022000
 8002d08:	40022100 	.word	0x40022100
 8002d0c:	40022300 	.word	0x40022300
 8002d10:	4b61      	ldr	r3, [pc, #388]	@ (8002e98 <HAL_ADC_ConfigChannel+0x690>)
 8002d12:	4618      	mov	r0, r3
 8002d14:	f7ff f84e 	bl	8001db4 <LL_ADC_GetCommonPathInternalCh>
 8002d18:	66f8      	str	r0, [r7, #108]	@ 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4a5f      	ldr	r2, [pc, #380]	@ (8002e9c <HAL_ADC_ConfigChannel+0x694>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d004      	beq.n	8002d2e <HAL_ADC_ConfigChannel+0x526>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a5d      	ldr	r2, [pc, #372]	@ (8002ea0 <HAL_ADC_ConfigChannel+0x698>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d10e      	bne.n	8002d4c <HAL_ADC_ConfigChannel+0x544>
 8002d2e:	485b      	ldr	r0, [pc, #364]	@ (8002e9c <HAL_ADC_ConfigChannel+0x694>)
 8002d30:	f7ff f9ae 	bl	8002090 <LL_ADC_IsEnabled>
 8002d34:	4604      	mov	r4, r0
 8002d36:	485a      	ldr	r0, [pc, #360]	@ (8002ea0 <HAL_ADC_ConfigChannel+0x698>)
 8002d38:	f7ff f9aa 	bl	8002090 <LL_ADC_IsEnabled>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	4323      	orrs	r3, r4
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	bf0c      	ite	eq
 8002d44:	2301      	moveq	r3, #1
 8002d46:	2300      	movne	r3, #0
 8002d48:	b2db      	uxtb	r3, r3
 8002d4a:	e008      	b.n	8002d5e <HAL_ADC_ConfigChannel+0x556>
 8002d4c:	4855      	ldr	r0, [pc, #340]	@ (8002ea4 <HAL_ADC_ConfigChannel+0x69c>)
 8002d4e:	f7ff f99f 	bl	8002090 <LL_ADC_IsEnabled>
 8002d52:	4603      	mov	r3, r0
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	bf0c      	ite	eq
 8002d58:	2301      	moveq	r3, #1
 8002d5a:	2300      	movne	r3, #0
 8002d5c:	b2db      	uxtb	r3, r3
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d07d      	beq.n	8002e5e <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4a50      	ldr	r2, [pc, #320]	@ (8002ea8 <HAL_ADC_ConfigChannel+0x6a0>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d130      	bne.n	8002dce <HAL_ADC_ConfigChannel+0x5c6>
 8002d6c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002d6e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d12b      	bne.n	8002dce <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4a4a      	ldr	r2, [pc, #296]	@ (8002ea4 <HAL_ADC_ConfigChannel+0x69c>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	f040 8081 	bne.w	8002e84 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a45      	ldr	r2, [pc, #276]	@ (8002e9c <HAL_ADC_ConfigChannel+0x694>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d004      	beq.n	8002d96 <HAL_ADC_ConfigChannel+0x58e>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a43      	ldr	r2, [pc, #268]	@ (8002ea0 <HAL_ADC_ConfigChannel+0x698>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d101      	bne.n	8002d9a <HAL_ADC_ConfigChannel+0x592>
 8002d96:	4a45      	ldr	r2, [pc, #276]	@ (8002eac <HAL_ADC_ConfigChannel+0x6a4>)
 8002d98:	e000      	b.n	8002d9c <HAL_ADC_ConfigChannel+0x594>
 8002d9a:	4a3f      	ldr	r2, [pc, #252]	@ (8002e98 <HAL_ADC_ConfigChannel+0x690>)
 8002d9c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002d9e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002da2:	4619      	mov	r1, r3
 8002da4:	4610      	mov	r0, r2
 8002da6:	f7fe fff2 	bl	8001d8e <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002daa:	4b41      	ldr	r3, [pc, #260]	@ (8002eb0 <HAL_ADC_ConfigChannel+0x6a8>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	099b      	lsrs	r3, r3, #6
 8002db0:	4a40      	ldr	r2, [pc, #256]	@ (8002eb4 <HAL_ADC_ConfigChannel+0x6ac>)
 8002db2:	fba2 2303 	umull	r2, r3, r2, r3
 8002db6:	099b      	lsrs	r3, r3, #6
 8002db8:	3301      	adds	r3, #1
 8002dba:	005b      	lsls	r3, r3, #1
 8002dbc:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002dbe:	e002      	b.n	8002dc6 <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	3b01      	subs	r3, #1
 8002dc4:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002dc6:	68bb      	ldr	r3, [r7, #8]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d1f9      	bne.n	8002dc0 <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002dcc:	e05a      	b.n	8002e84 <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4a39      	ldr	r2, [pc, #228]	@ (8002eb8 <HAL_ADC_ConfigChannel+0x6b0>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d11e      	bne.n	8002e16 <HAL_ADC_ConfigChannel+0x60e>
 8002dd8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002dda:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d119      	bne.n	8002e16 <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4a2f      	ldr	r2, [pc, #188]	@ (8002ea4 <HAL_ADC_ConfigChannel+0x69c>)
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d14b      	bne.n	8002e84 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a2a      	ldr	r2, [pc, #168]	@ (8002e9c <HAL_ADC_ConfigChannel+0x694>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d004      	beq.n	8002e00 <HAL_ADC_ConfigChannel+0x5f8>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a29      	ldr	r2, [pc, #164]	@ (8002ea0 <HAL_ADC_ConfigChannel+0x698>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d101      	bne.n	8002e04 <HAL_ADC_ConfigChannel+0x5fc>
 8002e00:	4a2a      	ldr	r2, [pc, #168]	@ (8002eac <HAL_ADC_ConfigChannel+0x6a4>)
 8002e02:	e000      	b.n	8002e06 <HAL_ADC_ConfigChannel+0x5fe>
 8002e04:	4a24      	ldr	r2, [pc, #144]	@ (8002e98 <HAL_ADC_ConfigChannel+0x690>)
 8002e06:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002e08:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002e0c:	4619      	mov	r1, r3
 8002e0e:	4610      	mov	r0, r2
 8002e10:	f7fe ffbd 	bl	8001d8e <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002e14:	e036      	b.n	8002e84 <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4a28      	ldr	r2, [pc, #160]	@ (8002ebc <HAL_ADC_ConfigChannel+0x6b4>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d131      	bne.n	8002e84 <HAL_ADC_ConfigChannel+0x67c>
 8002e20:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002e22:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d12c      	bne.n	8002e84 <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4a1d      	ldr	r2, [pc, #116]	@ (8002ea4 <HAL_ADC_ConfigChannel+0x69c>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d127      	bne.n	8002e84 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a18      	ldr	r2, [pc, #96]	@ (8002e9c <HAL_ADC_ConfigChannel+0x694>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d004      	beq.n	8002e48 <HAL_ADC_ConfigChannel+0x640>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4a17      	ldr	r2, [pc, #92]	@ (8002ea0 <HAL_ADC_ConfigChannel+0x698>)
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d101      	bne.n	8002e4c <HAL_ADC_ConfigChannel+0x644>
 8002e48:	4a18      	ldr	r2, [pc, #96]	@ (8002eac <HAL_ADC_ConfigChannel+0x6a4>)
 8002e4a:	e000      	b.n	8002e4e <HAL_ADC_ConfigChannel+0x646>
 8002e4c:	4a12      	ldr	r2, [pc, #72]	@ (8002e98 <HAL_ADC_ConfigChannel+0x690>)
 8002e4e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002e50:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002e54:	4619      	mov	r1, r3
 8002e56:	4610      	mov	r0, r2
 8002e58:	f7fe ff99 	bl	8001d8e <LL_ADC_SetCommonPathInternalCh>
 8002e5c:	e012      	b.n	8002e84 <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e62:	f043 0220 	orr.w	r2, r3, #32
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8002e70:	e008      	b.n	8002e84 <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e76:	f043 0220 	orr.w	r2, r3, #32
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2200      	movs	r2, #0
 8002e88:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002e8c:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8002e90:	4618      	mov	r0, r3
 8002e92:	3784      	adds	r7, #132	@ 0x84
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bd90      	pop	{r4, r7, pc}
 8002e98:	58026300 	.word	0x58026300
 8002e9c:	40022000 	.word	0x40022000
 8002ea0:	40022100 	.word	0x40022100
 8002ea4:	58026000 	.word	0x58026000
 8002ea8:	cb840000 	.word	0xcb840000
 8002eac:	40022300 	.word	0x40022300
 8002eb0:	24000000 	.word	0x24000000
 8002eb4:	053e2d63 	.word	0x053e2d63
 8002eb8:	c7520000 	.word	0xc7520000
 8002ebc:	cfb80000 	.word	0xcfb80000

08002ec0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b084      	sub	sp, #16
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4618      	mov	r0, r3
 8002ece:	f7ff f8df 	bl	8002090 <LL_ADC_IsEnabled>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d16e      	bne.n	8002fb6 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	689a      	ldr	r2, [r3, #8]
 8002ede:	4b38      	ldr	r3, [pc, #224]	@ (8002fc0 <ADC_Enable+0x100>)
 8002ee0:	4013      	ands	r3, r2
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d00d      	beq.n	8002f02 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002eea:	f043 0210 	orr.w	r2, r3, #16
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ef6:	f043 0201 	orr.w	r2, r3, #1
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8002efe:	2301      	movs	r3, #1
 8002f00:	e05a      	b.n	8002fb8 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4618      	mov	r0, r3
 8002f08:	f7ff f8ae 	bl	8002068 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002f0c:	f7fe fef0 	bl	8001cf0 <HAL_GetTick>
 8002f10:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4a2b      	ldr	r2, [pc, #172]	@ (8002fc4 <ADC_Enable+0x104>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d004      	beq.n	8002f26 <ADC_Enable+0x66>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a29      	ldr	r2, [pc, #164]	@ (8002fc8 <ADC_Enable+0x108>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d101      	bne.n	8002f2a <ADC_Enable+0x6a>
 8002f26:	4b29      	ldr	r3, [pc, #164]	@ (8002fcc <ADC_Enable+0x10c>)
 8002f28:	e000      	b.n	8002f2c <ADC_Enable+0x6c>
 8002f2a:	4b29      	ldr	r3, [pc, #164]	@ (8002fd0 <ADC_Enable+0x110>)
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	f7ff f831 	bl	8001f94 <LL_ADC_GetMultimode>
 8002f32:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a23      	ldr	r2, [pc, #140]	@ (8002fc8 <ADC_Enable+0x108>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d002      	beq.n	8002f44 <ADC_Enable+0x84>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	e000      	b.n	8002f46 <ADC_Enable+0x86>
 8002f44:	4b1f      	ldr	r3, [pc, #124]	@ (8002fc4 <ADC_Enable+0x104>)
 8002f46:	687a      	ldr	r2, [r7, #4]
 8002f48:	6812      	ldr	r2, [r2, #0]
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d02c      	beq.n	8002fa8 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002f4e:	68bb      	ldr	r3, [r7, #8]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d130      	bne.n	8002fb6 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002f54:	e028      	b.n	8002fa8 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	f7ff f898 	bl	8002090 <LL_ADC_IsEnabled>
 8002f60:	4603      	mov	r3, r0
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d104      	bne.n	8002f70 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	f7ff f87c 	bl	8002068 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002f70:	f7fe febe 	bl	8001cf0 <HAL_GetTick>
 8002f74:	4602      	mov	r2, r0
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	1ad3      	subs	r3, r2, r3
 8002f7a:	2b02      	cmp	r3, #2
 8002f7c:	d914      	bls.n	8002fa8 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f003 0301 	and.w	r3, r3, #1
 8002f88:	2b01      	cmp	r3, #1
 8002f8a:	d00d      	beq.n	8002fa8 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f90:	f043 0210 	orr.w	r2, r3, #16
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f9c:	f043 0201 	orr.w	r2, r3, #1
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	659a      	str	r2, [r3, #88]	@ 0x58

            return HAL_ERROR;
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	e007      	b.n	8002fb8 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f003 0301 	and.w	r3, r3, #1
 8002fb2:	2b01      	cmp	r3, #1
 8002fb4:	d1cf      	bne.n	8002f56 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002fb6:	2300      	movs	r3, #0
}
 8002fb8:	4618      	mov	r0, r3
 8002fba:	3710      	adds	r7, #16
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bd80      	pop	{r7, pc}
 8002fc0:	8000003f 	.word	0x8000003f
 8002fc4:	40022000 	.word	0x40022000
 8002fc8:	40022100 	.word	0x40022100
 8002fcc:	40022300 	.word	0x40022300
 8002fd0:	58026300 	.word	0x58026300

08002fd4 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b084      	sub	sp, #16
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a7a      	ldr	r2, [pc, #488]	@ (80031cc <ADC_ConfigureBoostMode+0x1f8>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d004      	beq.n	8002ff0 <ADC_ConfigureBoostMode+0x1c>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4a79      	ldr	r2, [pc, #484]	@ (80031d0 <ADC_ConfigureBoostMode+0x1fc>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d109      	bne.n	8003004 <ADC_ConfigureBoostMode+0x30>
 8002ff0:	4b78      	ldr	r3, [pc, #480]	@ (80031d4 <ADC_ConfigureBoostMode+0x200>)
 8002ff2:	689b      	ldr	r3, [r3, #8]
 8002ff4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	bf14      	ite	ne
 8002ffc:	2301      	movne	r3, #1
 8002ffe:	2300      	moveq	r3, #0
 8003000:	b2db      	uxtb	r3, r3
 8003002:	e008      	b.n	8003016 <ADC_ConfigureBoostMode+0x42>
 8003004:	4b74      	ldr	r3, [pc, #464]	@ (80031d8 <ADC_ConfigureBoostMode+0x204>)
 8003006:	689b      	ldr	r3, [r3, #8]
 8003008:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800300c:	2b00      	cmp	r3, #0
 800300e:	bf14      	ite	ne
 8003010:	2301      	movne	r3, #1
 8003012:	2300      	moveq	r3, #0
 8003014:	b2db      	uxtb	r3, r3
 8003016:	2b00      	cmp	r3, #0
 8003018:	d01c      	beq.n	8003054 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800301a:	f004 fb49 	bl	80076b0 <HAL_RCC_GetHCLKFreq>
 800301e:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003028:	d010      	beq.n	800304c <ADC_ConfigureBoostMode+0x78>
 800302a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800302e:	d873      	bhi.n	8003118 <ADC_ConfigureBoostMode+0x144>
 8003030:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003034:	d002      	beq.n	800303c <ADC_ConfigureBoostMode+0x68>
 8003036:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800303a:	d16d      	bne.n	8003118 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	0c1b      	lsrs	r3, r3, #16
 8003042:	68fa      	ldr	r2, [r7, #12]
 8003044:	fbb2 f3f3 	udiv	r3, r2, r3
 8003048:	60fb      	str	r3, [r7, #12]
        break;
 800304a:	e068      	b.n	800311e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	089b      	lsrs	r3, r3, #2
 8003050:	60fb      	str	r3, [r7, #12]
        break;
 8003052:	e064      	b.n	800311e <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8003054:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8003058:	f04f 0100 	mov.w	r1, #0
 800305c:	f005 fd8e 	bl	8008b7c <HAL_RCCEx_GetPeriphCLKFreq>
 8003060:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 800306a:	d051      	beq.n	8003110 <ADC_ConfigureBoostMode+0x13c>
 800306c:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8003070:	d854      	bhi.n	800311c <ADC_ConfigureBoostMode+0x148>
 8003072:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8003076:	d047      	beq.n	8003108 <ADC_ConfigureBoostMode+0x134>
 8003078:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 800307c:	d84e      	bhi.n	800311c <ADC_ConfigureBoostMode+0x148>
 800307e:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8003082:	d03d      	beq.n	8003100 <ADC_ConfigureBoostMode+0x12c>
 8003084:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8003088:	d848      	bhi.n	800311c <ADC_ConfigureBoostMode+0x148>
 800308a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800308e:	d033      	beq.n	80030f8 <ADC_ConfigureBoostMode+0x124>
 8003090:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003094:	d842      	bhi.n	800311c <ADC_ConfigureBoostMode+0x148>
 8003096:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 800309a:	d029      	beq.n	80030f0 <ADC_ConfigureBoostMode+0x11c>
 800309c:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 80030a0:	d83c      	bhi.n	800311c <ADC_ConfigureBoostMode+0x148>
 80030a2:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80030a6:	d01a      	beq.n	80030de <ADC_ConfigureBoostMode+0x10a>
 80030a8:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80030ac:	d836      	bhi.n	800311c <ADC_ConfigureBoostMode+0x148>
 80030ae:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80030b2:	d014      	beq.n	80030de <ADC_ConfigureBoostMode+0x10a>
 80030b4:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80030b8:	d830      	bhi.n	800311c <ADC_ConfigureBoostMode+0x148>
 80030ba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80030be:	d00e      	beq.n	80030de <ADC_ConfigureBoostMode+0x10a>
 80030c0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80030c4:	d82a      	bhi.n	800311c <ADC_ConfigureBoostMode+0x148>
 80030c6:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80030ca:	d008      	beq.n	80030de <ADC_ConfigureBoostMode+0x10a>
 80030cc:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80030d0:	d824      	bhi.n	800311c <ADC_ConfigureBoostMode+0x148>
 80030d2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80030d6:	d002      	beq.n	80030de <ADC_ConfigureBoostMode+0x10a>
 80030d8:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80030dc:	d11e      	bne.n	800311c <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	0c9b      	lsrs	r3, r3, #18
 80030e4:	005b      	lsls	r3, r3, #1
 80030e6:	68fa      	ldr	r2, [r7, #12]
 80030e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80030ec:	60fb      	str	r3, [r7, #12]
        break;
 80030ee:	e016      	b.n	800311e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	091b      	lsrs	r3, r3, #4
 80030f4:	60fb      	str	r3, [r7, #12]
        break;
 80030f6:	e012      	b.n	800311e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	095b      	lsrs	r3, r3, #5
 80030fc:	60fb      	str	r3, [r7, #12]
        break;
 80030fe:	e00e      	b.n	800311e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	099b      	lsrs	r3, r3, #6
 8003104:	60fb      	str	r3, [r7, #12]
        break;
 8003106:	e00a      	b.n	800311e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	09db      	lsrs	r3, r3, #7
 800310c:	60fb      	str	r3, [r7, #12]
        break;
 800310e:	e006      	b.n	800311e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	0a1b      	lsrs	r3, r3, #8
 8003114:	60fb      	str	r3, [r7, #12]
        break;
 8003116:	e002      	b.n	800311e <ADC_ConfigureBoostMode+0x14a>
        break;
 8003118:	bf00      	nop
 800311a:	e000      	b.n	800311e <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 800311c:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 800311e:	f7fe fe17 	bl	8001d50 <HAL_GetREVID>
 8003122:	4603      	mov	r3, r0
 8003124:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003128:	4293      	cmp	r3, r2
 800312a:	d815      	bhi.n	8003158 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	4a2b      	ldr	r2, [pc, #172]	@ (80031dc <ADC_ConfigureBoostMode+0x208>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d908      	bls.n	8003146 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	689a      	ldr	r2, [r3, #8]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003142:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8003144:	e03e      	b.n	80031c4 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	689a      	ldr	r2, [r3, #8]
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003154:	609a      	str	r2, [r3, #8]
}
 8003156:	e035      	b.n	80031c4 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	085b      	lsrs	r3, r3, #1
 800315c:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	4a1f      	ldr	r2, [pc, #124]	@ (80031e0 <ADC_ConfigureBoostMode+0x20c>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d808      	bhi.n	8003178 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	689a      	ldr	r2, [r3, #8]
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8003174:	609a      	str	r2, [r3, #8]
}
 8003176:	e025      	b.n	80031c4 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	4a1a      	ldr	r2, [pc, #104]	@ (80031e4 <ADC_ConfigureBoostMode+0x210>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d80a      	bhi.n	8003196 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	689b      	ldr	r3, [r3, #8]
 8003186:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003192:	609a      	str	r2, [r3, #8]
}
 8003194:	e016      	b.n	80031c4 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	4a13      	ldr	r2, [pc, #76]	@ (80031e8 <ADC_ConfigureBoostMode+0x214>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d80a      	bhi.n	80031b4 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	689b      	ldr	r3, [r3, #8]
 80031a4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80031b0:	609a      	str	r2, [r3, #8]
}
 80031b2:	e007      	b.n	80031c4 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	689a      	ldr	r2, [r3, #8]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 80031c2:	609a      	str	r2, [r3, #8]
}
 80031c4:	bf00      	nop
 80031c6:	3710      	adds	r7, #16
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bd80      	pop	{r7, pc}
 80031cc:	40022000 	.word	0x40022000
 80031d0:	40022100 	.word	0x40022100
 80031d4:	40022300 	.word	0x40022300
 80031d8:	58026300 	.word	0x58026300
 80031dc:	01312d00 	.word	0x01312d00
 80031e0:	005f5e10 	.word	0x005f5e10
 80031e4:	00bebc20 	.word	0x00bebc20
 80031e8:	017d7840 	.word	0x017d7840

080031ec <LL_ADC_IsEnabled>:
{
 80031ec:	b480      	push	{r7}
 80031ee:	b083      	sub	sp, #12
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	689b      	ldr	r3, [r3, #8]
 80031f8:	f003 0301 	and.w	r3, r3, #1
 80031fc:	2b01      	cmp	r3, #1
 80031fe:	d101      	bne.n	8003204 <LL_ADC_IsEnabled+0x18>
 8003200:	2301      	movs	r3, #1
 8003202:	e000      	b.n	8003206 <LL_ADC_IsEnabled+0x1a>
 8003204:	2300      	movs	r3, #0
}
 8003206:	4618      	mov	r0, r3
 8003208:	370c      	adds	r7, #12
 800320a:	46bd      	mov	sp, r7
 800320c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003210:	4770      	bx	lr

08003212 <LL_ADC_REG_IsConversionOngoing>:
{
 8003212:	b480      	push	{r7}
 8003214:	b083      	sub	sp, #12
 8003216:	af00      	add	r7, sp, #0
 8003218:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	689b      	ldr	r3, [r3, #8]
 800321e:	f003 0304 	and.w	r3, r3, #4
 8003222:	2b04      	cmp	r3, #4
 8003224:	d101      	bne.n	800322a <LL_ADC_REG_IsConversionOngoing+0x18>
 8003226:	2301      	movs	r3, #1
 8003228:	e000      	b.n	800322c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800322a:	2300      	movs	r3, #0
}
 800322c:	4618      	mov	r0, r3
 800322e:	370c      	adds	r7, #12
 8003230:	46bd      	mov	sp, r7
 8003232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003236:	4770      	bx	lr

08003238 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003238:	b590      	push	{r4, r7, lr}
 800323a:	b09f      	sub	sp, #124	@ 0x7c
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
 8003240:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003242:	2300      	movs	r3, #0
 8003244:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800324e:	2b01      	cmp	r3, #1
 8003250:	d101      	bne.n	8003256 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003252:	2302      	movs	r3, #2
 8003254:	e0be      	b.n	80033d4 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2201      	movs	r2, #1
 800325a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 800325e:	2300      	movs	r3, #0
 8003260:	65fb      	str	r3, [r7, #92]	@ 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8003262:	2300      	movs	r3, #0
 8003264:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a5c      	ldr	r2, [pc, #368]	@ (80033dc <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d102      	bne.n	8003276 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003270:	4b5b      	ldr	r3, [pc, #364]	@ (80033e0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003272:	60bb      	str	r3, [r7, #8]
 8003274:	e001      	b.n	800327a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003276:	2300      	movs	r3, #0
 8003278:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800327a:	68bb      	ldr	r3, [r7, #8]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d10b      	bne.n	8003298 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003284:	f043 0220 	orr.w	r2, r3, #32
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2200      	movs	r2, #0
 8003290:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8003294:	2301      	movs	r3, #1
 8003296:	e09d      	b.n	80033d4 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003298:	68bb      	ldr	r3, [r7, #8]
 800329a:	4618      	mov	r0, r3
 800329c:	f7ff ffb9 	bl	8003212 <LL_ADC_REG_IsConversionOngoing>
 80032a0:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4618      	mov	r0, r3
 80032a8:	f7ff ffb3 	bl	8003212 <LL_ADC_REG_IsConversionOngoing>
 80032ac:	4603      	mov	r3, r0
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d17f      	bne.n	80033b2 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80032b2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d17c      	bne.n	80033b2 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4a47      	ldr	r2, [pc, #284]	@ (80033dc <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d004      	beq.n	80032cc <HAL_ADCEx_MultiModeConfigChannel+0x94>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4a46      	ldr	r2, [pc, #280]	@ (80033e0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d101      	bne.n	80032d0 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 80032cc:	4b45      	ldr	r3, [pc, #276]	@ (80033e4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80032ce:	e000      	b.n	80032d2 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 80032d0:	4b45      	ldr	r3, [pc, #276]	@ (80033e8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80032d2:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d039      	beq.n	8003350 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80032dc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80032de:	689b      	ldr	r3, [r3, #8]
 80032e0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	431a      	orrs	r2, r3
 80032ea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80032ec:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4a3a      	ldr	r2, [pc, #232]	@ (80033dc <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d004      	beq.n	8003302 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4a38      	ldr	r2, [pc, #224]	@ (80033e0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d10e      	bne.n	8003320 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8003302:	4836      	ldr	r0, [pc, #216]	@ (80033dc <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003304:	f7ff ff72 	bl	80031ec <LL_ADC_IsEnabled>
 8003308:	4604      	mov	r4, r0
 800330a:	4835      	ldr	r0, [pc, #212]	@ (80033e0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800330c:	f7ff ff6e 	bl	80031ec <LL_ADC_IsEnabled>
 8003310:	4603      	mov	r3, r0
 8003312:	4323      	orrs	r3, r4
 8003314:	2b00      	cmp	r3, #0
 8003316:	bf0c      	ite	eq
 8003318:	2301      	moveq	r3, #1
 800331a:	2300      	movne	r3, #0
 800331c:	b2db      	uxtb	r3, r3
 800331e:	e008      	b.n	8003332 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8003320:	4832      	ldr	r0, [pc, #200]	@ (80033ec <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8003322:	f7ff ff63 	bl	80031ec <LL_ADC_IsEnabled>
 8003326:	4603      	mov	r3, r0
 8003328:	2b00      	cmp	r3, #0
 800332a:	bf0c      	ite	eq
 800332c:	2301      	moveq	r3, #1
 800332e:	2300      	movne	r3, #0
 8003330:	b2db      	uxtb	r3, r3
 8003332:	2b00      	cmp	r3, #0
 8003334:	d047      	beq.n	80033c6 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003336:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003338:	689a      	ldr	r2, [r3, #8]
 800333a:	4b2d      	ldr	r3, [pc, #180]	@ (80033f0 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 800333c:	4013      	ands	r3, r2
 800333e:	683a      	ldr	r2, [r7, #0]
 8003340:	6811      	ldr	r1, [r2, #0]
 8003342:	683a      	ldr	r2, [r7, #0]
 8003344:	6892      	ldr	r2, [r2, #8]
 8003346:	430a      	orrs	r2, r1
 8003348:	431a      	orrs	r2, r3
 800334a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800334c:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800334e:	e03a      	b.n	80033c6 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8003350:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003352:	689b      	ldr	r3, [r3, #8]
 8003354:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003358:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800335a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a1e      	ldr	r2, [pc, #120]	@ (80033dc <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d004      	beq.n	8003370 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4a1d      	ldr	r2, [pc, #116]	@ (80033e0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d10e      	bne.n	800338e <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8003370:	481a      	ldr	r0, [pc, #104]	@ (80033dc <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003372:	f7ff ff3b 	bl	80031ec <LL_ADC_IsEnabled>
 8003376:	4604      	mov	r4, r0
 8003378:	4819      	ldr	r0, [pc, #100]	@ (80033e0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800337a:	f7ff ff37 	bl	80031ec <LL_ADC_IsEnabled>
 800337e:	4603      	mov	r3, r0
 8003380:	4323      	orrs	r3, r4
 8003382:	2b00      	cmp	r3, #0
 8003384:	bf0c      	ite	eq
 8003386:	2301      	moveq	r3, #1
 8003388:	2300      	movne	r3, #0
 800338a:	b2db      	uxtb	r3, r3
 800338c:	e008      	b.n	80033a0 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 800338e:	4817      	ldr	r0, [pc, #92]	@ (80033ec <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8003390:	f7ff ff2c 	bl	80031ec <LL_ADC_IsEnabled>
 8003394:	4603      	mov	r3, r0
 8003396:	2b00      	cmp	r3, #0
 8003398:	bf0c      	ite	eq
 800339a:	2301      	moveq	r3, #1
 800339c:	2300      	movne	r3, #0
 800339e:	b2db      	uxtb	r3, r3
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d010      	beq.n	80033c6 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80033a4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80033a6:	689a      	ldr	r2, [r3, #8]
 80033a8:	4b11      	ldr	r3, [pc, #68]	@ (80033f0 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80033aa:	4013      	ands	r3, r2
 80033ac:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80033ae:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80033b0:	e009      	b.n	80033c6 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033b6:	f043 0220 	orr.w	r2, r3, #32
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80033be:	2301      	movs	r3, #1
 80033c0:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 80033c4:	e000      	b.n	80033c8 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80033c6:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2200      	movs	r2, #0
 80033cc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80033d0:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 80033d4:	4618      	mov	r0, r3
 80033d6:	377c      	adds	r7, #124	@ 0x7c
 80033d8:	46bd      	mov	sp, r7
 80033da:	bd90      	pop	{r4, r7, pc}
 80033dc:	40022000 	.word	0x40022000
 80033e0:	40022100 	.word	0x40022100
 80033e4:	40022300 	.word	0x40022300
 80033e8:	58026300 	.word	0x58026300
 80033ec:	58026000 	.word	0x58026000
 80033f0:	fffff0e0 	.word	0xfffff0e0

080033f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033f4:	b480      	push	{r7}
 80033f6:	b085      	sub	sp, #20
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	f003 0307 	and.w	r3, r3, #7
 8003402:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003404:	4b0b      	ldr	r3, [pc, #44]	@ (8003434 <__NVIC_SetPriorityGrouping+0x40>)
 8003406:	68db      	ldr	r3, [r3, #12]
 8003408:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800340a:	68ba      	ldr	r2, [r7, #8]
 800340c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003410:	4013      	ands	r3, r2
 8003412:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800341c:	4b06      	ldr	r3, [pc, #24]	@ (8003438 <__NVIC_SetPriorityGrouping+0x44>)
 800341e:	4313      	orrs	r3, r2
 8003420:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003422:	4a04      	ldr	r2, [pc, #16]	@ (8003434 <__NVIC_SetPriorityGrouping+0x40>)
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	60d3      	str	r3, [r2, #12]
}
 8003428:	bf00      	nop
 800342a:	3714      	adds	r7, #20
 800342c:	46bd      	mov	sp, r7
 800342e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003432:	4770      	bx	lr
 8003434:	e000ed00 	.word	0xe000ed00
 8003438:	05fa0000 	.word	0x05fa0000

0800343c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800343c:	b480      	push	{r7}
 800343e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003440:	4b04      	ldr	r3, [pc, #16]	@ (8003454 <__NVIC_GetPriorityGrouping+0x18>)
 8003442:	68db      	ldr	r3, [r3, #12]
 8003444:	0a1b      	lsrs	r3, r3, #8
 8003446:	f003 0307 	and.w	r3, r3, #7
}
 800344a:	4618      	mov	r0, r3
 800344c:	46bd      	mov	sp, r7
 800344e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003452:	4770      	bx	lr
 8003454:	e000ed00 	.word	0xe000ed00

08003458 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003458:	b480      	push	{r7}
 800345a:	b083      	sub	sp, #12
 800345c:	af00      	add	r7, sp, #0
 800345e:	4603      	mov	r3, r0
 8003460:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003462:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003466:	2b00      	cmp	r3, #0
 8003468:	db0b      	blt.n	8003482 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800346a:	88fb      	ldrh	r3, [r7, #6]
 800346c:	f003 021f 	and.w	r2, r3, #31
 8003470:	4907      	ldr	r1, [pc, #28]	@ (8003490 <__NVIC_EnableIRQ+0x38>)
 8003472:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003476:	095b      	lsrs	r3, r3, #5
 8003478:	2001      	movs	r0, #1
 800347a:	fa00 f202 	lsl.w	r2, r0, r2
 800347e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003482:	bf00      	nop
 8003484:	370c      	adds	r7, #12
 8003486:	46bd      	mov	sp, r7
 8003488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348c:	4770      	bx	lr
 800348e:	bf00      	nop
 8003490:	e000e100 	.word	0xe000e100

08003494 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003494:	b480      	push	{r7}
 8003496:	b083      	sub	sp, #12
 8003498:	af00      	add	r7, sp, #0
 800349a:	4603      	mov	r3, r0
 800349c:	6039      	str	r1, [r7, #0]
 800349e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80034a0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	db0a      	blt.n	80034be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	b2da      	uxtb	r2, r3
 80034ac:	490c      	ldr	r1, [pc, #48]	@ (80034e0 <__NVIC_SetPriority+0x4c>)
 80034ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80034b2:	0112      	lsls	r2, r2, #4
 80034b4:	b2d2      	uxtb	r2, r2
 80034b6:	440b      	add	r3, r1
 80034b8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80034bc:	e00a      	b.n	80034d4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	b2da      	uxtb	r2, r3
 80034c2:	4908      	ldr	r1, [pc, #32]	@ (80034e4 <__NVIC_SetPriority+0x50>)
 80034c4:	88fb      	ldrh	r3, [r7, #6]
 80034c6:	f003 030f 	and.w	r3, r3, #15
 80034ca:	3b04      	subs	r3, #4
 80034cc:	0112      	lsls	r2, r2, #4
 80034ce:	b2d2      	uxtb	r2, r2
 80034d0:	440b      	add	r3, r1
 80034d2:	761a      	strb	r2, [r3, #24]
}
 80034d4:	bf00      	nop
 80034d6:	370c      	adds	r7, #12
 80034d8:	46bd      	mov	sp, r7
 80034da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034de:	4770      	bx	lr
 80034e0:	e000e100 	.word	0xe000e100
 80034e4:	e000ed00 	.word	0xe000ed00

080034e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80034e8:	b480      	push	{r7}
 80034ea:	b089      	sub	sp, #36	@ 0x24
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	60f8      	str	r0, [r7, #12]
 80034f0:	60b9      	str	r1, [r7, #8]
 80034f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	f003 0307 	and.w	r3, r3, #7
 80034fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80034fc:	69fb      	ldr	r3, [r7, #28]
 80034fe:	f1c3 0307 	rsb	r3, r3, #7
 8003502:	2b04      	cmp	r3, #4
 8003504:	bf28      	it	cs
 8003506:	2304      	movcs	r3, #4
 8003508:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800350a:	69fb      	ldr	r3, [r7, #28]
 800350c:	3304      	adds	r3, #4
 800350e:	2b06      	cmp	r3, #6
 8003510:	d902      	bls.n	8003518 <NVIC_EncodePriority+0x30>
 8003512:	69fb      	ldr	r3, [r7, #28]
 8003514:	3b03      	subs	r3, #3
 8003516:	e000      	b.n	800351a <NVIC_EncodePriority+0x32>
 8003518:	2300      	movs	r3, #0
 800351a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800351c:	f04f 32ff 	mov.w	r2, #4294967295
 8003520:	69bb      	ldr	r3, [r7, #24]
 8003522:	fa02 f303 	lsl.w	r3, r2, r3
 8003526:	43da      	mvns	r2, r3
 8003528:	68bb      	ldr	r3, [r7, #8]
 800352a:	401a      	ands	r2, r3
 800352c:	697b      	ldr	r3, [r7, #20]
 800352e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003530:	f04f 31ff 	mov.w	r1, #4294967295
 8003534:	697b      	ldr	r3, [r7, #20]
 8003536:	fa01 f303 	lsl.w	r3, r1, r3
 800353a:	43d9      	mvns	r1, r3
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003540:	4313      	orrs	r3, r2
         );
}
 8003542:	4618      	mov	r0, r3
 8003544:	3724      	adds	r7, #36	@ 0x24
 8003546:	46bd      	mov	sp, r7
 8003548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354c:	4770      	bx	lr
	...

08003550 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b082      	sub	sp, #8
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	3b01      	subs	r3, #1
 800355c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003560:	d301      	bcc.n	8003566 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003562:	2301      	movs	r3, #1
 8003564:	e00f      	b.n	8003586 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003566:	4a0a      	ldr	r2, [pc, #40]	@ (8003590 <SysTick_Config+0x40>)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	3b01      	subs	r3, #1
 800356c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800356e:	210f      	movs	r1, #15
 8003570:	f04f 30ff 	mov.w	r0, #4294967295
 8003574:	f7ff ff8e 	bl	8003494 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003578:	4b05      	ldr	r3, [pc, #20]	@ (8003590 <SysTick_Config+0x40>)
 800357a:	2200      	movs	r2, #0
 800357c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800357e:	4b04      	ldr	r3, [pc, #16]	@ (8003590 <SysTick_Config+0x40>)
 8003580:	2207      	movs	r2, #7
 8003582:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003584:	2300      	movs	r3, #0
}
 8003586:	4618      	mov	r0, r3
 8003588:	3708      	adds	r7, #8
 800358a:	46bd      	mov	sp, r7
 800358c:	bd80      	pop	{r7, pc}
 800358e:	bf00      	nop
 8003590:	e000e010 	.word	0xe000e010

08003594 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b082      	sub	sp, #8
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800359c:	6878      	ldr	r0, [r7, #4]
 800359e:	f7ff ff29 	bl	80033f4 <__NVIC_SetPriorityGrouping>
}
 80035a2:	bf00      	nop
 80035a4:	3708      	adds	r7, #8
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bd80      	pop	{r7, pc}

080035aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80035aa:	b580      	push	{r7, lr}
 80035ac:	b086      	sub	sp, #24
 80035ae:	af00      	add	r7, sp, #0
 80035b0:	4603      	mov	r3, r0
 80035b2:	60b9      	str	r1, [r7, #8]
 80035b4:	607a      	str	r2, [r7, #4]
 80035b6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80035b8:	f7ff ff40 	bl	800343c <__NVIC_GetPriorityGrouping>
 80035bc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80035be:	687a      	ldr	r2, [r7, #4]
 80035c0:	68b9      	ldr	r1, [r7, #8]
 80035c2:	6978      	ldr	r0, [r7, #20]
 80035c4:	f7ff ff90 	bl	80034e8 <NVIC_EncodePriority>
 80035c8:	4602      	mov	r2, r0
 80035ca:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80035ce:	4611      	mov	r1, r2
 80035d0:	4618      	mov	r0, r3
 80035d2:	f7ff ff5f 	bl	8003494 <__NVIC_SetPriority>
}
 80035d6:	bf00      	nop
 80035d8:	3718      	adds	r7, #24
 80035da:	46bd      	mov	sp, r7
 80035dc:	bd80      	pop	{r7, pc}

080035de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035de:	b580      	push	{r7, lr}
 80035e0:	b082      	sub	sp, #8
 80035e2:	af00      	add	r7, sp, #0
 80035e4:	4603      	mov	r3, r0
 80035e6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80035e8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80035ec:	4618      	mov	r0, r3
 80035ee:	f7ff ff33 	bl	8003458 <__NVIC_EnableIRQ>
}
 80035f2:	bf00      	nop
 80035f4:	3708      	adds	r7, #8
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bd80      	pop	{r7, pc}

080035fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80035fa:	b580      	push	{r7, lr}
 80035fc:	b082      	sub	sp, #8
 80035fe:	af00      	add	r7, sp, #0
 8003600:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003602:	6878      	ldr	r0, [r7, #4]
 8003604:	f7ff ffa4 	bl	8003550 <SysTick_Config>
 8003608:	4603      	mov	r3, r0
}
 800360a:	4618      	mov	r0, r3
 800360c:	3708      	adds	r7, #8
 800360e:	46bd      	mov	sp, r7
 8003610:	bd80      	pop	{r7, pc}
	...

08003614 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b086      	sub	sp, #24
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 800361c:	f7fe fb68 	bl	8001cf0 <HAL_GetTick>
 8003620:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d101      	bne.n	800362c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8003628:	2301      	movs	r3, #1
 800362a:	e316      	b.n	8003c5a <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a66      	ldr	r2, [pc, #408]	@ (80037cc <HAL_DMA_Init+0x1b8>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d04a      	beq.n	80036cc <HAL_DMA_Init+0xb8>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a65      	ldr	r2, [pc, #404]	@ (80037d0 <HAL_DMA_Init+0x1bc>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d045      	beq.n	80036cc <HAL_DMA_Init+0xb8>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a63      	ldr	r2, [pc, #396]	@ (80037d4 <HAL_DMA_Init+0x1c0>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d040      	beq.n	80036cc <HAL_DMA_Init+0xb8>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4a62      	ldr	r2, [pc, #392]	@ (80037d8 <HAL_DMA_Init+0x1c4>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d03b      	beq.n	80036cc <HAL_DMA_Init+0xb8>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a60      	ldr	r2, [pc, #384]	@ (80037dc <HAL_DMA_Init+0x1c8>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d036      	beq.n	80036cc <HAL_DMA_Init+0xb8>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a5f      	ldr	r2, [pc, #380]	@ (80037e0 <HAL_DMA_Init+0x1cc>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d031      	beq.n	80036cc <HAL_DMA_Init+0xb8>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a5d      	ldr	r2, [pc, #372]	@ (80037e4 <HAL_DMA_Init+0x1d0>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d02c      	beq.n	80036cc <HAL_DMA_Init+0xb8>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a5c      	ldr	r2, [pc, #368]	@ (80037e8 <HAL_DMA_Init+0x1d4>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d027      	beq.n	80036cc <HAL_DMA_Init+0xb8>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a5a      	ldr	r2, [pc, #360]	@ (80037ec <HAL_DMA_Init+0x1d8>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d022      	beq.n	80036cc <HAL_DMA_Init+0xb8>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4a59      	ldr	r2, [pc, #356]	@ (80037f0 <HAL_DMA_Init+0x1dc>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d01d      	beq.n	80036cc <HAL_DMA_Init+0xb8>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a57      	ldr	r2, [pc, #348]	@ (80037f4 <HAL_DMA_Init+0x1e0>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d018      	beq.n	80036cc <HAL_DMA_Init+0xb8>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a56      	ldr	r2, [pc, #344]	@ (80037f8 <HAL_DMA_Init+0x1e4>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d013      	beq.n	80036cc <HAL_DMA_Init+0xb8>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a54      	ldr	r2, [pc, #336]	@ (80037fc <HAL_DMA_Init+0x1e8>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d00e      	beq.n	80036cc <HAL_DMA_Init+0xb8>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a53      	ldr	r2, [pc, #332]	@ (8003800 <HAL_DMA_Init+0x1ec>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d009      	beq.n	80036cc <HAL_DMA_Init+0xb8>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a51      	ldr	r2, [pc, #324]	@ (8003804 <HAL_DMA_Init+0x1f0>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d004      	beq.n	80036cc <HAL_DMA_Init+0xb8>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a50      	ldr	r2, [pc, #320]	@ (8003808 <HAL_DMA_Init+0x1f4>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d101      	bne.n	80036d0 <HAL_DMA_Init+0xbc>
 80036cc:	2301      	movs	r3, #1
 80036ce:	e000      	b.n	80036d2 <HAL_DMA_Init+0xbe>
 80036d0:	2300      	movs	r3, #0
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	f000 813b 	beq.w	800394e <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2202      	movs	r2, #2
 80036dc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2200      	movs	r2, #0
 80036e4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a37      	ldr	r2, [pc, #220]	@ (80037cc <HAL_DMA_Init+0x1b8>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d04a      	beq.n	8003788 <HAL_DMA_Init+0x174>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4a36      	ldr	r2, [pc, #216]	@ (80037d0 <HAL_DMA_Init+0x1bc>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d045      	beq.n	8003788 <HAL_DMA_Init+0x174>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a34      	ldr	r2, [pc, #208]	@ (80037d4 <HAL_DMA_Init+0x1c0>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d040      	beq.n	8003788 <HAL_DMA_Init+0x174>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4a33      	ldr	r2, [pc, #204]	@ (80037d8 <HAL_DMA_Init+0x1c4>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d03b      	beq.n	8003788 <HAL_DMA_Init+0x174>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a31      	ldr	r2, [pc, #196]	@ (80037dc <HAL_DMA_Init+0x1c8>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d036      	beq.n	8003788 <HAL_DMA_Init+0x174>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4a30      	ldr	r2, [pc, #192]	@ (80037e0 <HAL_DMA_Init+0x1cc>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d031      	beq.n	8003788 <HAL_DMA_Init+0x174>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a2e      	ldr	r2, [pc, #184]	@ (80037e4 <HAL_DMA_Init+0x1d0>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d02c      	beq.n	8003788 <HAL_DMA_Init+0x174>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a2d      	ldr	r2, [pc, #180]	@ (80037e8 <HAL_DMA_Init+0x1d4>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d027      	beq.n	8003788 <HAL_DMA_Init+0x174>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a2b      	ldr	r2, [pc, #172]	@ (80037ec <HAL_DMA_Init+0x1d8>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d022      	beq.n	8003788 <HAL_DMA_Init+0x174>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a2a      	ldr	r2, [pc, #168]	@ (80037f0 <HAL_DMA_Init+0x1dc>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d01d      	beq.n	8003788 <HAL_DMA_Init+0x174>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a28      	ldr	r2, [pc, #160]	@ (80037f4 <HAL_DMA_Init+0x1e0>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d018      	beq.n	8003788 <HAL_DMA_Init+0x174>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a27      	ldr	r2, [pc, #156]	@ (80037f8 <HAL_DMA_Init+0x1e4>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d013      	beq.n	8003788 <HAL_DMA_Init+0x174>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a25      	ldr	r2, [pc, #148]	@ (80037fc <HAL_DMA_Init+0x1e8>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d00e      	beq.n	8003788 <HAL_DMA_Init+0x174>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4a24      	ldr	r2, [pc, #144]	@ (8003800 <HAL_DMA_Init+0x1ec>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d009      	beq.n	8003788 <HAL_DMA_Init+0x174>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a22      	ldr	r2, [pc, #136]	@ (8003804 <HAL_DMA_Init+0x1f0>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d004      	beq.n	8003788 <HAL_DMA_Init+0x174>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a21      	ldr	r2, [pc, #132]	@ (8003808 <HAL_DMA_Init+0x1f4>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d108      	bne.n	800379a <HAL_DMA_Init+0x186>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	681a      	ldr	r2, [r3, #0]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f022 0201 	bic.w	r2, r2, #1
 8003796:	601a      	str	r2, [r3, #0]
 8003798:	e007      	b.n	80037aa <HAL_DMA_Init+0x196>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	681a      	ldr	r2, [r3, #0]
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f022 0201 	bic.w	r2, r2, #1
 80037a8:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80037aa:	e02f      	b.n	800380c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80037ac:	f7fe faa0 	bl	8001cf0 <HAL_GetTick>
 80037b0:	4602      	mov	r2, r0
 80037b2:	693b      	ldr	r3, [r7, #16]
 80037b4:	1ad3      	subs	r3, r2, r3
 80037b6:	2b05      	cmp	r3, #5
 80037b8:	d928      	bls.n	800380c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2220      	movs	r2, #32
 80037be:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2203      	movs	r2, #3
 80037c4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 80037c8:	2301      	movs	r3, #1
 80037ca:	e246      	b.n	8003c5a <HAL_DMA_Init+0x646>
 80037cc:	40020010 	.word	0x40020010
 80037d0:	40020028 	.word	0x40020028
 80037d4:	40020040 	.word	0x40020040
 80037d8:	40020058 	.word	0x40020058
 80037dc:	40020070 	.word	0x40020070
 80037e0:	40020088 	.word	0x40020088
 80037e4:	400200a0 	.word	0x400200a0
 80037e8:	400200b8 	.word	0x400200b8
 80037ec:	40020410 	.word	0x40020410
 80037f0:	40020428 	.word	0x40020428
 80037f4:	40020440 	.word	0x40020440
 80037f8:	40020458 	.word	0x40020458
 80037fc:	40020470 	.word	0x40020470
 8003800:	40020488 	.word	0x40020488
 8003804:	400204a0 	.word	0x400204a0
 8003808:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f003 0301 	and.w	r3, r3, #1
 8003816:	2b00      	cmp	r3, #0
 8003818:	d1c8      	bne.n	80037ac <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003822:	697a      	ldr	r2, [r7, #20]
 8003824:	4b83      	ldr	r3, [pc, #524]	@ (8003a34 <HAL_DMA_Init+0x420>)
 8003826:	4013      	ands	r3, r2
 8003828:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8003832:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	691b      	ldr	r3, [r3, #16]
 8003838:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800383e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	699b      	ldr	r3, [r3, #24]
 8003844:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800384a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6a1b      	ldr	r3, [r3, #32]
 8003850:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8003852:	697a      	ldr	r2, [r7, #20]
 8003854:	4313      	orrs	r3, r2
 8003856:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800385c:	2b04      	cmp	r3, #4
 800385e:	d107      	bne.n	8003870 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003868:	4313      	orrs	r3, r2
 800386a:	697a      	ldr	r2, [r7, #20]
 800386c:	4313      	orrs	r3, r2
 800386e:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8003870:	4b71      	ldr	r3, [pc, #452]	@ (8003a38 <HAL_DMA_Init+0x424>)
 8003872:	681a      	ldr	r2, [r3, #0]
 8003874:	4b71      	ldr	r3, [pc, #452]	@ (8003a3c <HAL_DMA_Init+0x428>)
 8003876:	4013      	ands	r3, r2
 8003878:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800387c:	d328      	bcc.n	80038d0 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	2b28      	cmp	r3, #40	@ 0x28
 8003884:	d903      	bls.n	800388e <HAL_DMA_Init+0x27a>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	2b2e      	cmp	r3, #46	@ 0x2e
 800388c:	d917      	bls.n	80038be <HAL_DMA_Init+0x2aa>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	2b3e      	cmp	r3, #62	@ 0x3e
 8003894:	d903      	bls.n	800389e <HAL_DMA_Init+0x28a>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	2b42      	cmp	r3, #66	@ 0x42
 800389c:	d90f      	bls.n	80038be <HAL_DMA_Init+0x2aa>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	2b46      	cmp	r3, #70	@ 0x46
 80038a4:	d903      	bls.n	80038ae <HAL_DMA_Init+0x29a>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	2b48      	cmp	r3, #72	@ 0x48
 80038ac:	d907      	bls.n	80038be <HAL_DMA_Init+0x2aa>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	2b4e      	cmp	r3, #78	@ 0x4e
 80038b4:	d905      	bls.n	80038c2 <HAL_DMA_Init+0x2ae>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	2b52      	cmp	r3, #82	@ 0x52
 80038bc:	d801      	bhi.n	80038c2 <HAL_DMA_Init+0x2ae>
 80038be:	2301      	movs	r3, #1
 80038c0:	e000      	b.n	80038c4 <HAL_DMA_Init+0x2b0>
 80038c2:	2300      	movs	r3, #0
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d003      	beq.n	80038d0 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80038c8:	697b      	ldr	r3, [r7, #20]
 80038ca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80038ce:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	697a      	ldr	r2, [r7, #20]
 80038d6:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	695b      	ldr	r3, [r3, #20]
 80038de:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80038e0:	697b      	ldr	r3, [r7, #20]
 80038e2:	f023 0307 	bic.w	r3, r3, #7
 80038e6:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038ec:	697a      	ldr	r2, [r7, #20]
 80038ee:	4313      	orrs	r3, r2
 80038f0:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038f6:	2b04      	cmp	r3, #4
 80038f8:	d117      	bne.n	800392a <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038fe:	697a      	ldr	r2, [r7, #20]
 8003900:	4313      	orrs	r3, r2
 8003902:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003908:	2b00      	cmp	r3, #0
 800390a:	d00e      	beq.n	800392a <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800390c:	6878      	ldr	r0, [r7, #4]
 800390e:	f001 ff1d 	bl	800574c <DMA_CheckFifoParam>
 8003912:	4603      	mov	r3, r0
 8003914:	2b00      	cmp	r3, #0
 8003916:	d008      	beq.n	800392a <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2240      	movs	r2, #64	@ 0x40
 800391c:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2201      	movs	r2, #1
 8003922:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8003926:	2301      	movs	r3, #1
 8003928:	e197      	b.n	8003c5a <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	697a      	ldr	r2, [r7, #20]
 8003930:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003932:	6878      	ldr	r0, [r7, #4]
 8003934:	f001 fe58 	bl	80055e8 <DMA_CalcBaseAndBitshift>
 8003938:	4603      	mov	r3, r0
 800393a:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003940:	f003 031f 	and.w	r3, r3, #31
 8003944:	223f      	movs	r2, #63	@ 0x3f
 8003946:	409a      	lsls	r2, r3
 8003948:	68bb      	ldr	r3, [r7, #8]
 800394a:	609a      	str	r2, [r3, #8]
 800394c:	e0cd      	b.n	8003aea <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4a3b      	ldr	r2, [pc, #236]	@ (8003a40 <HAL_DMA_Init+0x42c>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d022      	beq.n	800399e <HAL_DMA_Init+0x38a>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a39      	ldr	r2, [pc, #228]	@ (8003a44 <HAL_DMA_Init+0x430>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d01d      	beq.n	800399e <HAL_DMA_Init+0x38a>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4a38      	ldr	r2, [pc, #224]	@ (8003a48 <HAL_DMA_Init+0x434>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d018      	beq.n	800399e <HAL_DMA_Init+0x38a>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4a36      	ldr	r2, [pc, #216]	@ (8003a4c <HAL_DMA_Init+0x438>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d013      	beq.n	800399e <HAL_DMA_Init+0x38a>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4a35      	ldr	r2, [pc, #212]	@ (8003a50 <HAL_DMA_Init+0x43c>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d00e      	beq.n	800399e <HAL_DMA_Init+0x38a>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a33      	ldr	r2, [pc, #204]	@ (8003a54 <HAL_DMA_Init+0x440>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d009      	beq.n	800399e <HAL_DMA_Init+0x38a>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4a32      	ldr	r2, [pc, #200]	@ (8003a58 <HAL_DMA_Init+0x444>)
 8003990:	4293      	cmp	r3, r2
 8003992:	d004      	beq.n	800399e <HAL_DMA_Init+0x38a>
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a30      	ldr	r2, [pc, #192]	@ (8003a5c <HAL_DMA_Init+0x448>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d101      	bne.n	80039a2 <HAL_DMA_Init+0x38e>
 800399e:	2301      	movs	r3, #1
 80039a0:	e000      	b.n	80039a4 <HAL_DMA_Init+0x390>
 80039a2:	2300      	movs	r3, #0
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	f000 8097 	beq.w	8003ad8 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4a24      	ldr	r2, [pc, #144]	@ (8003a40 <HAL_DMA_Init+0x42c>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d021      	beq.n	80039f8 <HAL_DMA_Init+0x3e4>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4a22      	ldr	r2, [pc, #136]	@ (8003a44 <HAL_DMA_Init+0x430>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d01c      	beq.n	80039f8 <HAL_DMA_Init+0x3e4>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4a21      	ldr	r2, [pc, #132]	@ (8003a48 <HAL_DMA_Init+0x434>)
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d017      	beq.n	80039f8 <HAL_DMA_Init+0x3e4>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4a1f      	ldr	r2, [pc, #124]	@ (8003a4c <HAL_DMA_Init+0x438>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d012      	beq.n	80039f8 <HAL_DMA_Init+0x3e4>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4a1e      	ldr	r2, [pc, #120]	@ (8003a50 <HAL_DMA_Init+0x43c>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d00d      	beq.n	80039f8 <HAL_DMA_Init+0x3e4>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4a1c      	ldr	r2, [pc, #112]	@ (8003a54 <HAL_DMA_Init+0x440>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d008      	beq.n	80039f8 <HAL_DMA_Init+0x3e4>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4a1b      	ldr	r2, [pc, #108]	@ (8003a58 <HAL_DMA_Init+0x444>)
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d003      	beq.n	80039f8 <HAL_DMA_Init+0x3e4>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4a19      	ldr	r2, [pc, #100]	@ (8003a5c <HAL_DMA_Init+0x448>)
 80039f6:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2202      	movs	r2, #2
 80039fc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2200      	movs	r2, #0
 8003a04:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8003a10:	697a      	ldr	r2, [r7, #20]
 8003a12:	4b13      	ldr	r3, [pc, #76]	@ (8003a60 <HAL_DMA_Init+0x44c>)
 8003a14:	4013      	ands	r3, r2
 8003a16:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	689b      	ldr	r3, [r3, #8]
 8003a1c:	2b40      	cmp	r3, #64	@ 0x40
 8003a1e:	d021      	beq.n	8003a64 <HAL_DMA_Init+0x450>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	689b      	ldr	r3, [r3, #8]
 8003a24:	2b80      	cmp	r3, #128	@ 0x80
 8003a26:	d102      	bne.n	8003a2e <HAL_DMA_Init+0x41a>
 8003a28:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003a2c:	e01b      	b.n	8003a66 <HAL_DMA_Init+0x452>
 8003a2e:	2300      	movs	r3, #0
 8003a30:	e019      	b.n	8003a66 <HAL_DMA_Init+0x452>
 8003a32:	bf00      	nop
 8003a34:	fe10803f 	.word	0xfe10803f
 8003a38:	5c001000 	.word	0x5c001000
 8003a3c:	ffff0000 	.word	0xffff0000
 8003a40:	58025408 	.word	0x58025408
 8003a44:	5802541c 	.word	0x5802541c
 8003a48:	58025430 	.word	0x58025430
 8003a4c:	58025444 	.word	0x58025444
 8003a50:	58025458 	.word	0x58025458
 8003a54:	5802546c 	.word	0x5802546c
 8003a58:	58025480 	.word	0x58025480
 8003a5c:	58025494 	.word	0x58025494
 8003a60:	fffe000f 	.word	0xfffe000f
 8003a64:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003a66:	687a      	ldr	r2, [r7, #4]
 8003a68:	68d2      	ldr	r2, [r2, #12]
 8003a6a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003a6c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	691b      	ldr	r3, [r3, #16]
 8003a72:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003a74:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	695b      	ldr	r3, [r3, #20]
 8003a7a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003a7c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	699b      	ldr	r3, [r3, #24]
 8003a82:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003a84:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	69db      	ldr	r3, [r3, #28]
 8003a8a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003a8c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6a1b      	ldr	r3, [r3, #32]
 8003a92:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003a94:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003a96:	697a      	ldr	r2, [r7, #20]
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	697a      	ldr	r2, [r7, #20]
 8003aa2:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	461a      	mov	r2, r3
 8003aaa:	4b6e      	ldr	r3, [pc, #440]	@ (8003c64 <HAL_DMA_Init+0x650>)
 8003aac:	4413      	add	r3, r2
 8003aae:	4a6e      	ldr	r2, [pc, #440]	@ (8003c68 <HAL_DMA_Init+0x654>)
 8003ab0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ab4:	091b      	lsrs	r3, r3, #4
 8003ab6:	009a      	lsls	r2, r3, #2
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003abc:	6878      	ldr	r0, [r7, #4]
 8003abe:	f001 fd93 	bl	80055e8 <DMA_CalcBaseAndBitshift>
 8003ac2:	4603      	mov	r3, r0
 8003ac4:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003aca:	f003 031f 	and.w	r3, r3, #31
 8003ace:	2201      	movs	r2, #1
 8003ad0:	409a      	lsls	r2, r3
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	605a      	str	r2, [r3, #4]
 8003ad6:	e008      	b.n	8003aea <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2240      	movs	r2, #64	@ 0x40
 8003adc:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2203      	movs	r2, #3
 8003ae2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	e0b7      	b.n	8003c5a <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4a5f      	ldr	r2, [pc, #380]	@ (8003c6c <HAL_DMA_Init+0x658>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d072      	beq.n	8003bda <HAL_DMA_Init+0x5c6>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a5d      	ldr	r2, [pc, #372]	@ (8003c70 <HAL_DMA_Init+0x65c>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d06d      	beq.n	8003bda <HAL_DMA_Init+0x5c6>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4a5c      	ldr	r2, [pc, #368]	@ (8003c74 <HAL_DMA_Init+0x660>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d068      	beq.n	8003bda <HAL_DMA_Init+0x5c6>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a5a      	ldr	r2, [pc, #360]	@ (8003c78 <HAL_DMA_Init+0x664>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d063      	beq.n	8003bda <HAL_DMA_Init+0x5c6>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4a59      	ldr	r2, [pc, #356]	@ (8003c7c <HAL_DMA_Init+0x668>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d05e      	beq.n	8003bda <HAL_DMA_Init+0x5c6>
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4a57      	ldr	r2, [pc, #348]	@ (8003c80 <HAL_DMA_Init+0x66c>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d059      	beq.n	8003bda <HAL_DMA_Init+0x5c6>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4a56      	ldr	r2, [pc, #344]	@ (8003c84 <HAL_DMA_Init+0x670>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d054      	beq.n	8003bda <HAL_DMA_Init+0x5c6>
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4a54      	ldr	r2, [pc, #336]	@ (8003c88 <HAL_DMA_Init+0x674>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d04f      	beq.n	8003bda <HAL_DMA_Init+0x5c6>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4a53      	ldr	r2, [pc, #332]	@ (8003c8c <HAL_DMA_Init+0x678>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d04a      	beq.n	8003bda <HAL_DMA_Init+0x5c6>
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4a51      	ldr	r2, [pc, #324]	@ (8003c90 <HAL_DMA_Init+0x67c>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d045      	beq.n	8003bda <HAL_DMA_Init+0x5c6>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4a50      	ldr	r2, [pc, #320]	@ (8003c94 <HAL_DMA_Init+0x680>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d040      	beq.n	8003bda <HAL_DMA_Init+0x5c6>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a4e      	ldr	r2, [pc, #312]	@ (8003c98 <HAL_DMA_Init+0x684>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d03b      	beq.n	8003bda <HAL_DMA_Init+0x5c6>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4a4d      	ldr	r2, [pc, #308]	@ (8003c9c <HAL_DMA_Init+0x688>)
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d036      	beq.n	8003bda <HAL_DMA_Init+0x5c6>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4a4b      	ldr	r2, [pc, #300]	@ (8003ca0 <HAL_DMA_Init+0x68c>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d031      	beq.n	8003bda <HAL_DMA_Init+0x5c6>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4a4a      	ldr	r2, [pc, #296]	@ (8003ca4 <HAL_DMA_Init+0x690>)
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d02c      	beq.n	8003bda <HAL_DMA_Init+0x5c6>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4a48      	ldr	r2, [pc, #288]	@ (8003ca8 <HAL_DMA_Init+0x694>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d027      	beq.n	8003bda <HAL_DMA_Init+0x5c6>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4a47      	ldr	r2, [pc, #284]	@ (8003cac <HAL_DMA_Init+0x698>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d022      	beq.n	8003bda <HAL_DMA_Init+0x5c6>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4a45      	ldr	r2, [pc, #276]	@ (8003cb0 <HAL_DMA_Init+0x69c>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d01d      	beq.n	8003bda <HAL_DMA_Init+0x5c6>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	4a44      	ldr	r2, [pc, #272]	@ (8003cb4 <HAL_DMA_Init+0x6a0>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d018      	beq.n	8003bda <HAL_DMA_Init+0x5c6>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4a42      	ldr	r2, [pc, #264]	@ (8003cb8 <HAL_DMA_Init+0x6a4>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d013      	beq.n	8003bda <HAL_DMA_Init+0x5c6>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4a41      	ldr	r2, [pc, #260]	@ (8003cbc <HAL_DMA_Init+0x6a8>)
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d00e      	beq.n	8003bda <HAL_DMA_Init+0x5c6>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a3f      	ldr	r2, [pc, #252]	@ (8003cc0 <HAL_DMA_Init+0x6ac>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d009      	beq.n	8003bda <HAL_DMA_Init+0x5c6>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4a3e      	ldr	r2, [pc, #248]	@ (8003cc4 <HAL_DMA_Init+0x6b0>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d004      	beq.n	8003bda <HAL_DMA_Init+0x5c6>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4a3c      	ldr	r2, [pc, #240]	@ (8003cc8 <HAL_DMA_Init+0x6b4>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d101      	bne.n	8003bde <HAL_DMA_Init+0x5ca>
 8003bda:	2301      	movs	r3, #1
 8003bdc:	e000      	b.n	8003be0 <HAL_DMA_Init+0x5cc>
 8003bde:	2300      	movs	r3, #0
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d032      	beq.n	8003c4a <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003be4:	6878      	ldr	r0, [r7, #4]
 8003be6:	f001 fe2d 	bl	8005844 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	689b      	ldr	r3, [r3, #8]
 8003bee:	2b80      	cmp	r3, #128	@ 0x80
 8003bf0:	d102      	bne.n	8003bf8 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	685a      	ldr	r2, [r3, #4]
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c00:	b2d2      	uxtb	r2, r2
 8003c02:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003c08:	687a      	ldr	r2, [r7, #4]
 8003c0a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003c0c:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	685b      	ldr	r3, [r3, #4]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d010      	beq.n	8003c38 <HAL_DMA_Init+0x624>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	685b      	ldr	r3, [r3, #4]
 8003c1a:	2b08      	cmp	r3, #8
 8003c1c:	d80c      	bhi.n	8003c38 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003c1e:	6878      	ldr	r0, [r7, #4]
 8003c20:	f001 feaa 	bl	8005978 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003c28:	2200      	movs	r2, #0
 8003c2a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c30:	687a      	ldr	r2, [r7, #4]
 8003c32:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003c34:	605a      	str	r2, [r3, #4]
 8003c36:	e008      	b.n	8003c4a <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2200      	movs	r2, #0
 8003c42:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2200      	movs	r2, #0
 8003c48:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2201      	movs	r2, #1
 8003c54:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003c58:	2300      	movs	r3, #0
}
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	3718      	adds	r7, #24
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bd80      	pop	{r7, pc}
 8003c62:	bf00      	nop
 8003c64:	a7fdabf8 	.word	0xa7fdabf8
 8003c68:	cccccccd 	.word	0xcccccccd
 8003c6c:	40020010 	.word	0x40020010
 8003c70:	40020028 	.word	0x40020028
 8003c74:	40020040 	.word	0x40020040
 8003c78:	40020058 	.word	0x40020058
 8003c7c:	40020070 	.word	0x40020070
 8003c80:	40020088 	.word	0x40020088
 8003c84:	400200a0 	.word	0x400200a0
 8003c88:	400200b8 	.word	0x400200b8
 8003c8c:	40020410 	.word	0x40020410
 8003c90:	40020428 	.word	0x40020428
 8003c94:	40020440 	.word	0x40020440
 8003c98:	40020458 	.word	0x40020458
 8003c9c:	40020470 	.word	0x40020470
 8003ca0:	40020488 	.word	0x40020488
 8003ca4:	400204a0 	.word	0x400204a0
 8003ca8:	400204b8 	.word	0x400204b8
 8003cac:	58025408 	.word	0x58025408
 8003cb0:	5802541c 	.word	0x5802541c
 8003cb4:	58025430 	.word	0x58025430
 8003cb8:	58025444 	.word	0x58025444
 8003cbc:	58025458 	.word	0x58025458
 8003cc0:	5802546c 	.word	0x5802546c
 8003cc4:	58025480 	.word	0x58025480
 8003cc8:	58025494 	.word	0x58025494

08003ccc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b086      	sub	sp, #24
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8003cd4:	f7fe f80c 	bl	8001cf0 <HAL_GetTick>
 8003cd8:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d101      	bne.n	8003ce4 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	e2dc      	b.n	800429e <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003cea:	b2db      	uxtb	r3, r3
 8003cec:	2b02      	cmp	r3, #2
 8003cee:	d008      	beq.n	8003d02 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2280      	movs	r2, #128	@ 0x80
 8003cf4:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8003cfe:	2301      	movs	r3, #1
 8003d00:	e2cd      	b.n	800429e <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4a76      	ldr	r2, [pc, #472]	@ (8003ee0 <HAL_DMA_Abort+0x214>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d04a      	beq.n	8003da2 <HAL_DMA_Abort+0xd6>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4a74      	ldr	r2, [pc, #464]	@ (8003ee4 <HAL_DMA_Abort+0x218>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d045      	beq.n	8003da2 <HAL_DMA_Abort+0xd6>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4a73      	ldr	r2, [pc, #460]	@ (8003ee8 <HAL_DMA_Abort+0x21c>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d040      	beq.n	8003da2 <HAL_DMA_Abort+0xd6>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4a71      	ldr	r2, [pc, #452]	@ (8003eec <HAL_DMA_Abort+0x220>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d03b      	beq.n	8003da2 <HAL_DMA_Abort+0xd6>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4a70      	ldr	r2, [pc, #448]	@ (8003ef0 <HAL_DMA_Abort+0x224>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d036      	beq.n	8003da2 <HAL_DMA_Abort+0xd6>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4a6e      	ldr	r2, [pc, #440]	@ (8003ef4 <HAL_DMA_Abort+0x228>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d031      	beq.n	8003da2 <HAL_DMA_Abort+0xd6>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4a6d      	ldr	r2, [pc, #436]	@ (8003ef8 <HAL_DMA_Abort+0x22c>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d02c      	beq.n	8003da2 <HAL_DMA_Abort+0xd6>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4a6b      	ldr	r2, [pc, #428]	@ (8003efc <HAL_DMA_Abort+0x230>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d027      	beq.n	8003da2 <HAL_DMA_Abort+0xd6>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4a6a      	ldr	r2, [pc, #424]	@ (8003f00 <HAL_DMA_Abort+0x234>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d022      	beq.n	8003da2 <HAL_DMA_Abort+0xd6>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a68      	ldr	r2, [pc, #416]	@ (8003f04 <HAL_DMA_Abort+0x238>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d01d      	beq.n	8003da2 <HAL_DMA_Abort+0xd6>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a67      	ldr	r2, [pc, #412]	@ (8003f08 <HAL_DMA_Abort+0x23c>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d018      	beq.n	8003da2 <HAL_DMA_Abort+0xd6>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a65      	ldr	r2, [pc, #404]	@ (8003f0c <HAL_DMA_Abort+0x240>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d013      	beq.n	8003da2 <HAL_DMA_Abort+0xd6>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4a64      	ldr	r2, [pc, #400]	@ (8003f10 <HAL_DMA_Abort+0x244>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d00e      	beq.n	8003da2 <HAL_DMA_Abort+0xd6>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4a62      	ldr	r2, [pc, #392]	@ (8003f14 <HAL_DMA_Abort+0x248>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d009      	beq.n	8003da2 <HAL_DMA_Abort+0xd6>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4a61      	ldr	r2, [pc, #388]	@ (8003f18 <HAL_DMA_Abort+0x24c>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d004      	beq.n	8003da2 <HAL_DMA_Abort+0xd6>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4a5f      	ldr	r2, [pc, #380]	@ (8003f1c <HAL_DMA_Abort+0x250>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d101      	bne.n	8003da6 <HAL_DMA_Abort+0xda>
 8003da2:	2301      	movs	r3, #1
 8003da4:	e000      	b.n	8003da8 <HAL_DMA_Abort+0xdc>
 8003da6:	2300      	movs	r3, #0
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d013      	beq.n	8003dd4 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	681a      	ldr	r2, [r3, #0]
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f022 021e 	bic.w	r2, r2, #30
 8003dba:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	695a      	ldr	r2, [r3, #20]
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003dca:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	617b      	str	r3, [r7, #20]
 8003dd2:	e00a      	b.n	8003dea <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	681a      	ldr	r2, [r3, #0]
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f022 020e 	bic.w	r2, r2, #14
 8003de2:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4a3c      	ldr	r2, [pc, #240]	@ (8003ee0 <HAL_DMA_Abort+0x214>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d072      	beq.n	8003eda <HAL_DMA_Abort+0x20e>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a3a      	ldr	r2, [pc, #232]	@ (8003ee4 <HAL_DMA_Abort+0x218>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d06d      	beq.n	8003eda <HAL_DMA_Abort+0x20e>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4a39      	ldr	r2, [pc, #228]	@ (8003ee8 <HAL_DMA_Abort+0x21c>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d068      	beq.n	8003eda <HAL_DMA_Abort+0x20e>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a37      	ldr	r2, [pc, #220]	@ (8003eec <HAL_DMA_Abort+0x220>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d063      	beq.n	8003eda <HAL_DMA_Abort+0x20e>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4a36      	ldr	r2, [pc, #216]	@ (8003ef0 <HAL_DMA_Abort+0x224>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d05e      	beq.n	8003eda <HAL_DMA_Abort+0x20e>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4a34      	ldr	r2, [pc, #208]	@ (8003ef4 <HAL_DMA_Abort+0x228>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d059      	beq.n	8003eda <HAL_DMA_Abort+0x20e>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4a33      	ldr	r2, [pc, #204]	@ (8003ef8 <HAL_DMA_Abort+0x22c>)
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d054      	beq.n	8003eda <HAL_DMA_Abort+0x20e>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a31      	ldr	r2, [pc, #196]	@ (8003efc <HAL_DMA_Abort+0x230>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d04f      	beq.n	8003eda <HAL_DMA_Abort+0x20e>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4a30      	ldr	r2, [pc, #192]	@ (8003f00 <HAL_DMA_Abort+0x234>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d04a      	beq.n	8003eda <HAL_DMA_Abort+0x20e>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4a2e      	ldr	r2, [pc, #184]	@ (8003f04 <HAL_DMA_Abort+0x238>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d045      	beq.n	8003eda <HAL_DMA_Abort+0x20e>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a2d      	ldr	r2, [pc, #180]	@ (8003f08 <HAL_DMA_Abort+0x23c>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d040      	beq.n	8003eda <HAL_DMA_Abort+0x20e>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4a2b      	ldr	r2, [pc, #172]	@ (8003f0c <HAL_DMA_Abort+0x240>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d03b      	beq.n	8003eda <HAL_DMA_Abort+0x20e>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4a2a      	ldr	r2, [pc, #168]	@ (8003f10 <HAL_DMA_Abort+0x244>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d036      	beq.n	8003eda <HAL_DMA_Abort+0x20e>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a28      	ldr	r2, [pc, #160]	@ (8003f14 <HAL_DMA_Abort+0x248>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d031      	beq.n	8003eda <HAL_DMA_Abort+0x20e>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4a27      	ldr	r2, [pc, #156]	@ (8003f18 <HAL_DMA_Abort+0x24c>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d02c      	beq.n	8003eda <HAL_DMA_Abort+0x20e>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4a25      	ldr	r2, [pc, #148]	@ (8003f1c <HAL_DMA_Abort+0x250>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d027      	beq.n	8003eda <HAL_DMA_Abort+0x20e>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4a24      	ldr	r2, [pc, #144]	@ (8003f20 <HAL_DMA_Abort+0x254>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d022      	beq.n	8003eda <HAL_DMA_Abort+0x20e>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4a22      	ldr	r2, [pc, #136]	@ (8003f24 <HAL_DMA_Abort+0x258>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d01d      	beq.n	8003eda <HAL_DMA_Abort+0x20e>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4a21      	ldr	r2, [pc, #132]	@ (8003f28 <HAL_DMA_Abort+0x25c>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d018      	beq.n	8003eda <HAL_DMA_Abort+0x20e>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4a1f      	ldr	r2, [pc, #124]	@ (8003f2c <HAL_DMA_Abort+0x260>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d013      	beq.n	8003eda <HAL_DMA_Abort+0x20e>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4a1e      	ldr	r2, [pc, #120]	@ (8003f30 <HAL_DMA_Abort+0x264>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d00e      	beq.n	8003eda <HAL_DMA_Abort+0x20e>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4a1c      	ldr	r2, [pc, #112]	@ (8003f34 <HAL_DMA_Abort+0x268>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d009      	beq.n	8003eda <HAL_DMA_Abort+0x20e>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4a1b      	ldr	r2, [pc, #108]	@ (8003f38 <HAL_DMA_Abort+0x26c>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d004      	beq.n	8003eda <HAL_DMA_Abort+0x20e>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4a19      	ldr	r2, [pc, #100]	@ (8003f3c <HAL_DMA_Abort+0x270>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d132      	bne.n	8003f40 <HAL_DMA_Abort+0x274>
 8003eda:	2301      	movs	r3, #1
 8003edc:	e031      	b.n	8003f42 <HAL_DMA_Abort+0x276>
 8003ede:	bf00      	nop
 8003ee0:	40020010 	.word	0x40020010
 8003ee4:	40020028 	.word	0x40020028
 8003ee8:	40020040 	.word	0x40020040
 8003eec:	40020058 	.word	0x40020058
 8003ef0:	40020070 	.word	0x40020070
 8003ef4:	40020088 	.word	0x40020088
 8003ef8:	400200a0 	.word	0x400200a0
 8003efc:	400200b8 	.word	0x400200b8
 8003f00:	40020410 	.word	0x40020410
 8003f04:	40020428 	.word	0x40020428
 8003f08:	40020440 	.word	0x40020440
 8003f0c:	40020458 	.word	0x40020458
 8003f10:	40020470 	.word	0x40020470
 8003f14:	40020488 	.word	0x40020488
 8003f18:	400204a0 	.word	0x400204a0
 8003f1c:	400204b8 	.word	0x400204b8
 8003f20:	58025408 	.word	0x58025408
 8003f24:	5802541c 	.word	0x5802541c
 8003f28:	58025430 	.word	0x58025430
 8003f2c:	58025444 	.word	0x58025444
 8003f30:	58025458 	.word	0x58025458
 8003f34:	5802546c 	.word	0x5802546c
 8003f38:	58025480 	.word	0x58025480
 8003f3c:	58025494 	.word	0x58025494
 8003f40:	2300      	movs	r3, #0
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d007      	beq.n	8003f56 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f4a:	681a      	ldr	r2, [r3, #0]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f50:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003f54:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4a6d      	ldr	r2, [pc, #436]	@ (8004110 <HAL_DMA_Abort+0x444>)
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d04a      	beq.n	8003ff6 <HAL_DMA_Abort+0x32a>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a6b      	ldr	r2, [pc, #428]	@ (8004114 <HAL_DMA_Abort+0x448>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d045      	beq.n	8003ff6 <HAL_DMA_Abort+0x32a>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4a6a      	ldr	r2, [pc, #424]	@ (8004118 <HAL_DMA_Abort+0x44c>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d040      	beq.n	8003ff6 <HAL_DMA_Abort+0x32a>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a68      	ldr	r2, [pc, #416]	@ (800411c <HAL_DMA_Abort+0x450>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d03b      	beq.n	8003ff6 <HAL_DMA_Abort+0x32a>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4a67      	ldr	r2, [pc, #412]	@ (8004120 <HAL_DMA_Abort+0x454>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d036      	beq.n	8003ff6 <HAL_DMA_Abort+0x32a>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4a65      	ldr	r2, [pc, #404]	@ (8004124 <HAL_DMA_Abort+0x458>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d031      	beq.n	8003ff6 <HAL_DMA_Abort+0x32a>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4a64      	ldr	r2, [pc, #400]	@ (8004128 <HAL_DMA_Abort+0x45c>)
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d02c      	beq.n	8003ff6 <HAL_DMA_Abort+0x32a>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a62      	ldr	r2, [pc, #392]	@ (800412c <HAL_DMA_Abort+0x460>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d027      	beq.n	8003ff6 <HAL_DMA_Abort+0x32a>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4a61      	ldr	r2, [pc, #388]	@ (8004130 <HAL_DMA_Abort+0x464>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d022      	beq.n	8003ff6 <HAL_DMA_Abort+0x32a>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4a5f      	ldr	r2, [pc, #380]	@ (8004134 <HAL_DMA_Abort+0x468>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d01d      	beq.n	8003ff6 <HAL_DMA_Abort+0x32a>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4a5e      	ldr	r2, [pc, #376]	@ (8004138 <HAL_DMA_Abort+0x46c>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d018      	beq.n	8003ff6 <HAL_DMA_Abort+0x32a>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4a5c      	ldr	r2, [pc, #368]	@ (800413c <HAL_DMA_Abort+0x470>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d013      	beq.n	8003ff6 <HAL_DMA_Abort+0x32a>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4a5b      	ldr	r2, [pc, #364]	@ (8004140 <HAL_DMA_Abort+0x474>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d00e      	beq.n	8003ff6 <HAL_DMA_Abort+0x32a>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4a59      	ldr	r2, [pc, #356]	@ (8004144 <HAL_DMA_Abort+0x478>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d009      	beq.n	8003ff6 <HAL_DMA_Abort+0x32a>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4a58      	ldr	r2, [pc, #352]	@ (8004148 <HAL_DMA_Abort+0x47c>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d004      	beq.n	8003ff6 <HAL_DMA_Abort+0x32a>
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4a56      	ldr	r2, [pc, #344]	@ (800414c <HAL_DMA_Abort+0x480>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d108      	bne.n	8004008 <HAL_DMA_Abort+0x33c>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	681a      	ldr	r2, [r3, #0]
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f022 0201 	bic.w	r2, r2, #1
 8004004:	601a      	str	r2, [r3, #0]
 8004006:	e007      	b.n	8004018 <HAL_DMA_Abort+0x34c>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	681a      	ldr	r2, [r3, #0]
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f022 0201 	bic.w	r2, r2, #1
 8004016:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8004018:	e013      	b.n	8004042 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800401a:	f7fd fe69 	bl	8001cf0 <HAL_GetTick>
 800401e:	4602      	mov	r2, r0
 8004020:	693b      	ldr	r3, [r7, #16]
 8004022:	1ad3      	subs	r3, r2, r3
 8004024:	2b05      	cmp	r3, #5
 8004026:	d90c      	bls.n	8004042 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2220      	movs	r2, #32
 800402c:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2203      	movs	r2, #3
 8004032:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2200      	movs	r2, #0
 800403a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 800403e:	2301      	movs	r3, #1
 8004040:	e12d      	b.n	800429e <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8004042:	697b      	ldr	r3, [r7, #20]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f003 0301 	and.w	r3, r3, #1
 800404a:	2b00      	cmp	r3, #0
 800404c:	d1e5      	bne.n	800401a <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4a2f      	ldr	r2, [pc, #188]	@ (8004110 <HAL_DMA_Abort+0x444>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d04a      	beq.n	80040ee <HAL_DMA_Abort+0x422>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4a2d      	ldr	r2, [pc, #180]	@ (8004114 <HAL_DMA_Abort+0x448>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d045      	beq.n	80040ee <HAL_DMA_Abort+0x422>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4a2c      	ldr	r2, [pc, #176]	@ (8004118 <HAL_DMA_Abort+0x44c>)
 8004068:	4293      	cmp	r3, r2
 800406a:	d040      	beq.n	80040ee <HAL_DMA_Abort+0x422>
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4a2a      	ldr	r2, [pc, #168]	@ (800411c <HAL_DMA_Abort+0x450>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d03b      	beq.n	80040ee <HAL_DMA_Abort+0x422>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4a29      	ldr	r2, [pc, #164]	@ (8004120 <HAL_DMA_Abort+0x454>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d036      	beq.n	80040ee <HAL_DMA_Abort+0x422>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4a27      	ldr	r2, [pc, #156]	@ (8004124 <HAL_DMA_Abort+0x458>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d031      	beq.n	80040ee <HAL_DMA_Abort+0x422>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4a26      	ldr	r2, [pc, #152]	@ (8004128 <HAL_DMA_Abort+0x45c>)
 8004090:	4293      	cmp	r3, r2
 8004092:	d02c      	beq.n	80040ee <HAL_DMA_Abort+0x422>
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4a24      	ldr	r2, [pc, #144]	@ (800412c <HAL_DMA_Abort+0x460>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d027      	beq.n	80040ee <HAL_DMA_Abort+0x422>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4a23      	ldr	r2, [pc, #140]	@ (8004130 <HAL_DMA_Abort+0x464>)
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d022      	beq.n	80040ee <HAL_DMA_Abort+0x422>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4a21      	ldr	r2, [pc, #132]	@ (8004134 <HAL_DMA_Abort+0x468>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d01d      	beq.n	80040ee <HAL_DMA_Abort+0x422>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	4a20      	ldr	r2, [pc, #128]	@ (8004138 <HAL_DMA_Abort+0x46c>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d018      	beq.n	80040ee <HAL_DMA_Abort+0x422>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4a1e      	ldr	r2, [pc, #120]	@ (800413c <HAL_DMA_Abort+0x470>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d013      	beq.n	80040ee <HAL_DMA_Abort+0x422>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4a1d      	ldr	r2, [pc, #116]	@ (8004140 <HAL_DMA_Abort+0x474>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d00e      	beq.n	80040ee <HAL_DMA_Abort+0x422>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4a1b      	ldr	r2, [pc, #108]	@ (8004144 <HAL_DMA_Abort+0x478>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d009      	beq.n	80040ee <HAL_DMA_Abort+0x422>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4a1a      	ldr	r2, [pc, #104]	@ (8004148 <HAL_DMA_Abort+0x47c>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d004      	beq.n	80040ee <HAL_DMA_Abort+0x422>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4a18      	ldr	r2, [pc, #96]	@ (800414c <HAL_DMA_Abort+0x480>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d101      	bne.n	80040f2 <HAL_DMA_Abort+0x426>
 80040ee:	2301      	movs	r3, #1
 80040f0:	e000      	b.n	80040f4 <HAL_DMA_Abort+0x428>
 80040f2:	2300      	movs	r3, #0
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d02b      	beq.n	8004150 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040fc:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004102:	f003 031f 	and.w	r3, r3, #31
 8004106:	223f      	movs	r2, #63	@ 0x3f
 8004108:	409a      	lsls	r2, r3
 800410a:	68bb      	ldr	r3, [r7, #8]
 800410c:	609a      	str	r2, [r3, #8]
 800410e:	e02a      	b.n	8004166 <HAL_DMA_Abort+0x49a>
 8004110:	40020010 	.word	0x40020010
 8004114:	40020028 	.word	0x40020028
 8004118:	40020040 	.word	0x40020040
 800411c:	40020058 	.word	0x40020058
 8004120:	40020070 	.word	0x40020070
 8004124:	40020088 	.word	0x40020088
 8004128:	400200a0 	.word	0x400200a0
 800412c:	400200b8 	.word	0x400200b8
 8004130:	40020410 	.word	0x40020410
 8004134:	40020428 	.word	0x40020428
 8004138:	40020440 	.word	0x40020440
 800413c:	40020458 	.word	0x40020458
 8004140:	40020470 	.word	0x40020470
 8004144:	40020488 	.word	0x40020488
 8004148:	400204a0 	.word	0x400204a0
 800414c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004154:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800415a:	f003 031f 	and.w	r3, r3, #31
 800415e:	2201      	movs	r2, #1
 8004160:	409a      	lsls	r2, r3
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4a4f      	ldr	r2, [pc, #316]	@ (80042a8 <HAL_DMA_Abort+0x5dc>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d072      	beq.n	8004256 <HAL_DMA_Abort+0x58a>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	4a4d      	ldr	r2, [pc, #308]	@ (80042ac <HAL_DMA_Abort+0x5e0>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d06d      	beq.n	8004256 <HAL_DMA_Abort+0x58a>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4a4c      	ldr	r2, [pc, #304]	@ (80042b0 <HAL_DMA_Abort+0x5e4>)
 8004180:	4293      	cmp	r3, r2
 8004182:	d068      	beq.n	8004256 <HAL_DMA_Abort+0x58a>
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	4a4a      	ldr	r2, [pc, #296]	@ (80042b4 <HAL_DMA_Abort+0x5e8>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d063      	beq.n	8004256 <HAL_DMA_Abort+0x58a>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4a49      	ldr	r2, [pc, #292]	@ (80042b8 <HAL_DMA_Abort+0x5ec>)
 8004194:	4293      	cmp	r3, r2
 8004196:	d05e      	beq.n	8004256 <HAL_DMA_Abort+0x58a>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	4a47      	ldr	r2, [pc, #284]	@ (80042bc <HAL_DMA_Abort+0x5f0>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d059      	beq.n	8004256 <HAL_DMA_Abort+0x58a>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4a46      	ldr	r2, [pc, #280]	@ (80042c0 <HAL_DMA_Abort+0x5f4>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d054      	beq.n	8004256 <HAL_DMA_Abort+0x58a>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4a44      	ldr	r2, [pc, #272]	@ (80042c4 <HAL_DMA_Abort+0x5f8>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d04f      	beq.n	8004256 <HAL_DMA_Abort+0x58a>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4a43      	ldr	r2, [pc, #268]	@ (80042c8 <HAL_DMA_Abort+0x5fc>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d04a      	beq.n	8004256 <HAL_DMA_Abort+0x58a>
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4a41      	ldr	r2, [pc, #260]	@ (80042cc <HAL_DMA_Abort+0x600>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d045      	beq.n	8004256 <HAL_DMA_Abort+0x58a>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4a40      	ldr	r2, [pc, #256]	@ (80042d0 <HAL_DMA_Abort+0x604>)
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d040      	beq.n	8004256 <HAL_DMA_Abort+0x58a>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	4a3e      	ldr	r2, [pc, #248]	@ (80042d4 <HAL_DMA_Abort+0x608>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d03b      	beq.n	8004256 <HAL_DMA_Abort+0x58a>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4a3d      	ldr	r2, [pc, #244]	@ (80042d8 <HAL_DMA_Abort+0x60c>)
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d036      	beq.n	8004256 <HAL_DMA_Abort+0x58a>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4a3b      	ldr	r2, [pc, #236]	@ (80042dc <HAL_DMA_Abort+0x610>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d031      	beq.n	8004256 <HAL_DMA_Abort+0x58a>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4a3a      	ldr	r2, [pc, #232]	@ (80042e0 <HAL_DMA_Abort+0x614>)
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d02c      	beq.n	8004256 <HAL_DMA_Abort+0x58a>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4a38      	ldr	r2, [pc, #224]	@ (80042e4 <HAL_DMA_Abort+0x618>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d027      	beq.n	8004256 <HAL_DMA_Abort+0x58a>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4a37      	ldr	r2, [pc, #220]	@ (80042e8 <HAL_DMA_Abort+0x61c>)
 800420c:	4293      	cmp	r3, r2
 800420e:	d022      	beq.n	8004256 <HAL_DMA_Abort+0x58a>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4a35      	ldr	r2, [pc, #212]	@ (80042ec <HAL_DMA_Abort+0x620>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d01d      	beq.n	8004256 <HAL_DMA_Abort+0x58a>
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4a34      	ldr	r2, [pc, #208]	@ (80042f0 <HAL_DMA_Abort+0x624>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d018      	beq.n	8004256 <HAL_DMA_Abort+0x58a>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4a32      	ldr	r2, [pc, #200]	@ (80042f4 <HAL_DMA_Abort+0x628>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d013      	beq.n	8004256 <HAL_DMA_Abort+0x58a>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	4a31      	ldr	r2, [pc, #196]	@ (80042f8 <HAL_DMA_Abort+0x62c>)
 8004234:	4293      	cmp	r3, r2
 8004236:	d00e      	beq.n	8004256 <HAL_DMA_Abort+0x58a>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4a2f      	ldr	r2, [pc, #188]	@ (80042fc <HAL_DMA_Abort+0x630>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d009      	beq.n	8004256 <HAL_DMA_Abort+0x58a>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4a2e      	ldr	r2, [pc, #184]	@ (8004300 <HAL_DMA_Abort+0x634>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d004      	beq.n	8004256 <HAL_DMA_Abort+0x58a>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4a2c      	ldr	r2, [pc, #176]	@ (8004304 <HAL_DMA_Abort+0x638>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d101      	bne.n	800425a <HAL_DMA_Abort+0x58e>
 8004256:	2301      	movs	r3, #1
 8004258:	e000      	b.n	800425c <HAL_DMA_Abort+0x590>
 800425a:	2300      	movs	r3, #0
 800425c:	2b00      	cmp	r3, #0
 800425e:	d015      	beq.n	800428c <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004264:	687a      	ldr	r2, [r7, #4]
 8004266:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004268:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800426e:	2b00      	cmp	r3, #0
 8004270:	d00c      	beq.n	800428c <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004276:	681a      	ldr	r2, [r3, #0]
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800427c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004280:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004286:	687a      	ldr	r2, [r7, #4]
 8004288:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800428a:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2201      	movs	r2, #1
 8004290:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2200      	movs	r2, #0
 8004298:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 800429c:	2300      	movs	r3, #0
}
 800429e:	4618      	mov	r0, r3
 80042a0:	3718      	adds	r7, #24
 80042a2:	46bd      	mov	sp, r7
 80042a4:	bd80      	pop	{r7, pc}
 80042a6:	bf00      	nop
 80042a8:	40020010 	.word	0x40020010
 80042ac:	40020028 	.word	0x40020028
 80042b0:	40020040 	.word	0x40020040
 80042b4:	40020058 	.word	0x40020058
 80042b8:	40020070 	.word	0x40020070
 80042bc:	40020088 	.word	0x40020088
 80042c0:	400200a0 	.word	0x400200a0
 80042c4:	400200b8 	.word	0x400200b8
 80042c8:	40020410 	.word	0x40020410
 80042cc:	40020428 	.word	0x40020428
 80042d0:	40020440 	.word	0x40020440
 80042d4:	40020458 	.word	0x40020458
 80042d8:	40020470 	.word	0x40020470
 80042dc:	40020488 	.word	0x40020488
 80042e0:	400204a0 	.word	0x400204a0
 80042e4:	400204b8 	.word	0x400204b8
 80042e8:	58025408 	.word	0x58025408
 80042ec:	5802541c 	.word	0x5802541c
 80042f0:	58025430 	.word	0x58025430
 80042f4:	58025444 	.word	0x58025444
 80042f8:	58025458 	.word	0x58025458
 80042fc:	5802546c 	.word	0x5802546c
 8004300:	58025480 	.word	0x58025480
 8004304:	58025494 	.word	0x58025494

08004308 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b084      	sub	sp, #16
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d101      	bne.n	800431a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8004316:	2301      	movs	r3, #1
 8004318:	e237      	b.n	800478a <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004320:	b2db      	uxtb	r3, r3
 8004322:	2b02      	cmp	r3, #2
 8004324:	d004      	beq.n	8004330 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2280      	movs	r2, #128	@ 0x80
 800432a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800432c:	2301      	movs	r3, #1
 800432e:	e22c      	b.n	800478a <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4a5c      	ldr	r2, [pc, #368]	@ (80044a8 <HAL_DMA_Abort_IT+0x1a0>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d04a      	beq.n	80043d0 <HAL_DMA_Abort_IT+0xc8>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4a5b      	ldr	r2, [pc, #364]	@ (80044ac <HAL_DMA_Abort_IT+0x1a4>)
 8004340:	4293      	cmp	r3, r2
 8004342:	d045      	beq.n	80043d0 <HAL_DMA_Abort_IT+0xc8>
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4a59      	ldr	r2, [pc, #356]	@ (80044b0 <HAL_DMA_Abort_IT+0x1a8>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d040      	beq.n	80043d0 <HAL_DMA_Abort_IT+0xc8>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4a58      	ldr	r2, [pc, #352]	@ (80044b4 <HAL_DMA_Abort_IT+0x1ac>)
 8004354:	4293      	cmp	r3, r2
 8004356:	d03b      	beq.n	80043d0 <HAL_DMA_Abort_IT+0xc8>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4a56      	ldr	r2, [pc, #344]	@ (80044b8 <HAL_DMA_Abort_IT+0x1b0>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d036      	beq.n	80043d0 <HAL_DMA_Abort_IT+0xc8>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4a55      	ldr	r2, [pc, #340]	@ (80044bc <HAL_DMA_Abort_IT+0x1b4>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d031      	beq.n	80043d0 <HAL_DMA_Abort_IT+0xc8>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4a53      	ldr	r2, [pc, #332]	@ (80044c0 <HAL_DMA_Abort_IT+0x1b8>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d02c      	beq.n	80043d0 <HAL_DMA_Abort_IT+0xc8>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4a52      	ldr	r2, [pc, #328]	@ (80044c4 <HAL_DMA_Abort_IT+0x1bc>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d027      	beq.n	80043d0 <HAL_DMA_Abort_IT+0xc8>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a50      	ldr	r2, [pc, #320]	@ (80044c8 <HAL_DMA_Abort_IT+0x1c0>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d022      	beq.n	80043d0 <HAL_DMA_Abort_IT+0xc8>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4a4f      	ldr	r2, [pc, #316]	@ (80044cc <HAL_DMA_Abort_IT+0x1c4>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d01d      	beq.n	80043d0 <HAL_DMA_Abort_IT+0xc8>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4a4d      	ldr	r2, [pc, #308]	@ (80044d0 <HAL_DMA_Abort_IT+0x1c8>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d018      	beq.n	80043d0 <HAL_DMA_Abort_IT+0xc8>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4a4c      	ldr	r2, [pc, #304]	@ (80044d4 <HAL_DMA_Abort_IT+0x1cc>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d013      	beq.n	80043d0 <HAL_DMA_Abort_IT+0xc8>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a4a      	ldr	r2, [pc, #296]	@ (80044d8 <HAL_DMA_Abort_IT+0x1d0>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d00e      	beq.n	80043d0 <HAL_DMA_Abort_IT+0xc8>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4a49      	ldr	r2, [pc, #292]	@ (80044dc <HAL_DMA_Abort_IT+0x1d4>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d009      	beq.n	80043d0 <HAL_DMA_Abort_IT+0xc8>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a47      	ldr	r2, [pc, #284]	@ (80044e0 <HAL_DMA_Abort_IT+0x1d8>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d004      	beq.n	80043d0 <HAL_DMA_Abort_IT+0xc8>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a46      	ldr	r2, [pc, #280]	@ (80044e4 <HAL_DMA_Abort_IT+0x1dc>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d101      	bne.n	80043d4 <HAL_DMA_Abort_IT+0xcc>
 80043d0:	2301      	movs	r3, #1
 80043d2:	e000      	b.n	80043d6 <HAL_DMA_Abort_IT+0xce>
 80043d4:	2300      	movs	r3, #0
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	f000 8086 	beq.w	80044e8 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2204      	movs	r2, #4
 80043e0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a2f      	ldr	r2, [pc, #188]	@ (80044a8 <HAL_DMA_Abort_IT+0x1a0>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d04a      	beq.n	8004484 <HAL_DMA_Abort_IT+0x17c>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4a2e      	ldr	r2, [pc, #184]	@ (80044ac <HAL_DMA_Abort_IT+0x1a4>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d045      	beq.n	8004484 <HAL_DMA_Abort_IT+0x17c>
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4a2c      	ldr	r2, [pc, #176]	@ (80044b0 <HAL_DMA_Abort_IT+0x1a8>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d040      	beq.n	8004484 <HAL_DMA_Abort_IT+0x17c>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4a2b      	ldr	r2, [pc, #172]	@ (80044b4 <HAL_DMA_Abort_IT+0x1ac>)
 8004408:	4293      	cmp	r3, r2
 800440a:	d03b      	beq.n	8004484 <HAL_DMA_Abort_IT+0x17c>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a29      	ldr	r2, [pc, #164]	@ (80044b8 <HAL_DMA_Abort_IT+0x1b0>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d036      	beq.n	8004484 <HAL_DMA_Abort_IT+0x17c>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4a28      	ldr	r2, [pc, #160]	@ (80044bc <HAL_DMA_Abort_IT+0x1b4>)
 800441c:	4293      	cmp	r3, r2
 800441e:	d031      	beq.n	8004484 <HAL_DMA_Abort_IT+0x17c>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4a26      	ldr	r2, [pc, #152]	@ (80044c0 <HAL_DMA_Abort_IT+0x1b8>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d02c      	beq.n	8004484 <HAL_DMA_Abort_IT+0x17c>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4a25      	ldr	r2, [pc, #148]	@ (80044c4 <HAL_DMA_Abort_IT+0x1bc>)
 8004430:	4293      	cmp	r3, r2
 8004432:	d027      	beq.n	8004484 <HAL_DMA_Abort_IT+0x17c>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4a23      	ldr	r2, [pc, #140]	@ (80044c8 <HAL_DMA_Abort_IT+0x1c0>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d022      	beq.n	8004484 <HAL_DMA_Abort_IT+0x17c>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4a22      	ldr	r2, [pc, #136]	@ (80044cc <HAL_DMA_Abort_IT+0x1c4>)
 8004444:	4293      	cmp	r3, r2
 8004446:	d01d      	beq.n	8004484 <HAL_DMA_Abort_IT+0x17c>
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4a20      	ldr	r2, [pc, #128]	@ (80044d0 <HAL_DMA_Abort_IT+0x1c8>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d018      	beq.n	8004484 <HAL_DMA_Abort_IT+0x17c>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4a1f      	ldr	r2, [pc, #124]	@ (80044d4 <HAL_DMA_Abort_IT+0x1cc>)
 8004458:	4293      	cmp	r3, r2
 800445a:	d013      	beq.n	8004484 <HAL_DMA_Abort_IT+0x17c>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4a1d      	ldr	r2, [pc, #116]	@ (80044d8 <HAL_DMA_Abort_IT+0x1d0>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d00e      	beq.n	8004484 <HAL_DMA_Abort_IT+0x17c>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	4a1c      	ldr	r2, [pc, #112]	@ (80044dc <HAL_DMA_Abort_IT+0x1d4>)
 800446c:	4293      	cmp	r3, r2
 800446e:	d009      	beq.n	8004484 <HAL_DMA_Abort_IT+0x17c>
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	4a1a      	ldr	r2, [pc, #104]	@ (80044e0 <HAL_DMA_Abort_IT+0x1d8>)
 8004476:	4293      	cmp	r3, r2
 8004478:	d004      	beq.n	8004484 <HAL_DMA_Abort_IT+0x17c>
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4a19      	ldr	r2, [pc, #100]	@ (80044e4 <HAL_DMA_Abort_IT+0x1dc>)
 8004480:	4293      	cmp	r3, r2
 8004482:	d108      	bne.n	8004496 <HAL_DMA_Abort_IT+0x18e>
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	681a      	ldr	r2, [r3, #0]
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f022 0201 	bic.w	r2, r2, #1
 8004492:	601a      	str	r2, [r3, #0]
 8004494:	e178      	b.n	8004788 <HAL_DMA_Abort_IT+0x480>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	681a      	ldr	r2, [r3, #0]
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f022 0201 	bic.w	r2, r2, #1
 80044a4:	601a      	str	r2, [r3, #0]
 80044a6:	e16f      	b.n	8004788 <HAL_DMA_Abort_IT+0x480>
 80044a8:	40020010 	.word	0x40020010
 80044ac:	40020028 	.word	0x40020028
 80044b0:	40020040 	.word	0x40020040
 80044b4:	40020058 	.word	0x40020058
 80044b8:	40020070 	.word	0x40020070
 80044bc:	40020088 	.word	0x40020088
 80044c0:	400200a0 	.word	0x400200a0
 80044c4:	400200b8 	.word	0x400200b8
 80044c8:	40020410 	.word	0x40020410
 80044cc:	40020428 	.word	0x40020428
 80044d0:	40020440 	.word	0x40020440
 80044d4:	40020458 	.word	0x40020458
 80044d8:	40020470 	.word	0x40020470
 80044dc:	40020488 	.word	0x40020488
 80044e0:	400204a0 	.word	0x400204a0
 80044e4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	681a      	ldr	r2, [r3, #0]
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f022 020e 	bic.w	r2, r2, #14
 80044f6:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	4a6c      	ldr	r2, [pc, #432]	@ (80046b0 <HAL_DMA_Abort_IT+0x3a8>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d04a      	beq.n	8004598 <HAL_DMA_Abort_IT+0x290>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4a6b      	ldr	r2, [pc, #428]	@ (80046b4 <HAL_DMA_Abort_IT+0x3ac>)
 8004508:	4293      	cmp	r3, r2
 800450a:	d045      	beq.n	8004598 <HAL_DMA_Abort_IT+0x290>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4a69      	ldr	r2, [pc, #420]	@ (80046b8 <HAL_DMA_Abort_IT+0x3b0>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d040      	beq.n	8004598 <HAL_DMA_Abort_IT+0x290>
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	4a68      	ldr	r2, [pc, #416]	@ (80046bc <HAL_DMA_Abort_IT+0x3b4>)
 800451c:	4293      	cmp	r3, r2
 800451e:	d03b      	beq.n	8004598 <HAL_DMA_Abort_IT+0x290>
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4a66      	ldr	r2, [pc, #408]	@ (80046c0 <HAL_DMA_Abort_IT+0x3b8>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d036      	beq.n	8004598 <HAL_DMA_Abort_IT+0x290>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	4a65      	ldr	r2, [pc, #404]	@ (80046c4 <HAL_DMA_Abort_IT+0x3bc>)
 8004530:	4293      	cmp	r3, r2
 8004532:	d031      	beq.n	8004598 <HAL_DMA_Abort_IT+0x290>
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4a63      	ldr	r2, [pc, #396]	@ (80046c8 <HAL_DMA_Abort_IT+0x3c0>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d02c      	beq.n	8004598 <HAL_DMA_Abort_IT+0x290>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	4a62      	ldr	r2, [pc, #392]	@ (80046cc <HAL_DMA_Abort_IT+0x3c4>)
 8004544:	4293      	cmp	r3, r2
 8004546:	d027      	beq.n	8004598 <HAL_DMA_Abort_IT+0x290>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4a60      	ldr	r2, [pc, #384]	@ (80046d0 <HAL_DMA_Abort_IT+0x3c8>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d022      	beq.n	8004598 <HAL_DMA_Abort_IT+0x290>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4a5f      	ldr	r2, [pc, #380]	@ (80046d4 <HAL_DMA_Abort_IT+0x3cc>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d01d      	beq.n	8004598 <HAL_DMA_Abort_IT+0x290>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4a5d      	ldr	r2, [pc, #372]	@ (80046d8 <HAL_DMA_Abort_IT+0x3d0>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d018      	beq.n	8004598 <HAL_DMA_Abort_IT+0x290>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4a5c      	ldr	r2, [pc, #368]	@ (80046dc <HAL_DMA_Abort_IT+0x3d4>)
 800456c:	4293      	cmp	r3, r2
 800456e:	d013      	beq.n	8004598 <HAL_DMA_Abort_IT+0x290>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4a5a      	ldr	r2, [pc, #360]	@ (80046e0 <HAL_DMA_Abort_IT+0x3d8>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d00e      	beq.n	8004598 <HAL_DMA_Abort_IT+0x290>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4a59      	ldr	r2, [pc, #356]	@ (80046e4 <HAL_DMA_Abort_IT+0x3dc>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d009      	beq.n	8004598 <HAL_DMA_Abort_IT+0x290>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4a57      	ldr	r2, [pc, #348]	@ (80046e8 <HAL_DMA_Abort_IT+0x3e0>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d004      	beq.n	8004598 <HAL_DMA_Abort_IT+0x290>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4a56      	ldr	r2, [pc, #344]	@ (80046ec <HAL_DMA_Abort_IT+0x3e4>)
 8004594:	4293      	cmp	r3, r2
 8004596:	d108      	bne.n	80045aa <HAL_DMA_Abort_IT+0x2a2>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	681a      	ldr	r2, [r3, #0]
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f022 0201 	bic.w	r2, r2, #1
 80045a6:	601a      	str	r2, [r3, #0]
 80045a8:	e007      	b.n	80045ba <HAL_DMA_Abort_IT+0x2b2>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	681a      	ldr	r2, [r3, #0]
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f022 0201 	bic.w	r2, r2, #1
 80045b8:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	4a3c      	ldr	r2, [pc, #240]	@ (80046b0 <HAL_DMA_Abort_IT+0x3a8>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d072      	beq.n	80046aa <HAL_DMA_Abort_IT+0x3a2>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	4a3a      	ldr	r2, [pc, #232]	@ (80046b4 <HAL_DMA_Abort_IT+0x3ac>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d06d      	beq.n	80046aa <HAL_DMA_Abort_IT+0x3a2>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	4a39      	ldr	r2, [pc, #228]	@ (80046b8 <HAL_DMA_Abort_IT+0x3b0>)
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d068      	beq.n	80046aa <HAL_DMA_Abort_IT+0x3a2>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	4a37      	ldr	r2, [pc, #220]	@ (80046bc <HAL_DMA_Abort_IT+0x3b4>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d063      	beq.n	80046aa <HAL_DMA_Abort_IT+0x3a2>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	4a36      	ldr	r2, [pc, #216]	@ (80046c0 <HAL_DMA_Abort_IT+0x3b8>)
 80045e8:	4293      	cmp	r3, r2
 80045ea:	d05e      	beq.n	80046aa <HAL_DMA_Abort_IT+0x3a2>
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4a34      	ldr	r2, [pc, #208]	@ (80046c4 <HAL_DMA_Abort_IT+0x3bc>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d059      	beq.n	80046aa <HAL_DMA_Abort_IT+0x3a2>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	4a33      	ldr	r2, [pc, #204]	@ (80046c8 <HAL_DMA_Abort_IT+0x3c0>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d054      	beq.n	80046aa <HAL_DMA_Abort_IT+0x3a2>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	4a31      	ldr	r2, [pc, #196]	@ (80046cc <HAL_DMA_Abort_IT+0x3c4>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d04f      	beq.n	80046aa <HAL_DMA_Abort_IT+0x3a2>
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	4a30      	ldr	r2, [pc, #192]	@ (80046d0 <HAL_DMA_Abort_IT+0x3c8>)
 8004610:	4293      	cmp	r3, r2
 8004612:	d04a      	beq.n	80046aa <HAL_DMA_Abort_IT+0x3a2>
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4a2e      	ldr	r2, [pc, #184]	@ (80046d4 <HAL_DMA_Abort_IT+0x3cc>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d045      	beq.n	80046aa <HAL_DMA_Abort_IT+0x3a2>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4a2d      	ldr	r2, [pc, #180]	@ (80046d8 <HAL_DMA_Abort_IT+0x3d0>)
 8004624:	4293      	cmp	r3, r2
 8004626:	d040      	beq.n	80046aa <HAL_DMA_Abort_IT+0x3a2>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4a2b      	ldr	r2, [pc, #172]	@ (80046dc <HAL_DMA_Abort_IT+0x3d4>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d03b      	beq.n	80046aa <HAL_DMA_Abort_IT+0x3a2>
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	4a2a      	ldr	r2, [pc, #168]	@ (80046e0 <HAL_DMA_Abort_IT+0x3d8>)
 8004638:	4293      	cmp	r3, r2
 800463a:	d036      	beq.n	80046aa <HAL_DMA_Abort_IT+0x3a2>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4a28      	ldr	r2, [pc, #160]	@ (80046e4 <HAL_DMA_Abort_IT+0x3dc>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d031      	beq.n	80046aa <HAL_DMA_Abort_IT+0x3a2>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	4a27      	ldr	r2, [pc, #156]	@ (80046e8 <HAL_DMA_Abort_IT+0x3e0>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d02c      	beq.n	80046aa <HAL_DMA_Abort_IT+0x3a2>
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	4a25      	ldr	r2, [pc, #148]	@ (80046ec <HAL_DMA_Abort_IT+0x3e4>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d027      	beq.n	80046aa <HAL_DMA_Abort_IT+0x3a2>
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4a24      	ldr	r2, [pc, #144]	@ (80046f0 <HAL_DMA_Abort_IT+0x3e8>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d022      	beq.n	80046aa <HAL_DMA_Abort_IT+0x3a2>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4a22      	ldr	r2, [pc, #136]	@ (80046f4 <HAL_DMA_Abort_IT+0x3ec>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d01d      	beq.n	80046aa <HAL_DMA_Abort_IT+0x3a2>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	4a21      	ldr	r2, [pc, #132]	@ (80046f8 <HAL_DMA_Abort_IT+0x3f0>)
 8004674:	4293      	cmp	r3, r2
 8004676:	d018      	beq.n	80046aa <HAL_DMA_Abort_IT+0x3a2>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4a1f      	ldr	r2, [pc, #124]	@ (80046fc <HAL_DMA_Abort_IT+0x3f4>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d013      	beq.n	80046aa <HAL_DMA_Abort_IT+0x3a2>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4a1e      	ldr	r2, [pc, #120]	@ (8004700 <HAL_DMA_Abort_IT+0x3f8>)
 8004688:	4293      	cmp	r3, r2
 800468a:	d00e      	beq.n	80046aa <HAL_DMA_Abort_IT+0x3a2>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4a1c      	ldr	r2, [pc, #112]	@ (8004704 <HAL_DMA_Abort_IT+0x3fc>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d009      	beq.n	80046aa <HAL_DMA_Abort_IT+0x3a2>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4a1b      	ldr	r2, [pc, #108]	@ (8004708 <HAL_DMA_Abort_IT+0x400>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d004      	beq.n	80046aa <HAL_DMA_Abort_IT+0x3a2>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	4a19      	ldr	r2, [pc, #100]	@ (800470c <HAL_DMA_Abort_IT+0x404>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d132      	bne.n	8004710 <HAL_DMA_Abort_IT+0x408>
 80046aa:	2301      	movs	r3, #1
 80046ac:	e031      	b.n	8004712 <HAL_DMA_Abort_IT+0x40a>
 80046ae:	bf00      	nop
 80046b0:	40020010 	.word	0x40020010
 80046b4:	40020028 	.word	0x40020028
 80046b8:	40020040 	.word	0x40020040
 80046bc:	40020058 	.word	0x40020058
 80046c0:	40020070 	.word	0x40020070
 80046c4:	40020088 	.word	0x40020088
 80046c8:	400200a0 	.word	0x400200a0
 80046cc:	400200b8 	.word	0x400200b8
 80046d0:	40020410 	.word	0x40020410
 80046d4:	40020428 	.word	0x40020428
 80046d8:	40020440 	.word	0x40020440
 80046dc:	40020458 	.word	0x40020458
 80046e0:	40020470 	.word	0x40020470
 80046e4:	40020488 	.word	0x40020488
 80046e8:	400204a0 	.word	0x400204a0
 80046ec:	400204b8 	.word	0x400204b8
 80046f0:	58025408 	.word	0x58025408
 80046f4:	5802541c 	.word	0x5802541c
 80046f8:	58025430 	.word	0x58025430
 80046fc:	58025444 	.word	0x58025444
 8004700:	58025458 	.word	0x58025458
 8004704:	5802546c 	.word	0x5802546c
 8004708:	58025480 	.word	0x58025480
 800470c:	58025494 	.word	0x58025494
 8004710:	2300      	movs	r3, #0
 8004712:	2b00      	cmp	r3, #0
 8004714:	d028      	beq.n	8004768 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800471a:	681a      	ldr	r2, [r3, #0]
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004720:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004724:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800472a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004730:	f003 031f 	and.w	r3, r3, #31
 8004734:	2201      	movs	r2, #1
 8004736:	409a      	lsls	r2, r3
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004740:	687a      	ldr	r2, [r7, #4]
 8004742:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004744:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800474a:	2b00      	cmp	r3, #0
 800474c:	d00c      	beq.n	8004768 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004752:	681a      	ldr	r2, [r3, #0]
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004758:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800475c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004762:	687a      	ldr	r2, [r7, #4]
 8004764:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004766:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2201      	movs	r2, #1
 800476c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2200      	movs	r2, #0
 8004774:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800477c:	2b00      	cmp	r3, #0
 800477e:	d003      	beq.n	8004788 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004784:	6878      	ldr	r0, [r7, #4]
 8004786:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8004788:	2300      	movs	r3, #0
}
 800478a:	4618      	mov	r0, r3
 800478c:	3710      	adds	r7, #16
 800478e:	46bd      	mov	sp, r7
 8004790:	bd80      	pop	{r7, pc}
 8004792:	bf00      	nop

08004794 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b08a      	sub	sp, #40	@ 0x28
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800479c:	2300      	movs	r3, #0
 800479e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80047a0:	4b67      	ldr	r3, [pc, #412]	@ (8004940 <HAL_DMA_IRQHandler+0x1ac>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4a67      	ldr	r2, [pc, #412]	@ (8004944 <HAL_DMA_IRQHandler+0x1b0>)
 80047a6:	fba2 2303 	umull	r2, r3, r2, r3
 80047aa:	0a9b      	lsrs	r3, r3, #10
 80047ac:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047b2:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047b8:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80047ba:	6a3b      	ldr	r3, [r7, #32]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80047c0:	69fb      	ldr	r3, [r7, #28]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4a5f      	ldr	r2, [pc, #380]	@ (8004948 <HAL_DMA_IRQHandler+0x1b4>)
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d04a      	beq.n	8004866 <HAL_DMA_IRQHandler+0xd2>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4a5d      	ldr	r2, [pc, #372]	@ (800494c <HAL_DMA_IRQHandler+0x1b8>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d045      	beq.n	8004866 <HAL_DMA_IRQHandler+0xd2>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4a5c      	ldr	r2, [pc, #368]	@ (8004950 <HAL_DMA_IRQHandler+0x1bc>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d040      	beq.n	8004866 <HAL_DMA_IRQHandler+0xd2>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4a5a      	ldr	r2, [pc, #360]	@ (8004954 <HAL_DMA_IRQHandler+0x1c0>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d03b      	beq.n	8004866 <HAL_DMA_IRQHandler+0xd2>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4a59      	ldr	r2, [pc, #356]	@ (8004958 <HAL_DMA_IRQHandler+0x1c4>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d036      	beq.n	8004866 <HAL_DMA_IRQHandler+0xd2>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4a57      	ldr	r2, [pc, #348]	@ (800495c <HAL_DMA_IRQHandler+0x1c8>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d031      	beq.n	8004866 <HAL_DMA_IRQHandler+0xd2>
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4a56      	ldr	r2, [pc, #344]	@ (8004960 <HAL_DMA_IRQHandler+0x1cc>)
 8004808:	4293      	cmp	r3, r2
 800480a:	d02c      	beq.n	8004866 <HAL_DMA_IRQHandler+0xd2>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4a54      	ldr	r2, [pc, #336]	@ (8004964 <HAL_DMA_IRQHandler+0x1d0>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d027      	beq.n	8004866 <HAL_DMA_IRQHandler+0xd2>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4a53      	ldr	r2, [pc, #332]	@ (8004968 <HAL_DMA_IRQHandler+0x1d4>)
 800481c:	4293      	cmp	r3, r2
 800481e:	d022      	beq.n	8004866 <HAL_DMA_IRQHandler+0xd2>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4a51      	ldr	r2, [pc, #324]	@ (800496c <HAL_DMA_IRQHandler+0x1d8>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d01d      	beq.n	8004866 <HAL_DMA_IRQHandler+0xd2>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4a50      	ldr	r2, [pc, #320]	@ (8004970 <HAL_DMA_IRQHandler+0x1dc>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d018      	beq.n	8004866 <HAL_DMA_IRQHandler+0xd2>
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	4a4e      	ldr	r2, [pc, #312]	@ (8004974 <HAL_DMA_IRQHandler+0x1e0>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d013      	beq.n	8004866 <HAL_DMA_IRQHandler+0xd2>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	4a4d      	ldr	r2, [pc, #308]	@ (8004978 <HAL_DMA_IRQHandler+0x1e4>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d00e      	beq.n	8004866 <HAL_DMA_IRQHandler+0xd2>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4a4b      	ldr	r2, [pc, #300]	@ (800497c <HAL_DMA_IRQHandler+0x1e8>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d009      	beq.n	8004866 <HAL_DMA_IRQHandler+0xd2>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4a4a      	ldr	r2, [pc, #296]	@ (8004980 <HAL_DMA_IRQHandler+0x1ec>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d004      	beq.n	8004866 <HAL_DMA_IRQHandler+0xd2>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4a48      	ldr	r2, [pc, #288]	@ (8004984 <HAL_DMA_IRQHandler+0x1f0>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d101      	bne.n	800486a <HAL_DMA_IRQHandler+0xd6>
 8004866:	2301      	movs	r3, #1
 8004868:	e000      	b.n	800486c <HAL_DMA_IRQHandler+0xd8>
 800486a:	2300      	movs	r3, #0
 800486c:	2b00      	cmp	r3, #0
 800486e:	f000 842b 	beq.w	80050c8 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004876:	f003 031f 	and.w	r3, r3, #31
 800487a:	2208      	movs	r2, #8
 800487c:	409a      	lsls	r2, r3
 800487e:	69bb      	ldr	r3, [r7, #24]
 8004880:	4013      	ands	r3, r2
 8004882:	2b00      	cmp	r3, #0
 8004884:	f000 80a2 	beq.w	80049cc <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4a2e      	ldr	r2, [pc, #184]	@ (8004948 <HAL_DMA_IRQHandler+0x1b4>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d04a      	beq.n	8004928 <HAL_DMA_IRQHandler+0x194>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4a2d      	ldr	r2, [pc, #180]	@ (800494c <HAL_DMA_IRQHandler+0x1b8>)
 8004898:	4293      	cmp	r3, r2
 800489a:	d045      	beq.n	8004928 <HAL_DMA_IRQHandler+0x194>
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4a2b      	ldr	r2, [pc, #172]	@ (8004950 <HAL_DMA_IRQHandler+0x1bc>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d040      	beq.n	8004928 <HAL_DMA_IRQHandler+0x194>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4a2a      	ldr	r2, [pc, #168]	@ (8004954 <HAL_DMA_IRQHandler+0x1c0>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d03b      	beq.n	8004928 <HAL_DMA_IRQHandler+0x194>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4a28      	ldr	r2, [pc, #160]	@ (8004958 <HAL_DMA_IRQHandler+0x1c4>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d036      	beq.n	8004928 <HAL_DMA_IRQHandler+0x194>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4a27      	ldr	r2, [pc, #156]	@ (800495c <HAL_DMA_IRQHandler+0x1c8>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d031      	beq.n	8004928 <HAL_DMA_IRQHandler+0x194>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4a25      	ldr	r2, [pc, #148]	@ (8004960 <HAL_DMA_IRQHandler+0x1cc>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d02c      	beq.n	8004928 <HAL_DMA_IRQHandler+0x194>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	4a24      	ldr	r2, [pc, #144]	@ (8004964 <HAL_DMA_IRQHandler+0x1d0>)
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d027      	beq.n	8004928 <HAL_DMA_IRQHandler+0x194>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4a22      	ldr	r2, [pc, #136]	@ (8004968 <HAL_DMA_IRQHandler+0x1d4>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d022      	beq.n	8004928 <HAL_DMA_IRQHandler+0x194>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	4a21      	ldr	r2, [pc, #132]	@ (800496c <HAL_DMA_IRQHandler+0x1d8>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d01d      	beq.n	8004928 <HAL_DMA_IRQHandler+0x194>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4a1f      	ldr	r2, [pc, #124]	@ (8004970 <HAL_DMA_IRQHandler+0x1dc>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d018      	beq.n	8004928 <HAL_DMA_IRQHandler+0x194>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4a1e      	ldr	r2, [pc, #120]	@ (8004974 <HAL_DMA_IRQHandler+0x1e0>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d013      	beq.n	8004928 <HAL_DMA_IRQHandler+0x194>
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4a1c      	ldr	r2, [pc, #112]	@ (8004978 <HAL_DMA_IRQHandler+0x1e4>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d00e      	beq.n	8004928 <HAL_DMA_IRQHandler+0x194>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	4a1b      	ldr	r2, [pc, #108]	@ (800497c <HAL_DMA_IRQHandler+0x1e8>)
 8004910:	4293      	cmp	r3, r2
 8004912:	d009      	beq.n	8004928 <HAL_DMA_IRQHandler+0x194>
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4a19      	ldr	r2, [pc, #100]	@ (8004980 <HAL_DMA_IRQHandler+0x1ec>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d004      	beq.n	8004928 <HAL_DMA_IRQHandler+0x194>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	4a18      	ldr	r2, [pc, #96]	@ (8004984 <HAL_DMA_IRQHandler+0x1f0>)
 8004924:	4293      	cmp	r3, r2
 8004926:	d12f      	bne.n	8004988 <HAL_DMA_IRQHandler+0x1f4>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f003 0304 	and.w	r3, r3, #4
 8004932:	2b00      	cmp	r3, #0
 8004934:	bf14      	ite	ne
 8004936:	2301      	movne	r3, #1
 8004938:	2300      	moveq	r3, #0
 800493a:	b2db      	uxtb	r3, r3
 800493c:	e02e      	b.n	800499c <HAL_DMA_IRQHandler+0x208>
 800493e:	bf00      	nop
 8004940:	24000000 	.word	0x24000000
 8004944:	1b4e81b5 	.word	0x1b4e81b5
 8004948:	40020010 	.word	0x40020010
 800494c:	40020028 	.word	0x40020028
 8004950:	40020040 	.word	0x40020040
 8004954:	40020058 	.word	0x40020058
 8004958:	40020070 	.word	0x40020070
 800495c:	40020088 	.word	0x40020088
 8004960:	400200a0 	.word	0x400200a0
 8004964:	400200b8 	.word	0x400200b8
 8004968:	40020410 	.word	0x40020410
 800496c:	40020428 	.word	0x40020428
 8004970:	40020440 	.word	0x40020440
 8004974:	40020458 	.word	0x40020458
 8004978:	40020470 	.word	0x40020470
 800497c:	40020488 	.word	0x40020488
 8004980:	400204a0 	.word	0x400204a0
 8004984:	400204b8 	.word	0x400204b8
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f003 0308 	and.w	r3, r3, #8
 8004992:	2b00      	cmp	r3, #0
 8004994:	bf14      	ite	ne
 8004996:	2301      	movne	r3, #1
 8004998:	2300      	moveq	r3, #0
 800499a:	b2db      	uxtb	r3, r3
 800499c:	2b00      	cmp	r3, #0
 800499e:	d015      	beq.n	80049cc <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	681a      	ldr	r2, [r3, #0]
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f022 0204 	bic.w	r2, r2, #4
 80049ae:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049b4:	f003 031f 	and.w	r3, r3, #31
 80049b8:	2208      	movs	r2, #8
 80049ba:	409a      	lsls	r2, r3
 80049bc:	6a3b      	ldr	r3, [r7, #32]
 80049be:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049c4:	f043 0201 	orr.w	r2, r3, #1
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049d0:	f003 031f 	and.w	r3, r3, #31
 80049d4:	69ba      	ldr	r2, [r7, #24]
 80049d6:	fa22 f303 	lsr.w	r3, r2, r3
 80049da:	f003 0301 	and.w	r3, r3, #1
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d06e      	beq.n	8004ac0 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	4a69      	ldr	r2, [pc, #420]	@ (8004b8c <HAL_DMA_IRQHandler+0x3f8>)
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d04a      	beq.n	8004a82 <HAL_DMA_IRQHandler+0x2ee>
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	4a67      	ldr	r2, [pc, #412]	@ (8004b90 <HAL_DMA_IRQHandler+0x3fc>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d045      	beq.n	8004a82 <HAL_DMA_IRQHandler+0x2ee>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	4a66      	ldr	r2, [pc, #408]	@ (8004b94 <HAL_DMA_IRQHandler+0x400>)
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d040      	beq.n	8004a82 <HAL_DMA_IRQHandler+0x2ee>
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	4a64      	ldr	r2, [pc, #400]	@ (8004b98 <HAL_DMA_IRQHandler+0x404>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d03b      	beq.n	8004a82 <HAL_DMA_IRQHandler+0x2ee>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	4a63      	ldr	r2, [pc, #396]	@ (8004b9c <HAL_DMA_IRQHandler+0x408>)
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d036      	beq.n	8004a82 <HAL_DMA_IRQHandler+0x2ee>
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	4a61      	ldr	r2, [pc, #388]	@ (8004ba0 <HAL_DMA_IRQHandler+0x40c>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d031      	beq.n	8004a82 <HAL_DMA_IRQHandler+0x2ee>
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	4a60      	ldr	r2, [pc, #384]	@ (8004ba4 <HAL_DMA_IRQHandler+0x410>)
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d02c      	beq.n	8004a82 <HAL_DMA_IRQHandler+0x2ee>
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	4a5e      	ldr	r2, [pc, #376]	@ (8004ba8 <HAL_DMA_IRQHandler+0x414>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d027      	beq.n	8004a82 <HAL_DMA_IRQHandler+0x2ee>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	4a5d      	ldr	r2, [pc, #372]	@ (8004bac <HAL_DMA_IRQHandler+0x418>)
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d022      	beq.n	8004a82 <HAL_DMA_IRQHandler+0x2ee>
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	4a5b      	ldr	r2, [pc, #364]	@ (8004bb0 <HAL_DMA_IRQHandler+0x41c>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d01d      	beq.n	8004a82 <HAL_DMA_IRQHandler+0x2ee>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	4a5a      	ldr	r2, [pc, #360]	@ (8004bb4 <HAL_DMA_IRQHandler+0x420>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d018      	beq.n	8004a82 <HAL_DMA_IRQHandler+0x2ee>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4a58      	ldr	r2, [pc, #352]	@ (8004bb8 <HAL_DMA_IRQHandler+0x424>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d013      	beq.n	8004a82 <HAL_DMA_IRQHandler+0x2ee>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	4a57      	ldr	r2, [pc, #348]	@ (8004bbc <HAL_DMA_IRQHandler+0x428>)
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d00e      	beq.n	8004a82 <HAL_DMA_IRQHandler+0x2ee>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	4a55      	ldr	r2, [pc, #340]	@ (8004bc0 <HAL_DMA_IRQHandler+0x42c>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d009      	beq.n	8004a82 <HAL_DMA_IRQHandler+0x2ee>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	4a54      	ldr	r2, [pc, #336]	@ (8004bc4 <HAL_DMA_IRQHandler+0x430>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d004      	beq.n	8004a82 <HAL_DMA_IRQHandler+0x2ee>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4a52      	ldr	r2, [pc, #328]	@ (8004bc8 <HAL_DMA_IRQHandler+0x434>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d10a      	bne.n	8004a98 <HAL_DMA_IRQHandler+0x304>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	695b      	ldr	r3, [r3, #20]
 8004a88:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	bf14      	ite	ne
 8004a90:	2301      	movne	r3, #1
 8004a92:	2300      	moveq	r3, #0
 8004a94:	b2db      	uxtb	r3, r3
 8004a96:	e003      	b.n	8004aa0 <HAL_DMA_IRQHandler+0x30c>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d00d      	beq.n	8004ac0 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004aa8:	f003 031f 	and.w	r3, r3, #31
 8004aac:	2201      	movs	r2, #1
 8004aae:	409a      	lsls	r2, r3
 8004ab0:	6a3b      	ldr	r3, [r7, #32]
 8004ab2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ab8:	f043 0202 	orr.w	r2, r3, #2
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ac4:	f003 031f 	and.w	r3, r3, #31
 8004ac8:	2204      	movs	r2, #4
 8004aca:	409a      	lsls	r2, r3
 8004acc:	69bb      	ldr	r3, [r7, #24]
 8004ace:	4013      	ands	r3, r2
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	f000 808f 	beq.w	8004bf4 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	4a2c      	ldr	r2, [pc, #176]	@ (8004b8c <HAL_DMA_IRQHandler+0x3f8>)
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d04a      	beq.n	8004b76 <HAL_DMA_IRQHandler+0x3e2>
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	4a2a      	ldr	r2, [pc, #168]	@ (8004b90 <HAL_DMA_IRQHandler+0x3fc>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d045      	beq.n	8004b76 <HAL_DMA_IRQHandler+0x3e2>
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	4a29      	ldr	r2, [pc, #164]	@ (8004b94 <HAL_DMA_IRQHandler+0x400>)
 8004af0:	4293      	cmp	r3, r2
 8004af2:	d040      	beq.n	8004b76 <HAL_DMA_IRQHandler+0x3e2>
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	4a27      	ldr	r2, [pc, #156]	@ (8004b98 <HAL_DMA_IRQHandler+0x404>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d03b      	beq.n	8004b76 <HAL_DMA_IRQHandler+0x3e2>
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	4a26      	ldr	r2, [pc, #152]	@ (8004b9c <HAL_DMA_IRQHandler+0x408>)
 8004b04:	4293      	cmp	r3, r2
 8004b06:	d036      	beq.n	8004b76 <HAL_DMA_IRQHandler+0x3e2>
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	4a24      	ldr	r2, [pc, #144]	@ (8004ba0 <HAL_DMA_IRQHandler+0x40c>)
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d031      	beq.n	8004b76 <HAL_DMA_IRQHandler+0x3e2>
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	4a23      	ldr	r2, [pc, #140]	@ (8004ba4 <HAL_DMA_IRQHandler+0x410>)
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	d02c      	beq.n	8004b76 <HAL_DMA_IRQHandler+0x3e2>
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	4a21      	ldr	r2, [pc, #132]	@ (8004ba8 <HAL_DMA_IRQHandler+0x414>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d027      	beq.n	8004b76 <HAL_DMA_IRQHandler+0x3e2>
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	4a20      	ldr	r2, [pc, #128]	@ (8004bac <HAL_DMA_IRQHandler+0x418>)
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	d022      	beq.n	8004b76 <HAL_DMA_IRQHandler+0x3e2>
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	4a1e      	ldr	r2, [pc, #120]	@ (8004bb0 <HAL_DMA_IRQHandler+0x41c>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d01d      	beq.n	8004b76 <HAL_DMA_IRQHandler+0x3e2>
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	4a1d      	ldr	r2, [pc, #116]	@ (8004bb4 <HAL_DMA_IRQHandler+0x420>)
 8004b40:	4293      	cmp	r3, r2
 8004b42:	d018      	beq.n	8004b76 <HAL_DMA_IRQHandler+0x3e2>
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	4a1b      	ldr	r2, [pc, #108]	@ (8004bb8 <HAL_DMA_IRQHandler+0x424>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d013      	beq.n	8004b76 <HAL_DMA_IRQHandler+0x3e2>
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	4a1a      	ldr	r2, [pc, #104]	@ (8004bbc <HAL_DMA_IRQHandler+0x428>)
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d00e      	beq.n	8004b76 <HAL_DMA_IRQHandler+0x3e2>
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	4a18      	ldr	r2, [pc, #96]	@ (8004bc0 <HAL_DMA_IRQHandler+0x42c>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d009      	beq.n	8004b76 <HAL_DMA_IRQHandler+0x3e2>
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	4a17      	ldr	r2, [pc, #92]	@ (8004bc4 <HAL_DMA_IRQHandler+0x430>)
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d004      	beq.n	8004b76 <HAL_DMA_IRQHandler+0x3e2>
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4a15      	ldr	r2, [pc, #84]	@ (8004bc8 <HAL_DMA_IRQHandler+0x434>)
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d12a      	bne.n	8004bcc <HAL_DMA_IRQHandler+0x438>
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f003 0302 	and.w	r3, r3, #2
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	bf14      	ite	ne
 8004b84:	2301      	movne	r3, #1
 8004b86:	2300      	moveq	r3, #0
 8004b88:	b2db      	uxtb	r3, r3
 8004b8a:	e023      	b.n	8004bd4 <HAL_DMA_IRQHandler+0x440>
 8004b8c:	40020010 	.word	0x40020010
 8004b90:	40020028 	.word	0x40020028
 8004b94:	40020040 	.word	0x40020040
 8004b98:	40020058 	.word	0x40020058
 8004b9c:	40020070 	.word	0x40020070
 8004ba0:	40020088 	.word	0x40020088
 8004ba4:	400200a0 	.word	0x400200a0
 8004ba8:	400200b8 	.word	0x400200b8
 8004bac:	40020410 	.word	0x40020410
 8004bb0:	40020428 	.word	0x40020428
 8004bb4:	40020440 	.word	0x40020440
 8004bb8:	40020458 	.word	0x40020458
 8004bbc:	40020470 	.word	0x40020470
 8004bc0:	40020488 	.word	0x40020488
 8004bc4:	400204a0 	.word	0x400204a0
 8004bc8:	400204b8 	.word	0x400204b8
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d00d      	beq.n	8004bf4 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004bdc:	f003 031f 	and.w	r3, r3, #31
 8004be0:	2204      	movs	r2, #4
 8004be2:	409a      	lsls	r2, r3
 8004be4:	6a3b      	ldr	r3, [r7, #32]
 8004be6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004bec:	f043 0204 	orr.w	r2, r3, #4
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004bf8:	f003 031f 	and.w	r3, r3, #31
 8004bfc:	2210      	movs	r2, #16
 8004bfe:	409a      	lsls	r2, r3
 8004c00:	69bb      	ldr	r3, [r7, #24]
 8004c02:	4013      	ands	r3, r2
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	f000 80a6 	beq.w	8004d56 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	4a85      	ldr	r2, [pc, #532]	@ (8004e24 <HAL_DMA_IRQHandler+0x690>)
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d04a      	beq.n	8004caa <HAL_DMA_IRQHandler+0x516>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	4a83      	ldr	r2, [pc, #524]	@ (8004e28 <HAL_DMA_IRQHandler+0x694>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d045      	beq.n	8004caa <HAL_DMA_IRQHandler+0x516>
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	4a82      	ldr	r2, [pc, #520]	@ (8004e2c <HAL_DMA_IRQHandler+0x698>)
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d040      	beq.n	8004caa <HAL_DMA_IRQHandler+0x516>
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	4a80      	ldr	r2, [pc, #512]	@ (8004e30 <HAL_DMA_IRQHandler+0x69c>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d03b      	beq.n	8004caa <HAL_DMA_IRQHandler+0x516>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	4a7f      	ldr	r2, [pc, #508]	@ (8004e34 <HAL_DMA_IRQHandler+0x6a0>)
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d036      	beq.n	8004caa <HAL_DMA_IRQHandler+0x516>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	4a7d      	ldr	r2, [pc, #500]	@ (8004e38 <HAL_DMA_IRQHandler+0x6a4>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d031      	beq.n	8004caa <HAL_DMA_IRQHandler+0x516>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4a7c      	ldr	r2, [pc, #496]	@ (8004e3c <HAL_DMA_IRQHandler+0x6a8>)
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d02c      	beq.n	8004caa <HAL_DMA_IRQHandler+0x516>
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	4a7a      	ldr	r2, [pc, #488]	@ (8004e40 <HAL_DMA_IRQHandler+0x6ac>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d027      	beq.n	8004caa <HAL_DMA_IRQHandler+0x516>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	4a79      	ldr	r2, [pc, #484]	@ (8004e44 <HAL_DMA_IRQHandler+0x6b0>)
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d022      	beq.n	8004caa <HAL_DMA_IRQHandler+0x516>
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	4a77      	ldr	r2, [pc, #476]	@ (8004e48 <HAL_DMA_IRQHandler+0x6b4>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d01d      	beq.n	8004caa <HAL_DMA_IRQHandler+0x516>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	4a76      	ldr	r2, [pc, #472]	@ (8004e4c <HAL_DMA_IRQHandler+0x6b8>)
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d018      	beq.n	8004caa <HAL_DMA_IRQHandler+0x516>
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	4a74      	ldr	r2, [pc, #464]	@ (8004e50 <HAL_DMA_IRQHandler+0x6bc>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d013      	beq.n	8004caa <HAL_DMA_IRQHandler+0x516>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	4a73      	ldr	r2, [pc, #460]	@ (8004e54 <HAL_DMA_IRQHandler+0x6c0>)
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d00e      	beq.n	8004caa <HAL_DMA_IRQHandler+0x516>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4a71      	ldr	r2, [pc, #452]	@ (8004e58 <HAL_DMA_IRQHandler+0x6c4>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d009      	beq.n	8004caa <HAL_DMA_IRQHandler+0x516>
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	4a70      	ldr	r2, [pc, #448]	@ (8004e5c <HAL_DMA_IRQHandler+0x6c8>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d004      	beq.n	8004caa <HAL_DMA_IRQHandler+0x516>
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4a6e      	ldr	r2, [pc, #440]	@ (8004e60 <HAL_DMA_IRQHandler+0x6cc>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d10a      	bne.n	8004cc0 <HAL_DMA_IRQHandler+0x52c>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f003 0308 	and.w	r3, r3, #8
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	bf14      	ite	ne
 8004cb8:	2301      	movne	r3, #1
 8004cba:	2300      	moveq	r3, #0
 8004cbc:	b2db      	uxtb	r3, r3
 8004cbe:	e009      	b.n	8004cd4 <HAL_DMA_IRQHandler+0x540>
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f003 0304 	and.w	r3, r3, #4
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	bf14      	ite	ne
 8004cce:	2301      	movne	r3, #1
 8004cd0:	2300      	moveq	r3, #0
 8004cd2:	b2db      	uxtb	r3, r3
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d03e      	beq.n	8004d56 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004cdc:	f003 031f 	and.w	r3, r3, #31
 8004ce0:	2210      	movs	r2, #16
 8004ce2:	409a      	lsls	r2, r3
 8004ce4:	6a3b      	ldr	r3, [r7, #32]
 8004ce6:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d018      	beq.n	8004d28 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d108      	bne.n	8004d16 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d024      	beq.n	8004d56 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d10:	6878      	ldr	r0, [r7, #4]
 8004d12:	4798      	blx	r3
 8004d14:	e01f      	b.n	8004d56 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d01b      	beq.n	8004d56 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d22:	6878      	ldr	r0, [r7, #4]
 8004d24:	4798      	blx	r3
 8004d26:	e016      	b.n	8004d56 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d107      	bne.n	8004d46 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	681a      	ldr	r2, [r3, #0]
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f022 0208 	bic.w	r2, r2, #8
 8004d44:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d003      	beq.n	8004d56 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d52:	6878      	ldr	r0, [r7, #4]
 8004d54:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d5a:	f003 031f 	and.w	r3, r3, #31
 8004d5e:	2220      	movs	r2, #32
 8004d60:	409a      	lsls	r2, r3
 8004d62:	69bb      	ldr	r3, [r7, #24]
 8004d64:	4013      	ands	r3, r2
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	f000 8110 	beq.w	8004f8c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	4a2c      	ldr	r2, [pc, #176]	@ (8004e24 <HAL_DMA_IRQHandler+0x690>)
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d04a      	beq.n	8004e0c <HAL_DMA_IRQHandler+0x678>
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	4a2b      	ldr	r2, [pc, #172]	@ (8004e28 <HAL_DMA_IRQHandler+0x694>)
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	d045      	beq.n	8004e0c <HAL_DMA_IRQHandler+0x678>
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	4a29      	ldr	r2, [pc, #164]	@ (8004e2c <HAL_DMA_IRQHandler+0x698>)
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d040      	beq.n	8004e0c <HAL_DMA_IRQHandler+0x678>
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	4a28      	ldr	r2, [pc, #160]	@ (8004e30 <HAL_DMA_IRQHandler+0x69c>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d03b      	beq.n	8004e0c <HAL_DMA_IRQHandler+0x678>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	4a26      	ldr	r2, [pc, #152]	@ (8004e34 <HAL_DMA_IRQHandler+0x6a0>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d036      	beq.n	8004e0c <HAL_DMA_IRQHandler+0x678>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	4a25      	ldr	r2, [pc, #148]	@ (8004e38 <HAL_DMA_IRQHandler+0x6a4>)
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d031      	beq.n	8004e0c <HAL_DMA_IRQHandler+0x678>
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	4a23      	ldr	r2, [pc, #140]	@ (8004e3c <HAL_DMA_IRQHandler+0x6a8>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d02c      	beq.n	8004e0c <HAL_DMA_IRQHandler+0x678>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	4a22      	ldr	r2, [pc, #136]	@ (8004e40 <HAL_DMA_IRQHandler+0x6ac>)
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d027      	beq.n	8004e0c <HAL_DMA_IRQHandler+0x678>
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	4a20      	ldr	r2, [pc, #128]	@ (8004e44 <HAL_DMA_IRQHandler+0x6b0>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d022      	beq.n	8004e0c <HAL_DMA_IRQHandler+0x678>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	4a1f      	ldr	r2, [pc, #124]	@ (8004e48 <HAL_DMA_IRQHandler+0x6b4>)
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d01d      	beq.n	8004e0c <HAL_DMA_IRQHandler+0x678>
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	4a1d      	ldr	r2, [pc, #116]	@ (8004e4c <HAL_DMA_IRQHandler+0x6b8>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d018      	beq.n	8004e0c <HAL_DMA_IRQHandler+0x678>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	4a1c      	ldr	r2, [pc, #112]	@ (8004e50 <HAL_DMA_IRQHandler+0x6bc>)
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d013      	beq.n	8004e0c <HAL_DMA_IRQHandler+0x678>
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	4a1a      	ldr	r2, [pc, #104]	@ (8004e54 <HAL_DMA_IRQHandler+0x6c0>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d00e      	beq.n	8004e0c <HAL_DMA_IRQHandler+0x678>
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	4a19      	ldr	r2, [pc, #100]	@ (8004e58 <HAL_DMA_IRQHandler+0x6c4>)
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d009      	beq.n	8004e0c <HAL_DMA_IRQHandler+0x678>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	4a17      	ldr	r2, [pc, #92]	@ (8004e5c <HAL_DMA_IRQHandler+0x6c8>)
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d004      	beq.n	8004e0c <HAL_DMA_IRQHandler+0x678>
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	4a16      	ldr	r2, [pc, #88]	@ (8004e60 <HAL_DMA_IRQHandler+0x6cc>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d12b      	bne.n	8004e64 <HAL_DMA_IRQHandler+0x6d0>
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f003 0310 	and.w	r3, r3, #16
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	bf14      	ite	ne
 8004e1a:	2301      	movne	r3, #1
 8004e1c:	2300      	moveq	r3, #0
 8004e1e:	b2db      	uxtb	r3, r3
 8004e20:	e02a      	b.n	8004e78 <HAL_DMA_IRQHandler+0x6e4>
 8004e22:	bf00      	nop
 8004e24:	40020010 	.word	0x40020010
 8004e28:	40020028 	.word	0x40020028
 8004e2c:	40020040 	.word	0x40020040
 8004e30:	40020058 	.word	0x40020058
 8004e34:	40020070 	.word	0x40020070
 8004e38:	40020088 	.word	0x40020088
 8004e3c:	400200a0 	.word	0x400200a0
 8004e40:	400200b8 	.word	0x400200b8
 8004e44:	40020410 	.word	0x40020410
 8004e48:	40020428 	.word	0x40020428
 8004e4c:	40020440 	.word	0x40020440
 8004e50:	40020458 	.word	0x40020458
 8004e54:	40020470 	.word	0x40020470
 8004e58:	40020488 	.word	0x40020488
 8004e5c:	400204a0 	.word	0x400204a0
 8004e60:	400204b8 	.word	0x400204b8
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f003 0302 	and.w	r3, r3, #2
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	bf14      	ite	ne
 8004e72:	2301      	movne	r3, #1
 8004e74:	2300      	moveq	r3, #0
 8004e76:	b2db      	uxtb	r3, r3
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	f000 8087 	beq.w	8004f8c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e82:	f003 031f 	and.w	r3, r3, #31
 8004e86:	2220      	movs	r2, #32
 8004e88:	409a      	lsls	r2, r3
 8004e8a:	6a3b      	ldr	r3, [r7, #32]
 8004e8c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004e94:	b2db      	uxtb	r3, r3
 8004e96:	2b04      	cmp	r3, #4
 8004e98:	d139      	bne.n	8004f0e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	681a      	ldr	r2, [r3, #0]
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f022 0216 	bic.w	r2, r2, #22
 8004ea8:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	695a      	ldr	r2, [r3, #20]
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004eb8:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d103      	bne.n	8004eca <HAL_DMA_IRQHandler+0x736>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d007      	beq.n	8004eda <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	681a      	ldr	r2, [r3, #0]
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f022 0208 	bic.w	r2, r2, #8
 8004ed8:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ede:	f003 031f 	and.w	r3, r3, #31
 8004ee2:	223f      	movs	r2, #63	@ 0x3f
 8004ee4:	409a      	lsls	r2, r3
 8004ee6:	6a3b      	ldr	r3, [r7, #32]
 8004ee8:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2201      	movs	r2, #1
 8004eee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	f000 834a 	beq.w	8005598 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f08:	6878      	ldr	r0, [r7, #4]
 8004f0a:	4798      	blx	r3
          }
          return;
 8004f0c:	e344      	b.n	8005598 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d018      	beq.n	8004f4e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d108      	bne.n	8004f3c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d02c      	beq.n	8004f8c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f36:	6878      	ldr	r0, [r7, #4]
 8004f38:	4798      	blx	r3
 8004f3a:	e027      	b.n	8004f8c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d023      	beq.n	8004f8c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f48:	6878      	ldr	r0, [r7, #4]
 8004f4a:	4798      	blx	r3
 8004f4c:	e01e      	b.n	8004f8c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d10f      	bne.n	8004f7c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	681a      	ldr	r2, [r3, #0]
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f022 0210 	bic.w	r2, r2, #16
 8004f6a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2201      	movs	r2, #1
 8004f70:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2200      	movs	r2, #0
 8004f78:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d003      	beq.n	8004f8c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f88:	6878      	ldr	r0, [r7, #4]
 8004f8a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	f000 8306 	beq.w	80055a2 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f9a:	f003 0301 	and.w	r3, r3, #1
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	f000 8088 	beq.w	80050b4 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2204      	movs	r2, #4
 8004fa8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	4a7a      	ldr	r2, [pc, #488]	@ (800519c <HAL_DMA_IRQHandler+0xa08>)
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	d04a      	beq.n	800504c <HAL_DMA_IRQHandler+0x8b8>
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	4a79      	ldr	r2, [pc, #484]	@ (80051a0 <HAL_DMA_IRQHandler+0xa0c>)
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	d045      	beq.n	800504c <HAL_DMA_IRQHandler+0x8b8>
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	4a77      	ldr	r2, [pc, #476]	@ (80051a4 <HAL_DMA_IRQHandler+0xa10>)
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d040      	beq.n	800504c <HAL_DMA_IRQHandler+0x8b8>
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	4a76      	ldr	r2, [pc, #472]	@ (80051a8 <HAL_DMA_IRQHandler+0xa14>)
 8004fd0:	4293      	cmp	r3, r2
 8004fd2:	d03b      	beq.n	800504c <HAL_DMA_IRQHandler+0x8b8>
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	4a74      	ldr	r2, [pc, #464]	@ (80051ac <HAL_DMA_IRQHandler+0xa18>)
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d036      	beq.n	800504c <HAL_DMA_IRQHandler+0x8b8>
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	4a73      	ldr	r2, [pc, #460]	@ (80051b0 <HAL_DMA_IRQHandler+0xa1c>)
 8004fe4:	4293      	cmp	r3, r2
 8004fe6:	d031      	beq.n	800504c <HAL_DMA_IRQHandler+0x8b8>
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	4a71      	ldr	r2, [pc, #452]	@ (80051b4 <HAL_DMA_IRQHandler+0xa20>)
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d02c      	beq.n	800504c <HAL_DMA_IRQHandler+0x8b8>
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	4a70      	ldr	r2, [pc, #448]	@ (80051b8 <HAL_DMA_IRQHandler+0xa24>)
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	d027      	beq.n	800504c <HAL_DMA_IRQHandler+0x8b8>
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	4a6e      	ldr	r2, [pc, #440]	@ (80051bc <HAL_DMA_IRQHandler+0xa28>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d022      	beq.n	800504c <HAL_DMA_IRQHandler+0x8b8>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	4a6d      	ldr	r2, [pc, #436]	@ (80051c0 <HAL_DMA_IRQHandler+0xa2c>)
 800500c:	4293      	cmp	r3, r2
 800500e:	d01d      	beq.n	800504c <HAL_DMA_IRQHandler+0x8b8>
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	4a6b      	ldr	r2, [pc, #428]	@ (80051c4 <HAL_DMA_IRQHandler+0xa30>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d018      	beq.n	800504c <HAL_DMA_IRQHandler+0x8b8>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	4a6a      	ldr	r2, [pc, #424]	@ (80051c8 <HAL_DMA_IRQHandler+0xa34>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d013      	beq.n	800504c <HAL_DMA_IRQHandler+0x8b8>
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	4a68      	ldr	r2, [pc, #416]	@ (80051cc <HAL_DMA_IRQHandler+0xa38>)
 800502a:	4293      	cmp	r3, r2
 800502c:	d00e      	beq.n	800504c <HAL_DMA_IRQHandler+0x8b8>
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	4a67      	ldr	r2, [pc, #412]	@ (80051d0 <HAL_DMA_IRQHandler+0xa3c>)
 8005034:	4293      	cmp	r3, r2
 8005036:	d009      	beq.n	800504c <HAL_DMA_IRQHandler+0x8b8>
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	4a65      	ldr	r2, [pc, #404]	@ (80051d4 <HAL_DMA_IRQHandler+0xa40>)
 800503e:	4293      	cmp	r3, r2
 8005040:	d004      	beq.n	800504c <HAL_DMA_IRQHandler+0x8b8>
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	4a64      	ldr	r2, [pc, #400]	@ (80051d8 <HAL_DMA_IRQHandler+0xa44>)
 8005048:	4293      	cmp	r3, r2
 800504a:	d108      	bne.n	800505e <HAL_DMA_IRQHandler+0x8ca>
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	681a      	ldr	r2, [r3, #0]
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f022 0201 	bic.w	r2, r2, #1
 800505a:	601a      	str	r2, [r3, #0]
 800505c:	e007      	b.n	800506e <HAL_DMA_IRQHandler+0x8da>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	681a      	ldr	r2, [r3, #0]
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f022 0201 	bic.w	r2, r2, #1
 800506c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	3301      	adds	r3, #1
 8005072:	60fb      	str	r3, [r7, #12]
 8005074:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005076:	429a      	cmp	r2, r3
 8005078:	d307      	bcc.n	800508a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f003 0301 	and.w	r3, r3, #1
 8005084:	2b00      	cmp	r3, #0
 8005086:	d1f2      	bne.n	800506e <HAL_DMA_IRQHandler+0x8da>
 8005088:	e000      	b.n	800508c <HAL_DMA_IRQHandler+0x8f8>
            break;
 800508a:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f003 0301 	and.w	r3, r3, #1
 8005096:	2b00      	cmp	r3, #0
 8005098:	d004      	beq.n	80050a4 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2203      	movs	r2, #3
 800509e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 80050a2:	e003      	b.n	80050ac <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2201      	movs	r2, #1
 80050a8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2200      	movs	r2, #0
 80050b0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	f000 8272 	beq.w	80055a2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80050c2:	6878      	ldr	r0, [r7, #4]
 80050c4:	4798      	blx	r3
 80050c6:	e26c      	b.n	80055a2 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4a43      	ldr	r2, [pc, #268]	@ (80051dc <HAL_DMA_IRQHandler+0xa48>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d022      	beq.n	8005118 <HAL_DMA_IRQHandler+0x984>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4a42      	ldr	r2, [pc, #264]	@ (80051e0 <HAL_DMA_IRQHandler+0xa4c>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d01d      	beq.n	8005118 <HAL_DMA_IRQHandler+0x984>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4a40      	ldr	r2, [pc, #256]	@ (80051e4 <HAL_DMA_IRQHandler+0xa50>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d018      	beq.n	8005118 <HAL_DMA_IRQHandler+0x984>
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	4a3f      	ldr	r2, [pc, #252]	@ (80051e8 <HAL_DMA_IRQHandler+0xa54>)
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d013      	beq.n	8005118 <HAL_DMA_IRQHandler+0x984>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	4a3d      	ldr	r2, [pc, #244]	@ (80051ec <HAL_DMA_IRQHandler+0xa58>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d00e      	beq.n	8005118 <HAL_DMA_IRQHandler+0x984>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	4a3c      	ldr	r2, [pc, #240]	@ (80051f0 <HAL_DMA_IRQHandler+0xa5c>)
 8005100:	4293      	cmp	r3, r2
 8005102:	d009      	beq.n	8005118 <HAL_DMA_IRQHandler+0x984>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	4a3a      	ldr	r2, [pc, #232]	@ (80051f4 <HAL_DMA_IRQHandler+0xa60>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d004      	beq.n	8005118 <HAL_DMA_IRQHandler+0x984>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	4a39      	ldr	r2, [pc, #228]	@ (80051f8 <HAL_DMA_IRQHandler+0xa64>)
 8005114:	4293      	cmp	r3, r2
 8005116:	d101      	bne.n	800511c <HAL_DMA_IRQHandler+0x988>
 8005118:	2301      	movs	r3, #1
 800511a:	e000      	b.n	800511e <HAL_DMA_IRQHandler+0x98a>
 800511c:	2300      	movs	r3, #0
 800511e:	2b00      	cmp	r3, #0
 8005120:	f000 823f 	beq.w	80055a2 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005130:	f003 031f 	and.w	r3, r3, #31
 8005134:	2204      	movs	r2, #4
 8005136:	409a      	lsls	r2, r3
 8005138:	697b      	ldr	r3, [r7, #20]
 800513a:	4013      	ands	r3, r2
 800513c:	2b00      	cmp	r3, #0
 800513e:	f000 80cd 	beq.w	80052dc <HAL_DMA_IRQHandler+0xb48>
 8005142:	693b      	ldr	r3, [r7, #16]
 8005144:	f003 0304 	and.w	r3, r3, #4
 8005148:	2b00      	cmp	r3, #0
 800514a:	f000 80c7 	beq.w	80052dc <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005152:	f003 031f 	and.w	r3, r3, #31
 8005156:	2204      	movs	r2, #4
 8005158:	409a      	lsls	r2, r3
 800515a:	69fb      	ldr	r3, [r7, #28]
 800515c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800515e:	693b      	ldr	r3, [r7, #16]
 8005160:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005164:	2b00      	cmp	r3, #0
 8005166:	d049      	beq.n	80051fc <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005168:	693b      	ldr	r3, [r7, #16]
 800516a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800516e:	2b00      	cmp	r3, #0
 8005170:	d109      	bne.n	8005186 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005176:	2b00      	cmp	r3, #0
 8005178:	f000 8210 	beq.w	800559c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005180:	6878      	ldr	r0, [r7, #4]
 8005182:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005184:	e20a      	b.n	800559c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800518a:	2b00      	cmp	r3, #0
 800518c:	f000 8206 	beq.w	800559c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005194:	6878      	ldr	r0, [r7, #4]
 8005196:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005198:	e200      	b.n	800559c <HAL_DMA_IRQHandler+0xe08>
 800519a:	bf00      	nop
 800519c:	40020010 	.word	0x40020010
 80051a0:	40020028 	.word	0x40020028
 80051a4:	40020040 	.word	0x40020040
 80051a8:	40020058 	.word	0x40020058
 80051ac:	40020070 	.word	0x40020070
 80051b0:	40020088 	.word	0x40020088
 80051b4:	400200a0 	.word	0x400200a0
 80051b8:	400200b8 	.word	0x400200b8
 80051bc:	40020410 	.word	0x40020410
 80051c0:	40020428 	.word	0x40020428
 80051c4:	40020440 	.word	0x40020440
 80051c8:	40020458 	.word	0x40020458
 80051cc:	40020470 	.word	0x40020470
 80051d0:	40020488 	.word	0x40020488
 80051d4:	400204a0 	.word	0x400204a0
 80051d8:	400204b8 	.word	0x400204b8
 80051dc:	58025408 	.word	0x58025408
 80051e0:	5802541c 	.word	0x5802541c
 80051e4:	58025430 	.word	0x58025430
 80051e8:	58025444 	.word	0x58025444
 80051ec:	58025458 	.word	0x58025458
 80051f0:	5802546c 	.word	0x5802546c
 80051f4:	58025480 	.word	0x58025480
 80051f8:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80051fc:	693b      	ldr	r3, [r7, #16]
 80051fe:	f003 0320 	and.w	r3, r3, #32
 8005202:	2b00      	cmp	r3, #0
 8005204:	d160      	bne.n	80052c8 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	4a7f      	ldr	r2, [pc, #508]	@ (8005408 <HAL_DMA_IRQHandler+0xc74>)
 800520c:	4293      	cmp	r3, r2
 800520e:	d04a      	beq.n	80052a6 <HAL_DMA_IRQHandler+0xb12>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	4a7d      	ldr	r2, [pc, #500]	@ (800540c <HAL_DMA_IRQHandler+0xc78>)
 8005216:	4293      	cmp	r3, r2
 8005218:	d045      	beq.n	80052a6 <HAL_DMA_IRQHandler+0xb12>
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	4a7c      	ldr	r2, [pc, #496]	@ (8005410 <HAL_DMA_IRQHandler+0xc7c>)
 8005220:	4293      	cmp	r3, r2
 8005222:	d040      	beq.n	80052a6 <HAL_DMA_IRQHandler+0xb12>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	4a7a      	ldr	r2, [pc, #488]	@ (8005414 <HAL_DMA_IRQHandler+0xc80>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d03b      	beq.n	80052a6 <HAL_DMA_IRQHandler+0xb12>
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	4a79      	ldr	r2, [pc, #484]	@ (8005418 <HAL_DMA_IRQHandler+0xc84>)
 8005234:	4293      	cmp	r3, r2
 8005236:	d036      	beq.n	80052a6 <HAL_DMA_IRQHandler+0xb12>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	4a77      	ldr	r2, [pc, #476]	@ (800541c <HAL_DMA_IRQHandler+0xc88>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d031      	beq.n	80052a6 <HAL_DMA_IRQHandler+0xb12>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	4a76      	ldr	r2, [pc, #472]	@ (8005420 <HAL_DMA_IRQHandler+0xc8c>)
 8005248:	4293      	cmp	r3, r2
 800524a:	d02c      	beq.n	80052a6 <HAL_DMA_IRQHandler+0xb12>
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4a74      	ldr	r2, [pc, #464]	@ (8005424 <HAL_DMA_IRQHandler+0xc90>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d027      	beq.n	80052a6 <HAL_DMA_IRQHandler+0xb12>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	4a73      	ldr	r2, [pc, #460]	@ (8005428 <HAL_DMA_IRQHandler+0xc94>)
 800525c:	4293      	cmp	r3, r2
 800525e:	d022      	beq.n	80052a6 <HAL_DMA_IRQHandler+0xb12>
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	4a71      	ldr	r2, [pc, #452]	@ (800542c <HAL_DMA_IRQHandler+0xc98>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d01d      	beq.n	80052a6 <HAL_DMA_IRQHandler+0xb12>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	4a70      	ldr	r2, [pc, #448]	@ (8005430 <HAL_DMA_IRQHandler+0xc9c>)
 8005270:	4293      	cmp	r3, r2
 8005272:	d018      	beq.n	80052a6 <HAL_DMA_IRQHandler+0xb12>
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	4a6e      	ldr	r2, [pc, #440]	@ (8005434 <HAL_DMA_IRQHandler+0xca0>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d013      	beq.n	80052a6 <HAL_DMA_IRQHandler+0xb12>
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	4a6d      	ldr	r2, [pc, #436]	@ (8005438 <HAL_DMA_IRQHandler+0xca4>)
 8005284:	4293      	cmp	r3, r2
 8005286:	d00e      	beq.n	80052a6 <HAL_DMA_IRQHandler+0xb12>
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	4a6b      	ldr	r2, [pc, #428]	@ (800543c <HAL_DMA_IRQHandler+0xca8>)
 800528e:	4293      	cmp	r3, r2
 8005290:	d009      	beq.n	80052a6 <HAL_DMA_IRQHandler+0xb12>
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	4a6a      	ldr	r2, [pc, #424]	@ (8005440 <HAL_DMA_IRQHandler+0xcac>)
 8005298:	4293      	cmp	r3, r2
 800529a:	d004      	beq.n	80052a6 <HAL_DMA_IRQHandler+0xb12>
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	4a68      	ldr	r2, [pc, #416]	@ (8005444 <HAL_DMA_IRQHandler+0xcb0>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d108      	bne.n	80052b8 <HAL_DMA_IRQHandler+0xb24>
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	681a      	ldr	r2, [r3, #0]
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f022 0208 	bic.w	r2, r2, #8
 80052b4:	601a      	str	r2, [r3, #0]
 80052b6:	e007      	b.n	80052c8 <HAL_DMA_IRQHandler+0xb34>
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	681a      	ldr	r2, [r3, #0]
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f022 0204 	bic.w	r2, r2, #4
 80052c6:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	f000 8165 	beq.w	800559c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052d6:	6878      	ldr	r0, [r7, #4]
 80052d8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80052da:	e15f      	b.n	800559c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80052e0:	f003 031f 	and.w	r3, r3, #31
 80052e4:	2202      	movs	r2, #2
 80052e6:	409a      	lsls	r2, r3
 80052e8:	697b      	ldr	r3, [r7, #20]
 80052ea:	4013      	ands	r3, r2
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	f000 80c5 	beq.w	800547c <HAL_DMA_IRQHandler+0xce8>
 80052f2:	693b      	ldr	r3, [r7, #16]
 80052f4:	f003 0302 	and.w	r3, r3, #2
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	f000 80bf 	beq.w	800547c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005302:	f003 031f 	and.w	r3, r3, #31
 8005306:	2202      	movs	r2, #2
 8005308:	409a      	lsls	r2, r3
 800530a:	69fb      	ldr	r3, [r7, #28]
 800530c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800530e:	693b      	ldr	r3, [r7, #16]
 8005310:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005314:	2b00      	cmp	r3, #0
 8005316:	d018      	beq.n	800534a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005318:	693b      	ldr	r3, [r7, #16]
 800531a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800531e:	2b00      	cmp	r3, #0
 8005320:	d109      	bne.n	8005336 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005326:	2b00      	cmp	r3, #0
 8005328:	f000 813a 	beq.w	80055a0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005330:	6878      	ldr	r0, [r7, #4]
 8005332:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005334:	e134      	b.n	80055a0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800533a:	2b00      	cmp	r3, #0
 800533c:	f000 8130 	beq.w	80055a0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005344:	6878      	ldr	r0, [r7, #4]
 8005346:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005348:	e12a      	b.n	80055a0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800534a:	693b      	ldr	r3, [r7, #16]
 800534c:	f003 0320 	and.w	r3, r3, #32
 8005350:	2b00      	cmp	r3, #0
 8005352:	f040 8089 	bne.w	8005468 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	4a2b      	ldr	r2, [pc, #172]	@ (8005408 <HAL_DMA_IRQHandler+0xc74>)
 800535c:	4293      	cmp	r3, r2
 800535e:	d04a      	beq.n	80053f6 <HAL_DMA_IRQHandler+0xc62>
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	4a29      	ldr	r2, [pc, #164]	@ (800540c <HAL_DMA_IRQHandler+0xc78>)
 8005366:	4293      	cmp	r3, r2
 8005368:	d045      	beq.n	80053f6 <HAL_DMA_IRQHandler+0xc62>
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	4a28      	ldr	r2, [pc, #160]	@ (8005410 <HAL_DMA_IRQHandler+0xc7c>)
 8005370:	4293      	cmp	r3, r2
 8005372:	d040      	beq.n	80053f6 <HAL_DMA_IRQHandler+0xc62>
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	4a26      	ldr	r2, [pc, #152]	@ (8005414 <HAL_DMA_IRQHandler+0xc80>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d03b      	beq.n	80053f6 <HAL_DMA_IRQHandler+0xc62>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	4a25      	ldr	r2, [pc, #148]	@ (8005418 <HAL_DMA_IRQHandler+0xc84>)
 8005384:	4293      	cmp	r3, r2
 8005386:	d036      	beq.n	80053f6 <HAL_DMA_IRQHandler+0xc62>
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	4a23      	ldr	r2, [pc, #140]	@ (800541c <HAL_DMA_IRQHandler+0xc88>)
 800538e:	4293      	cmp	r3, r2
 8005390:	d031      	beq.n	80053f6 <HAL_DMA_IRQHandler+0xc62>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	4a22      	ldr	r2, [pc, #136]	@ (8005420 <HAL_DMA_IRQHandler+0xc8c>)
 8005398:	4293      	cmp	r3, r2
 800539a:	d02c      	beq.n	80053f6 <HAL_DMA_IRQHandler+0xc62>
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	4a20      	ldr	r2, [pc, #128]	@ (8005424 <HAL_DMA_IRQHandler+0xc90>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d027      	beq.n	80053f6 <HAL_DMA_IRQHandler+0xc62>
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	4a1f      	ldr	r2, [pc, #124]	@ (8005428 <HAL_DMA_IRQHandler+0xc94>)
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d022      	beq.n	80053f6 <HAL_DMA_IRQHandler+0xc62>
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	4a1d      	ldr	r2, [pc, #116]	@ (800542c <HAL_DMA_IRQHandler+0xc98>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d01d      	beq.n	80053f6 <HAL_DMA_IRQHandler+0xc62>
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	4a1c      	ldr	r2, [pc, #112]	@ (8005430 <HAL_DMA_IRQHandler+0xc9c>)
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d018      	beq.n	80053f6 <HAL_DMA_IRQHandler+0xc62>
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	4a1a      	ldr	r2, [pc, #104]	@ (8005434 <HAL_DMA_IRQHandler+0xca0>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d013      	beq.n	80053f6 <HAL_DMA_IRQHandler+0xc62>
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	4a19      	ldr	r2, [pc, #100]	@ (8005438 <HAL_DMA_IRQHandler+0xca4>)
 80053d4:	4293      	cmp	r3, r2
 80053d6:	d00e      	beq.n	80053f6 <HAL_DMA_IRQHandler+0xc62>
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	4a17      	ldr	r2, [pc, #92]	@ (800543c <HAL_DMA_IRQHandler+0xca8>)
 80053de:	4293      	cmp	r3, r2
 80053e0:	d009      	beq.n	80053f6 <HAL_DMA_IRQHandler+0xc62>
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	4a16      	ldr	r2, [pc, #88]	@ (8005440 <HAL_DMA_IRQHandler+0xcac>)
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d004      	beq.n	80053f6 <HAL_DMA_IRQHandler+0xc62>
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	4a14      	ldr	r2, [pc, #80]	@ (8005444 <HAL_DMA_IRQHandler+0xcb0>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d128      	bne.n	8005448 <HAL_DMA_IRQHandler+0xcb4>
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	681a      	ldr	r2, [r3, #0]
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f022 0214 	bic.w	r2, r2, #20
 8005404:	601a      	str	r2, [r3, #0]
 8005406:	e027      	b.n	8005458 <HAL_DMA_IRQHandler+0xcc4>
 8005408:	40020010 	.word	0x40020010
 800540c:	40020028 	.word	0x40020028
 8005410:	40020040 	.word	0x40020040
 8005414:	40020058 	.word	0x40020058
 8005418:	40020070 	.word	0x40020070
 800541c:	40020088 	.word	0x40020088
 8005420:	400200a0 	.word	0x400200a0
 8005424:	400200b8 	.word	0x400200b8
 8005428:	40020410 	.word	0x40020410
 800542c:	40020428 	.word	0x40020428
 8005430:	40020440 	.word	0x40020440
 8005434:	40020458 	.word	0x40020458
 8005438:	40020470 	.word	0x40020470
 800543c:	40020488 	.word	0x40020488
 8005440:	400204a0 	.word	0x400204a0
 8005444:	400204b8 	.word	0x400204b8
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	681a      	ldr	r2, [r3, #0]
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f022 020a 	bic.w	r2, r2, #10
 8005456:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2201      	movs	r2, #1
 800545c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2200      	movs	r2, #0
 8005464:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800546c:	2b00      	cmp	r3, #0
 800546e:	f000 8097 	beq.w	80055a0 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005476:	6878      	ldr	r0, [r7, #4]
 8005478:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800547a:	e091      	b.n	80055a0 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005480:	f003 031f 	and.w	r3, r3, #31
 8005484:	2208      	movs	r2, #8
 8005486:	409a      	lsls	r2, r3
 8005488:	697b      	ldr	r3, [r7, #20]
 800548a:	4013      	ands	r3, r2
 800548c:	2b00      	cmp	r3, #0
 800548e:	f000 8088 	beq.w	80055a2 <HAL_DMA_IRQHandler+0xe0e>
 8005492:	693b      	ldr	r3, [r7, #16]
 8005494:	f003 0308 	and.w	r3, r3, #8
 8005498:	2b00      	cmp	r3, #0
 800549a:	f000 8082 	beq.w	80055a2 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	4a41      	ldr	r2, [pc, #260]	@ (80055a8 <HAL_DMA_IRQHandler+0xe14>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d04a      	beq.n	800553e <HAL_DMA_IRQHandler+0xdaa>
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	4a3f      	ldr	r2, [pc, #252]	@ (80055ac <HAL_DMA_IRQHandler+0xe18>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d045      	beq.n	800553e <HAL_DMA_IRQHandler+0xdaa>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	4a3e      	ldr	r2, [pc, #248]	@ (80055b0 <HAL_DMA_IRQHandler+0xe1c>)
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d040      	beq.n	800553e <HAL_DMA_IRQHandler+0xdaa>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4a3c      	ldr	r2, [pc, #240]	@ (80055b4 <HAL_DMA_IRQHandler+0xe20>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d03b      	beq.n	800553e <HAL_DMA_IRQHandler+0xdaa>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	4a3b      	ldr	r2, [pc, #236]	@ (80055b8 <HAL_DMA_IRQHandler+0xe24>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d036      	beq.n	800553e <HAL_DMA_IRQHandler+0xdaa>
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	4a39      	ldr	r2, [pc, #228]	@ (80055bc <HAL_DMA_IRQHandler+0xe28>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d031      	beq.n	800553e <HAL_DMA_IRQHandler+0xdaa>
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	4a38      	ldr	r2, [pc, #224]	@ (80055c0 <HAL_DMA_IRQHandler+0xe2c>)
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d02c      	beq.n	800553e <HAL_DMA_IRQHandler+0xdaa>
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	4a36      	ldr	r2, [pc, #216]	@ (80055c4 <HAL_DMA_IRQHandler+0xe30>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d027      	beq.n	800553e <HAL_DMA_IRQHandler+0xdaa>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	4a35      	ldr	r2, [pc, #212]	@ (80055c8 <HAL_DMA_IRQHandler+0xe34>)
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d022      	beq.n	800553e <HAL_DMA_IRQHandler+0xdaa>
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	4a33      	ldr	r2, [pc, #204]	@ (80055cc <HAL_DMA_IRQHandler+0xe38>)
 80054fe:	4293      	cmp	r3, r2
 8005500:	d01d      	beq.n	800553e <HAL_DMA_IRQHandler+0xdaa>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	4a32      	ldr	r2, [pc, #200]	@ (80055d0 <HAL_DMA_IRQHandler+0xe3c>)
 8005508:	4293      	cmp	r3, r2
 800550a:	d018      	beq.n	800553e <HAL_DMA_IRQHandler+0xdaa>
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	4a30      	ldr	r2, [pc, #192]	@ (80055d4 <HAL_DMA_IRQHandler+0xe40>)
 8005512:	4293      	cmp	r3, r2
 8005514:	d013      	beq.n	800553e <HAL_DMA_IRQHandler+0xdaa>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	4a2f      	ldr	r2, [pc, #188]	@ (80055d8 <HAL_DMA_IRQHandler+0xe44>)
 800551c:	4293      	cmp	r3, r2
 800551e:	d00e      	beq.n	800553e <HAL_DMA_IRQHandler+0xdaa>
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	4a2d      	ldr	r2, [pc, #180]	@ (80055dc <HAL_DMA_IRQHandler+0xe48>)
 8005526:	4293      	cmp	r3, r2
 8005528:	d009      	beq.n	800553e <HAL_DMA_IRQHandler+0xdaa>
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	4a2c      	ldr	r2, [pc, #176]	@ (80055e0 <HAL_DMA_IRQHandler+0xe4c>)
 8005530:	4293      	cmp	r3, r2
 8005532:	d004      	beq.n	800553e <HAL_DMA_IRQHandler+0xdaa>
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	4a2a      	ldr	r2, [pc, #168]	@ (80055e4 <HAL_DMA_IRQHandler+0xe50>)
 800553a:	4293      	cmp	r3, r2
 800553c:	d108      	bne.n	8005550 <HAL_DMA_IRQHandler+0xdbc>
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	681a      	ldr	r2, [r3, #0]
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f022 021c 	bic.w	r2, r2, #28
 800554c:	601a      	str	r2, [r3, #0]
 800554e:	e007      	b.n	8005560 <HAL_DMA_IRQHandler+0xdcc>
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	681a      	ldr	r2, [r3, #0]
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f022 020e 	bic.w	r2, r2, #14
 800555e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005564:	f003 031f 	and.w	r3, r3, #31
 8005568:	2201      	movs	r2, #1
 800556a:	409a      	lsls	r2, r3
 800556c:	69fb      	ldr	r3, [r7, #28]
 800556e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2201      	movs	r2, #1
 8005574:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2201      	movs	r2, #1
 800557a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	2200      	movs	r2, #0
 8005582:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800558a:	2b00      	cmp	r3, #0
 800558c:	d009      	beq.n	80055a2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005592:	6878      	ldr	r0, [r7, #4]
 8005594:	4798      	blx	r3
 8005596:	e004      	b.n	80055a2 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8005598:	bf00      	nop
 800559a:	e002      	b.n	80055a2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800559c:	bf00      	nop
 800559e:	e000      	b.n	80055a2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80055a0:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80055a2:	3728      	adds	r7, #40	@ 0x28
 80055a4:	46bd      	mov	sp, r7
 80055a6:	bd80      	pop	{r7, pc}
 80055a8:	40020010 	.word	0x40020010
 80055ac:	40020028 	.word	0x40020028
 80055b0:	40020040 	.word	0x40020040
 80055b4:	40020058 	.word	0x40020058
 80055b8:	40020070 	.word	0x40020070
 80055bc:	40020088 	.word	0x40020088
 80055c0:	400200a0 	.word	0x400200a0
 80055c4:	400200b8 	.word	0x400200b8
 80055c8:	40020410 	.word	0x40020410
 80055cc:	40020428 	.word	0x40020428
 80055d0:	40020440 	.word	0x40020440
 80055d4:	40020458 	.word	0x40020458
 80055d8:	40020470 	.word	0x40020470
 80055dc:	40020488 	.word	0x40020488
 80055e0:	400204a0 	.word	0x400204a0
 80055e4:	400204b8 	.word	0x400204b8

080055e8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80055e8:	b480      	push	{r7}
 80055ea:	b085      	sub	sp, #20
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	4a42      	ldr	r2, [pc, #264]	@ (8005700 <DMA_CalcBaseAndBitshift+0x118>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d04a      	beq.n	8005690 <DMA_CalcBaseAndBitshift+0xa8>
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	4a41      	ldr	r2, [pc, #260]	@ (8005704 <DMA_CalcBaseAndBitshift+0x11c>)
 8005600:	4293      	cmp	r3, r2
 8005602:	d045      	beq.n	8005690 <DMA_CalcBaseAndBitshift+0xa8>
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	4a3f      	ldr	r2, [pc, #252]	@ (8005708 <DMA_CalcBaseAndBitshift+0x120>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d040      	beq.n	8005690 <DMA_CalcBaseAndBitshift+0xa8>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	4a3e      	ldr	r2, [pc, #248]	@ (800570c <DMA_CalcBaseAndBitshift+0x124>)
 8005614:	4293      	cmp	r3, r2
 8005616:	d03b      	beq.n	8005690 <DMA_CalcBaseAndBitshift+0xa8>
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	4a3c      	ldr	r2, [pc, #240]	@ (8005710 <DMA_CalcBaseAndBitshift+0x128>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d036      	beq.n	8005690 <DMA_CalcBaseAndBitshift+0xa8>
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	4a3b      	ldr	r2, [pc, #236]	@ (8005714 <DMA_CalcBaseAndBitshift+0x12c>)
 8005628:	4293      	cmp	r3, r2
 800562a:	d031      	beq.n	8005690 <DMA_CalcBaseAndBitshift+0xa8>
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	4a39      	ldr	r2, [pc, #228]	@ (8005718 <DMA_CalcBaseAndBitshift+0x130>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d02c      	beq.n	8005690 <DMA_CalcBaseAndBitshift+0xa8>
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	4a38      	ldr	r2, [pc, #224]	@ (800571c <DMA_CalcBaseAndBitshift+0x134>)
 800563c:	4293      	cmp	r3, r2
 800563e:	d027      	beq.n	8005690 <DMA_CalcBaseAndBitshift+0xa8>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	4a36      	ldr	r2, [pc, #216]	@ (8005720 <DMA_CalcBaseAndBitshift+0x138>)
 8005646:	4293      	cmp	r3, r2
 8005648:	d022      	beq.n	8005690 <DMA_CalcBaseAndBitshift+0xa8>
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	4a35      	ldr	r2, [pc, #212]	@ (8005724 <DMA_CalcBaseAndBitshift+0x13c>)
 8005650:	4293      	cmp	r3, r2
 8005652:	d01d      	beq.n	8005690 <DMA_CalcBaseAndBitshift+0xa8>
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	4a33      	ldr	r2, [pc, #204]	@ (8005728 <DMA_CalcBaseAndBitshift+0x140>)
 800565a:	4293      	cmp	r3, r2
 800565c:	d018      	beq.n	8005690 <DMA_CalcBaseAndBitshift+0xa8>
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	4a32      	ldr	r2, [pc, #200]	@ (800572c <DMA_CalcBaseAndBitshift+0x144>)
 8005664:	4293      	cmp	r3, r2
 8005666:	d013      	beq.n	8005690 <DMA_CalcBaseAndBitshift+0xa8>
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	4a30      	ldr	r2, [pc, #192]	@ (8005730 <DMA_CalcBaseAndBitshift+0x148>)
 800566e:	4293      	cmp	r3, r2
 8005670:	d00e      	beq.n	8005690 <DMA_CalcBaseAndBitshift+0xa8>
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	4a2f      	ldr	r2, [pc, #188]	@ (8005734 <DMA_CalcBaseAndBitshift+0x14c>)
 8005678:	4293      	cmp	r3, r2
 800567a:	d009      	beq.n	8005690 <DMA_CalcBaseAndBitshift+0xa8>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	4a2d      	ldr	r2, [pc, #180]	@ (8005738 <DMA_CalcBaseAndBitshift+0x150>)
 8005682:	4293      	cmp	r3, r2
 8005684:	d004      	beq.n	8005690 <DMA_CalcBaseAndBitshift+0xa8>
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	4a2c      	ldr	r2, [pc, #176]	@ (800573c <DMA_CalcBaseAndBitshift+0x154>)
 800568c:	4293      	cmp	r3, r2
 800568e:	d101      	bne.n	8005694 <DMA_CalcBaseAndBitshift+0xac>
 8005690:	2301      	movs	r3, #1
 8005692:	e000      	b.n	8005696 <DMA_CalcBaseAndBitshift+0xae>
 8005694:	2300      	movs	r3, #0
 8005696:	2b00      	cmp	r3, #0
 8005698:	d024      	beq.n	80056e4 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	b2db      	uxtb	r3, r3
 80056a0:	3b10      	subs	r3, #16
 80056a2:	4a27      	ldr	r2, [pc, #156]	@ (8005740 <DMA_CalcBaseAndBitshift+0x158>)
 80056a4:	fba2 2303 	umull	r2, r3, r2, r3
 80056a8:	091b      	lsrs	r3, r3, #4
 80056aa:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	f003 0307 	and.w	r3, r3, #7
 80056b2:	4a24      	ldr	r2, [pc, #144]	@ (8005744 <DMA_CalcBaseAndBitshift+0x15c>)
 80056b4:	5cd3      	ldrb	r3, [r2, r3]
 80056b6:	461a      	mov	r2, r3
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	2b03      	cmp	r3, #3
 80056c0:	d908      	bls.n	80056d4 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	461a      	mov	r2, r3
 80056c8:	4b1f      	ldr	r3, [pc, #124]	@ (8005748 <DMA_CalcBaseAndBitshift+0x160>)
 80056ca:	4013      	ands	r3, r2
 80056cc:	1d1a      	adds	r2, r3, #4
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	659a      	str	r2, [r3, #88]	@ 0x58
 80056d2:	e00d      	b.n	80056f0 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	461a      	mov	r2, r3
 80056da:	4b1b      	ldr	r3, [pc, #108]	@ (8005748 <DMA_CalcBaseAndBitshift+0x160>)
 80056dc:	4013      	ands	r3, r2
 80056de:	687a      	ldr	r2, [r7, #4]
 80056e0:	6593      	str	r3, [r2, #88]	@ 0x58
 80056e2:	e005      	b.n	80056f0 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80056f4:	4618      	mov	r0, r3
 80056f6:	3714      	adds	r7, #20
 80056f8:	46bd      	mov	sp, r7
 80056fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fe:	4770      	bx	lr
 8005700:	40020010 	.word	0x40020010
 8005704:	40020028 	.word	0x40020028
 8005708:	40020040 	.word	0x40020040
 800570c:	40020058 	.word	0x40020058
 8005710:	40020070 	.word	0x40020070
 8005714:	40020088 	.word	0x40020088
 8005718:	400200a0 	.word	0x400200a0
 800571c:	400200b8 	.word	0x400200b8
 8005720:	40020410 	.word	0x40020410
 8005724:	40020428 	.word	0x40020428
 8005728:	40020440 	.word	0x40020440
 800572c:	40020458 	.word	0x40020458
 8005730:	40020470 	.word	0x40020470
 8005734:	40020488 	.word	0x40020488
 8005738:	400204a0 	.word	0x400204a0
 800573c:	400204b8 	.word	0x400204b8
 8005740:	aaaaaaab 	.word	0xaaaaaaab
 8005744:	080126c0 	.word	0x080126c0
 8005748:	fffffc00 	.word	0xfffffc00

0800574c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800574c:	b480      	push	{r7}
 800574e:	b085      	sub	sp, #20
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005754:	2300      	movs	r3, #0
 8005756:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	699b      	ldr	r3, [r3, #24]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d120      	bne.n	80057a2 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005764:	2b03      	cmp	r3, #3
 8005766:	d858      	bhi.n	800581a <DMA_CheckFifoParam+0xce>
 8005768:	a201      	add	r2, pc, #4	@ (adr r2, 8005770 <DMA_CheckFifoParam+0x24>)
 800576a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800576e:	bf00      	nop
 8005770:	08005781 	.word	0x08005781
 8005774:	08005793 	.word	0x08005793
 8005778:	08005781 	.word	0x08005781
 800577c:	0800581b 	.word	0x0800581b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005784:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005788:	2b00      	cmp	r3, #0
 800578a:	d048      	beq.n	800581e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800578c:	2301      	movs	r3, #1
 800578e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005790:	e045      	b.n	800581e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005796:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800579a:	d142      	bne.n	8005822 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800579c:	2301      	movs	r3, #1
 800579e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80057a0:	e03f      	b.n	8005822 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	699b      	ldr	r3, [r3, #24]
 80057a6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80057aa:	d123      	bne.n	80057f4 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057b0:	2b03      	cmp	r3, #3
 80057b2:	d838      	bhi.n	8005826 <DMA_CheckFifoParam+0xda>
 80057b4:	a201      	add	r2, pc, #4	@ (adr r2, 80057bc <DMA_CheckFifoParam+0x70>)
 80057b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057ba:	bf00      	nop
 80057bc:	080057cd 	.word	0x080057cd
 80057c0:	080057d3 	.word	0x080057d3
 80057c4:	080057cd 	.word	0x080057cd
 80057c8:	080057e5 	.word	0x080057e5
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80057cc:	2301      	movs	r3, #1
 80057ce:	73fb      	strb	r3, [r7, #15]
        break;
 80057d0:	e030      	b.n	8005834 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057d6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d025      	beq.n	800582a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80057de:	2301      	movs	r3, #1
 80057e0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80057e2:	e022      	b.n	800582a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057e8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80057ec:	d11f      	bne.n	800582e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80057ee:	2301      	movs	r3, #1
 80057f0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80057f2:	e01c      	b.n	800582e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057f8:	2b02      	cmp	r3, #2
 80057fa:	d902      	bls.n	8005802 <DMA_CheckFifoParam+0xb6>
 80057fc:	2b03      	cmp	r3, #3
 80057fe:	d003      	beq.n	8005808 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8005800:	e018      	b.n	8005834 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8005802:	2301      	movs	r3, #1
 8005804:	73fb      	strb	r3, [r7, #15]
        break;
 8005806:	e015      	b.n	8005834 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800580c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005810:	2b00      	cmp	r3, #0
 8005812:	d00e      	beq.n	8005832 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8005814:	2301      	movs	r3, #1
 8005816:	73fb      	strb	r3, [r7, #15]
    break;
 8005818:	e00b      	b.n	8005832 <DMA_CheckFifoParam+0xe6>
        break;
 800581a:	bf00      	nop
 800581c:	e00a      	b.n	8005834 <DMA_CheckFifoParam+0xe8>
        break;
 800581e:	bf00      	nop
 8005820:	e008      	b.n	8005834 <DMA_CheckFifoParam+0xe8>
        break;
 8005822:	bf00      	nop
 8005824:	e006      	b.n	8005834 <DMA_CheckFifoParam+0xe8>
        break;
 8005826:	bf00      	nop
 8005828:	e004      	b.n	8005834 <DMA_CheckFifoParam+0xe8>
        break;
 800582a:	bf00      	nop
 800582c:	e002      	b.n	8005834 <DMA_CheckFifoParam+0xe8>
        break;
 800582e:	bf00      	nop
 8005830:	e000      	b.n	8005834 <DMA_CheckFifoParam+0xe8>
    break;
 8005832:	bf00      	nop
    }
  }

  return status;
 8005834:	7bfb      	ldrb	r3, [r7, #15]
}
 8005836:	4618      	mov	r0, r3
 8005838:	3714      	adds	r7, #20
 800583a:	46bd      	mov	sp, r7
 800583c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005840:	4770      	bx	lr
 8005842:	bf00      	nop

08005844 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005844:	b480      	push	{r7}
 8005846:	b085      	sub	sp, #20
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	4a38      	ldr	r2, [pc, #224]	@ (8005938 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8005858:	4293      	cmp	r3, r2
 800585a:	d022      	beq.n	80058a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	4a36      	ldr	r2, [pc, #216]	@ (800593c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8005862:	4293      	cmp	r3, r2
 8005864:	d01d      	beq.n	80058a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	4a35      	ldr	r2, [pc, #212]	@ (8005940 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800586c:	4293      	cmp	r3, r2
 800586e:	d018      	beq.n	80058a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	4a33      	ldr	r2, [pc, #204]	@ (8005944 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8005876:	4293      	cmp	r3, r2
 8005878:	d013      	beq.n	80058a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	4a32      	ldr	r2, [pc, #200]	@ (8005948 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8005880:	4293      	cmp	r3, r2
 8005882:	d00e      	beq.n	80058a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	4a30      	ldr	r2, [pc, #192]	@ (800594c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800588a:	4293      	cmp	r3, r2
 800588c:	d009      	beq.n	80058a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	4a2f      	ldr	r2, [pc, #188]	@ (8005950 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8005894:	4293      	cmp	r3, r2
 8005896:	d004      	beq.n	80058a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	4a2d      	ldr	r2, [pc, #180]	@ (8005954 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	d101      	bne.n	80058a6 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80058a2:	2301      	movs	r3, #1
 80058a4:	e000      	b.n	80058a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80058a6:	2300      	movs	r3, #0
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d01a      	beq.n	80058e2 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	b2db      	uxtb	r3, r3
 80058b2:	3b08      	subs	r3, #8
 80058b4:	4a28      	ldr	r2, [pc, #160]	@ (8005958 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80058b6:	fba2 2303 	umull	r2, r3, r2, r3
 80058ba:	091b      	lsrs	r3, r3, #4
 80058bc:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80058be:	68fa      	ldr	r2, [r7, #12]
 80058c0:	4b26      	ldr	r3, [pc, #152]	@ (800595c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80058c2:	4413      	add	r3, r2
 80058c4:	009b      	lsls	r3, r3, #2
 80058c6:	461a      	mov	r2, r3
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	4a24      	ldr	r2, [pc, #144]	@ (8005960 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80058d0:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	f003 031f 	and.w	r3, r3, #31
 80058d8:	2201      	movs	r2, #1
 80058da:	409a      	lsls	r2, r3
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80058e0:	e024      	b.n	800592c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	b2db      	uxtb	r3, r3
 80058e8:	3b10      	subs	r3, #16
 80058ea:	4a1e      	ldr	r2, [pc, #120]	@ (8005964 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80058ec:	fba2 2303 	umull	r2, r3, r2, r3
 80058f0:	091b      	lsrs	r3, r3, #4
 80058f2:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80058f4:	68bb      	ldr	r3, [r7, #8]
 80058f6:	4a1c      	ldr	r2, [pc, #112]	@ (8005968 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80058f8:	4293      	cmp	r3, r2
 80058fa:	d806      	bhi.n	800590a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80058fc:	68bb      	ldr	r3, [r7, #8]
 80058fe:	4a1b      	ldr	r2, [pc, #108]	@ (800596c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8005900:	4293      	cmp	r3, r2
 8005902:	d902      	bls.n	800590a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	3308      	adds	r3, #8
 8005908:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800590a:	68fa      	ldr	r2, [r7, #12]
 800590c:	4b18      	ldr	r3, [pc, #96]	@ (8005970 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800590e:	4413      	add	r3, r2
 8005910:	009b      	lsls	r3, r3, #2
 8005912:	461a      	mov	r2, r3
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	4a16      	ldr	r2, [pc, #88]	@ (8005974 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800591c:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	f003 031f 	and.w	r3, r3, #31
 8005924:	2201      	movs	r2, #1
 8005926:	409a      	lsls	r2, r3
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800592c:	bf00      	nop
 800592e:	3714      	adds	r7, #20
 8005930:	46bd      	mov	sp, r7
 8005932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005936:	4770      	bx	lr
 8005938:	58025408 	.word	0x58025408
 800593c:	5802541c 	.word	0x5802541c
 8005940:	58025430 	.word	0x58025430
 8005944:	58025444 	.word	0x58025444
 8005948:	58025458 	.word	0x58025458
 800594c:	5802546c 	.word	0x5802546c
 8005950:	58025480 	.word	0x58025480
 8005954:	58025494 	.word	0x58025494
 8005958:	cccccccd 	.word	0xcccccccd
 800595c:	16009600 	.word	0x16009600
 8005960:	58025880 	.word	0x58025880
 8005964:	aaaaaaab 	.word	0xaaaaaaab
 8005968:	400204b8 	.word	0x400204b8
 800596c:	4002040f 	.word	0x4002040f
 8005970:	10008200 	.word	0x10008200
 8005974:	40020880 	.word	0x40020880

08005978 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005978:	b480      	push	{r7}
 800597a:	b085      	sub	sp, #20
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	685b      	ldr	r3, [r3, #4]
 8005984:	b2db      	uxtb	r3, r3
 8005986:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d04a      	beq.n	8005a24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	2b08      	cmp	r3, #8
 8005992:	d847      	bhi.n	8005a24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	4a25      	ldr	r2, [pc, #148]	@ (8005a30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800599a:	4293      	cmp	r3, r2
 800599c:	d022      	beq.n	80059e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	4a24      	ldr	r2, [pc, #144]	@ (8005a34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80059a4:	4293      	cmp	r3, r2
 80059a6:	d01d      	beq.n	80059e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	4a22      	ldr	r2, [pc, #136]	@ (8005a38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80059ae:	4293      	cmp	r3, r2
 80059b0:	d018      	beq.n	80059e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	4a21      	ldr	r2, [pc, #132]	@ (8005a3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80059b8:	4293      	cmp	r3, r2
 80059ba:	d013      	beq.n	80059e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	4a1f      	ldr	r2, [pc, #124]	@ (8005a40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80059c2:	4293      	cmp	r3, r2
 80059c4:	d00e      	beq.n	80059e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	4a1e      	ldr	r2, [pc, #120]	@ (8005a44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80059cc:	4293      	cmp	r3, r2
 80059ce:	d009      	beq.n	80059e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	4a1c      	ldr	r2, [pc, #112]	@ (8005a48 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80059d6:	4293      	cmp	r3, r2
 80059d8:	d004      	beq.n	80059e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	4a1b      	ldr	r2, [pc, #108]	@ (8005a4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80059e0:	4293      	cmp	r3, r2
 80059e2:	d101      	bne.n	80059e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80059e4:	2301      	movs	r3, #1
 80059e6:	e000      	b.n	80059ea <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80059e8:	2300      	movs	r3, #0
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d00a      	beq.n	8005a04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80059ee:	68fa      	ldr	r2, [r7, #12]
 80059f0:	4b17      	ldr	r3, [pc, #92]	@ (8005a50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80059f2:	4413      	add	r3, r2
 80059f4:	009b      	lsls	r3, r3, #2
 80059f6:	461a      	mov	r2, r3
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	4a15      	ldr	r2, [pc, #84]	@ (8005a54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8005a00:	671a      	str	r2, [r3, #112]	@ 0x70
 8005a02:	e009      	b.n	8005a18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005a04:	68fa      	ldr	r2, [r7, #12]
 8005a06:	4b14      	ldr	r3, [pc, #80]	@ (8005a58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8005a08:	4413      	add	r3, r2
 8005a0a:	009b      	lsls	r3, r3, #2
 8005a0c:	461a      	mov	r2, r3
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	4a11      	ldr	r2, [pc, #68]	@ (8005a5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8005a16:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	3b01      	subs	r3, #1
 8005a1c:	2201      	movs	r2, #1
 8005a1e:	409a      	lsls	r2, r3
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8005a24:	bf00      	nop
 8005a26:	3714      	adds	r7, #20
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2e:	4770      	bx	lr
 8005a30:	58025408 	.word	0x58025408
 8005a34:	5802541c 	.word	0x5802541c
 8005a38:	58025430 	.word	0x58025430
 8005a3c:	58025444 	.word	0x58025444
 8005a40:	58025458 	.word	0x58025458
 8005a44:	5802546c 	.word	0x5802546c
 8005a48:	58025480 	.word	0x58025480
 8005a4c:	58025494 	.word	0x58025494
 8005a50:	1600963f 	.word	0x1600963f
 8005a54:	58025940 	.word	0x58025940
 8005a58:	1000823f 	.word	0x1000823f
 8005a5c:	40020940 	.word	0x40020940

08005a60 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005a60:	b480      	push	{r7}
 8005a62:	b089      	sub	sp, #36	@ 0x24
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
 8005a68:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005a6e:	4b89      	ldr	r3, [pc, #548]	@ (8005c94 <HAL_GPIO_Init+0x234>)
 8005a70:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005a72:	e194      	b.n	8005d9e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	681a      	ldr	r2, [r3, #0]
 8005a78:	2101      	movs	r1, #1
 8005a7a:	69fb      	ldr	r3, [r7, #28]
 8005a7c:	fa01 f303 	lsl.w	r3, r1, r3
 8005a80:	4013      	ands	r3, r2
 8005a82:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005a84:	693b      	ldr	r3, [r7, #16]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	f000 8186 	beq.w	8005d98 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	685b      	ldr	r3, [r3, #4]
 8005a90:	f003 0303 	and.w	r3, r3, #3
 8005a94:	2b01      	cmp	r3, #1
 8005a96:	d005      	beq.n	8005aa4 <HAL_GPIO_Init+0x44>
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	685b      	ldr	r3, [r3, #4]
 8005a9c:	f003 0303 	and.w	r3, r3, #3
 8005aa0:	2b02      	cmp	r3, #2
 8005aa2:	d130      	bne.n	8005b06 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	689b      	ldr	r3, [r3, #8]
 8005aa8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005aaa:	69fb      	ldr	r3, [r7, #28]
 8005aac:	005b      	lsls	r3, r3, #1
 8005aae:	2203      	movs	r2, #3
 8005ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ab4:	43db      	mvns	r3, r3
 8005ab6:	69ba      	ldr	r2, [r7, #24]
 8005ab8:	4013      	ands	r3, r2
 8005aba:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	68da      	ldr	r2, [r3, #12]
 8005ac0:	69fb      	ldr	r3, [r7, #28]
 8005ac2:	005b      	lsls	r3, r3, #1
 8005ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8005ac8:	69ba      	ldr	r2, [r7, #24]
 8005aca:	4313      	orrs	r3, r2
 8005acc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	69ba      	ldr	r2, [r7, #24]
 8005ad2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	685b      	ldr	r3, [r3, #4]
 8005ad8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005ada:	2201      	movs	r2, #1
 8005adc:	69fb      	ldr	r3, [r7, #28]
 8005ade:	fa02 f303 	lsl.w	r3, r2, r3
 8005ae2:	43db      	mvns	r3, r3
 8005ae4:	69ba      	ldr	r2, [r7, #24]
 8005ae6:	4013      	ands	r3, r2
 8005ae8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	685b      	ldr	r3, [r3, #4]
 8005aee:	091b      	lsrs	r3, r3, #4
 8005af0:	f003 0201 	and.w	r2, r3, #1
 8005af4:	69fb      	ldr	r3, [r7, #28]
 8005af6:	fa02 f303 	lsl.w	r3, r2, r3
 8005afa:	69ba      	ldr	r2, [r7, #24]
 8005afc:	4313      	orrs	r3, r2
 8005afe:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	69ba      	ldr	r2, [r7, #24]
 8005b04:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	685b      	ldr	r3, [r3, #4]
 8005b0a:	f003 0303 	and.w	r3, r3, #3
 8005b0e:	2b03      	cmp	r3, #3
 8005b10:	d017      	beq.n	8005b42 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	68db      	ldr	r3, [r3, #12]
 8005b16:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005b18:	69fb      	ldr	r3, [r7, #28]
 8005b1a:	005b      	lsls	r3, r3, #1
 8005b1c:	2203      	movs	r2, #3
 8005b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8005b22:	43db      	mvns	r3, r3
 8005b24:	69ba      	ldr	r2, [r7, #24]
 8005b26:	4013      	ands	r3, r2
 8005b28:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005b2a:	683b      	ldr	r3, [r7, #0]
 8005b2c:	689a      	ldr	r2, [r3, #8]
 8005b2e:	69fb      	ldr	r3, [r7, #28]
 8005b30:	005b      	lsls	r3, r3, #1
 8005b32:	fa02 f303 	lsl.w	r3, r2, r3
 8005b36:	69ba      	ldr	r2, [r7, #24]
 8005b38:	4313      	orrs	r3, r2
 8005b3a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	69ba      	ldr	r2, [r7, #24]
 8005b40:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	685b      	ldr	r3, [r3, #4]
 8005b46:	f003 0303 	and.w	r3, r3, #3
 8005b4a:	2b02      	cmp	r3, #2
 8005b4c:	d123      	bne.n	8005b96 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005b4e:	69fb      	ldr	r3, [r7, #28]
 8005b50:	08da      	lsrs	r2, r3, #3
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	3208      	adds	r2, #8
 8005b56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005b5c:	69fb      	ldr	r3, [r7, #28]
 8005b5e:	f003 0307 	and.w	r3, r3, #7
 8005b62:	009b      	lsls	r3, r3, #2
 8005b64:	220f      	movs	r2, #15
 8005b66:	fa02 f303 	lsl.w	r3, r2, r3
 8005b6a:	43db      	mvns	r3, r3
 8005b6c:	69ba      	ldr	r2, [r7, #24]
 8005b6e:	4013      	ands	r3, r2
 8005b70:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	691a      	ldr	r2, [r3, #16]
 8005b76:	69fb      	ldr	r3, [r7, #28]
 8005b78:	f003 0307 	and.w	r3, r3, #7
 8005b7c:	009b      	lsls	r3, r3, #2
 8005b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8005b82:	69ba      	ldr	r2, [r7, #24]
 8005b84:	4313      	orrs	r3, r2
 8005b86:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005b88:	69fb      	ldr	r3, [r7, #28]
 8005b8a:	08da      	lsrs	r2, r3, #3
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	3208      	adds	r2, #8
 8005b90:	69b9      	ldr	r1, [r7, #24]
 8005b92:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005b9c:	69fb      	ldr	r3, [r7, #28]
 8005b9e:	005b      	lsls	r3, r3, #1
 8005ba0:	2203      	movs	r2, #3
 8005ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ba6:	43db      	mvns	r3, r3
 8005ba8:	69ba      	ldr	r2, [r7, #24]
 8005baa:	4013      	ands	r3, r2
 8005bac:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	685b      	ldr	r3, [r3, #4]
 8005bb2:	f003 0203 	and.w	r2, r3, #3
 8005bb6:	69fb      	ldr	r3, [r7, #28]
 8005bb8:	005b      	lsls	r3, r3, #1
 8005bba:	fa02 f303 	lsl.w	r3, r2, r3
 8005bbe:	69ba      	ldr	r2, [r7, #24]
 8005bc0:	4313      	orrs	r3, r2
 8005bc2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	69ba      	ldr	r2, [r7, #24]
 8005bc8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	685b      	ldr	r3, [r3, #4]
 8005bce:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	f000 80e0 	beq.w	8005d98 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005bd8:	4b2f      	ldr	r3, [pc, #188]	@ (8005c98 <HAL_GPIO_Init+0x238>)
 8005bda:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005bde:	4a2e      	ldr	r2, [pc, #184]	@ (8005c98 <HAL_GPIO_Init+0x238>)
 8005be0:	f043 0302 	orr.w	r3, r3, #2
 8005be4:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8005be8:	4b2b      	ldr	r3, [pc, #172]	@ (8005c98 <HAL_GPIO_Init+0x238>)
 8005bea:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005bee:	f003 0302 	and.w	r3, r3, #2
 8005bf2:	60fb      	str	r3, [r7, #12]
 8005bf4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005bf6:	4a29      	ldr	r2, [pc, #164]	@ (8005c9c <HAL_GPIO_Init+0x23c>)
 8005bf8:	69fb      	ldr	r3, [r7, #28]
 8005bfa:	089b      	lsrs	r3, r3, #2
 8005bfc:	3302      	adds	r3, #2
 8005bfe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c02:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005c04:	69fb      	ldr	r3, [r7, #28]
 8005c06:	f003 0303 	and.w	r3, r3, #3
 8005c0a:	009b      	lsls	r3, r3, #2
 8005c0c:	220f      	movs	r2, #15
 8005c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8005c12:	43db      	mvns	r3, r3
 8005c14:	69ba      	ldr	r2, [r7, #24]
 8005c16:	4013      	ands	r3, r2
 8005c18:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	4a20      	ldr	r2, [pc, #128]	@ (8005ca0 <HAL_GPIO_Init+0x240>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d052      	beq.n	8005cc8 <HAL_GPIO_Init+0x268>
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	4a1f      	ldr	r2, [pc, #124]	@ (8005ca4 <HAL_GPIO_Init+0x244>)
 8005c26:	4293      	cmp	r3, r2
 8005c28:	d031      	beq.n	8005c8e <HAL_GPIO_Init+0x22e>
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	4a1e      	ldr	r2, [pc, #120]	@ (8005ca8 <HAL_GPIO_Init+0x248>)
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d02b      	beq.n	8005c8a <HAL_GPIO_Init+0x22a>
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	4a1d      	ldr	r2, [pc, #116]	@ (8005cac <HAL_GPIO_Init+0x24c>)
 8005c36:	4293      	cmp	r3, r2
 8005c38:	d025      	beq.n	8005c86 <HAL_GPIO_Init+0x226>
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	4a1c      	ldr	r2, [pc, #112]	@ (8005cb0 <HAL_GPIO_Init+0x250>)
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	d01f      	beq.n	8005c82 <HAL_GPIO_Init+0x222>
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	4a1b      	ldr	r2, [pc, #108]	@ (8005cb4 <HAL_GPIO_Init+0x254>)
 8005c46:	4293      	cmp	r3, r2
 8005c48:	d019      	beq.n	8005c7e <HAL_GPIO_Init+0x21e>
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	4a1a      	ldr	r2, [pc, #104]	@ (8005cb8 <HAL_GPIO_Init+0x258>)
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d013      	beq.n	8005c7a <HAL_GPIO_Init+0x21a>
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	4a19      	ldr	r2, [pc, #100]	@ (8005cbc <HAL_GPIO_Init+0x25c>)
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d00d      	beq.n	8005c76 <HAL_GPIO_Init+0x216>
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	4a18      	ldr	r2, [pc, #96]	@ (8005cc0 <HAL_GPIO_Init+0x260>)
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	d007      	beq.n	8005c72 <HAL_GPIO_Init+0x212>
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	4a17      	ldr	r2, [pc, #92]	@ (8005cc4 <HAL_GPIO_Init+0x264>)
 8005c66:	4293      	cmp	r3, r2
 8005c68:	d101      	bne.n	8005c6e <HAL_GPIO_Init+0x20e>
 8005c6a:	2309      	movs	r3, #9
 8005c6c:	e02d      	b.n	8005cca <HAL_GPIO_Init+0x26a>
 8005c6e:	230a      	movs	r3, #10
 8005c70:	e02b      	b.n	8005cca <HAL_GPIO_Init+0x26a>
 8005c72:	2308      	movs	r3, #8
 8005c74:	e029      	b.n	8005cca <HAL_GPIO_Init+0x26a>
 8005c76:	2307      	movs	r3, #7
 8005c78:	e027      	b.n	8005cca <HAL_GPIO_Init+0x26a>
 8005c7a:	2306      	movs	r3, #6
 8005c7c:	e025      	b.n	8005cca <HAL_GPIO_Init+0x26a>
 8005c7e:	2305      	movs	r3, #5
 8005c80:	e023      	b.n	8005cca <HAL_GPIO_Init+0x26a>
 8005c82:	2304      	movs	r3, #4
 8005c84:	e021      	b.n	8005cca <HAL_GPIO_Init+0x26a>
 8005c86:	2303      	movs	r3, #3
 8005c88:	e01f      	b.n	8005cca <HAL_GPIO_Init+0x26a>
 8005c8a:	2302      	movs	r3, #2
 8005c8c:	e01d      	b.n	8005cca <HAL_GPIO_Init+0x26a>
 8005c8e:	2301      	movs	r3, #1
 8005c90:	e01b      	b.n	8005cca <HAL_GPIO_Init+0x26a>
 8005c92:	bf00      	nop
 8005c94:	58000080 	.word	0x58000080
 8005c98:	58024400 	.word	0x58024400
 8005c9c:	58000400 	.word	0x58000400
 8005ca0:	58020000 	.word	0x58020000
 8005ca4:	58020400 	.word	0x58020400
 8005ca8:	58020800 	.word	0x58020800
 8005cac:	58020c00 	.word	0x58020c00
 8005cb0:	58021000 	.word	0x58021000
 8005cb4:	58021400 	.word	0x58021400
 8005cb8:	58021800 	.word	0x58021800
 8005cbc:	58021c00 	.word	0x58021c00
 8005cc0:	58022000 	.word	0x58022000
 8005cc4:	58022400 	.word	0x58022400
 8005cc8:	2300      	movs	r3, #0
 8005cca:	69fa      	ldr	r2, [r7, #28]
 8005ccc:	f002 0203 	and.w	r2, r2, #3
 8005cd0:	0092      	lsls	r2, r2, #2
 8005cd2:	4093      	lsls	r3, r2
 8005cd4:	69ba      	ldr	r2, [r7, #24]
 8005cd6:	4313      	orrs	r3, r2
 8005cd8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005cda:	4938      	ldr	r1, [pc, #224]	@ (8005dbc <HAL_GPIO_Init+0x35c>)
 8005cdc:	69fb      	ldr	r3, [r7, #28]
 8005cde:	089b      	lsrs	r3, r3, #2
 8005ce0:	3302      	adds	r3, #2
 8005ce2:	69ba      	ldr	r2, [r7, #24]
 8005ce4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005ce8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005cf0:	693b      	ldr	r3, [r7, #16]
 8005cf2:	43db      	mvns	r3, r3
 8005cf4:	69ba      	ldr	r2, [r7, #24]
 8005cf6:	4013      	ands	r3, r2
 8005cf8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	685b      	ldr	r3, [r3, #4]
 8005cfe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d003      	beq.n	8005d0e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8005d06:	69ba      	ldr	r2, [r7, #24]
 8005d08:	693b      	ldr	r3, [r7, #16]
 8005d0a:	4313      	orrs	r3, r2
 8005d0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005d0e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005d12:	69bb      	ldr	r3, [r7, #24]
 8005d14:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005d16:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005d1a:	685b      	ldr	r3, [r3, #4]
 8005d1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005d1e:	693b      	ldr	r3, [r7, #16]
 8005d20:	43db      	mvns	r3, r3
 8005d22:	69ba      	ldr	r2, [r7, #24]
 8005d24:	4013      	ands	r3, r2
 8005d26:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	685b      	ldr	r3, [r3, #4]
 8005d2c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d003      	beq.n	8005d3c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005d34:	69ba      	ldr	r2, [r7, #24]
 8005d36:	693b      	ldr	r3, [r7, #16]
 8005d38:	4313      	orrs	r3, r2
 8005d3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005d3c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005d40:	69bb      	ldr	r3, [r7, #24]
 8005d42:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005d44:	697b      	ldr	r3, [r7, #20]
 8005d46:	685b      	ldr	r3, [r3, #4]
 8005d48:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005d4a:	693b      	ldr	r3, [r7, #16]
 8005d4c:	43db      	mvns	r3, r3
 8005d4e:	69ba      	ldr	r2, [r7, #24]
 8005d50:	4013      	ands	r3, r2
 8005d52:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	685b      	ldr	r3, [r3, #4]
 8005d58:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d003      	beq.n	8005d68 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8005d60:	69ba      	ldr	r2, [r7, #24]
 8005d62:	693b      	ldr	r3, [r7, #16]
 8005d64:	4313      	orrs	r3, r2
 8005d66:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005d68:	697b      	ldr	r3, [r7, #20]
 8005d6a:	69ba      	ldr	r2, [r7, #24]
 8005d6c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005d6e:	697b      	ldr	r3, [r7, #20]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005d74:	693b      	ldr	r3, [r7, #16]
 8005d76:	43db      	mvns	r3, r3
 8005d78:	69ba      	ldr	r2, [r7, #24]
 8005d7a:	4013      	ands	r3, r2
 8005d7c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	685b      	ldr	r3, [r3, #4]
 8005d82:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d003      	beq.n	8005d92 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8005d8a:	69ba      	ldr	r2, [r7, #24]
 8005d8c:	693b      	ldr	r3, [r7, #16]
 8005d8e:	4313      	orrs	r3, r2
 8005d90:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005d92:	697b      	ldr	r3, [r7, #20]
 8005d94:	69ba      	ldr	r2, [r7, #24]
 8005d96:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8005d98:	69fb      	ldr	r3, [r7, #28]
 8005d9a:	3301      	adds	r3, #1
 8005d9c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005d9e:	683b      	ldr	r3, [r7, #0]
 8005da0:	681a      	ldr	r2, [r3, #0]
 8005da2:	69fb      	ldr	r3, [r7, #28]
 8005da4:	fa22 f303 	lsr.w	r3, r2, r3
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	f47f ae63 	bne.w	8005a74 <HAL_GPIO_Init+0x14>
  }
}
 8005dae:	bf00      	nop
 8005db0:	bf00      	nop
 8005db2:	3724      	adds	r7, #36	@ 0x24
 8005db4:	46bd      	mov	sp, r7
 8005db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dba:	4770      	bx	lr
 8005dbc:	58000400 	.word	0x58000400

08005dc0 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8005dc0:	b480      	push	{r7}
 8005dc2:	b083      	sub	sp, #12
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8005dc8:	4a08      	ldr	r2, [pc, #32]	@ (8005dec <HAL_HSEM_FastTake+0x2c>)
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	3320      	adds	r3, #32
 8005dce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005dd2:	4a07      	ldr	r2, [pc, #28]	@ (8005df0 <HAL_HSEM_FastTake+0x30>)
 8005dd4:	4293      	cmp	r3, r2
 8005dd6:	d101      	bne.n	8005ddc <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8005dd8:	2300      	movs	r3, #0
 8005dda:	e000      	b.n	8005dde <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8005ddc:	2301      	movs	r3, #1
}
 8005dde:	4618      	mov	r0, r3
 8005de0:	370c      	adds	r7, #12
 8005de2:	46bd      	mov	sp, r7
 8005de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de8:	4770      	bx	lr
 8005dea:	bf00      	nop
 8005dec:	58026400 	.word	0x58026400
 8005df0:	80000300 	.word	0x80000300

08005df4 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8005df4:	b480      	push	{r7}
 8005df6:	b083      	sub	sp, #12
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
 8005dfc:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8005dfe:	4906      	ldr	r1, [pc, #24]	@ (8005e18 <HAL_HSEM_Release+0x24>)
 8005e00:	683b      	ldr	r3, [r7, #0]
 8005e02:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8005e0c:	bf00      	nop
 8005e0e:	370c      	adds	r7, #12
 8005e10:	46bd      	mov	sp, r7
 8005e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e16:	4770      	bx	lr
 8005e18:	58026400 	.word	0x58026400

08005e1c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	b082      	sub	sp, #8
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d101      	bne.n	8005e2e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005e2a:	2301      	movs	r3, #1
 8005e2c:	e08b      	b.n	8005f46 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005e34:	b2db      	uxtb	r3, r3
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d106      	bne.n	8005e48 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005e42:	6878      	ldr	r0, [r7, #4]
 8005e44:	f7fb f8e8 	bl	8001018 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2224      	movs	r2, #36	@ 0x24
 8005e4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	681a      	ldr	r2, [r3, #0]
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f022 0201 	bic.w	r2, r2, #1
 8005e5e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	685a      	ldr	r2, [r3, #4]
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005e6c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	689a      	ldr	r2, [r3, #8]
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005e7c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	68db      	ldr	r3, [r3, #12]
 8005e82:	2b01      	cmp	r3, #1
 8005e84:	d107      	bne.n	8005e96 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	689a      	ldr	r2, [r3, #8]
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005e92:	609a      	str	r2, [r3, #8]
 8005e94:	e006      	b.n	8005ea4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	689a      	ldr	r2, [r3, #8]
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8005ea2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	68db      	ldr	r3, [r3, #12]
 8005ea8:	2b02      	cmp	r3, #2
 8005eaa:	d108      	bne.n	8005ebe <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	685a      	ldr	r2, [r3, #4]
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005eba:	605a      	str	r2, [r3, #4]
 8005ebc:	e007      	b.n	8005ece <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	685a      	ldr	r2, [r3, #4]
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005ecc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	6859      	ldr	r1, [r3, #4]
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681a      	ldr	r2, [r3, #0]
 8005ed8:	4b1d      	ldr	r3, [pc, #116]	@ (8005f50 <HAL_I2C_Init+0x134>)
 8005eda:	430b      	orrs	r3, r1
 8005edc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	68da      	ldr	r2, [r3, #12]
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005eec:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	691a      	ldr	r2, [r3, #16]
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	695b      	ldr	r3, [r3, #20]
 8005ef6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	699b      	ldr	r3, [r3, #24]
 8005efe:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	430a      	orrs	r2, r1
 8005f06:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	69d9      	ldr	r1, [r3, #28]
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	6a1a      	ldr	r2, [r3, #32]
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	430a      	orrs	r2, r1
 8005f16:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	681a      	ldr	r2, [r3, #0]
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f042 0201 	orr.w	r2, r2, #1
 8005f26:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	2220      	movs	r2, #32
 8005f32:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	2200      	movs	r2, #0
 8005f3a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2200      	movs	r2, #0
 8005f40:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8005f44:	2300      	movs	r3, #0
}
 8005f46:	4618      	mov	r0, r3
 8005f48:	3708      	adds	r7, #8
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	bd80      	pop	{r7, pc}
 8005f4e:	bf00      	nop
 8005f50:	02008000 	.word	0x02008000

08005f54 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b088      	sub	sp, #32
 8005f58:	af02      	add	r7, sp, #8
 8005f5a:	60f8      	str	r0, [r7, #12]
 8005f5c:	607a      	str	r2, [r7, #4]
 8005f5e:	461a      	mov	r2, r3
 8005f60:	460b      	mov	r3, r1
 8005f62:	817b      	strh	r3, [r7, #10]
 8005f64:	4613      	mov	r3, r2
 8005f66:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005f6e:	b2db      	uxtb	r3, r3
 8005f70:	2b20      	cmp	r3, #32
 8005f72:	f040 80fd 	bne.w	8006170 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005f7c:	2b01      	cmp	r3, #1
 8005f7e:	d101      	bne.n	8005f84 <HAL_I2C_Master_Transmit+0x30>
 8005f80:	2302      	movs	r3, #2
 8005f82:	e0f6      	b.n	8006172 <HAL_I2C_Master_Transmit+0x21e>
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	2201      	movs	r2, #1
 8005f88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005f8c:	f7fb feb0 	bl	8001cf0 <HAL_GetTick>
 8005f90:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005f92:	693b      	ldr	r3, [r7, #16]
 8005f94:	9300      	str	r3, [sp, #0]
 8005f96:	2319      	movs	r3, #25
 8005f98:	2201      	movs	r2, #1
 8005f9a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005f9e:	68f8      	ldr	r0, [r7, #12]
 8005fa0:	f000 f914 	bl	80061cc <I2C_WaitOnFlagUntilTimeout>
 8005fa4:	4603      	mov	r3, r0
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d001      	beq.n	8005fae <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8005faa:	2301      	movs	r3, #1
 8005fac:	e0e1      	b.n	8006172 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	2221      	movs	r2, #33	@ 0x21
 8005fb2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	2210      	movs	r2, #16
 8005fba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	687a      	ldr	r2, [r7, #4]
 8005fc8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	893a      	ldrh	r2, [r7, #8]
 8005fce:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005fda:	b29b      	uxth	r3, r3
 8005fdc:	2bff      	cmp	r3, #255	@ 0xff
 8005fde:	d906      	bls.n	8005fee <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	22ff      	movs	r2, #255	@ 0xff
 8005fe4:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8005fe6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005fea:	617b      	str	r3, [r7, #20]
 8005fec:	e007      	b.n	8005ffe <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ff2:	b29a      	uxth	r2, r3
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8005ff8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005ffc:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006002:	2b00      	cmp	r3, #0
 8006004:	d024      	beq.n	8006050 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800600a:	781a      	ldrb	r2, [r3, #0]
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006016:	1c5a      	adds	r2, r3, #1
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006020:	b29b      	uxth	r3, r3
 8006022:	3b01      	subs	r3, #1
 8006024:	b29a      	uxth	r2, r3
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800602e:	3b01      	subs	r3, #1
 8006030:	b29a      	uxth	r2, r3
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800603a:	b2db      	uxtb	r3, r3
 800603c:	3301      	adds	r3, #1
 800603e:	b2da      	uxtb	r2, r3
 8006040:	8979      	ldrh	r1, [r7, #10]
 8006042:	4b4e      	ldr	r3, [pc, #312]	@ (800617c <HAL_I2C_Master_Transmit+0x228>)
 8006044:	9300      	str	r3, [sp, #0]
 8006046:	697b      	ldr	r3, [r7, #20]
 8006048:	68f8      	ldr	r0, [r7, #12]
 800604a:	f000 fa83 	bl	8006554 <I2C_TransferConfig>
 800604e:	e066      	b.n	800611e <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006054:	b2da      	uxtb	r2, r3
 8006056:	8979      	ldrh	r1, [r7, #10]
 8006058:	4b48      	ldr	r3, [pc, #288]	@ (800617c <HAL_I2C_Master_Transmit+0x228>)
 800605a:	9300      	str	r3, [sp, #0]
 800605c:	697b      	ldr	r3, [r7, #20]
 800605e:	68f8      	ldr	r0, [r7, #12]
 8006060:	f000 fa78 	bl	8006554 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8006064:	e05b      	b.n	800611e <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006066:	693a      	ldr	r2, [r7, #16]
 8006068:	6a39      	ldr	r1, [r7, #32]
 800606a:	68f8      	ldr	r0, [r7, #12]
 800606c:	f000 f907 	bl	800627e <I2C_WaitOnTXISFlagUntilTimeout>
 8006070:	4603      	mov	r3, r0
 8006072:	2b00      	cmp	r3, #0
 8006074:	d001      	beq.n	800607a <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8006076:	2301      	movs	r3, #1
 8006078:	e07b      	b.n	8006172 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800607e:	781a      	ldrb	r2, [r3, #0]
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800608a:	1c5a      	adds	r2, r3, #1
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006094:	b29b      	uxth	r3, r3
 8006096:	3b01      	subs	r3, #1
 8006098:	b29a      	uxth	r2, r3
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80060a2:	3b01      	subs	r3, #1
 80060a4:	b29a      	uxth	r2, r3
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80060ae:	b29b      	uxth	r3, r3
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d034      	beq.n	800611e <HAL_I2C_Master_Transmit+0x1ca>
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d130      	bne.n	800611e <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80060bc:	693b      	ldr	r3, [r7, #16]
 80060be:	9300      	str	r3, [sp, #0]
 80060c0:	6a3b      	ldr	r3, [r7, #32]
 80060c2:	2200      	movs	r2, #0
 80060c4:	2180      	movs	r1, #128	@ 0x80
 80060c6:	68f8      	ldr	r0, [r7, #12]
 80060c8:	f000 f880 	bl	80061cc <I2C_WaitOnFlagUntilTimeout>
 80060cc:	4603      	mov	r3, r0
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d001      	beq.n	80060d6 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 80060d2:	2301      	movs	r3, #1
 80060d4:	e04d      	b.n	8006172 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80060da:	b29b      	uxth	r3, r3
 80060dc:	2bff      	cmp	r3, #255	@ 0xff
 80060de:	d90e      	bls.n	80060fe <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	22ff      	movs	r2, #255	@ 0xff
 80060e4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80060ea:	b2da      	uxtb	r2, r3
 80060ec:	8979      	ldrh	r1, [r7, #10]
 80060ee:	2300      	movs	r3, #0
 80060f0:	9300      	str	r3, [sp, #0]
 80060f2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80060f6:	68f8      	ldr	r0, [r7, #12]
 80060f8:	f000 fa2c 	bl	8006554 <I2C_TransferConfig>
 80060fc:	e00f      	b.n	800611e <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006102:	b29a      	uxth	r2, r3
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800610c:	b2da      	uxtb	r2, r3
 800610e:	8979      	ldrh	r1, [r7, #10]
 8006110:	2300      	movs	r3, #0
 8006112:	9300      	str	r3, [sp, #0]
 8006114:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006118:	68f8      	ldr	r0, [r7, #12]
 800611a:	f000 fa1b 	bl	8006554 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006122:	b29b      	uxth	r3, r3
 8006124:	2b00      	cmp	r3, #0
 8006126:	d19e      	bne.n	8006066 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006128:	693a      	ldr	r2, [r7, #16]
 800612a:	6a39      	ldr	r1, [r7, #32]
 800612c:	68f8      	ldr	r0, [r7, #12]
 800612e:	f000 f8ed 	bl	800630c <I2C_WaitOnSTOPFlagUntilTimeout>
 8006132:	4603      	mov	r3, r0
 8006134:	2b00      	cmp	r3, #0
 8006136:	d001      	beq.n	800613c <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8006138:	2301      	movs	r3, #1
 800613a:	e01a      	b.n	8006172 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	2220      	movs	r2, #32
 8006142:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	6859      	ldr	r1, [r3, #4]
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	681a      	ldr	r2, [r3, #0]
 800614e:	4b0c      	ldr	r3, [pc, #48]	@ (8006180 <HAL_I2C_Master_Transmit+0x22c>)
 8006150:	400b      	ands	r3, r1
 8006152:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	2220      	movs	r2, #32
 8006158:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	2200      	movs	r2, #0
 8006160:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	2200      	movs	r2, #0
 8006168:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800616c:	2300      	movs	r3, #0
 800616e:	e000      	b.n	8006172 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8006170:	2302      	movs	r3, #2
  }
}
 8006172:	4618      	mov	r0, r3
 8006174:	3718      	adds	r7, #24
 8006176:	46bd      	mov	sp, r7
 8006178:	bd80      	pop	{r7, pc}
 800617a:	bf00      	nop
 800617c:	80002000 	.word	0x80002000
 8006180:	fe00e800 	.word	0xfe00e800

08006184 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006184:	b480      	push	{r7}
 8006186:	b083      	sub	sp, #12
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	699b      	ldr	r3, [r3, #24]
 8006192:	f003 0302 	and.w	r3, r3, #2
 8006196:	2b02      	cmp	r3, #2
 8006198:	d103      	bne.n	80061a2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	2200      	movs	r2, #0
 80061a0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	699b      	ldr	r3, [r3, #24]
 80061a8:	f003 0301 	and.w	r3, r3, #1
 80061ac:	2b01      	cmp	r3, #1
 80061ae:	d007      	beq.n	80061c0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	699a      	ldr	r2, [r3, #24]
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f042 0201 	orr.w	r2, r2, #1
 80061be:	619a      	str	r2, [r3, #24]
  }
}
 80061c0:	bf00      	nop
 80061c2:	370c      	adds	r7, #12
 80061c4:	46bd      	mov	sp, r7
 80061c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ca:	4770      	bx	lr

080061cc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80061cc:	b580      	push	{r7, lr}
 80061ce:	b084      	sub	sp, #16
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	60f8      	str	r0, [r7, #12]
 80061d4:	60b9      	str	r1, [r7, #8]
 80061d6:	603b      	str	r3, [r7, #0]
 80061d8:	4613      	mov	r3, r2
 80061da:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80061dc:	e03b      	b.n	8006256 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80061de:	69ba      	ldr	r2, [r7, #24]
 80061e0:	6839      	ldr	r1, [r7, #0]
 80061e2:	68f8      	ldr	r0, [r7, #12]
 80061e4:	f000 f8d6 	bl	8006394 <I2C_IsErrorOccurred>
 80061e8:	4603      	mov	r3, r0
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d001      	beq.n	80061f2 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80061ee:	2301      	movs	r3, #1
 80061f0:	e041      	b.n	8006276 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061f8:	d02d      	beq.n	8006256 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80061fa:	f7fb fd79 	bl	8001cf0 <HAL_GetTick>
 80061fe:	4602      	mov	r2, r0
 8006200:	69bb      	ldr	r3, [r7, #24]
 8006202:	1ad3      	subs	r3, r2, r3
 8006204:	683a      	ldr	r2, [r7, #0]
 8006206:	429a      	cmp	r2, r3
 8006208:	d302      	bcc.n	8006210 <I2C_WaitOnFlagUntilTimeout+0x44>
 800620a:	683b      	ldr	r3, [r7, #0]
 800620c:	2b00      	cmp	r3, #0
 800620e:	d122      	bne.n	8006256 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	699a      	ldr	r2, [r3, #24]
 8006216:	68bb      	ldr	r3, [r7, #8]
 8006218:	4013      	ands	r3, r2
 800621a:	68ba      	ldr	r2, [r7, #8]
 800621c:	429a      	cmp	r2, r3
 800621e:	bf0c      	ite	eq
 8006220:	2301      	moveq	r3, #1
 8006222:	2300      	movne	r3, #0
 8006224:	b2db      	uxtb	r3, r3
 8006226:	461a      	mov	r2, r3
 8006228:	79fb      	ldrb	r3, [r7, #7]
 800622a:	429a      	cmp	r2, r3
 800622c:	d113      	bne.n	8006256 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006232:	f043 0220 	orr.w	r2, r3, #32
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	2220      	movs	r2, #32
 800623e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	2200      	movs	r2, #0
 8006246:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	2200      	movs	r2, #0
 800624e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8006252:	2301      	movs	r3, #1
 8006254:	e00f      	b.n	8006276 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	699a      	ldr	r2, [r3, #24]
 800625c:	68bb      	ldr	r3, [r7, #8]
 800625e:	4013      	ands	r3, r2
 8006260:	68ba      	ldr	r2, [r7, #8]
 8006262:	429a      	cmp	r2, r3
 8006264:	bf0c      	ite	eq
 8006266:	2301      	moveq	r3, #1
 8006268:	2300      	movne	r3, #0
 800626a:	b2db      	uxtb	r3, r3
 800626c:	461a      	mov	r2, r3
 800626e:	79fb      	ldrb	r3, [r7, #7]
 8006270:	429a      	cmp	r2, r3
 8006272:	d0b4      	beq.n	80061de <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006274:	2300      	movs	r3, #0
}
 8006276:	4618      	mov	r0, r3
 8006278:	3710      	adds	r7, #16
 800627a:	46bd      	mov	sp, r7
 800627c:	bd80      	pop	{r7, pc}

0800627e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800627e:	b580      	push	{r7, lr}
 8006280:	b084      	sub	sp, #16
 8006282:	af00      	add	r7, sp, #0
 8006284:	60f8      	str	r0, [r7, #12]
 8006286:	60b9      	str	r1, [r7, #8]
 8006288:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800628a:	e033      	b.n	80062f4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800628c:	687a      	ldr	r2, [r7, #4]
 800628e:	68b9      	ldr	r1, [r7, #8]
 8006290:	68f8      	ldr	r0, [r7, #12]
 8006292:	f000 f87f 	bl	8006394 <I2C_IsErrorOccurred>
 8006296:	4603      	mov	r3, r0
 8006298:	2b00      	cmp	r3, #0
 800629a:	d001      	beq.n	80062a0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800629c:	2301      	movs	r3, #1
 800629e:	e031      	b.n	8006304 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80062a0:	68bb      	ldr	r3, [r7, #8]
 80062a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062a6:	d025      	beq.n	80062f4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80062a8:	f7fb fd22 	bl	8001cf0 <HAL_GetTick>
 80062ac:	4602      	mov	r2, r0
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	1ad3      	subs	r3, r2, r3
 80062b2:	68ba      	ldr	r2, [r7, #8]
 80062b4:	429a      	cmp	r2, r3
 80062b6:	d302      	bcc.n	80062be <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80062b8:	68bb      	ldr	r3, [r7, #8]
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d11a      	bne.n	80062f4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	699b      	ldr	r3, [r3, #24]
 80062c4:	f003 0302 	and.w	r3, r3, #2
 80062c8:	2b02      	cmp	r3, #2
 80062ca:	d013      	beq.n	80062f4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80062d0:	f043 0220 	orr.w	r2, r3, #32
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	2220      	movs	r2, #32
 80062dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	2200      	movs	r2, #0
 80062e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	2200      	movs	r2, #0
 80062ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80062f0:	2301      	movs	r3, #1
 80062f2:	e007      	b.n	8006304 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	699b      	ldr	r3, [r3, #24]
 80062fa:	f003 0302 	and.w	r3, r3, #2
 80062fe:	2b02      	cmp	r3, #2
 8006300:	d1c4      	bne.n	800628c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006302:	2300      	movs	r3, #0
}
 8006304:	4618      	mov	r0, r3
 8006306:	3710      	adds	r7, #16
 8006308:	46bd      	mov	sp, r7
 800630a:	bd80      	pop	{r7, pc}

0800630c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800630c:	b580      	push	{r7, lr}
 800630e:	b084      	sub	sp, #16
 8006310:	af00      	add	r7, sp, #0
 8006312:	60f8      	str	r0, [r7, #12]
 8006314:	60b9      	str	r1, [r7, #8]
 8006316:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006318:	e02f      	b.n	800637a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800631a:	687a      	ldr	r2, [r7, #4]
 800631c:	68b9      	ldr	r1, [r7, #8]
 800631e:	68f8      	ldr	r0, [r7, #12]
 8006320:	f000 f838 	bl	8006394 <I2C_IsErrorOccurred>
 8006324:	4603      	mov	r3, r0
 8006326:	2b00      	cmp	r3, #0
 8006328:	d001      	beq.n	800632e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800632a:	2301      	movs	r3, #1
 800632c:	e02d      	b.n	800638a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800632e:	f7fb fcdf 	bl	8001cf0 <HAL_GetTick>
 8006332:	4602      	mov	r2, r0
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	1ad3      	subs	r3, r2, r3
 8006338:	68ba      	ldr	r2, [r7, #8]
 800633a:	429a      	cmp	r2, r3
 800633c:	d302      	bcc.n	8006344 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800633e:	68bb      	ldr	r3, [r7, #8]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d11a      	bne.n	800637a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	699b      	ldr	r3, [r3, #24]
 800634a:	f003 0320 	and.w	r3, r3, #32
 800634e:	2b20      	cmp	r3, #32
 8006350:	d013      	beq.n	800637a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006356:	f043 0220 	orr.w	r2, r3, #32
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	2220      	movs	r2, #32
 8006362:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	2200      	movs	r2, #0
 800636a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	2200      	movs	r2, #0
 8006372:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8006376:	2301      	movs	r3, #1
 8006378:	e007      	b.n	800638a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	699b      	ldr	r3, [r3, #24]
 8006380:	f003 0320 	and.w	r3, r3, #32
 8006384:	2b20      	cmp	r3, #32
 8006386:	d1c8      	bne.n	800631a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006388:	2300      	movs	r3, #0
}
 800638a:	4618      	mov	r0, r3
 800638c:	3710      	adds	r7, #16
 800638e:	46bd      	mov	sp, r7
 8006390:	bd80      	pop	{r7, pc}
	...

08006394 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006394:	b580      	push	{r7, lr}
 8006396:	b08a      	sub	sp, #40	@ 0x28
 8006398:	af00      	add	r7, sp, #0
 800639a:	60f8      	str	r0, [r7, #12]
 800639c:	60b9      	str	r1, [r7, #8]
 800639e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80063a0:	2300      	movs	r3, #0
 80063a2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	699b      	ldr	r3, [r3, #24]
 80063ac:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80063ae:	2300      	movs	r3, #0
 80063b0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80063b6:	69bb      	ldr	r3, [r7, #24]
 80063b8:	f003 0310 	and.w	r3, r3, #16
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d068      	beq.n	8006492 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	2210      	movs	r2, #16
 80063c6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80063c8:	e049      	b.n	800645e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80063ca:	68bb      	ldr	r3, [r7, #8]
 80063cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063d0:	d045      	beq.n	800645e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80063d2:	f7fb fc8d 	bl	8001cf0 <HAL_GetTick>
 80063d6:	4602      	mov	r2, r0
 80063d8:	69fb      	ldr	r3, [r7, #28]
 80063da:	1ad3      	subs	r3, r2, r3
 80063dc:	68ba      	ldr	r2, [r7, #8]
 80063de:	429a      	cmp	r2, r3
 80063e0:	d302      	bcc.n	80063e8 <I2C_IsErrorOccurred+0x54>
 80063e2:	68bb      	ldr	r3, [r7, #8]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d13a      	bne.n	800645e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	685b      	ldr	r3, [r3, #4]
 80063ee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80063f2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80063fa:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	699b      	ldr	r3, [r3, #24]
 8006402:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006406:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800640a:	d121      	bne.n	8006450 <I2C_IsErrorOccurred+0xbc>
 800640c:	697b      	ldr	r3, [r7, #20]
 800640e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006412:	d01d      	beq.n	8006450 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8006414:	7cfb      	ldrb	r3, [r7, #19]
 8006416:	2b20      	cmp	r3, #32
 8006418:	d01a      	beq.n	8006450 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	685a      	ldr	r2, [r3, #4]
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006428:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800642a:	f7fb fc61 	bl	8001cf0 <HAL_GetTick>
 800642e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006430:	e00e      	b.n	8006450 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8006432:	f7fb fc5d 	bl	8001cf0 <HAL_GetTick>
 8006436:	4602      	mov	r2, r0
 8006438:	69fb      	ldr	r3, [r7, #28]
 800643a:	1ad3      	subs	r3, r2, r3
 800643c:	2b19      	cmp	r3, #25
 800643e:	d907      	bls.n	8006450 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8006440:	6a3b      	ldr	r3, [r7, #32]
 8006442:	f043 0320 	orr.w	r3, r3, #32
 8006446:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8006448:	2301      	movs	r3, #1
 800644a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800644e:	e006      	b.n	800645e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	699b      	ldr	r3, [r3, #24]
 8006456:	f003 0320 	and.w	r3, r3, #32
 800645a:	2b20      	cmp	r3, #32
 800645c:	d1e9      	bne.n	8006432 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	699b      	ldr	r3, [r3, #24]
 8006464:	f003 0320 	and.w	r3, r3, #32
 8006468:	2b20      	cmp	r3, #32
 800646a:	d003      	beq.n	8006474 <I2C_IsErrorOccurred+0xe0>
 800646c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006470:	2b00      	cmp	r3, #0
 8006472:	d0aa      	beq.n	80063ca <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8006474:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006478:	2b00      	cmp	r3, #0
 800647a:	d103      	bne.n	8006484 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	2220      	movs	r2, #32
 8006482:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006484:	6a3b      	ldr	r3, [r7, #32]
 8006486:	f043 0304 	orr.w	r3, r3, #4
 800648a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800648c:	2301      	movs	r3, #1
 800648e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	699b      	ldr	r3, [r3, #24]
 8006498:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800649a:	69bb      	ldr	r3, [r7, #24]
 800649c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d00b      	beq.n	80064bc <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80064a4:	6a3b      	ldr	r3, [r7, #32]
 80064a6:	f043 0301 	orr.w	r3, r3, #1
 80064aa:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80064b4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80064b6:	2301      	movs	r3, #1
 80064b8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80064bc:	69bb      	ldr	r3, [r7, #24]
 80064be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d00b      	beq.n	80064de <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80064c6:	6a3b      	ldr	r3, [r7, #32]
 80064c8:	f043 0308 	orr.w	r3, r3, #8
 80064cc:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80064d6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80064d8:	2301      	movs	r3, #1
 80064da:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80064de:	69bb      	ldr	r3, [r7, #24]
 80064e0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d00b      	beq.n	8006500 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80064e8:	6a3b      	ldr	r3, [r7, #32]
 80064ea:	f043 0302 	orr.w	r3, r3, #2
 80064ee:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80064f8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80064fa:	2301      	movs	r3, #1
 80064fc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8006500:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006504:	2b00      	cmp	r3, #0
 8006506:	d01c      	beq.n	8006542 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006508:	68f8      	ldr	r0, [r7, #12]
 800650a:	f7ff fe3b 	bl	8006184 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	6859      	ldr	r1, [r3, #4]
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	681a      	ldr	r2, [r3, #0]
 8006518:	4b0d      	ldr	r3, [pc, #52]	@ (8006550 <I2C_IsErrorOccurred+0x1bc>)
 800651a:	400b      	ands	r3, r1
 800651c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006522:	6a3b      	ldr	r3, [r7, #32]
 8006524:	431a      	orrs	r2, r3
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	2220      	movs	r2, #32
 800652e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	2200      	movs	r2, #0
 8006536:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	2200      	movs	r2, #0
 800653e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8006542:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8006546:	4618      	mov	r0, r3
 8006548:	3728      	adds	r7, #40	@ 0x28
 800654a:	46bd      	mov	sp, r7
 800654c:	bd80      	pop	{r7, pc}
 800654e:	bf00      	nop
 8006550:	fe00e800 	.word	0xfe00e800

08006554 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006554:	b480      	push	{r7}
 8006556:	b087      	sub	sp, #28
 8006558:	af00      	add	r7, sp, #0
 800655a:	60f8      	str	r0, [r7, #12]
 800655c:	607b      	str	r3, [r7, #4]
 800655e:	460b      	mov	r3, r1
 8006560:	817b      	strh	r3, [r7, #10]
 8006562:	4613      	mov	r3, r2
 8006564:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006566:	897b      	ldrh	r3, [r7, #10]
 8006568:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800656c:	7a7b      	ldrb	r3, [r7, #9]
 800656e:	041b      	lsls	r3, r3, #16
 8006570:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006574:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800657a:	6a3b      	ldr	r3, [r7, #32]
 800657c:	4313      	orrs	r3, r2
 800657e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006582:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	685a      	ldr	r2, [r3, #4]
 800658a:	6a3b      	ldr	r3, [r7, #32]
 800658c:	0d5b      	lsrs	r3, r3, #21
 800658e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8006592:	4b08      	ldr	r3, [pc, #32]	@ (80065b4 <I2C_TransferConfig+0x60>)
 8006594:	430b      	orrs	r3, r1
 8006596:	43db      	mvns	r3, r3
 8006598:	ea02 0103 	and.w	r1, r2, r3
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	697a      	ldr	r2, [r7, #20]
 80065a2:	430a      	orrs	r2, r1
 80065a4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80065a6:	bf00      	nop
 80065a8:	371c      	adds	r7, #28
 80065aa:	46bd      	mov	sp, r7
 80065ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b0:	4770      	bx	lr
 80065b2:	bf00      	nop
 80065b4:	03ff63ff 	.word	0x03ff63ff

080065b8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80065b8:	b480      	push	{r7}
 80065ba:	b083      	sub	sp, #12
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
 80065c0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80065c8:	b2db      	uxtb	r3, r3
 80065ca:	2b20      	cmp	r3, #32
 80065cc:	d138      	bne.n	8006640 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80065d4:	2b01      	cmp	r3, #1
 80065d6:	d101      	bne.n	80065dc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80065d8:	2302      	movs	r3, #2
 80065da:	e032      	b.n	8006642 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2201      	movs	r2, #1
 80065e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2224      	movs	r2, #36	@ 0x24
 80065e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	681a      	ldr	r2, [r3, #0]
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	f022 0201 	bic.w	r2, r2, #1
 80065fa:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	681a      	ldr	r2, [r3, #0]
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800660a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	6819      	ldr	r1, [r3, #0]
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	683a      	ldr	r2, [r7, #0]
 8006618:	430a      	orrs	r2, r1
 800661a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	681a      	ldr	r2, [r3, #0]
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	f042 0201 	orr.w	r2, r2, #1
 800662a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	2220      	movs	r2, #32
 8006630:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2200      	movs	r2, #0
 8006638:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800663c:	2300      	movs	r3, #0
 800663e:	e000      	b.n	8006642 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006640:	2302      	movs	r3, #2
  }
}
 8006642:	4618      	mov	r0, r3
 8006644:	370c      	adds	r7, #12
 8006646:	46bd      	mov	sp, r7
 8006648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664c:	4770      	bx	lr

0800664e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800664e:	b480      	push	{r7}
 8006650:	b085      	sub	sp, #20
 8006652:	af00      	add	r7, sp, #0
 8006654:	6078      	str	r0, [r7, #4]
 8006656:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800665e:	b2db      	uxtb	r3, r3
 8006660:	2b20      	cmp	r3, #32
 8006662:	d139      	bne.n	80066d8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800666a:	2b01      	cmp	r3, #1
 800666c:	d101      	bne.n	8006672 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800666e:	2302      	movs	r3, #2
 8006670:	e033      	b.n	80066da <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	2201      	movs	r2, #1
 8006676:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	2224      	movs	r2, #36	@ 0x24
 800667e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	681a      	ldr	r2, [r3, #0]
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	f022 0201 	bic.w	r2, r2, #1
 8006690:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80066a0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80066a2:	683b      	ldr	r3, [r7, #0]
 80066a4:	021b      	lsls	r3, r3, #8
 80066a6:	68fa      	ldr	r2, [r7, #12]
 80066a8:	4313      	orrs	r3, r2
 80066aa:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	68fa      	ldr	r2, [r7, #12]
 80066b2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	681a      	ldr	r2, [r3, #0]
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f042 0201 	orr.w	r2, r2, #1
 80066c2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	2220      	movs	r2, #32
 80066c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2200      	movs	r2, #0
 80066d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80066d4:	2300      	movs	r3, #0
 80066d6:	e000      	b.n	80066da <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80066d8:	2302      	movs	r3, #2
  }
}
 80066da:	4618      	mov	r0, r3
 80066dc:	3714      	adds	r7, #20
 80066de:	46bd      	mov	sp, r7
 80066e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e4:	4770      	bx	lr
	...

080066e8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80066e8:	b580      	push	{r7, lr}
 80066ea:	b084      	sub	sp, #16
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80066f0:	4b29      	ldr	r3, [pc, #164]	@ (8006798 <HAL_PWREx_ConfigSupply+0xb0>)
 80066f2:	68db      	ldr	r3, [r3, #12]
 80066f4:	f003 0307 	and.w	r3, r3, #7
 80066f8:	2b06      	cmp	r3, #6
 80066fa:	d00a      	beq.n	8006712 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80066fc:	4b26      	ldr	r3, [pc, #152]	@ (8006798 <HAL_PWREx_ConfigSupply+0xb0>)
 80066fe:	68db      	ldr	r3, [r3, #12]
 8006700:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006704:	687a      	ldr	r2, [r7, #4]
 8006706:	429a      	cmp	r2, r3
 8006708:	d001      	beq.n	800670e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800670a:	2301      	movs	r3, #1
 800670c:	e040      	b.n	8006790 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800670e:	2300      	movs	r3, #0
 8006710:	e03e      	b.n	8006790 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8006712:	4b21      	ldr	r3, [pc, #132]	@ (8006798 <HAL_PWREx_ConfigSupply+0xb0>)
 8006714:	68db      	ldr	r3, [r3, #12]
 8006716:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 800671a:	491f      	ldr	r1, [pc, #124]	@ (8006798 <HAL_PWREx_ConfigSupply+0xb0>)
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	4313      	orrs	r3, r2
 8006720:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8006722:	f7fb fae5 	bl	8001cf0 <HAL_GetTick>
 8006726:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006728:	e009      	b.n	800673e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800672a:	f7fb fae1 	bl	8001cf0 <HAL_GetTick>
 800672e:	4602      	mov	r2, r0
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	1ad3      	subs	r3, r2, r3
 8006734:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006738:	d901      	bls.n	800673e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800673a:	2301      	movs	r3, #1
 800673c:	e028      	b.n	8006790 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800673e:	4b16      	ldr	r3, [pc, #88]	@ (8006798 <HAL_PWREx_ConfigSupply+0xb0>)
 8006740:	685b      	ldr	r3, [r3, #4]
 8006742:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006746:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800674a:	d1ee      	bne.n	800672a <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2b1e      	cmp	r3, #30
 8006750:	d008      	beq.n	8006764 <HAL_PWREx_ConfigSupply+0x7c>
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	2b2e      	cmp	r3, #46	@ 0x2e
 8006756:	d005      	beq.n	8006764 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2b1d      	cmp	r3, #29
 800675c:	d002      	beq.n	8006764 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	2b2d      	cmp	r3, #45	@ 0x2d
 8006762:	d114      	bne.n	800678e <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8006764:	f7fb fac4 	bl	8001cf0 <HAL_GetTick>
 8006768:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800676a:	e009      	b.n	8006780 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800676c:	f7fb fac0 	bl	8001cf0 <HAL_GetTick>
 8006770:	4602      	mov	r2, r0
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	1ad3      	subs	r3, r2, r3
 8006776:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800677a:	d901      	bls.n	8006780 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 800677c:	2301      	movs	r3, #1
 800677e:	e007      	b.n	8006790 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8006780:	4b05      	ldr	r3, [pc, #20]	@ (8006798 <HAL_PWREx_ConfigSupply+0xb0>)
 8006782:	68db      	ldr	r3, [r3, #12]
 8006784:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006788:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800678c:	d1ee      	bne.n	800676c <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800678e:	2300      	movs	r3, #0
}
 8006790:	4618      	mov	r0, r3
 8006792:	3710      	adds	r7, #16
 8006794:	46bd      	mov	sp, r7
 8006796:	bd80      	pop	{r7, pc}
 8006798:	58024800 	.word	0x58024800

0800679c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800679c:	b580      	push	{r7, lr}
 800679e:	b08c      	sub	sp, #48	@ 0x30
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d102      	bne.n	80067b0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80067aa:	2301      	movs	r3, #1
 80067ac:	f000 bc48 	b.w	8007040 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	f003 0301 	and.w	r3, r3, #1
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	f000 8088 	beq.w	80068ce <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80067be:	4b99      	ldr	r3, [pc, #612]	@ (8006a24 <HAL_RCC_OscConfig+0x288>)
 80067c0:	691b      	ldr	r3, [r3, #16]
 80067c2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80067c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80067c8:	4b96      	ldr	r3, [pc, #600]	@ (8006a24 <HAL_RCC_OscConfig+0x288>)
 80067ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067cc:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80067ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067d0:	2b10      	cmp	r3, #16
 80067d2:	d007      	beq.n	80067e4 <HAL_RCC_OscConfig+0x48>
 80067d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067d6:	2b18      	cmp	r3, #24
 80067d8:	d111      	bne.n	80067fe <HAL_RCC_OscConfig+0x62>
 80067da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067dc:	f003 0303 	and.w	r3, r3, #3
 80067e0:	2b02      	cmp	r3, #2
 80067e2:	d10c      	bne.n	80067fe <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80067e4:	4b8f      	ldr	r3, [pc, #572]	@ (8006a24 <HAL_RCC_OscConfig+0x288>)
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d06d      	beq.n	80068cc <HAL_RCC_OscConfig+0x130>
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	685b      	ldr	r3, [r3, #4]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d169      	bne.n	80068cc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80067f8:	2301      	movs	r3, #1
 80067fa:	f000 bc21 	b.w	8007040 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	685b      	ldr	r3, [r3, #4]
 8006802:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006806:	d106      	bne.n	8006816 <HAL_RCC_OscConfig+0x7a>
 8006808:	4b86      	ldr	r3, [pc, #536]	@ (8006a24 <HAL_RCC_OscConfig+0x288>)
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	4a85      	ldr	r2, [pc, #532]	@ (8006a24 <HAL_RCC_OscConfig+0x288>)
 800680e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006812:	6013      	str	r3, [r2, #0]
 8006814:	e02e      	b.n	8006874 <HAL_RCC_OscConfig+0xd8>
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	685b      	ldr	r3, [r3, #4]
 800681a:	2b00      	cmp	r3, #0
 800681c:	d10c      	bne.n	8006838 <HAL_RCC_OscConfig+0x9c>
 800681e:	4b81      	ldr	r3, [pc, #516]	@ (8006a24 <HAL_RCC_OscConfig+0x288>)
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	4a80      	ldr	r2, [pc, #512]	@ (8006a24 <HAL_RCC_OscConfig+0x288>)
 8006824:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006828:	6013      	str	r3, [r2, #0]
 800682a:	4b7e      	ldr	r3, [pc, #504]	@ (8006a24 <HAL_RCC_OscConfig+0x288>)
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	4a7d      	ldr	r2, [pc, #500]	@ (8006a24 <HAL_RCC_OscConfig+0x288>)
 8006830:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006834:	6013      	str	r3, [r2, #0]
 8006836:	e01d      	b.n	8006874 <HAL_RCC_OscConfig+0xd8>
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	685b      	ldr	r3, [r3, #4]
 800683c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006840:	d10c      	bne.n	800685c <HAL_RCC_OscConfig+0xc0>
 8006842:	4b78      	ldr	r3, [pc, #480]	@ (8006a24 <HAL_RCC_OscConfig+0x288>)
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	4a77      	ldr	r2, [pc, #476]	@ (8006a24 <HAL_RCC_OscConfig+0x288>)
 8006848:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800684c:	6013      	str	r3, [r2, #0]
 800684e:	4b75      	ldr	r3, [pc, #468]	@ (8006a24 <HAL_RCC_OscConfig+0x288>)
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	4a74      	ldr	r2, [pc, #464]	@ (8006a24 <HAL_RCC_OscConfig+0x288>)
 8006854:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006858:	6013      	str	r3, [r2, #0]
 800685a:	e00b      	b.n	8006874 <HAL_RCC_OscConfig+0xd8>
 800685c:	4b71      	ldr	r3, [pc, #452]	@ (8006a24 <HAL_RCC_OscConfig+0x288>)
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	4a70      	ldr	r2, [pc, #448]	@ (8006a24 <HAL_RCC_OscConfig+0x288>)
 8006862:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006866:	6013      	str	r3, [r2, #0]
 8006868:	4b6e      	ldr	r3, [pc, #440]	@ (8006a24 <HAL_RCC_OscConfig+0x288>)
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	4a6d      	ldr	r2, [pc, #436]	@ (8006a24 <HAL_RCC_OscConfig+0x288>)
 800686e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006872:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	685b      	ldr	r3, [r3, #4]
 8006878:	2b00      	cmp	r3, #0
 800687a:	d013      	beq.n	80068a4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800687c:	f7fb fa38 	bl	8001cf0 <HAL_GetTick>
 8006880:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006882:	e008      	b.n	8006896 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006884:	f7fb fa34 	bl	8001cf0 <HAL_GetTick>
 8006888:	4602      	mov	r2, r0
 800688a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800688c:	1ad3      	subs	r3, r2, r3
 800688e:	2b64      	cmp	r3, #100	@ 0x64
 8006890:	d901      	bls.n	8006896 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006892:	2303      	movs	r3, #3
 8006894:	e3d4      	b.n	8007040 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006896:	4b63      	ldr	r3, [pc, #396]	@ (8006a24 <HAL_RCC_OscConfig+0x288>)
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d0f0      	beq.n	8006884 <HAL_RCC_OscConfig+0xe8>
 80068a2:	e014      	b.n	80068ce <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068a4:	f7fb fa24 	bl	8001cf0 <HAL_GetTick>
 80068a8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80068aa:	e008      	b.n	80068be <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80068ac:	f7fb fa20 	bl	8001cf0 <HAL_GetTick>
 80068b0:	4602      	mov	r2, r0
 80068b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068b4:	1ad3      	subs	r3, r2, r3
 80068b6:	2b64      	cmp	r3, #100	@ 0x64
 80068b8:	d901      	bls.n	80068be <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80068ba:	2303      	movs	r3, #3
 80068bc:	e3c0      	b.n	8007040 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80068be:	4b59      	ldr	r3, [pc, #356]	@ (8006a24 <HAL_RCC_OscConfig+0x288>)
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d1f0      	bne.n	80068ac <HAL_RCC_OscConfig+0x110>
 80068ca:	e000      	b.n	80068ce <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80068cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	f003 0302 	and.w	r3, r3, #2
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	f000 80ca 	beq.w	8006a70 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80068dc:	4b51      	ldr	r3, [pc, #324]	@ (8006a24 <HAL_RCC_OscConfig+0x288>)
 80068de:	691b      	ldr	r3, [r3, #16]
 80068e0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80068e4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80068e6:	4b4f      	ldr	r3, [pc, #316]	@ (8006a24 <HAL_RCC_OscConfig+0x288>)
 80068e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068ea:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80068ec:	6a3b      	ldr	r3, [r7, #32]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d007      	beq.n	8006902 <HAL_RCC_OscConfig+0x166>
 80068f2:	6a3b      	ldr	r3, [r7, #32]
 80068f4:	2b18      	cmp	r3, #24
 80068f6:	d156      	bne.n	80069a6 <HAL_RCC_OscConfig+0x20a>
 80068f8:	69fb      	ldr	r3, [r7, #28]
 80068fa:	f003 0303 	and.w	r3, r3, #3
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d151      	bne.n	80069a6 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006902:	4b48      	ldr	r3, [pc, #288]	@ (8006a24 <HAL_RCC_OscConfig+0x288>)
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	f003 0304 	and.w	r3, r3, #4
 800690a:	2b00      	cmp	r3, #0
 800690c:	d005      	beq.n	800691a <HAL_RCC_OscConfig+0x17e>
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	68db      	ldr	r3, [r3, #12]
 8006912:	2b00      	cmp	r3, #0
 8006914:	d101      	bne.n	800691a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8006916:	2301      	movs	r3, #1
 8006918:	e392      	b.n	8007040 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800691a:	4b42      	ldr	r3, [pc, #264]	@ (8006a24 <HAL_RCC_OscConfig+0x288>)
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	f023 0219 	bic.w	r2, r3, #25
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	68db      	ldr	r3, [r3, #12]
 8006926:	493f      	ldr	r1, [pc, #252]	@ (8006a24 <HAL_RCC_OscConfig+0x288>)
 8006928:	4313      	orrs	r3, r2
 800692a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800692c:	f7fb f9e0 	bl	8001cf0 <HAL_GetTick>
 8006930:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006932:	e008      	b.n	8006946 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006934:	f7fb f9dc 	bl	8001cf0 <HAL_GetTick>
 8006938:	4602      	mov	r2, r0
 800693a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800693c:	1ad3      	subs	r3, r2, r3
 800693e:	2b02      	cmp	r3, #2
 8006940:	d901      	bls.n	8006946 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8006942:	2303      	movs	r3, #3
 8006944:	e37c      	b.n	8007040 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006946:	4b37      	ldr	r3, [pc, #220]	@ (8006a24 <HAL_RCC_OscConfig+0x288>)
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	f003 0304 	and.w	r3, r3, #4
 800694e:	2b00      	cmp	r3, #0
 8006950:	d0f0      	beq.n	8006934 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006952:	f7fb f9fd 	bl	8001d50 <HAL_GetREVID>
 8006956:	4603      	mov	r3, r0
 8006958:	f241 0203 	movw	r2, #4099	@ 0x1003
 800695c:	4293      	cmp	r3, r2
 800695e:	d817      	bhi.n	8006990 <HAL_RCC_OscConfig+0x1f4>
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	691b      	ldr	r3, [r3, #16]
 8006964:	2b40      	cmp	r3, #64	@ 0x40
 8006966:	d108      	bne.n	800697a <HAL_RCC_OscConfig+0x1de>
 8006968:	4b2e      	ldr	r3, [pc, #184]	@ (8006a24 <HAL_RCC_OscConfig+0x288>)
 800696a:	685b      	ldr	r3, [r3, #4]
 800696c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8006970:	4a2c      	ldr	r2, [pc, #176]	@ (8006a24 <HAL_RCC_OscConfig+0x288>)
 8006972:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006976:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006978:	e07a      	b.n	8006a70 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800697a:	4b2a      	ldr	r3, [pc, #168]	@ (8006a24 <HAL_RCC_OscConfig+0x288>)
 800697c:	685b      	ldr	r3, [r3, #4]
 800697e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	691b      	ldr	r3, [r3, #16]
 8006986:	031b      	lsls	r3, r3, #12
 8006988:	4926      	ldr	r1, [pc, #152]	@ (8006a24 <HAL_RCC_OscConfig+0x288>)
 800698a:	4313      	orrs	r3, r2
 800698c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800698e:	e06f      	b.n	8006a70 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006990:	4b24      	ldr	r3, [pc, #144]	@ (8006a24 <HAL_RCC_OscConfig+0x288>)
 8006992:	685b      	ldr	r3, [r3, #4]
 8006994:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	691b      	ldr	r3, [r3, #16]
 800699c:	061b      	lsls	r3, r3, #24
 800699e:	4921      	ldr	r1, [pc, #132]	@ (8006a24 <HAL_RCC_OscConfig+0x288>)
 80069a0:	4313      	orrs	r3, r2
 80069a2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80069a4:	e064      	b.n	8006a70 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	68db      	ldr	r3, [r3, #12]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d047      	beq.n	8006a3e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80069ae:	4b1d      	ldr	r3, [pc, #116]	@ (8006a24 <HAL_RCC_OscConfig+0x288>)
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	f023 0219 	bic.w	r2, r3, #25
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	68db      	ldr	r3, [r3, #12]
 80069ba:	491a      	ldr	r1, [pc, #104]	@ (8006a24 <HAL_RCC_OscConfig+0x288>)
 80069bc:	4313      	orrs	r3, r2
 80069be:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069c0:	f7fb f996 	bl	8001cf0 <HAL_GetTick>
 80069c4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80069c6:	e008      	b.n	80069da <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80069c8:	f7fb f992 	bl	8001cf0 <HAL_GetTick>
 80069cc:	4602      	mov	r2, r0
 80069ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069d0:	1ad3      	subs	r3, r2, r3
 80069d2:	2b02      	cmp	r3, #2
 80069d4:	d901      	bls.n	80069da <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80069d6:	2303      	movs	r3, #3
 80069d8:	e332      	b.n	8007040 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80069da:	4b12      	ldr	r3, [pc, #72]	@ (8006a24 <HAL_RCC_OscConfig+0x288>)
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	f003 0304 	and.w	r3, r3, #4
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d0f0      	beq.n	80069c8 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80069e6:	f7fb f9b3 	bl	8001d50 <HAL_GetREVID>
 80069ea:	4603      	mov	r3, r0
 80069ec:	f241 0203 	movw	r2, #4099	@ 0x1003
 80069f0:	4293      	cmp	r3, r2
 80069f2:	d819      	bhi.n	8006a28 <HAL_RCC_OscConfig+0x28c>
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	691b      	ldr	r3, [r3, #16]
 80069f8:	2b40      	cmp	r3, #64	@ 0x40
 80069fa:	d108      	bne.n	8006a0e <HAL_RCC_OscConfig+0x272>
 80069fc:	4b09      	ldr	r3, [pc, #36]	@ (8006a24 <HAL_RCC_OscConfig+0x288>)
 80069fe:	685b      	ldr	r3, [r3, #4]
 8006a00:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8006a04:	4a07      	ldr	r2, [pc, #28]	@ (8006a24 <HAL_RCC_OscConfig+0x288>)
 8006a06:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006a0a:	6053      	str	r3, [r2, #4]
 8006a0c:	e030      	b.n	8006a70 <HAL_RCC_OscConfig+0x2d4>
 8006a0e:	4b05      	ldr	r3, [pc, #20]	@ (8006a24 <HAL_RCC_OscConfig+0x288>)
 8006a10:	685b      	ldr	r3, [r3, #4]
 8006a12:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	691b      	ldr	r3, [r3, #16]
 8006a1a:	031b      	lsls	r3, r3, #12
 8006a1c:	4901      	ldr	r1, [pc, #4]	@ (8006a24 <HAL_RCC_OscConfig+0x288>)
 8006a1e:	4313      	orrs	r3, r2
 8006a20:	604b      	str	r3, [r1, #4]
 8006a22:	e025      	b.n	8006a70 <HAL_RCC_OscConfig+0x2d4>
 8006a24:	58024400 	.word	0x58024400
 8006a28:	4b9a      	ldr	r3, [pc, #616]	@ (8006c94 <HAL_RCC_OscConfig+0x4f8>)
 8006a2a:	685b      	ldr	r3, [r3, #4]
 8006a2c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	691b      	ldr	r3, [r3, #16]
 8006a34:	061b      	lsls	r3, r3, #24
 8006a36:	4997      	ldr	r1, [pc, #604]	@ (8006c94 <HAL_RCC_OscConfig+0x4f8>)
 8006a38:	4313      	orrs	r3, r2
 8006a3a:	604b      	str	r3, [r1, #4]
 8006a3c:	e018      	b.n	8006a70 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006a3e:	4b95      	ldr	r3, [pc, #596]	@ (8006c94 <HAL_RCC_OscConfig+0x4f8>)
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	4a94      	ldr	r2, [pc, #592]	@ (8006c94 <HAL_RCC_OscConfig+0x4f8>)
 8006a44:	f023 0301 	bic.w	r3, r3, #1
 8006a48:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a4a:	f7fb f951 	bl	8001cf0 <HAL_GetTick>
 8006a4e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006a50:	e008      	b.n	8006a64 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006a52:	f7fb f94d 	bl	8001cf0 <HAL_GetTick>
 8006a56:	4602      	mov	r2, r0
 8006a58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a5a:	1ad3      	subs	r3, r2, r3
 8006a5c:	2b02      	cmp	r3, #2
 8006a5e:	d901      	bls.n	8006a64 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8006a60:	2303      	movs	r3, #3
 8006a62:	e2ed      	b.n	8007040 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006a64:	4b8b      	ldr	r3, [pc, #556]	@ (8006c94 <HAL_RCC_OscConfig+0x4f8>)
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	f003 0304 	and.w	r3, r3, #4
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d1f0      	bne.n	8006a52 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f003 0310 	and.w	r3, r3, #16
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	f000 80a9 	beq.w	8006bd0 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006a7e:	4b85      	ldr	r3, [pc, #532]	@ (8006c94 <HAL_RCC_OscConfig+0x4f8>)
 8006a80:	691b      	ldr	r3, [r3, #16]
 8006a82:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006a86:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006a88:	4b82      	ldr	r3, [pc, #520]	@ (8006c94 <HAL_RCC_OscConfig+0x4f8>)
 8006a8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a8c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006a8e:	69bb      	ldr	r3, [r7, #24]
 8006a90:	2b08      	cmp	r3, #8
 8006a92:	d007      	beq.n	8006aa4 <HAL_RCC_OscConfig+0x308>
 8006a94:	69bb      	ldr	r3, [r7, #24]
 8006a96:	2b18      	cmp	r3, #24
 8006a98:	d13a      	bne.n	8006b10 <HAL_RCC_OscConfig+0x374>
 8006a9a:	697b      	ldr	r3, [r7, #20]
 8006a9c:	f003 0303 	and.w	r3, r3, #3
 8006aa0:	2b01      	cmp	r3, #1
 8006aa2:	d135      	bne.n	8006b10 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006aa4:	4b7b      	ldr	r3, [pc, #492]	@ (8006c94 <HAL_RCC_OscConfig+0x4f8>)
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d005      	beq.n	8006abc <HAL_RCC_OscConfig+0x320>
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	69db      	ldr	r3, [r3, #28]
 8006ab4:	2b80      	cmp	r3, #128	@ 0x80
 8006ab6:	d001      	beq.n	8006abc <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8006ab8:	2301      	movs	r3, #1
 8006aba:	e2c1      	b.n	8007040 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006abc:	f7fb f948 	bl	8001d50 <HAL_GetREVID>
 8006ac0:	4603      	mov	r3, r0
 8006ac2:	f241 0203 	movw	r2, #4099	@ 0x1003
 8006ac6:	4293      	cmp	r3, r2
 8006ac8:	d817      	bhi.n	8006afa <HAL_RCC_OscConfig+0x35e>
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	6a1b      	ldr	r3, [r3, #32]
 8006ace:	2b20      	cmp	r3, #32
 8006ad0:	d108      	bne.n	8006ae4 <HAL_RCC_OscConfig+0x348>
 8006ad2:	4b70      	ldr	r3, [pc, #448]	@ (8006c94 <HAL_RCC_OscConfig+0x4f8>)
 8006ad4:	685b      	ldr	r3, [r3, #4]
 8006ad6:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8006ada:	4a6e      	ldr	r2, [pc, #440]	@ (8006c94 <HAL_RCC_OscConfig+0x4f8>)
 8006adc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006ae0:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006ae2:	e075      	b.n	8006bd0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006ae4:	4b6b      	ldr	r3, [pc, #428]	@ (8006c94 <HAL_RCC_OscConfig+0x4f8>)
 8006ae6:	685b      	ldr	r3, [r3, #4]
 8006ae8:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	6a1b      	ldr	r3, [r3, #32]
 8006af0:	069b      	lsls	r3, r3, #26
 8006af2:	4968      	ldr	r1, [pc, #416]	@ (8006c94 <HAL_RCC_OscConfig+0x4f8>)
 8006af4:	4313      	orrs	r3, r2
 8006af6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006af8:	e06a      	b.n	8006bd0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006afa:	4b66      	ldr	r3, [pc, #408]	@ (8006c94 <HAL_RCC_OscConfig+0x4f8>)
 8006afc:	68db      	ldr	r3, [r3, #12]
 8006afe:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	6a1b      	ldr	r3, [r3, #32]
 8006b06:	061b      	lsls	r3, r3, #24
 8006b08:	4962      	ldr	r1, [pc, #392]	@ (8006c94 <HAL_RCC_OscConfig+0x4f8>)
 8006b0a:	4313      	orrs	r3, r2
 8006b0c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006b0e:	e05f      	b.n	8006bd0 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	69db      	ldr	r3, [r3, #28]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d042      	beq.n	8006b9e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006b18:	4b5e      	ldr	r3, [pc, #376]	@ (8006c94 <HAL_RCC_OscConfig+0x4f8>)
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	4a5d      	ldr	r2, [pc, #372]	@ (8006c94 <HAL_RCC_OscConfig+0x4f8>)
 8006b1e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006b22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b24:	f7fb f8e4 	bl	8001cf0 <HAL_GetTick>
 8006b28:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006b2a:	e008      	b.n	8006b3e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006b2c:	f7fb f8e0 	bl	8001cf0 <HAL_GetTick>
 8006b30:	4602      	mov	r2, r0
 8006b32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b34:	1ad3      	subs	r3, r2, r3
 8006b36:	2b02      	cmp	r3, #2
 8006b38:	d901      	bls.n	8006b3e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8006b3a:	2303      	movs	r3, #3
 8006b3c:	e280      	b.n	8007040 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006b3e:	4b55      	ldr	r3, [pc, #340]	@ (8006c94 <HAL_RCC_OscConfig+0x4f8>)
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d0f0      	beq.n	8006b2c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006b4a:	f7fb f901 	bl	8001d50 <HAL_GetREVID>
 8006b4e:	4603      	mov	r3, r0
 8006b50:	f241 0203 	movw	r2, #4099	@ 0x1003
 8006b54:	4293      	cmp	r3, r2
 8006b56:	d817      	bhi.n	8006b88 <HAL_RCC_OscConfig+0x3ec>
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	6a1b      	ldr	r3, [r3, #32]
 8006b5c:	2b20      	cmp	r3, #32
 8006b5e:	d108      	bne.n	8006b72 <HAL_RCC_OscConfig+0x3d6>
 8006b60:	4b4c      	ldr	r3, [pc, #304]	@ (8006c94 <HAL_RCC_OscConfig+0x4f8>)
 8006b62:	685b      	ldr	r3, [r3, #4]
 8006b64:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8006b68:	4a4a      	ldr	r2, [pc, #296]	@ (8006c94 <HAL_RCC_OscConfig+0x4f8>)
 8006b6a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006b6e:	6053      	str	r3, [r2, #4]
 8006b70:	e02e      	b.n	8006bd0 <HAL_RCC_OscConfig+0x434>
 8006b72:	4b48      	ldr	r3, [pc, #288]	@ (8006c94 <HAL_RCC_OscConfig+0x4f8>)
 8006b74:	685b      	ldr	r3, [r3, #4]
 8006b76:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	6a1b      	ldr	r3, [r3, #32]
 8006b7e:	069b      	lsls	r3, r3, #26
 8006b80:	4944      	ldr	r1, [pc, #272]	@ (8006c94 <HAL_RCC_OscConfig+0x4f8>)
 8006b82:	4313      	orrs	r3, r2
 8006b84:	604b      	str	r3, [r1, #4]
 8006b86:	e023      	b.n	8006bd0 <HAL_RCC_OscConfig+0x434>
 8006b88:	4b42      	ldr	r3, [pc, #264]	@ (8006c94 <HAL_RCC_OscConfig+0x4f8>)
 8006b8a:	68db      	ldr	r3, [r3, #12]
 8006b8c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	6a1b      	ldr	r3, [r3, #32]
 8006b94:	061b      	lsls	r3, r3, #24
 8006b96:	493f      	ldr	r1, [pc, #252]	@ (8006c94 <HAL_RCC_OscConfig+0x4f8>)
 8006b98:	4313      	orrs	r3, r2
 8006b9a:	60cb      	str	r3, [r1, #12]
 8006b9c:	e018      	b.n	8006bd0 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8006b9e:	4b3d      	ldr	r3, [pc, #244]	@ (8006c94 <HAL_RCC_OscConfig+0x4f8>)
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	4a3c      	ldr	r2, [pc, #240]	@ (8006c94 <HAL_RCC_OscConfig+0x4f8>)
 8006ba4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006ba8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006baa:	f7fb f8a1 	bl	8001cf0 <HAL_GetTick>
 8006bae:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006bb0:	e008      	b.n	8006bc4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006bb2:	f7fb f89d 	bl	8001cf0 <HAL_GetTick>
 8006bb6:	4602      	mov	r2, r0
 8006bb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bba:	1ad3      	subs	r3, r2, r3
 8006bbc:	2b02      	cmp	r3, #2
 8006bbe:	d901      	bls.n	8006bc4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006bc0:	2303      	movs	r3, #3
 8006bc2:	e23d      	b.n	8007040 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006bc4:	4b33      	ldr	r3, [pc, #204]	@ (8006c94 <HAL_RCC_OscConfig+0x4f8>)
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d1f0      	bne.n	8006bb2 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	f003 0308 	and.w	r3, r3, #8
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d036      	beq.n	8006c4a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	695b      	ldr	r3, [r3, #20]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d019      	beq.n	8006c18 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006be4:	4b2b      	ldr	r3, [pc, #172]	@ (8006c94 <HAL_RCC_OscConfig+0x4f8>)
 8006be6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006be8:	4a2a      	ldr	r2, [pc, #168]	@ (8006c94 <HAL_RCC_OscConfig+0x4f8>)
 8006bea:	f043 0301 	orr.w	r3, r3, #1
 8006bee:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006bf0:	f7fb f87e 	bl	8001cf0 <HAL_GetTick>
 8006bf4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006bf6:	e008      	b.n	8006c0a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006bf8:	f7fb f87a 	bl	8001cf0 <HAL_GetTick>
 8006bfc:	4602      	mov	r2, r0
 8006bfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c00:	1ad3      	subs	r3, r2, r3
 8006c02:	2b02      	cmp	r3, #2
 8006c04:	d901      	bls.n	8006c0a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8006c06:	2303      	movs	r3, #3
 8006c08:	e21a      	b.n	8007040 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006c0a:	4b22      	ldr	r3, [pc, #136]	@ (8006c94 <HAL_RCC_OscConfig+0x4f8>)
 8006c0c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006c0e:	f003 0302 	and.w	r3, r3, #2
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d0f0      	beq.n	8006bf8 <HAL_RCC_OscConfig+0x45c>
 8006c16:	e018      	b.n	8006c4a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006c18:	4b1e      	ldr	r3, [pc, #120]	@ (8006c94 <HAL_RCC_OscConfig+0x4f8>)
 8006c1a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006c1c:	4a1d      	ldr	r2, [pc, #116]	@ (8006c94 <HAL_RCC_OscConfig+0x4f8>)
 8006c1e:	f023 0301 	bic.w	r3, r3, #1
 8006c22:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c24:	f7fb f864 	bl	8001cf0 <HAL_GetTick>
 8006c28:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006c2a:	e008      	b.n	8006c3e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006c2c:	f7fb f860 	bl	8001cf0 <HAL_GetTick>
 8006c30:	4602      	mov	r2, r0
 8006c32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c34:	1ad3      	subs	r3, r2, r3
 8006c36:	2b02      	cmp	r3, #2
 8006c38:	d901      	bls.n	8006c3e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8006c3a:	2303      	movs	r3, #3
 8006c3c:	e200      	b.n	8007040 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006c3e:	4b15      	ldr	r3, [pc, #84]	@ (8006c94 <HAL_RCC_OscConfig+0x4f8>)
 8006c40:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006c42:	f003 0302 	and.w	r3, r3, #2
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d1f0      	bne.n	8006c2c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	f003 0320 	and.w	r3, r3, #32
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d039      	beq.n	8006cca <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	699b      	ldr	r3, [r3, #24]
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d01c      	beq.n	8006c98 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006c5e:	4b0d      	ldr	r3, [pc, #52]	@ (8006c94 <HAL_RCC_OscConfig+0x4f8>)
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	4a0c      	ldr	r2, [pc, #48]	@ (8006c94 <HAL_RCC_OscConfig+0x4f8>)
 8006c64:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8006c68:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006c6a:	f7fb f841 	bl	8001cf0 <HAL_GetTick>
 8006c6e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006c70:	e008      	b.n	8006c84 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006c72:	f7fb f83d 	bl	8001cf0 <HAL_GetTick>
 8006c76:	4602      	mov	r2, r0
 8006c78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c7a:	1ad3      	subs	r3, r2, r3
 8006c7c:	2b02      	cmp	r3, #2
 8006c7e:	d901      	bls.n	8006c84 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8006c80:	2303      	movs	r3, #3
 8006c82:	e1dd      	b.n	8007040 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006c84:	4b03      	ldr	r3, [pc, #12]	@ (8006c94 <HAL_RCC_OscConfig+0x4f8>)
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d0f0      	beq.n	8006c72 <HAL_RCC_OscConfig+0x4d6>
 8006c90:	e01b      	b.n	8006cca <HAL_RCC_OscConfig+0x52e>
 8006c92:	bf00      	nop
 8006c94:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006c98:	4b9b      	ldr	r3, [pc, #620]	@ (8006f08 <HAL_RCC_OscConfig+0x76c>)
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	4a9a      	ldr	r2, [pc, #616]	@ (8006f08 <HAL_RCC_OscConfig+0x76c>)
 8006c9e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006ca2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006ca4:	f7fb f824 	bl	8001cf0 <HAL_GetTick>
 8006ca8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006caa:	e008      	b.n	8006cbe <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006cac:	f7fb f820 	bl	8001cf0 <HAL_GetTick>
 8006cb0:	4602      	mov	r2, r0
 8006cb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cb4:	1ad3      	subs	r3, r2, r3
 8006cb6:	2b02      	cmp	r3, #2
 8006cb8:	d901      	bls.n	8006cbe <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8006cba:	2303      	movs	r3, #3
 8006cbc:	e1c0      	b.n	8007040 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006cbe:	4b92      	ldr	r3, [pc, #584]	@ (8006f08 <HAL_RCC_OscConfig+0x76c>)
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d1f0      	bne.n	8006cac <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	f003 0304 	and.w	r3, r3, #4
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	f000 8081 	beq.w	8006dda <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006cd8:	4b8c      	ldr	r3, [pc, #560]	@ (8006f0c <HAL_RCC_OscConfig+0x770>)
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	4a8b      	ldr	r2, [pc, #556]	@ (8006f0c <HAL_RCC_OscConfig+0x770>)
 8006cde:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006ce2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006ce4:	f7fb f804 	bl	8001cf0 <HAL_GetTick>
 8006ce8:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006cea:	e008      	b.n	8006cfe <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006cec:	f7fb f800 	bl	8001cf0 <HAL_GetTick>
 8006cf0:	4602      	mov	r2, r0
 8006cf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cf4:	1ad3      	subs	r3, r2, r3
 8006cf6:	2b64      	cmp	r3, #100	@ 0x64
 8006cf8:	d901      	bls.n	8006cfe <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8006cfa:	2303      	movs	r3, #3
 8006cfc:	e1a0      	b.n	8007040 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006cfe:	4b83      	ldr	r3, [pc, #524]	@ (8006f0c <HAL_RCC_OscConfig+0x770>)
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d0f0      	beq.n	8006cec <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	689b      	ldr	r3, [r3, #8]
 8006d0e:	2b01      	cmp	r3, #1
 8006d10:	d106      	bne.n	8006d20 <HAL_RCC_OscConfig+0x584>
 8006d12:	4b7d      	ldr	r3, [pc, #500]	@ (8006f08 <HAL_RCC_OscConfig+0x76c>)
 8006d14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d16:	4a7c      	ldr	r2, [pc, #496]	@ (8006f08 <HAL_RCC_OscConfig+0x76c>)
 8006d18:	f043 0301 	orr.w	r3, r3, #1
 8006d1c:	6713      	str	r3, [r2, #112]	@ 0x70
 8006d1e:	e02d      	b.n	8006d7c <HAL_RCC_OscConfig+0x5e0>
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	689b      	ldr	r3, [r3, #8]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d10c      	bne.n	8006d42 <HAL_RCC_OscConfig+0x5a6>
 8006d28:	4b77      	ldr	r3, [pc, #476]	@ (8006f08 <HAL_RCC_OscConfig+0x76c>)
 8006d2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d2c:	4a76      	ldr	r2, [pc, #472]	@ (8006f08 <HAL_RCC_OscConfig+0x76c>)
 8006d2e:	f023 0301 	bic.w	r3, r3, #1
 8006d32:	6713      	str	r3, [r2, #112]	@ 0x70
 8006d34:	4b74      	ldr	r3, [pc, #464]	@ (8006f08 <HAL_RCC_OscConfig+0x76c>)
 8006d36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d38:	4a73      	ldr	r2, [pc, #460]	@ (8006f08 <HAL_RCC_OscConfig+0x76c>)
 8006d3a:	f023 0304 	bic.w	r3, r3, #4
 8006d3e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006d40:	e01c      	b.n	8006d7c <HAL_RCC_OscConfig+0x5e0>
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	689b      	ldr	r3, [r3, #8]
 8006d46:	2b05      	cmp	r3, #5
 8006d48:	d10c      	bne.n	8006d64 <HAL_RCC_OscConfig+0x5c8>
 8006d4a:	4b6f      	ldr	r3, [pc, #444]	@ (8006f08 <HAL_RCC_OscConfig+0x76c>)
 8006d4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d4e:	4a6e      	ldr	r2, [pc, #440]	@ (8006f08 <HAL_RCC_OscConfig+0x76c>)
 8006d50:	f043 0304 	orr.w	r3, r3, #4
 8006d54:	6713      	str	r3, [r2, #112]	@ 0x70
 8006d56:	4b6c      	ldr	r3, [pc, #432]	@ (8006f08 <HAL_RCC_OscConfig+0x76c>)
 8006d58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d5a:	4a6b      	ldr	r2, [pc, #428]	@ (8006f08 <HAL_RCC_OscConfig+0x76c>)
 8006d5c:	f043 0301 	orr.w	r3, r3, #1
 8006d60:	6713      	str	r3, [r2, #112]	@ 0x70
 8006d62:	e00b      	b.n	8006d7c <HAL_RCC_OscConfig+0x5e0>
 8006d64:	4b68      	ldr	r3, [pc, #416]	@ (8006f08 <HAL_RCC_OscConfig+0x76c>)
 8006d66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d68:	4a67      	ldr	r2, [pc, #412]	@ (8006f08 <HAL_RCC_OscConfig+0x76c>)
 8006d6a:	f023 0301 	bic.w	r3, r3, #1
 8006d6e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006d70:	4b65      	ldr	r3, [pc, #404]	@ (8006f08 <HAL_RCC_OscConfig+0x76c>)
 8006d72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d74:	4a64      	ldr	r2, [pc, #400]	@ (8006f08 <HAL_RCC_OscConfig+0x76c>)
 8006d76:	f023 0304 	bic.w	r3, r3, #4
 8006d7a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	689b      	ldr	r3, [r3, #8]
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d015      	beq.n	8006db0 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d84:	f7fa ffb4 	bl	8001cf0 <HAL_GetTick>
 8006d88:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006d8a:	e00a      	b.n	8006da2 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006d8c:	f7fa ffb0 	bl	8001cf0 <HAL_GetTick>
 8006d90:	4602      	mov	r2, r0
 8006d92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d94:	1ad3      	subs	r3, r2, r3
 8006d96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006d9a:	4293      	cmp	r3, r2
 8006d9c:	d901      	bls.n	8006da2 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8006d9e:	2303      	movs	r3, #3
 8006da0:	e14e      	b.n	8007040 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006da2:	4b59      	ldr	r3, [pc, #356]	@ (8006f08 <HAL_RCC_OscConfig+0x76c>)
 8006da4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006da6:	f003 0302 	and.w	r3, r3, #2
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d0ee      	beq.n	8006d8c <HAL_RCC_OscConfig+0x5f0>
 8006dae:	e014      	b.n	8006dda <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006db0:	f7fa ff9e 	bl	8001cf0 <HAL_GetTick>
 8006db4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006db6:	e00a      	b.n	8006dce <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006db8:	f7fa ff9a 	bl	8001cf0 <HAL_GetTick>
 8006dbc:	4602      	mov	r2, r0
 8006dbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dc0:	1ad3      	subs	r3, r2, r3
 8006dc2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006dc6:	4293      	cmp	r3, r2
 8006dc8:	d901      	bls.n	8006dce <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8006dca:	2303      	movs	r3, #3
 8006dcc:	e138      	b.n	8007040 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006dce:	4b4e      	ldr	r3, [pc, #312]	@ (8006f08 <HAL_RCC_OscConfig+0x76c>)
 8006dd0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006dd2:	f003 0302 	and.w	r3, r3, #2
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d1ee      	bne.n	8006db8 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	f000 812d 	beq.w	800703e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006de4:	4b48      	ldr	r3, [pc, #288]	@ (8006f08 <HAL_RCC_OscConfig+0x76c>)
 8006de6:	691b      	ldr	r3, [r3, #16]
 8006de8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006dec:	2b18      	cmp	r3, #24
 8006dee:	f000 80bd 	beq.w	8006f6c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006df6:	2b02      	cmp	r3, #2
 8006df8:	f040 809e 	bne.w	8006f38 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006dfc:	4b42      	ldr	r3, [pc, #264]	@ (8006f08 <HAL_RCC_OscConfig+0x76c>)
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	4a41      	ldr	r2, [pc, #260]	@ (8006f08 <HAL_RCC_OscConfig+0x76c>)
 8006e02:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006e06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e08:	f7fa ff72 	bl	8001cf0 <HAL_GetTick>
 8006e0c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006e0e:	e008      	b.n	8006e22 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006e10:	f7fa ff6e 	bl	8001cf0 <HAL_GetTick>
 8006e14:	4602      	mov	r2, r0
 8006e16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e18:	1ad3      	subs	r3, r2, r3
 8006e1a:	2b02      	cmp	r3, #2
 8006e1c:	d901      	bls.n	8006e22 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8006e1e:	2303      	movs	r3, #3
 8006e20:	e10e      	b.n	8007040 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006e22:	4b39      	ldr	r3, [pc, #228]	@ (8006f08 <HAL_RCC_OscConfig+0x76c>)
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d1f0      	bne.n	8006e10 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006e2e:	4b36      	ldr	r3, [pc, #216]	@ (8006f08 <HAL_RCC_OscConfig+0x76c>)
 8006e30:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006e32:	4b37      	ldr	r3, [pc, #220]	@ (8006f10 <HAL_RCC_OscConfig+0x774>)
 8006e34:	4013      	ands	r3, r2
 8006e36:	687a      	ldr	r2, [r7, #4]
 8006e38:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8006e3a:	687a      	ldr	r2, [r7, #4]
 8006e3c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8006e3e:	0112      	lsls	r2, r2, #4
 8006e40:	430a      	orrs	r2, r1
 8006e42:	4931      	ldr	r1, [pc, #196]	@ (8006f08 <HAL_RCC_OscConfig+0x76c>)
 8006e44:	4313      	orrs	r3, r2
 8006e46:	628b      	str	r3, [r1, #40]	@ 0x28
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e4c:	3b01      	subs	r3, #1
 8006e4e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e56:	3b01      	subs	r3, #1
 8006e58:	025b      	lsls	r3, r3, #9
 8006e5a:	b29b      	uxth	r3, r3
 8006e5c:	431a      	orrs	r2, r3
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e62:	3b01      	subs	r3, #1
 8006e64:	041b      	lsls	r3, r3, #16
 8006e66:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006e6a:	431a      	orrs	r2, r3
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e70:	3b01      	subs	r3, #1
 8006e72:	061b      	lsls	r3, r3, #24
 8006e74:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006e78:	4923      	ldr	r1, [pc, #140]	@ (8006f08 <HAL_RCC_OscConfig+0x76c>)
 8006e7a:	4313      	orrs	r3, r2
 8006e7c:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8006e7e:	4b22      	ldr	r3, [pc, #136]	@ (8006f08 <HAL_RCC_OscConfig+0x76c>)
 8006e80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e82:	4a21      	ldr	r2, [pc, #132]	@ (8006f08 <HAL_RCC_OscConfig+0x76c>)
 8006e84:	f023 0301 	bic.w	r3, r3, #1
 8006e88:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006e8a:	4b1f      	ldr	r3, [pc, #124]	@ (8006f08 <HAL_RCC_OscConfig+0x76c>)
 8006e8c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006e8e:	4b21      	ldr	r3, [pc, #132]	@ (8006f14 <HAL_RCC_OscConfig+0x778>)
 8006e90:	4013      	ands	r3, r2
 8006e92:	687a      	ldr	r2, [r7, #4]
 8006e94:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006e96:	00d2      	lsls	r2, r2, #3
 8006e98:	491b      	ldr	r1, [pc, #108]	@ (8006f08 <HAL_RCC_OscConfig+0x76c>)
 8006e9a:	4313      	orrs	r3, r2
 8006e9c:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006e9e:	4b1a      	ldr	r3, [pc, #104]	@ (8006f08 <HAL_RCC_OscConfig+0x76c>)
 8006ea0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ea2:	f023 020c 	bic.w	r2, r3, #12
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006eaa:	4917      	ldr	r1, [pc, #92]	@ (8006f08 <HAL_RCC_OscConfig+0x76c>)
 8006eac:	4313      	orrs	r3, r2
 8006eae:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006eb0:	4b15      	ldr	r3, [pc, #84]	@ (8006f08 <HAL_RCC_OscConfig+0x76c>)
 8006eb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006eb4:	f023 0202 	bic.w	r2, r3, #2
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ebc:	4912      	ldr	r1, [pc, #72]	@ (8006f08 <HAL_RCC_OscConfig+0x76c>)
 8006ebe:	4313      	orrs	r3, r2
 8006ec0:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006ec2:	4b11      	ldr	r3, [pc, #68]	@ (8006f08 <HAL_RCC_OscConfig+0x76c>)
 8006ec4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ec6:	4a10      	ldr	r2, [pc, #64]	@ (8006f08 <HAL_RCC_OscConfig+0x76c>)
 8006ec8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006ecc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ece:	4b0e      	ldr	r3, [pc, #56]	@ (8006f08 <HAL_RCC_OscConfig+0x76c>)
 8006ed0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ed2:	4a0d      	ldr	r2, [pc, #52]	@ (8006f08 <HAL_RCC_OscConfig+0x76c>)
 8006ed4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006ed8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006eda:	4b0b      	ldr	r3, [pc, #44]	@ (8006f08 <HAL_RCC_OscConfig+0x76c>)
 8006edc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ede:	4a0a      	ldr	r2, [pc, #40]	@ (8006f08 <HAL_RCC_OscConfig+0x76c>)
 8006ee0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006ee4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8006ee6:	4b08      	ldr	r3, [pc, #32]	@ (8006f08 <HAL_RCC_OscConfig+0x76c>)
 8006ee8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006eea:	4a07      	ldr	r2, [pc, #28]	@ (8006f08 <HAL_RCC_OscConfig+0x76c>)
 8006eec:	f043 0301 	orr.w	r3, r3, #1
 8006ef0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006ef2:	4b05      	ldr	r3, [pc, #20]	@ (8006f08 <HAL_RCC_OscConfig+0x76c>)
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	4a04      	ldr	r2, [pc, #16]	@ (8006f08 <HAL_RCC_OscConfig+0x76c>)
 8006ef8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006efc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006efe:	f7fa fef7 	bl	8001cf0 <HAL_GetTick>
 8006f02:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006f04:	e011      	b.n	8006f2a <HAL_RCC_OscConfig+0x78e>
 8006f06:	bf00      	nop
 8006f08:	58024400 	.word	0x58024400
 8006f0c:	58024800 	.word	0x58024800
 8006f10:	fffffc0c 	.word	0xfffffc0c
 8006f14:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006f18:	f7fa feea 	bl	8001cf0 <HAL_GetTick>
 8006f1c:	4602      	mov	r2, r0
 8006f1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f20:	1ad3      	subs	r3, r2, r3
 8006f22:	2b02      	cmp	r3, #2
 8006f24:	d901      	bls.n	8006f2a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8006f26:	2303      	movs	r3, #3
 8006f28:	e08a      	b.n	8007040 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006f2a:	4b47      	ldr	r3, [pc, #284]	@ (8007048 <HAL_RCC_OscConfig+0x8ac>)
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d0f0      	beq.n	8006f18 <HAL_RCC_OscConfig+0x77c>
 8006f36:	e082      	b.n	800703e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006f38:	4b43      	ldr	r3, [pc, #268]	@ (8007048 <HAL_RCC_OscConfig+0x8ac>)
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	4a42      	ldr	r2, [pc, #264]	@ (8007048 <HAL_RCC_OscConfig+0x8ac>)
 8006f3e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006f42:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f44:	f7fa fed4 	bl	8001cf0 <HAL_GetTick>
 8006f48:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006f4a:	e008      	b.n	8006f5e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006f4c:	f7fa fed0 	bl	8001cf0 <HAL_GetTick>
 8006f50:	4602      	mov	r2, r0
 8006f52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f54:	1ad3      	subs	r3, r2, r3
 8006f56:	2b02      	cmp	r3, #2
 8006f58:	d901      	bls.n	8006f5e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8006f5a:	2303      	movs	r3, #3
 8006f5c:	e070      	b.n	8007040 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006f5e:	4b3a      	ldr	r3, [pc, #232]	@ (8007048 <HAL_RCC_OscConfig+0x8ac>)
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d1f0      	bne.n	8006f4c <HAL_RCC_OscConfig+0x7b0>
 8006f6a:	e068      	b.n	800703e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006f6c:	4b36      	ldr	r3, [pc, #216]	@ (8007048 <HAL_RCC_OscConfig+0x8ac>)
 8006f6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f70:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006f72:	4b35      	ldr	r3, [pc, #212]	@ (8007048 <HAL_RCC_OscConfig+0x8ac>)
 8006f74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f76:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f7c:	2b01      	cmp	r3, #1
 8006f7e:	d031      	beq.n	8006fe4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006f80:	693b      	ldr	r3, [r7, #16]
 8006f82:	f003 0203 	and.w	r2, r3, #3
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006f8a:	429a      	cmp	r2, r3
 8006f8c:	d12a      	bne.n	8006fe4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006f8e:	693b      	ldr	r3, [r7, #16]
 8006f90:	091b      	lsrs	r3, r3, #4
 8006f92:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006f9a:	429a      	cmp	r2, r3
 8006f9c:	d122      	bne.n	8006fe4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006fa8:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006faa:	429a      	cmp	r2, r3
 8006fac:	d11a      	bne.n	8006fe4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	0a5b      	lsrs	r3, r3, #9
 8006fb2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006fba:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006fbc:	429a      	cmp	r2, r3
 8006fbe:	d111      	bne.n	8006fe4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	0c1b      	lsrs	r3, r3, #16
 8006fc4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fcc:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006fce:	429a      	cmp	r2, r3
 8006fd0:	d108      	bne.n	8006fe4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	0e1b      	lsrs	r3, r3, #24
 8006fd6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006fde:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006fe0:	429a      	cmp	r2, r3
 8006fe2:	d001      	beq.n	8006fe8 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8006fe4:	2301      	movs	r3, #1
 8006fe6:	e02b      	b.n	8007040 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8006fe8:	4b17      	ldr	r3, [pc, #92]	@ (8007048 <HAL_RCC_OscConfig+0x8ac>)
 8006fea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006fec:	08db      	lsrs	r3, r3, #3
 8006fee:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006ff2:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006ff8:	693a      	ldr	r2, [r7, #16]
 8006ffa:	429a      	cmp	r2, r3
 8006ffc:	d01f      	beq.n	800703e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8006ffe:	4b12      	ldr	r3, [pc, #72]	@ (8007048 <HAL_RCC_OscConfig+0x8ac>)
 8007000:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007002:	4a11      	ldr	r2, [pc, #68]	@ (8007048 <HAL_RCC_OscConfig+0x8ac>)
 8007004:	f023 0301 	bic.w	r3, r3, #1
 8007008:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800700a:	f7fa fe71 	bl	8001cf0 <HAL_GetTick>
 800700e:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8007010:	bf00      	nop
 8007012:	f7fa fe6d 	bl	8001cf0 <HAL_GetTick>
 8007016:	4602      	mov	r2, r0
 8007018:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800701a:	4293      	cmp	r3, r2
 800701c:	d0f9      	beq.n	8007012 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800701e:	4b0a      	ldr	r3, [pc, #40]	@ (8007048 <HAL_RCC_OscConfig+0x8ac>)
 8007020:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007022:	4b0a      	ldr	r3, [pc, #40]	@ (800704c <HAL_RCC_OscConfig+0x8b0>)
 8007024:	4013      	ands	r3, r2
 8007026:	687a      	ldr	r2, [r7, #4]
 8007028:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800702a:	00d2      	lsls	r2, r2, #3
 800702c:	4906      	ldr	r1, [pc, #24]	@ (8007048 <HAL_RCC_OscConfig+0x8ac>)
 800702e:	4313      	orrs	r3, r2
 8007030:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8007032:	4b05      	ldr	r3, [pc, #20]	@ (8007048 <HAL_RCC_OscConfig+0x8ac>)
 8007034:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007036:	4a04      	ldr	r2, [pc, #16]	@ (8007048 <HAL_RCC_OscConfig+0x8ac>)
 8007038:	f043 0301 	orr.w	r3, r3, #1
 800703c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800703e:	2300      	movs	r3, #0
}
 8007040:	4618      	mov	r0, r3
 8007042:	3730      	adds	r7, #48	@ 0x30
 8007044:	46bd      	mov	sp, r7
 8007046:	bd80      	pop	{r7, pc}
 8007048:	58024400 	.word	0x58024400
 800704c:	ffff0007 	.word	0xffff0007

08007050 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007050:	b580      	push	{r7, lr}
 8007052:	b086      	sub	sp, #24
 8007054:	af00      	add	r7, sp, #0
 8007056:	6078      	str	r0, [r7, #4]
 8007058:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	2b00      	cmp	r3, #0
 800705e:	d101      	bne.n	8007064 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007060:	2301      	movs	r3, #1
 8007062:	e19c      	b.n	800739e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007064:	4b8a      	ldr	r3, [pc, #552]	@ (8007290 <HAL_RCC_ClockConfig+0x240>)
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	f003 030f 	and.w	r3, r3, #15
 800706c:	683a      	ldr	r2, [r7, #0]
 800706e:	429a      	cmp	r2, r3
 8007070:	d910      	bls.n	8007094 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007072:	4b87      	ldr	r3, [pc, #540]	@ (8007290 <HAL_RCC_ClockConfig+0x240>)
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	f023 020f 	bic.w	r2, r3, #15
 800707a:	4985      	ldr	r1, [pc, #532]	@ (8007290 <HAL_RCC_ClockConfig+0x240>)
 800707c:	683b      	ldr	r3, [r7, #0]
 800707e:	4313      	orrs	r3, r2
 8007080:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007082:	4b83      	ldr	r3, [pc, #524]	@ (8007290 <HAL_RCC_ClockConfig+0x240>)
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	f003 030f 	and.w	r3, r3, #15
 800708a:	683a      	ldr	r2, [r7, #0]
 800708c:	429a      	cmp	r2, r3
 800708e:	d001      	beq.n	8007094 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007090:	2301      	movs	r3, #1
 8007092:	e184      	b.n	800739e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	f003 0304 	and.w	r3, r3, #4
 800709c:	2b00      	cmp	r3, #0
 800709e:	d010      	beq.n	80070c2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	691a      	ldr	r2, [r3, #16]
 80070a4:	4b7b      	ldr	r3, [pc, #492]	@ (8007294 <HAL_RCC_ClockConfig+0x244>)
 80070a6:	699b      	ldr	r3, [r3, #24]
 80070a8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80070ac:	429a      	cmp	r2, r3
 80070ae:	d908      	bls.n	80070c2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80070b0:	4b78      	ldr	r3, [pc, #480]	@ (8007294 <HAL_RCC_ClockConfig+0x244>)
 80070b2:	699b      	ldr	r3, [r3, #24]
 80070b4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	691b      	ldr	r3, [r3, #16]
 80070bc:	4975      	ldr	r1, [pc, #468]	@ (8007294 <HAL_RCC_ClockConfig+0x244>)
 80070be:	4313      	orrs	r3, r2
 80070c0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	f003 0308 	and.w	r3, r3, #8
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d010      	beq.n	80070f0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	695a      	ldr	r2, [r3, #20]
 80070d2:	4b70      	ldr	r3, [pc, #448]	@ (8007294 <HAL_RCC_ClockConfig+0x244>)
 80070d4:	69db      	ldr	r3, [r3, #28]
 80070d6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80070da:	429a      	cmp	r2, r3
 80070dc:	d908      	bls.n	80070f0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80070de:	4b6d      	ldr	r3, [pc, #436]	@ (8007294 <HAL_RCC_ClockConfig+0x244>)
 80070e0:	69db      	ldr	r3, [r3, #28]
 80070e2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	695b      	ldr	r3, [r3, #20]
 80070ea:	496a      	ldr	r1, [pc, #424]	@ (8007294 <HAL_RCC_ClockConfig+0x244>)
 80070ec:	4313      	orrs	r3, r2
 80070ee:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	f003 0310 	and.w	r3, r3, #16
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d010      	beq.n	800711e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	699a      	ldr	r2, [r3, #24]
 8007100:	4b64      	ldr	r3, [pc, #400]	@ (8007294 <HAL_RCC_ClockConfig+0x244>)
 8007102:	69db      	ldr	r3, [r3, #28]
 8007104:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007108:	429a      	cmp	r2, r3
 800710a:	d908      	bls.n	800711e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800710c:	4b61      	ldr	r3, [pc, #388]	@ (8007294 <HAL_RCC_ClockConfig+0x244>)
 800710e:	69db      	ldr	r3, [r3, #28]
 8007110:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	699b      	ldr	r3, [r3, #24]
 8007118:	495e      	ldr	r1, [pc, #376]	@ (8007294 <HAL_RCC_ClockConfig+0x244>)
 800711a:	4313      	orrs	r3, r2
 800711c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	f003 0320 	and.w	r3, r3, #32
 8007126:	2b00      	cmp	r3, #0
 8007128:	d010      	beq.n	800714c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	69da      	ldr	r2, [r3, #28]
 800712e:	4b59      	ldr	r3, [pc, #356]	@ (8007294 <HAL_RCC_ClockConfig+0x244>)
 8007130:	6a1b      	ldr	r3, [r3, #32]
 8007132:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007136:	429a      	cmp	r2, r3
 8007138:	d908      	bls.n	800714c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800713a:	4b56      	ldr	r3, [pc, #344]	@ (8007294 <HAL_RCC_ClockConfig+0x244>)
 800713c:	6a1b      	ldr	r3, [r3, #32]
 800713e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	69db      	ldr	r3, [r3, #28]
 8007146:	4953      	ldr	r1, [pc, #332]	@ (8007294 <HAL_RCC_ClockConfig+0x244>)
 8007148:	4313      	orrs	r3, r2
 800714a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	f003 0302 	and.w	r3, r3, #2
 8007154:	2b00      	cmp	r3, #0
 8007156:	d010      	beq.n	800717a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	68da      	ldr	r2, [r3, #12]
 800715c:	4b4d      	ldr	r3, [pc, #308]	@ (8007294 <HAL_RCC_ClockConfig+0x244>)
 800715e:	699b      	ldr	r3, [r3, #24]
 8007160:	f003 030f 	and.w	r3, r3, #15
 8007164:	429a      	cmp	r2, r3
 8007166:	d908      	bls.n	800717a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007168:	4b4a      	ldr	r3, [pc, #296]	@ (8007294 <HAL_RCC_ClockConfig+0x244>)
 800716a:	699b      	ldr	r3, [r3, #24]
 800716c:	f023 020f 	bic.w	r2, r3, #15
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	68db      	ldr	r3, [r3, #12]
 8007174:	4947      	ldr	r1, [pc, #284]	@ (8007294 <HAL_RCC_ClockConfig+0x244>)
 8007176:	4313      	orrs	r3, r2
 8007178:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	f003 0301 	and.w	r3, r3, #1
 8007182:	2b00      	cmp	r3, #0
 8007184:	d055      	beq.n	8007232 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8007186:	4b43      	ldr	r3, [pc, #268]	@ (8007294 <HAL_RCC_ClockConfig+0x244>)
 8007188:	699b      	ldr	r3, [r3, #24]
 800718a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	689b      	ldr	r3, [r3, #8]
 8007192:	4940      	ldr	r1, [pc, #256]	@ (8007294 <HAL_RCC_ClockConfig+0x244>)
 8007194:	4313      	orrs	r3, r2
 8007196:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	685b      	ldr	r3, [r3, #4]
 800719c:	2b02      	cmp	r3, #2
 800719e:	d107      	bne.n	80071b0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80071a0:	4b3c      	ldr	r3, [pc, #240]	@ (8007294 <HAL_RCC_ClockConfig+0x244>)
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d121      	bne.n	80071f0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80071ac:	2301      	movs	r3, #1
 80071ae:	e0f6      	b.n	800739e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	685b      	ldr	r3, [r3, #4]
 80071b4:	2b03      	cmp	r3, #3
 80071b6:	d107      	bne.n	80071c8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80071b8:	4b36      	ldr	r3, [pc, #216]	@ (8007294 <HAL_RCC_ClockConfig+0x244>)
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d115      	bne.n	80071f0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80071c4:	2301      	movs	r3, #1
 80071c6:	e0ea      	b.n	800739e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	685b      	ldr	r3, [r3, #4]
 80071cc:	2b01      	cmp	r3, #1
 80071ce:	d107      	bne.n	80071e0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80071d0:	4b30      	ldr	r3, [pc, #192]	@ (8007294 <HAL_RCC_ClockConfig+0x244>)
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d109      	bne.n	80071f0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80071dc:	2301      	movs	r3, #1
 80071de:	e0de      	b.n	800739e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80071e0:	4b2c      	ldr	r3, [pc, #176]	@ (8007294 <HAL_RCC_ClockConfig+0x244>)
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	f003 0304 	and.w	r3, r3, #4
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d101      	bne.n	80071f0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80071ec:	2301      	movs	r3, #1
 80071ee:	e0d6      	b.n	800739e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80071f0:	4b28      	ldr	r3, [pc, #160]	@ (8007294 <HAL_RCC_ClockConfig+0x244>)
 80071f2:	691b      	ldr	r3, [r3, #16]
 80071f4:	f023 0207 	bic.w	r2, r3, #7
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	685b      	ldr	r3, [r3, #4]
 80071fc:	4925      	ldr	r1, [pc, #148]	@ (8007294 <HAL_RCC_ClockConfig+0x244>)
 80071fe:	4313      	orrs	r3, r2
 8007200:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007202:	f7fa fd75 	bl	8001cf0 <HAL_GetTick>
 8007206:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007208:	e00a      	b.n	8007220 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800720a:	f7fa fd71 	bl	8001cf0 <HAL_GetTick>
 800720e:	4602      	mov	r2, r0
 8007210:	697b      	ldr	r3, [r7, #20]
 8007212:	1ad3      	subs	r3, r2, r3
 8007214:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007218:	4293      	cmp	r3, r2
 800721a:	d901      	bls.n	8007220 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800721c:	2303      	movs	r3, #3
 800721e:	e0be      	b.n	800739e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007220:	4b1c      	ldr	r3, [pc, #112]	@ (8007294 <HAL_RCC_ClockConfig+0x244>)
 8007222:	691b      	ldr	r3, [r3, #16]
 8007224:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	685b      	ldr	r3, [r3, #4]
 800722c:	00db      	lsls	r3, r3, #3
 800722e:	429a      	cmp	r2, r3
 8007230:	d1eb      	bne.n	800720a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	f003 0302 	and.w	r3, r3, #2
 800723a:	2b00      	cmp	r3, #0
 800723c:	d010      	beq.n	8007260 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	68da      	ldr	r2, [r3, #12]
 8007242:	4b14      	ldr	r3, [pc, #80]	@ (8007294 <HAL_RCC_ClockConfig+0x244>)
 8007244:	699b      	ldr	r3, [r3, #24]
 8007246:	f003 030f 	and.w	r3, r3, #15
 800724a:	429a      	cmp	r2, r3
 800724c:	d208      	bcs.n	8007260 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800724e:	4b11      	ldr	r3, [pc, #68]	@ (8007294 <HAL_RCC_ClockConfig+0x244>)
 8007250:	699b      	ldr	r3, [r3, #24]
 8007252:	f023 020f 	bic.w	r2, r3, #15
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	68db      	ldr	r3, [r3, #12]
 800725a:	490e      	ldr	r1, [pc, #56]	@ (8007294 <HAL_RCC_ClockConfig+0x244>)
 800725c:	4313      	orrs	r3, r2
 800725e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007260:	4b0b      	ldr	r3, [pc, #44]	@ (8007290 <HAL_RCC_ClockConfig+0x240>)
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	f003 030f 	and.w	r3, r3, #15
 8007268:	683a      	ldr	r2, [r7, #0]
 800726a:	429a      	cmp	r2, r3
 800726c:	d214      	bcs.n	8007298 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800726e:	4b08      	ldr	r3, [pc, #32]	@ (8007290 <HAL_RCC_ClockConfig+0x240>)
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	f023 020f 	bic.w	r2, r3, #15
 8007276:	4906      	ldr	r1, [pc, #24]	@ (8007290 <HAL_RCC_ClockConfig+0x240>)
 8007278:	683b      	ldr	r3, [r7, #0]
 800727a:	4313      	orrs	r3, r2
 800727c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800727e:	4b04      	ldr	r3, [pc, #16]	@ (8007290 <HAL_RCC_ClockConfig+0x240>)
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	f003 030f 	and.w	r3, r3, #15
 8007286:	683a      	ldr	r2, [r7, #0]
 8007288:	429a      	cmp	r2, r3
 800728a:	d005      	beq.n	8007298 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800728c:	2301      	movs	r3, #1
 800728e:	e086      	b.n	800739e <HAL_RCC_ClockConfig+0x34e>
 8007290:	52002000 	.word	0x52002000
 8007294:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	f003 0304 	and.w	r3, r3, #4
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d010      	beq.n	80072c6 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	691a      	ldr	r2, [r3, #16]
 80072a8:	4b3f      	ldr	r3, [pc, #252]	@ (80073a8 <HAL_RCC_ClockConfig+0x358>)
 80072aa:	699b      	ldr	r3, [r3, #24]
 80072ac:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80072b0:	429a      	cmp	r2, r3
 80072b2:	d208      	bcs.n	80072c6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80072b4:	4b3c      	ldr	r3, [pc, #240]	@ (80073a8 <HAL_RCC_ClockConfig+0x358>)
 80072b6:	699b      	ldr	r3, [r3, #24]
 80072b8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	691b      	ldr	r3, [r3, #16]
 80072c0:	4939      	ldr	r1, [pc, #228]	@ (80073a8 <HAL_RCC_ClockConfig+0x358>)
 80072c2:	4313      	orrs	r3, r2
 80072c4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	f003 0308 	and.w	r3, r3, #8
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d010      	beq.n	80072f4 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	695a      	ldr	r2, [r3, #20]
 80072d6:	4b34      	ldr	r3, [pc, #208]	@ (80073a8 <HAL_RCC_ClockConfig+0x358>)
 80072d8:	69db      	ldr	r3, [r3, #28]
 80072da:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80072de:	429a      	cmp	r2, r3
 80072e0:	d208      	bcs.n	80072f4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80072e2:	4b31      	ldr	r3, [pc, #196]	@ (80073a8 <HAL_RCC_ClockConfig+0x358>)
 80072e4:	69db      	ldr	r3, [r3, #28]
 80072e6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	695b      	ldr	r3, [r3, #20]
 80072ee:	492e      	ldr	r1, [pc, #184]	@ (80073a8 <HAL_RCC_ClockConfig+0x358>)
 80072f0:	4313      	orrs	r3, r2
 80072f2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	f003 0310 	and.w	r3, r3, #16
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d010      	beq.n	8007322 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	699a      	ldr	r2, [r3, #24]
 8007304:	4b28      	ldr	r3, [pc, #160]	@ (80073a8 <HAL_RCC_ClockConfig+0x358>)
 8007306:	69db      	ldr	r3, [r3, #28]
 8007308:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800730c:	429a      	cmp	r2, r3
 800730e:	d208      	bcs.n	8007322 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007310:	4b25      	ldr	r3, [pc, #148]	@ (80073a8 <HAL_RCC_ClockConfig+0x358>)
 8007312:	69db      	ldr	r3, [r3, #28]
 8007314:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	699b      	ldr	r3, [r3, #24]
 800731c:	4922      	ldr	r1, [pc, #136]	@ (80073a8 <HAL_RCC_ClockConfig+0x358>)
 800731e:	4313      	orrs	r3, r2
 8007320:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	f003 0320 	and.w	r3, r3, #32
 800732a:	2b00      	cmp	r3, #0
 800732c:	d010      	beq.n	8007350 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	69da      	ldr	r2, [r3, #28]
 8007332:	4b1d      	ldr	r3, [pc, #116]	@ (80073a8 <HAL_RCC_ClockConfig+0x358>)
 8007334:	6a1b      	ldr	r3, [r3, #32]
 8007336:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800733a:	429a      	cmp	r2, r3
 800733c:	d208      	bcs.n	8007350 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800733e:	4b1a      	ldr	r3, [pc, #104]	@ (80073a8 <HAL_RCC_ClockConfig+0x358>)
 8007340:	6a1b      	ldr	r3, [r3, #32]
 8007342:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	69db      	ldr	r3, [r3, #28]
 800734a:	4917      	ldr	r1, [pc, #92]	@ (80073a8 <HAL_RCC_ClockConfig+0x358>)
 800734c:	4313      	orrs	r3, r2
 800734e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007350:	f000 f834 	bl	80073bc <HAL_RCC_GetSysClockFreq>
 8007354:	4602      	mov	r2, r0
 8007356:	4b14      	ldr	r3, [pc, #80]	@ (80073a8 <HAL_RCC_ClockConfig+0x358>)
 8007358:	699b      	ldr	r3, [r3, #24]
 800735a:	0a1b      	lsrs	r3, r3, #8
 800735c:	f003 030f 	and.w	r3, r3, #15
 8007360:	4912      	ldr	r1, [pc, #72]	@ (80073ac <HAL_RCC_ClockConfig+0x35c>)
 8007362:	5ccb      	ldrb	r3, [r1, r3]
 8007364:	f003 031f 	and.w	r3, r3, #31
 8007368:	fa22 f303 	lsr.w	r3, r2, r3
 800736c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800736e:	4b0e      	ldr	r3, [pc, #56]	@ (80073a8 <HAL_RCC_ClockConfig+0x358>)
 8007370:	699b      	ldr	r3, [r3, #24]
 8007372:	f003 030f 	and.w	r3, r3, #15
 8007376:	4a0d      	ldr	r2, [pc, #52]	@ (80073ac <HAL_RCC_ClockConfig+0x35c>)
 8007378:	5cd3      	ldrb	r3, [r2, r3]
 800737a:	f003 031f 	and.w	r3, r3, #31
 800737e:	693a      	ldr	r2, [r7, #16]
 8007380:	fa22 f303 	lsr.w	r3, r2, r3
 8007384:	4a0a      	ldr	r2, [pc, #40]	@ (80073b0 <HAL_RCC_ClockConfig+0x360>)
 8007386:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007388:	4a0a      	ldr	r2, [pc, #40]	@ (80073b4 <HAL_RCC_ClockConfig+0x364>)
 800738a:	693b      	ldr	r3, [r7, #16]
 800738c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800738e:	4b0a      	ldr	r3, [pc, #40]	@ (80073b8 <HAL_RCC_ClockConfig+0x368>)
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	4618      	mov	r0, r3
 8007394:	f7fa fc62 	bl	8001c5c <HAL_InitTick>
 8007398:	4603      	mov	r3, r0
 800739a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800739c:	7bfb      	ldrb	r3, [r7, #15]
}
 800739e:	4618      	mov	r0, r3
 80073a0:	3718      	adds	r7, #24
 80073a2:	46bd      	mov	sp, r7
 80073a4:	bd80      	pop	{r7, pc}
 80073a6:	bf00      	nop
 80073a8:	58024400 	.word	0x58024400
 80073ac:	080126b0 	.word	0x080126b0
 80073b0:	24000004 	.word	0x24000004
 80073b4:	24000000 	.word	0x24000000
 80073b8:	24000008 	.word	0x24000008

080073bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80073bc:	b480      	push	{r7}
 80073be:	b089      	sub	sp, #36	@ 0x24
 80073c0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80073c2:	4bb3      	ldr	r3, [pc, #716]	@ (8007690 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80073c4:	691b      	ldr	r3, [r3, #16]
 80073c6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80073ca:	2b18      	cmp	r3, #24
 80073cc:	f200 8155 	bhi.w	800767a <HAL_RCC_GetSysClockFreq+0x2be>
 80073d0:	a201      	add	r2, pc, #4	@ (adr r2, 80073d8 <HAL_RCC_GetSysClockFreq+0x1c>)
 80073d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073d6:	bf00      	nop
 80073d8:	0800743d 	.word	0x0800743d
 80073dc:	0800767b 	.word	0x0800767b
 80073e0:	0800767b 	.word	0x0800767b
 80073e4:	0800767b 	.word	0x0800767b
 80073e8:	0800767b 	.word	0x0800767b
 80073ec:	0800767b 	.word	0x0800767b
 80073f0:	0800767b 	.word	0x0800767b
 80073f4:	0800767b 	.word	0x0800767b
 80073f8:	08007463 	.word	0x08007463
 80073fc:	0800767b 	.word	0x0800767b
 8007400:	0800767b 	.word	0x0800767b
 8007404:	0800767b 	.word	0x0800767b
 8007408:	0800767b 	.word	0x0800767b
 800740c:	0800767b 	.word	0x0800767b
 8007410:	0800767b 	.word	0x0800767b
 8007414:	0800767b 	.word	0x0800767b
 8007418:	08007469 	.word	0x08007469
 800741c:	0800767b 	.word	0x0800767b
 8007420:	0800767b 	.word	0x0800767b
 8007424:	0800767b 	.word	0x0800767b
 8007428:	0800767b 	.word	0x0800767b
 800742c:	0800767b 	.word	0x0800767b
 8007430:	0800767b 	.word	0x0800767b
 8007434:	0800767b 	.word	0x0800767b
 8007438:	0800746f 	.word	0x0800746f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800743c:	4b94      	ldr	r3, [pc, #592]	@ (8007690 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	f003 0320 	and.w	r3, r3, #32
 8007444:	2b00      	cmp	r3, #0
 8007446:	d009      	beq.n	800745c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007448:	4b91      	ldr	r3, [pc, #580]	@ (8007690 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	08db      	lsrs	r3, r3, #3
 800744e:	f003 0303 	and.w	r3, r3, #3
 8007452:	4a90      	ldr	r2, [pc, #576]	@ (8007694 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007454:	fa22 f303 	lsr.w	r3, r2, r3
 8007458:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800745a:	e111      	b.n	8007680 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800745c:	4b8d      	ldr	r3, [pc, #564]	@ (8007694 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800745e:	61bb      	str	r3, [r7, #24]
      break;
 8007460:	e10e      	b.n	8007680 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8007462:	4b8d      	ldr	r3, [pc, #564]	@ (8007698 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007464:	61bb      	str	r3, [r7, #24]
      break;
 8007466:	e10b      	b.n	8007680 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8007468:	4b8c      	ldr	r3, [pc, #560]	@ (800769c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800746a:	61bb      	str	r3, [r7, #24]
      break;
 800746c:	e108      	b.n	8007680 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800746e:	4b88      	ldr	r3, [pc, #544]	@ (8007690 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007470:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007472:	f003 0303 	and.w	r3, r3, #3
 8007476:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8007478:	4b85      	ldr	r3, [pc, #532]	@ (8007690 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800747a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800747c:	091b      	lsrs	r3, r3, #4
 800747e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007482:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8007484:	4b82      	ldr	r3, [pc, #520]	@ (8007690 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007486:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007488:	f003 0301 	and.w	r3, r3, #1
 800748c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800748e:	4b80      	ldr	r3, [pc, #512]	@ (8007690 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007490:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007492:	08db      	lsrs	r3, r3, #3
 8007494:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007498:	68fa      	ldr	r2, [r7, #12]
 800749a:	fb02 f303 	mul.w	r3, r2, r3
 800749e:	ee07 3a90 	vmov	s15, r3
 80074a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074a6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80074aa:	693b      	ldr	r3, [r7, #16]
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	f000 80e1 	beq.w	8007674 <HAL_RCC_GetSysClockFreq+0x2b8>
 80074b2:	697b      	ldr	r3, [r7, #20]
 80074b4:	2b02      	cmp	r3, #2
 80074b6:	f000 8083 	beq.w	80075c0 <HAL_RCC_GetSysClockFreq+0x204>
 80074ba:	697b      	ldr	r3, [r7, #20]
 80074bc:	2b02      	cmp	r3, #2
 80074be:	f200 80a1 	bhi.w	8007604 <HAL_RCC_GetSysClockFreq+0x248>
 80074c2:	697b      	ldr	r3, [r7, #20]
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d003      	beq.n	80074d0 <HAL_RCC_GetSysClockFreq+0x114>
 80074c8:	697b      	ldr	r3, [r7, #20]
 80074ca:	2b01      	cmp	r3, #1
 80074cc:	d056      	beq.n	800757c <HAL_RCC_GetSysClockFreq+0x1c0>
 80074ce:	e099      	b.n	8007604 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80074d0:	4b6f      	ldr	r3, [pc, #444]	@ (8007690 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	f003 0320 	and.w	r3, r3, #32
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d02d      	beq.n	8007538 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80074dc:	4b6c      	ldr	r3, [pc, #432]	@ (8007690 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	08db      	lsrs	r3, r3, #3
 80074e2:	f003 0303 	and.w	r3, r3, #3
 80074e6:	4a6b      	ldr	r2, [pc, #428]	@ (8007694 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80074e8:	fa22 f303 	lsr.w	r3, r2, r3
 80074ec:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	ee07 3a90 	vmov	s15, r3
 80074f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074f8:	693b      	ldr	r3, [r7, #16]
 80074fa:	ee07 3a90 	vmov	s15, r3
 80074fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007502:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007506:	4b62      	ldr	r3, [pc, #392]	@ (8007690 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007508:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800750a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800750e:	ee07 3a90 	vmov	s15, r3
 8007512:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007516:	ed97 6a02 	vldr	s12, [r7, #8]
 800751a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80076a0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800751e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007522:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007526:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800752a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800752e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007532:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8007536:	e087      	b.n	8007648 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007538:	693b      	ldr	r3, [r7, #16]
 800753a:	ee07 3a90 	vmov	s15, r3
 800753e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007542:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80076a4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8007546:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800754a:	4b51      	ldr	r3, [pc, #324]	@ (8007690 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800754c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800754e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007552:	ee07 3a90 	vmov	s15, r3
 8007556:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800755a:	ed97 6a02 	vldr	s12, [r7, #8]
 800755e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80076a0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007562:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007566:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800756a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800756e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007572:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007576:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800757a:	e065      	b.n	8007648 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800757c:	693b      	ldr	r3, [r7, #16]
 800757e:	ee07 3a90 	vmov	s15, r3
 8007582:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007586:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80076a8 <HAL_RCC_GetSysClockFreq+0x2ec>
 800758a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800758e:	4b40      	ldr	r3, [pc, #256]	@ (8007690 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007590:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007592:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007596:	ee07 3a90 	vmov	s15, r3
 800759a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800759e:	ed97 6a02 	vldr	s12, [r7, #8]
 80075a2:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80076a0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80075a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80075aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80075ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80075b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80075b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80075ba:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80075be:	e043      	b.n	8007648 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80075c0:	693b      	ldr	r3, [r7, #16]
 80075c2:	ee07 3a90 	vmov	s15, r3
 80075c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075ca:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80076ac <HAL_RCC_GetSysClockFreq+0x2f0>
 80075ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80075d2:	4b2f      	ldr	r3, [pc, #188]	@ (8007690 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80075d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075da:	ee07 3a90 	vmov	s15, r3
 80075de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075e2:	ed97 6a02 	vldr	s12, [r7, #8]
 80075e6:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80076a0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80075ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80075ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80075f2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80075f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80075fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80075fe:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007602:	e021      	b.n	8007648 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007604:	693b      	ldr	r3, [r7, #16]
 8007606:	ee07 3a90 	vmov	s15, r3
 800760a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800760e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80076a8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007612:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007616:	4b1e      	ldr	r3, [pc, #120]	@ (8007690 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007618:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800761a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800761e:	ee07 3a90 	vmov	s15, r3
 8007622:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007626:	ed97 6a02 	vldr	s12, [r7, #8]
 800762a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80076a0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800762e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007632:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007636:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800763a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800763e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007642:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007646:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8007648:	4b11      	ldr	r3, [pc, #68]	@ (8007690 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800764a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800764c:	0a5b      	lsrs	r3, r3, #9
 800764e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007652:	3301      	adds	r3, #1
 8007654:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8007656:	683b      	ldr	r3, [r7, #0]
 8007658:	ee07 3a90 	vmov	s15, r3
 800765c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007660:	edd7 6a07 	vldr	s13, [r7, #28]
 8007664:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007668:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800766c:	ee17 3a90 	vmov	r3, s15
 8007670:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8007672:	e005      	b.n	8007680 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8007674:	2300      	movs	r3, #0
 8007676:	61bb      	str	r3, [r7, #24]
      break;
 8007678:	e002      	b.n	8007680 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800767a:	4b07      	ldr	r3, [pc, #28]	@ (8007698 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800767c:	61bb      	str	r3, [r7, #24]
      break;
 800767e:	bf00      	nop
  }

  return sysclockfreq;
 8007680:	69bb      	ldr	r3, [r7, #24]
}
 8007682:	4618      	mov	r0, r3
 8007684:	3724      	adds	r7, #36	@ 0x24
 8007686:	46bd      	mov	sp, r7
 8007688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800768c:	4770      	bx	lr
 800768e:	bf00      	nop
 8007690:	58024400 	.word	0x58024400
 8007694:	03d09000 	.word	0x03d09000
 8007698:	003d0900 	.word	0x003d0900
 800769c:	017d7840 	.word	0x017d7840
 80076a0:	46000000 	.word	0x46000000
 80076a4:	4c742400 	.word	0x4c742400
 80076a8:	4a742400 	.word	0x4a742400
 80076ac:	4bbebc20 	.word	0x4bbebc20

080076b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80076b0:	b580      	push	{r7, lr}
 80076b2:	b082      	sub	sp, #8
 80076b4:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80076b6:	f7ff fe81 	bl	80073bc <HAL_RCC_GetSysClockFreq>
 80076ba:	4602      	mov	r2, r0
 80076bc:	4b10      	ldr	r3, [pc, #64]	@ (8007700 <HAL_RCC_GetHCLKFreq+0x50>)
 80076be:	699b      	ldr	r3, [r3, #24]
 80076c0:	0a1b      	lsrs	r3, r3, #8
 80076c2:	f003 030f 	and.w	r3, r3, #15
 80076c6:	490f      	ldr	r1, [pc, #60]	@ (8007704 <HAL_RCC_GetHCLKFreq+0x54>)
 80076c8:	5ccb      	ldrb	r3, [r1, r3]
 80076ca:	f003 031f 	and.w	r3, r3, #31
 80076ce:	fa22 f303 	lsr.w	r3, r2, r3
 80076d2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80076d4:	4b0a      	ldr	r3, [pc, #40]	@ (8007700 <HAL_RCC_GetHCLKFreq+0x50>)
 80076d6:	699b      	ldr	r3, [r3, #24]
 80076d8:	f003 030f 	and.w	r3, r3, #15
 80076dc:	4a09      	ldr	r2, [pc, #36]	@ (8007704 <HAL_RCC_GetHCLKFreq+0x54>)
 80076de:	5cd3      	ldrb	r3, [r2, r3]
 80076e0:	f003 031f 	and.w	r3, r3, #31
 80076e4:	687a      	ldr	r2, [r7, #4]
 80076e6:	fa22 f303 	lsr.w	r3, r2, r3
 80076ea:	4a07      	ldr	r2, [pc, #28]	@ (8007708 <HAL_RCC_GetHCLKFreq+0x58>)
 80076ec:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80076ee:	4a07      	ldr	r2, [pc, #28]	@ (800770c <HAL_RCC_GetHCLKFreq+0x5c>)
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80076f4:	4b04      	ldr	r3, [pc, #16]	@ (8007708 <HAL_RCC_GetHCLKFreq+0x58>)
 80076f6:	681b      	ldr	r3, [r3, #0]
}
 80076f8:	4618      	mov	r0, r3
 80076fa:	3708      	adds	r7, #8
 80076fc:	46bd      	mov	sp, r7
 80076fe:	bd80      	pop	{r7, pc}
 8007700:	58024400 	.word	0x58024400
 8007704:	080126b0 	.word	0x080126b0
 8007708:	24000004 	.word	0x24000004
 800770c:	24000000 	.word	0x24000000

08007710 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007710:	b580      	push	{r7, lr}
 8007712:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8007714:	f7ff ffcc 	bl	80076b0 <HAL_RCC_GetHCLKFreq>
 8007718:	4602      	mov	r2, r0
 800771a:	4b06      	ldr	r3, [pc, #24]	@ (8007734 <HAL_RCC_GetPCLK1Freq+0x24>)
 800771c:	69db      	ldr	r3, [r3, #28]
 800771e:	091b      	lsrs	r3, r3, #4
 8007720:	f003 0307 	and.w	r3, r3, #7
 8007724:	4904      	ldr	r1, [pc, #16]	@ (8007738 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007726:	5ccb      	ldrb	r3, [r1, r3]
 8007728:	f003 031f 	and.w	r3, r3, #31
 800772c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8007730:	4618      	mov	r0, r3
 8007732:	bd80      	pop	{r7, pc}
 8007734:	58024400 	.word	0x58024400
 8007738:	080126b0 	.word	0x080126b0

0800773c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800773c:	b580      	push	{r7, lr}
 800773e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8007740:	f7ff ffb6 	bl	80076b0 <HAL_RCC_GetHCLKFreq>
 8007744:	4602      	mov	r2, r0
 8007746:	4b06      	ldr	r3, [pc, #24]	@ (8007760 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007748:	69db      	ldr	r3, [r3, #28]
 800774a:	0a1b      	lsrs	r3, r3, #8
 800774c:	f003 0307 	and.w	r3, r3, #7
 8007750:	4904      	ldr	r1, [pc, #16]	@ (8007764 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007752:	5ccb      	ldrb	r3, [r1, r3]
 8007754:	f003 031f 	and.w	r3, r3, #31
 8007758:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800775c:	4618      	mov	r0, r3
 800775e:	bd80      	pop	{r7, pc}
 8007760:	58024400 	.word	0x58024400
 8007764:	080126b0 	.word	0x080126b0

08007768 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007768:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800776c:	b0ca      	sub	sp, #296	@ 0x128
 800776e:	af00      	add	r7, sp, #0
 8007770:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007774:	2300      	movs	r3, #0
 8007776:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800777a:	2300      	movs	r3, #0
 800777c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007780:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007784:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007788:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800778c:	2500      	movs	r5, #0
 800778e:	ea54 0305 	orrs.w	r3, r4, r5
 8007792:	d049      	beq.n	8007828 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8007794:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007798:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800779a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800779e:	d02f      	beq.n	8007800 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80077a0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80077a4:	d828      	bhi.n	80077f8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80077a6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80077aa:	d01a      	beq.n	80077e2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80077ac:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80077b0:	d822      	bhi.n	80077f8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d003      	beq.n	80077be <HAL_RCCEx_PeriphCLKConfig+0x56>
 80077b6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80077ba:	d007      	beq.n	80077cc <HAL_RCCEx_PeriphCLKConfig+0x64>
 80077bc:	e01c      	b.n	80077f8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80077be:	4bb8      	ldr	r3, [pc, #736]	@ (8007aa0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80077c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077c2:	4ab7      	ldr	r2, [pc, #732]	@ (8007aa0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80077c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80077c8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80077ca:	e01a      	b.n	8007802 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80077cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077d0:	3308      	adds	r3, #8
 80077d2:	2102      	movs	r1, #2
 80077d4:	4618      	mov	r0, r3
 80077d6:	f002 fb61 	bl	8009e9c <RCCEx_PLL2_Config>
 80077da:	4603      	mov	r3, r0
 80077dc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80077e0:	e00f      	b.n	8007802 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80077e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077e6:	3328      	adds	r3, #40	@ 0x28
 80077e8:	2102      	movs	r1, #2
 80077ea:	4618      	mov	r0, r3
 80077ec:	f002 fc08 	bl	800a000 <RCCEx_PLL3_Config>
 80077f0:	4603      	mov	r3, r0
 80077f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80077f6:	e004      	b.n	8007802 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80077f8:	2301      	movs	r3, #1
 80077fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80077fe:	e000      	b.n	8007802 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8007800:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007802:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007806:	2b00      	cmp	r3, #0
 8007808:	d10a      	bne.n	8007820 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800780a:	4ba5      	ldr	r3, [pc, #660]	@ (8007aa0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800780c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800780e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8007812:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007816:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007818:	4aa1      	ldr	r2, [pc, #644]	@ (8007aa0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800781a:	430b      	orrs	r3, r1
 800781c:	6513      	str	r3, [r2, #80]	@ 0x50
 800781e:	e003      	b.n	8007828 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007820:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007824:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007828:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800782c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007830:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8007834:	f04f 0900 	mov.w	r9, #0
 8007838:	ea58 0309 	orrs.w	r3, r8, r9
 800783c:	d047      	beq.n	80078ce <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800783e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007842:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007844:	2b04      	cmp	r3, #4
 8007846:	d82a      	bhi.n	800789e <HAL_RCCEx_PeriphCLKConfig+0x136>
 8007848:	a201      	add	r2, pc, #4	@ (adr r2, 8007850 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800784a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800784e:	bf00      	nop
 8007850:	08007865 	.word	0x08007865
 8007854:	08007873 	.word	0x08007873
 8007858:	08007889 	.word	0x08007889
 800785c:	080078a7 	.word	0x080078a7
 8007860:	080078a7 	.word	0x080078a7
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007864:	4b8e      	ldr	r3, [pc, #568]	@ (8007aa0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007866:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007868:	4a8d      	ldr	r2, [pc, #564]	@ (8007aa0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800786a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800786e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007870:	e01a      	b.n	80078a8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007872:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007876:	3308      	adds	r3, #8
 8007878:	2100      	movs	r1, #0
 800787a:	4618      	mov	r0, r3
 800787c:	f002 fb0e 	bl	8009e9c <RCCEx_PLL2_Config>
 8007880:	4603      	mov	r3, r0
 8007882:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007886:	e00f      	b.n	80078a8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007888:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800788c:	3328      	adds	r3, #40	@ 0x28
 800788e:	2100      	movs	r1, #0
 8007890:	4618      	mov	r0, r3
 8007892:	f002 fbb5 	bl	800a000 <RCCEx_PLL3_Config>
 8007896:	4603      	mov	r3, r0
 8007898:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800789c:	e004      	b.n	80078a8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800789e:	2301      	movs	r3, #1
 80078a0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80078a4:	e000      	b.n	80078a8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80078a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80078a8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d10a      	bne.n	80078c6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80078b0:	4b7b      	ldr	r3, [pc, #492]	@ (8007aa0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80078b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80078b4:	f023 0107 	bic.w	r1, r3, #7
 80078b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80078be:	4a78      	ldr	r2, [pc, #480]	@ (8007aa0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80078c0:	430b      	orrs	r3, r1
 80078c2:	6513      	str	r3, [r2, #80]	@ 0x50
 80078c4:	e003      	b.n	80078ce <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80078ca:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80078ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078d6:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 80078da:	f04f 0b00 	mov.w	fp, #0
 80078de:	ea5a 030b 	orrs.w	r3, sl, fp
 80078e2:	d04c      	beq.n	800797e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80078e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80078ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80078ee:	d030      	beq.n	8007952 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80078f0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80078f4:	d829      	bhi.n	800794a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80078f6:	2bc0      	cmp	r3, #192	@ 0xc0
 80078f8:	d02d      	beq.n	8007956 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80078fa:	2bc0      	cmp	r3, #192	@ 0xc0
 80078fc:	d825      	bhi.n	800794a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80078fe:	2b80      	cmp	r3, #128	@ 0x80
 8007900:	d018      	beq.n	8007934 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8007902:	2b80      	cmp	r3, #128	@ 0x80
 8007904:	d821      	bhi.n	800794a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8007906:	2b00      	cmp	r3, #0
 8007908:	d002      	beq.n	8007910 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800790a:	2b40      	cmp	r3, #64	@ 0x40
 800790c:	d007      	beq.n	800791e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800790e:	e01c      	b.n	800794a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007910:	4b63      	ldr	r3, [pc, #396]	@ (8007aa0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007912:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007914:	4a62      	ldr	r2, [pc, #392]	@ (8007aa0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007916:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800791a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800791c:	e01c      	b.n	8007958 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800791e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007922:	3308      	adds	r3, #8
 8007924:	2100      	movs	r1, #0
 8007926:	4618      	mov	r0, r3
 8007928:	f002 fab8 	bl	8009e9c <RCCEx_PLL2_Config>
 800792c:	4603      	mov	r3, r0
 800792e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8007932:	e011      	b.n	8007958 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007934:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007938:	3328      	adds	r3, #40	@ 0x28
 800793a:	2100      	movs	r1, #0
 800793c:	4618      	mov	r0, r3
 800793e:	f002 fb5f 	bl	800a000 <RCCEx_PLL3_Config>
 8007942:	4603      	mov	r3, r0
 8007944:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8007948:	e006      	b.n	8007958 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800794a:	2301      	movs	r3, #1
 800794c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007950:	e002      	b.n	8007958 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8007952:	bf00      	nop
 8007954:	e000      	b.n	8007958 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8007956:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007958:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800795c:	2b00      	cmp	r3, #0
 800795e:	d10a      	bne.n	8007976 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8007960:	4b4f      	ldr	r3, [pc, #316]	@ (8007aa0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007962:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007964:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8007968:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800796c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800796e:	4a4c      	ldr	r2, [pc, #304]	@ (8007aa0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007970:	430b      	orrs	r3, r1
 8007972:	6513      	str	r3, [r2, #80]	@ 0x50
 8007974:	e003      	b.n	800797e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007976:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800797a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800797e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007982:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007986:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800798a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800798e:	2300      	movs	r3, #0
 8007990:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8007994:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8007998:	460b      	mov	r3, r1
 800799a:	4313      	orrs	r3, r2
 800799c:	d053      	beq.n	8007a46 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800799e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079a2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80079a6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80079aa:	d035      	beq.n	8007a18 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80079ac:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80079b0:	d82e      	bhi.n	8007a10 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80079b2:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80079b6:	d031      	beq.n	8007a1c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80079b8:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80079bc:	d828      	bhi.n	8007a10 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80079be:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80079c2:	d01a      	beq.n	80079fa <HAL_RCCEx_PeriphCLKConfig+0x292>
 80079c4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80079c8:	d822      	bhi.n	8007a10 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d003      	beq.n	80079d6 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80079ce:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80079d2:	d007      	beq.n	80079e4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80079d4:	e01c      	b.n	8007a10 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80079d6:	4b32      	ldr	r3, [pc, #200]	@ (8007aa0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80079d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079da:	4a31      	ldr	r2, [pc, #196]	@ (8007aa0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80079dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80079e0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80079e2:	e01c      	b.n	8007a1e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80079e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079e8:	3308      	adds	r3, #8
 80079ea:	2100      	movs	r1, #0
 80079ec:	4618      	mov	r0, r3
 80079ee:	f002 fa55 	bl	8009e9c <RCCEx_PLL2_Config>
 80079f2:	4603      	mov	r3, r0
 80079f4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80079f8:	e011      	b.n	8007a1e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80079fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079fe:	3328      	adds	r3, #40	@ 0x28
 8007a00:	2100      	movs	r1, #0
 8007a02:	4618      	mov	r0, r3
 8007a04:	f002 fafc 	bl	800a000 <RCCEx_PLL3_Config>
 8007a08:	4603      	mov	r3, r0
 8007a0a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007a0e:	e006      	b.n	8007a1e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8007a10:	2301      	movs	r3, #1
 8007a12:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007a16:	e002      	b.n	8007a1e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8007a18:	bf00      	nop
 8007a1a:	e000      	b.n	8007a1e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8007a1c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007a1e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d10b      	bne.n	8007a3e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8007a26:	4b1e      	ldr	r3, [pc, #120]	@ (8007aa0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007a28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007a2a:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8007a2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a32:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8007a36:	4a1a      	ldr	r2, [pc, #104]	@ (8007aa0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007a38:	430b      	orrs	r3, r1
 8007a3a:	6593      	str	r3, [r2, #88]	@ 0x58
 8007a3c:	e003      	b.n	8007a46 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a3e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007a42:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8007a46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a4e:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8007a52:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8007a56:	2300      	movs	r3, #0
 8007a58:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8007a5c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8007a60:	460b      	mov	r3, r1
 8007a62:	4313      	orrs	r3, r2
 8007a64:	d056      	beq.n	8007b14 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8007a66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a6a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007a6e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007a72:	d038      	beq.n	8007ae6 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8007a74:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007a78:	d831      	bhi.n	8007ade <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007a7a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007a7e:	d034      	beq.n	8007aea <HAL_RCCEx_PeriphCLKConfig+0x382>
 8007a80:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007a84:	d82b      	bhi.n	8007ade <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007a86:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007a8a:	d01d      	beq.n	8007ac8 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8007a8c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007a90:	d825      	bhi.n	8007ade <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d006      	beq.n	8007aa4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8007a96:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007a9a:	d00a      	beq.n	8007ab2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8007a9c:	e01f      	b.n	8007ade <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007a9e:	bf00      	nop
 8007aa0:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007aa4:	4ba2      	ldr	r3, [pc, #648]	@ (8007d30 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007aa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007aa8:	4aa1      	ldr	r2, [pc, #644]	@ (8007d30 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007aaa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007aae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007ab0:	e01c      	b.n	8007aec <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007ab2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ab6:	3308      	adds	r3, #8
 8007ab8:	2100      	movs	r1, #0
 8007aba:	4618      	mov	r0, r3
 8007abc:	f002 f9ee 	bl	8009e9c <RCCEx_PLL2_Config>
 8007ac0:	4603      	mov	r3, r0
 8007ac2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8007ac6:	e011      	b.n	8007aec <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007ac8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007acc:	3328      	adds	r3, #40	@ 0x28
 8007ace:	2100      	movs	r1, #0
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	f002 fa95 	bl	800a000 <RCCEx_PLL3_Config>
 8007ad6:	4603      	mov	r3, r0
 8007ad8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007adc:	e006      	b.n	8007aec <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8007ade:	2301      	movs	r3, #1
 8007ae0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007ae4:	e002      	b.n	8007aec <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8007ae6:	bf00      	nop
 8007ae8:	e000      	b.n	8007aec <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8007aea:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007aec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d10b      	bne.n	8007b0c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8007af4:	4b8e      	ldr	r3, [pc, #568]	@ (8007d30 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007af6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007af8:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8007afc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b00:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007b04:	4a8a      	ldr	r2, [pc, #552]	@ (8007d30 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007b06:	430b      	orrs	r3, r1
 8007b08:	6593      	str	r3, [r2, #88]	@ 0x58
 8007b0a:	e003      	b.n	8007b14 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b0c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007b10:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007b14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b1c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8007b20:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007b24:	2300      	movs	r3, #0
 8007b26:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007b2a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8007b2e:	460b      	mov	r3, r1
 8007b30:	4313      	orrs	r3, r2
 8007b32:	d03a      	beq.n	8007baa <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8007b34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007b3a:	2b30      	cmp	r3, #48	@ 0x30
 8007b3c:	d01f      	beq.n	8007b7e <HAL_RCCEx_PeriphCLKConfig+0x416>
 8007b3e:	2b30      	cmp	r3, #48	@ 0x30
 8007b40:	d819      	bhi.n	8007b76 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8007b42:	2b20      	cmp	r3, #32
 8007b44:	d00c      	beq.n	8007b60 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8007b46:	2b20      	cmp	r3, #32
 8007b48:	d815      	bhi.n	8007b76 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d019      	beq.n	8007b82 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8007b4e:	2b10      	cmp	r3, #16
 8007b50:	d111      	bne.n	8007b76 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007b52:	4b77      	ldr	r3, [pc, #476]	@ (8007d30 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007b54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b56:	4a76      	ldr	r2, [pc, #472]	@ (8007d30 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007b58:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007b5c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8007b5e:	e011      	b.n	8007b84 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007b60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b64:	3308      	adds	r3, #8
 8007b66:	2102      	movs	r1, #2
 8007b68:	4618      	mov	r0, r3
 8007b6a:	f002 f997 	bl	8009e9c <RCCEx_PLL2_Config>
 8007b6e:	4603      	mov	r3, r0
 8007b70:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8007b74:	e006      	b.n	8007b84 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007b76:	2301      	movs	r3, #1
 8007b78:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007b7c:	e002      	b.n	8007b84 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8007b7e:	bf00      	nop
 8007b80:	e000      	b.n	8007b84 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8007b82:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007b84:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d10a      	bne.n	8007ba2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007b8c:	4b68      	ldr	r3, [pc, #416]	@ (8007d30 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007b8e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007b90:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8007b94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007b9a:	4a65      	ldr	r2, [pc, #404]	@ (8007d30 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007b9c:	430b      	orrs	r3, r1
 8007b9e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007ba0:	e003      	b.n	8007baa <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ba2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007ba6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007baa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007bae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bb2:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8007bb6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007bba:	2300      	movs	r3, #0
 8007bbc:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007bc0:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8007bc4:	460b      	mov	r3, r1
 8007bc6:	4313      	orrs	r3, r2
 8007bc8:	d051      	beq.n	8007c6e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8007bca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007bce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007bd0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007bd4:	d035      	beq.n	8007c42 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8007bd6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007bda:	d82e      	bhi.n	8007c3a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007bdc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007be0:	d031      	beq.n	8007c46 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8007be2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007be6:	d828      	bhi.n	8007c3a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007be8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007bec:	d01a      	beq.n	8007c24 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8007bee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007bf2:	d822      	bhi.n	8007c3a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d003      	beq.n	8007c00 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8007bf8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007bfc:	d007      	beq.n	8007c0e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8007bfe:	e01c      	b.n	8007c3a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007c00:	4b4b      	ldr	r3, [pc, #300]	@ (8007d30 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007c02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c04:	4a4a      	ldr	r2, [pc, #296]	@ (8007d30 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007c06:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007c0a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007c0c:	e01c      	b.n	8007c48 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007c0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c12:	3308      	adds	r3, #8
 8007c14:	2100      	movs	r1, #0
 8007c16:	4618      	mov	r0, r3
 8007c18:	f002 f940 	bl	8009e9c <RCCEx_PLL2_Config>
 8007c1c:	4603      	mov	r3, r0
 8007c1e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007c22:	e011      	b.n	8007c48 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007c24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c28:	3328      	adds	r3, #40	@ 0x28
 8007c2a:	2100      	movs	r1, #0
 8007c2c:	4618      	mov	r0, r3
 8007c2e:	f002 f9e7 	bl	800a000 <RCCEx_PLL3_Config>
 8007c32:	4603      	mov	r3, r0
 8007c34:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007c38:	e006      	b.n	8007c48 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007c3a:	2301      	movs	r3, #1
 8007c3c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007c40:	e002      	b.n	8007c48 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8007c42:	bf00      	nop
 8007c44:	e000      	b.n	8007c48 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8007c46:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007c48:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d10a      	bne.n	8007c66 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007c50:	4b37      	ldr	r3, [pc, #220]	@ (8007d30 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007c52:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007c54:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8007c58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c5c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007c5e:	4a34      	ldr	r2, [pc, #208]	@ (8007d30 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007c60:	430b      	orrs	r3, r1
 8007c62:	6513      	str	r3, [r2, #80]	@ 0x50
 8007c64:	e003      	b.n	8007c6e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c66:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007c6a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8007c6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c76:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8007c7a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007c7e:	2300      	movs	r3, #0
 8007c80:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007c84:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8007c88:	460b      	mov	r3, r1
 8007c8a:	4313      	orrs	r3, r2
 8007c8c:	d056      	beq.n	8007d3c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8007c8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c92:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007c94:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007c98:	d033      	beq.n	8007d02 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8007c9a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007c9e:	d82c      	bhi.n	8007cfa <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007ca0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007ca4:	d02f      	beq.n	8007d06 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8007ca6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007caa:	d826      	bhi.n	8007cfa <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007cac:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007cb0:	d02b      	beq.n	8007d0a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8007cb2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007cb6:	d820      	bhi.n	8007cfa <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007cb8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007cbc:	d012      	beq.n	8007ce4 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8007cbe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007cc2:	d81a      	bhi.n	8007cfa <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d022      	beq.n	8007d0e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8007cc8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007ccc:	d115      	bne.n	8007cfa <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007cce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cd2:	3308      	adds	r3, #8
 8007cd4:	2101      	movs	r1, #1
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	f002 f8e0 	bl	8009e9c <RCCEx_PLL2_Config>
 8007cdc:	4603      	mov	r3, r0
 8007cde:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007ce2:	e015      	b.n	8007d10 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007ce4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ce8:	3328      	adds	r3, #40	@ 0x28
 8007cea:	2101      	movs	r1, #1
 8007cec:	4618      	mov	r0, r3
 8007cee:	f002 f987 	bl	800a000 <RCCEx_PLL3_Config>
 8007cf2:	4603      	mov	r3, r0
 8007cf4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007cf8:	e00a      	b.n	8007d10 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007cfa:	2301      	movs	r3, #1
 8007cfc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007d00:	e006      	b.n	8007d10 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007d02:	bf00      	nop
 8007d04:	e004      	b.n	8007d10 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007d06:	bf00      	nop
 8007d08:	e002      	b.n	8007d10 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007d0a:	bf00      	nop
 8007d0c:	e000      	b.n	8007d10 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007d0e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007d10:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d10d      	bne.n	8007d34 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007d18:	4b05      	ldr	r3, [pc, #20]	@ (8007d30 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007d1a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007d1c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8007d20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d24:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007d26:	4a02      	ldr	r2, [pc, #8]	@ (8007d30 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007d28:	430b      	orrs	r3, r1
 8007d2a:	6513      	str	r3, [r2, #80]	@ 0x50
 8007d2c:	e006      	b.n	8007d3c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8007d2e:	bf00      	nop
 8007d30:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d34:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007d38:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007d3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d44:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8007d48:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007d52:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8007d56:	460b      	mov	r3, r1
 8007d58:	4313      	orrs	r3, r2
 8007d5a:	d055      	beq.n	8007e08 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8007d5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d60:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007d64:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007d68:	d033      	beq.n	8007dd2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8007d6a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007d6e:	d82c      	bhi.n	8007dca <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007d70:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007d74:	d02f      	beq.n	8007dd6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8007d76:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007d7a:	d826      	bhi.n	8007dca <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007d7c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007d80:	d02b      	beq.n	8007dda <HAL_RCCEx_PeriphCLKConfig+0x672>
 8007d82:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007d86:	d820      	bhi.n	8007dca <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007d88:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007d8c:	d012      	beq.n	8007db4 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8007d8e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007d92:	d81a      	bhi.n	8007dca <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d022      	beq.n	8007dde <HAL_RCCEx_PeriphCLKConfig+0x676>
 8007d98:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007d9c:	d115      	bne.n	8007dca <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007d9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007da2:	3308      	adds	r3, #8
 8007da4:	2101      	movs	r1, #1
 8007da6:	4618      	mov	r0, r3
 8007da8:	f002 f878 	bl	8009e9c <RCCEx_PLL2_Config>
 8007dac:	4603      	mov	r3, r0
 8007dae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007db2:	e015      	b.n	8007de0 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007db4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007db8:	3328      	adds	r3, #40	@ 0x28
 8007dba:	2101      	movs	r1, #1
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	f002 f91f 	bl	800a000 <RCCEx_PLL3_Config>
 8007dc2:	4603      	mov	r3, r0
 8007dc4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007dc8:	e00a      	b.n	8007de0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8007dca:	2301      	movs	r3, #1
 8007dcc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007dd0:	e006      	b.n	8007de0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007dd2:	bf00      	nop
 8007dd4:	e004      	b.n	8007de0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007dd6:	bf00      	nop
 8007dd8:	e002      	b.n	8007de0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007dda:	bf00      	nop
 8007ddc:	e000      	b.n	8007de0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007dde:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007de0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d10b      	bne.n	8007e00 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007de8:	4ba3      	ldr	r3, [pc, #652]	@ (8008078 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007dea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007dec:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8007df0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007df4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007df8:	4a9f      	ldr	r2, [pc, #636]	@ (8008078 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007dfa:	430b      	orrs	r3, r1
 8007dfc:	6593      	str	r3, [r2, #88]	@ 0x58
 8007dfe:	e003      	b.n	8007e08 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e00:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007e04:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007e08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e10:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8007e14:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007e18:	2300      	movs	r3, #0
 8007e1a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007e1e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007e22:	460b      	mov	r3, r1
 8007e24:	4313      	orrs	r3, r2
 8007e26:	d037      	beq.n	8007e98 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8007e28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007e2e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007e32:	d00e      	beq.n	8007e52 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8007e34:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007e38:	d816      	bhi.n	8007e68 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d018      	beq.n	8007e70 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8007e3e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007e42:	d111      	bne.n	8007e68 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007e44:	4b8c      	ldr	r3, [pc, #560]	@ (8008078 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007e46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e48:	4a8b      	ldr	r2, [pc, #556]	@ (8008078 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007e4a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007e4e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007e50:	e00f      	b.n	8007e72 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007e52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e56:	3308      	adds	r3, #8
 8007e58:	2101      	movs	r1, #1
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	f002 f81e 	bl	8009e9c <RCCEx_PLL2_Config>
 8007e60:	4603      	mov	r3, r0
 8007e62:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007e66:	e004      	b.n	8007e72 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007e68:	2301      	movs	r3, #1
 8007e6a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007e6e:	e000      	b.n	8007e72 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8007e70:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007e72:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d10a      	bne.n	8007e90 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007e7a:	4b7f      	ldr	r3, [pc, #508]	@ (8008078 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007e7c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007e7e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8007e82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007e88:	4a7b      	ldr	r2, [pc, #492]	@ (8008078 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007e8a:	430b      	orrs	r3, r1
 8007e8c:	6513      	str	r3, [r2, #80]	@ 0x50
 8007e8e:	e003      	b.n	8007e98 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e90:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007e94:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007e98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ea0:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8007ea4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007ea8:	2300      	movs	r3, #0
 8007eaa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8007eae:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8007eb2:	460b      	mov	r3, r1
 8007eb4:	4313      	orrs	r3, r2
 8007eb6:	d039      	beq.n	8007f2c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8007eb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ebc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007ebe:	2b03      	cmp	r3, #3
 8007ec0:	d81c      	bhi.n	8007efc <HAL_RCCEx_PeriphCLKConfig+0x794>
 8007ec2:	a201      	add	r2, pc, #4	@ (adr r2, 8007ec8 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8007ec4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ec8:	08007f05 	.word	0x08007f05
 8007ecc:	08007ed9 	.word	0x08007ed9
 8007ed0:	08007ee7 	.word	0x08007ee7
 8007ed4:	08007f05 	.word	0x08007f05
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007ed8:	4b67      	ldr	r3, [pc, #412]	@ (8008078 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007eda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007edc:	4a66      	ldr	r2, [pc, #408]	@ (8008078 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007ede:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007ee2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007ee4:	e00f      	b.n	8007f06 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007ee6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007eea:	3308      	adds	r3, #8
 8007eec:	2102      	movs	r1, #2
 8007eee:	4618      	mov	r0, r3
 8007ef0:	f001 ffd4 	bl	8009e9c <RCCEx_PLL2_Config>
 8007ef4:	4603      	mov	r3, r0
 8007ef6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007efa:	e004      	b.n	8007f06 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007efc:	2301      	movs	r3, #1
 8007efe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007f02:	e000      	b.n	8007f06 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8007f04:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007f06:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d10a      	bne.n	8007f24 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8007f0e:	4b5a      	ldr	r3, [pc, #360]	@ (8008078 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007f10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007f12:	f023 0103 	bic.w	r1, r3, #3
 8007f16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f1a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007f1c:	4a56      	ldr	r2, [pc, #344]	@ (8008078 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007f1e:	430b      	orrs	r3, r1
 8007f20:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007f22:	e003      	b.n	8007f2c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f24:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007f28:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007f2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f34:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8007f38:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007f3c:	2300      	movs	r3, #0
 8007f3e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007f42:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8007f46:	460b      	mov	r3, r1
 8007f48:	4313      	orrs	r3, r2
 8007f4a:	f000 809f 	beq.w	800808c <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007f4e:	4b4b      	ldr	r3, [pc, #300]	@ (800807c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	4a4a      	ldr	r2, [pc, #296]	@ (800807c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007f54:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007f58:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007f5a:	f7f9 fec9 	bl	8001cf0 <HAL_GetTick>
 8007f5e:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007f62:	e00b      	b.n	8007f7c <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007f64:	f7f9 fec4 	bl	8001cf0 <HAL_GetTick>
 8007f68:	4602      	mov	r2, r0
 8007f6a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8007f6e:	1ad3      	subs	r3, r2, r3
 8007f70:	2b64      	cmp	r3, #100	@ 0x64
 8007f72:	d903      	bls.n	8007f7c <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8007f74:	2303      	movs	r3, #3
 8007f76:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007f7a:	e005      	b.n	8007f88 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007f7c:	4b3f      	ldr	r3, [pc, #252]	@ (800807c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d0ed      	beq.n	8007f64 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8007f88:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d179      	bne.n	8008084 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007f90:	4b39      	ldr	r3, [pc, #228]	@ (8008078 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007f92:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007f94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f98:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007f9c:	4053      	eors	r3, r2
 8007f9e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d015      	beq.n	8007fd2 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007fa6:	4b34      	ldr	r3, [pc, #208]	@ (8008078 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007fa8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007faa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007fae:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007fb2:	4b31      	ldr	r3, [pc, #196]	@ (8008078 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007fb4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007fb6:	4a30      	ldr	r2, [pc, #192]	@ (8008078 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007fb8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007fbc:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007fbe:	4b2e      	ldr	r3, [pc, #184]	@ (8008078 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007fc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007fc2:	4a2d      	ldr	r2, [pc, #180]	@ (8008078 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007fc4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007fc8:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8007fca:	4a2b      	ldr	r2, [pc, #172]	@ (8008078 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007fcc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8007fd0:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007fd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fd6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007fda:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007fde:	d118      	bne.n	8008012 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007fe0:	f7f9 fe86 	bl	8001cf0 <HAL_GetTick>
 8007fe4:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007fe8:	e00d      	b.n	8008006 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007fea:	f7f9 fe81 	bl	8001cf0 <HAL_GetTick>
 8007fee:	4602      	mov	r2, r0
 8007ff0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8007ff4:	1ad2      	subs	r2, r2, r3
 8007ff6:	f241 3388 	movw	r3, #5000	@ 0x1388
 8007ffa:	429a      	cmp	r2, r3
 8007ffc:	d903      	bls.n	8008006 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8007ffe:	2303      	movs	r3, #3
 8008000:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8008004:	e005      	b.n	8008012 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008006:	4b1c      	ldr	r3, [pc, #112]	@ (8008078 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008008:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800800a:	f003 0302 	and.w	r3, r3, #2
 800800e:	2b00      	cmp	r3, #0
 8008010:	d0eb      	beq.n	8007fea <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8008012:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008016:	2b00      	cmp	r3, #0
 8008018:	d129      	bne.n	800806e <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800801a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800801e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008022:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008026:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800802a:	d10e      	bne.n	800804a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800802c:	4b12      	ldr	r3, [pc, #72]	@ (8008078 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800802e:	691b      	ldr	r3, [r3, #16]
 8008030:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8008034:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008038:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800803c:	091a      	lsrs	r2, r3, #4
 800803e:	4b10      	ldr	r3, [pc, #64]	@ (8008080 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8008040:	4013      	ands	r3, r2
 8008042:	4a0d      	ldr	r2, [pc, #52]	@ (8008078 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008044:	430b      	orrs	r3, r1
 8008046:	6113      	str	r3, [r2, #16]
 8008048:	e005      	b.n	8008056 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800804a:	4b0b      	ldr	r3, [pc, #44]	@ (8008078 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800804c:	691b      	ldr	r3, [r3, #16]
 800804e:	4a0a      	ldr	r2, [pc, #40]	@ (8008078 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008050:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8008054:	6113      	str	r3, [r2, #16]
 8008056:	4b08      	ldr	r3, [pc, #32]	@ (8008078 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008058:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800805a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800805e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008062:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008066:	4a04      	ldr	r2, [pc, #16]	@ (8008078 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008068:	430b      	orrs	r3, r1
 800806a:	6713      	str	r3, [r2, #112]	@ 0x70
 800806c:	e00e      	b.n	800808c <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800806e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008072:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8008076:	e009      	b.n	800808c <HAL_RCCEx_PeriphCLKConfig+0x924>
 8008078:	58024400 	.word	0x58024400
 800807c:	58024800 	.word	0x58024800
 8008080:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008084:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008088:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800808c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008090:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008094:	f002 0301 	and.w	r3, r2, #1
 8008098:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800809c:	2300      	movs	r3, #0
 800809e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80080a2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80080a6:	460b      	mov	r3, r1
 80080a8:	4313      	orrs	r3, r2
 80080aa:	f000 8089 	beq.w	80081c0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80080ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080b2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80080b4:	2b28      	cmp	r3, #40	@ 0x28
 80080b6:	d86b      	bhi.n	8008190 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80080b8:	a201      	add	r2, pc, #4	@ (adr r2, 80080c0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80080ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080be:	bf00      	nop
 80080c0:	08008199 	.word	0x08008199
 80080c4:	08008191 	.word	0x08008191
 80080c8:	08008191 	.word	0x08008191
 80080cc:	08008191 	.word	0x08008191
 80080d0:	08008191 	.word	0x08008191
 80080d4:	08008191 	.word	0x08008191
 80080d8:	08008191 	.word	0x08008191
 80080dc:	08008191 	.word	0x08008191
 80080e0:	08008165 	.word	0x08008165
 80080e4:	08008191 	.word	0x08008191
 80080e8:	08008191 	.word	0x08008191
 80080ec:	08008191 	.word	0x08008191
 80080f0:	08008191 	.word	0x08008191
 80080f4:	08008191 	.word	0x08008191
 80080f8:	08008191 	.word	0x08008191
 80080fc:	08008191 	.word	0x08008191
 8008100:	0800817b 	.word	0x0800817b
 8008104:	08008191 	.word	0x08008191
 8008108:	08008191 	.word	0x08008191
 800810c:	08008191 	.word	0x08008191
 8008110:	08008191 	.word	0x08008191
 8008114:	08008191 	.word	0x08008191
 8008118:	08008191 	.word	0x08008191
 800811c:	08008191 	.word	0x08008191
 8008120:	08008199 	.word	0x08008199
 8008124:	08008191 	.word	0x08008191
 8008128:	08008191 	.word	0x08008191
 800812c:	08008191 	.word	0x08008191
 8008130:	08008191 	.word	0x08008191
 8008134:	08008191 	.word	0x08008191
 8008138:	08008191 	.word	0x08008191
 800813c:	08008191 	.word	0x08008191
 8008140:	08008199 	.word	0x08008199
 8008144:	08008191 	.word	0x08008191
 8008148:	08008191 	.word	0x08008191
 800814c:	08008191 	.word	0x08008191
 8008150:	08008191 	.word	0x08008191
 8008154:	08008191 	.word	0x08008191
 8008158:	08008191 	.word	0x08008191
 800815c:	08008191 	.word	0x08008191
 8008160:	08008199 	.word	0x08008199
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008164:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008168:	3308      	adds	r3, #8
 800816a:	2101      	movs	r1, #1
 800816c:	4618      	mov	r0, r3
 800816e:	f001 fe95 	bl	8009e9c <RCCEx_PLL2_Config>
 8008172:	4603      	mov	r3, r0
 8008174:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8008178:	e00f      	b.n	800819a <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800817a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800817e:	3328      	adds	r3, #40	@ 0x28
 8008180:	2101      	movs	r1, #1
 8008182:	4618      	mov	r0, r3
 8008184:	f001 ff3c 	bl	800a000 <RCCEx_PLL3_Config>
 8008188:	4603      	mov	r3, r0
 800818a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800818e:	e004      	b.n	800819a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008190:	2301      	movs	r3, #1
 8008192:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008196:	e000      	b.n	800819a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8008198:	bf00      	nop
    }

    if (ret == HAL_OK)
 800819a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d10a      	bne.n	80081b8 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80081a2:	4bbf      	ldr	r3, [pc, #764]	@ (80084a0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80081a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80081a6:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80081aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081ae:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80081b0:	4abb      	ldr	r2, [pc, #748]	@ (80084a0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80081b2:	430b      	orrs	r3, r1
 80081b4:	6553      	str	r3, [r2, #84]	@ 0x54
 80081b6:	e003      	b.n	80081c0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081b8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80081bc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80081c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081c8:	f002 0302 	and.w	r3, r2, #2
 80081cc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80081d0:	2300      	movs	r3, #0
 80081d2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80081d6:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80081da:	460b      	mov	r3, r1
 80081dc:	4313      	orrs	r3, r2
 80081de:	d041      	beq.n	8008264 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80081e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081e4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80081e6:	2b05      	cmp	r3, #5
 80081e8:	d824      	bhi.n	8008234 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80081ea:	a201      	add	r2, pc, #4	@ (adr r2, 80081f0 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80081ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081f0:	0800823d 	.word	0x0800823d
 80081f4:	08008209 	.word	0x08008209
 80081f8:	0800821f 	.word	0x0800821f
 80081fc:	0800823d 	.word	0x0800823d
 8008200:	0800823d 	.word	0x0800823d
 8008204:	0800823d 	.word	0x0800823d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008208:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800820c:	3308      	adds	r3, #8
 800820e:	2101      	movs	r1, #1
 8008210:	4618      	mov	r0, r3
 8008212:	f001 fe43 	bl	8009e9c <RCCEx_PLL2_Config>
 8008216:	4603      	mov	r3, r0
 8008218:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800821c:	e00f      	b.n	800823e <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800821e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008222:	3328      	adds	r3, #40	@ 0x28
 8008224:	2101      	movs	r1, #1
 8008226:	4618      	mov	r0, r3
 8008228:	f001 feea 	bl	800a000 <RCCEx_PLL3_Config>
 800822c:	4603      	mov	r3, r0
 800822e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8008232:	e004      	b.n	800823e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008234:	2301      	movs	r3, #1
 8008236:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800823a:	e000      	b.n	800823e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800823c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800823e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008242:	2b00      	cmp	r3, #0
 8008244:	d10a      	bne.n	800825c <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8008246:	4b96      	ldr	r3, [pc, #600]	@ (80084a0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008248:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800824a:	f023 0107 	bic.w	r1, r3, #7
 800824e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008252:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008254:	4a92      	ldr	r2, [pc, #584]	@ (80084a0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008256:	430b      	orrs	r3, r1
 8008258:	6553      	str	r3, [r2, #84]	@ 0x54
 800825a:	e003      	b.n	8008264 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800825c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008260:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008264:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008268:	e9d3 2300 	ldrd	r2, r3, [r3]
 800826c:	f002 0304 	and.w	r3, r2, #4
 8008270:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008274:	2300      	movs	r3, #0
 8008276:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800827a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800827e:	460b      	mov	r3, r1
 8008280:	4313      	orrs	r3, r2
 8008282:	d044      	beq.n	800830e <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8008284:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008288:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800828c:	2b05      	cmp	r3, #5
 800828e:	d825      	bhi.n	80082dc <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8008290:	a201      	add	r2, pc, #4	@ (adr r2, 8008298 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8008292:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008296:	bf00      	nop
 8008298:	080082e5 	.word	0x080082e5
 800829c:	080082b1 	.word	0x080082b1
 80082a0:	080082c7 	.word	0x080082c7
 80082a4:	080082e5 	.word	0x080082e5
 80082a8:	080082e5 	.word	0x080082e5
 80082ac:	080082e5 	.word	0x080082e5
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80082b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082b4:	3308      	adds	r3, #8
 80082b6:	2101      	movs	r1, #1
 80082b8:	4618      	mov	r0, r3
 80082ba:	f001 fdef 	bl	8009e9c <RCCEx_PLL2_Config>
 80082be:	4603      	mov	r3, r0
 80082c0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80082c4:	e00f      	b.n	80082e6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80082c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082ca:	3328      	adds	r3, #40	@ 0x28
 80082cc:	2101      	movs	r1, #1
 80082ce:	4618      	mov	r0, r3
 80082d0:	f001 fe96 	bl	800a000 <RCCEx_PLL3_Config>
 80082d4:	4603      	mov	r3, r0
 80082d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80082da:	e004      	b.n	80082e6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80082dc:	2301      	movs	r3, #1
 80082de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80082e2:	e000      	b.n	80082e6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80082e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80082e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d10b      	bne.n	8008306 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80082ee:	4b6c      	ldr	r3, [pc, #432]	@ (80084a0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80082f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80082f2:	f023 0107 	bic.w	r1, r3, #7
 80082f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80082fe:	4a68      	ldr	r2, [pc, #416]	@ (80084a0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008300:	430b      	orrs	r3, r1
 8008302:	6593      	str	r3, [r2, #88]	@ 0x58
 8008304:	e003      	b.n	800830e <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008306:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800830a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800830e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008312:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008316:	f002 0320 	and.w	r3, r2, #32
 800831a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800831e:	2300      	movs	r3, #0
 8008320:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008324:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8008328:	460b      	mov	r3, r1
 800832a:	4313      	orrs	r3, r2
 800832c:	d055      	beq.n	80083da <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800832e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008332:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008336:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800833a:	d033      	beq.n	80083a4 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800833c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008340:	d82c      	bhi.n	800839c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8008342:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008346:	d02f      	beq.n	80083a8 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8008348:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800834c:	d826      	bhi.n	800839c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800834e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008352:	d02b      	beq.n	80083ac <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8008354:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008358:	d820      	bhi.n	800839c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800835a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800835e:	d012      	beq.n	8008386 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8008360:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008364:	d81a      	bhi.n	800839c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8008366:	2b00      	cmp	r3, #0
 8008368:	d022      	beq.n	80083b0 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800836a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800836e:	d115      	bne.n	800839c <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008370:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008374:	3308      	adds	r3, #8
 8008376:	2100      	movs	r1, #0
 8008378:	4618      	mov	r0, r3
 800837a:	f001 fd8f 	bl	8009e9c <RCCEx_PLL2_Config>
 800837e:	4603      	mov	r3, r0
 8008380:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8008384:	e015      	b.n	80083b2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008386:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800838a:	3328      	adds	r3, #40	@ 0x28
 800838c:	2102      	movs	r1, #2
 800838e:	4618      	mov	r0, r3
 8008390:	f001 fe36 	bl	800a000 <RCCEx_PLL3_Config>
 8008394:	4603      	mov	r3, r0
 8008396:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800839a:	e00a      	b.n	80083b2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800839c:	2301      	movs	r3, #1
 800839e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80083a2:	e006      	b.n	80083b2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80083a4:	bf00      	nop
 80083a6:	e004      	b.n	80083b2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80083a8:	bf00      	nop
 80083aa:	e002      	b.n	80083b2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80083ac:	bf00      	nop
 80083ae:	e000      	b.n	80083b2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80083b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80083b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d10b      	bne.n	80083d2 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80083ba:	4b39      	ldr	r3, [pc, #228]	@ (80084a0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80083bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80083be:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80083c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80083ca:	4a35      	ldr	r2, [pc, #212]	@ (80084a0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80083cc:	430b      	orrs	r3, r1
 80083ce:	6553      	str	r3, [r2, #84]	@ 0x54
 80083d0:	e003      	b.n	80083da <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80083d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80083d6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80083da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083e2:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80083e6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80083ea:	2300      	movs	r3, #0
 80083ec:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80083f0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80083f4:	460b      	mov	r3, r1
 80083f6:	4313      	orrs	r3, r2
 80083f8:	d058      	beq.n	80084ac <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80083fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083fe:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008402:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8008406:	d033      	beq.n	8008470 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8008408:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800840c:	d82c      	bhi.n	8008468 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800840e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008412:	d02f      	beq.n	8008474 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8008414:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008418:	d826      	bhi.n	8008468 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800841a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800841e:	d02b      	beq.n	8008478 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8008420:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008424:	d820      	bhi.n	8008468 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8008426:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800842a:	d012      	beq.n	8008452 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800842c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008430:	d81a      	bhi.n	8008468 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8008432:	2b00      	cmp	r3, #0
 8008434:	d022      	beq.n	800847c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8008436:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800843a:	d115      	bne.n	8008468 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800843c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008440:	3308      	adds	r3, #8
 8008442:	2100      	movs	r1, #0
 8008444:	4618      	mov	r0, r3
 8008446:	f001 fd29 	bl	8009e9c <RCCEx_PLL2_Config>
 800844a:	4603      	mov	r3, r0
 800844c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8008450:	e015      	b.n	800847e <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008452:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008456:	3328      	adds	r3, #40	@ 0x28
 8008458:	2102      	movs	r1, #2
 800845a:	4618      	mov	r0, r3
 800845c:	f001 fdd0 	bl	800a000 <RCCEx_PLL3_Config>
 8008460:	4603      	mov	r3, r0
 8008462:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8008466:	e00a      	b.n	800847e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008468:	2301      	movs	r3, #1
 800846a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800846e:	e006      	b.n	800847e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008470:	bf00      	nop
 8008472:	e004      	b.n	800847e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008474:	bf00      	nop
 8008476:	e002      	b.n	800847e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008478:	bf00      	nop
 800847a:	e000      	b.n	800847e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800847c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800847e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008482:	2b00      	cmp	r3, #0
 8008484:	d10e      	bne.n	80084a4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008486:	4b06      	ldr	r3, [pc, #24]	@ (80084a0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008488:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800848a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800848e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008492:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008496:	4a02      	ldr	r2, [pc, #8]	@ (80084a0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008498:	430b      	orrs	r3, r1
 800849a:	6593      	str	r3, [r2, #88]	@ 0x58
 800849c:	e006      	b.n	80084ac <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800849e:	bf00      	nop
 80084a0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80084a4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80084a8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80084ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80084b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084b4:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80084b8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80084bc:	2300      	movs	r3, #0
 80084be:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80084c2:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80084c6:	460b      	mov	r3, r1
 80084c8:	4313      	orrs	r3, r2
 80084ca:	d055      	beq.n	8008578 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80084cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80084d0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80084d4:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80084d8:	d033      	beq.n	8008542 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80084da:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80084de:	d82c      	bhi.n	800853a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80084e0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80084e4:	d02f      	beq.n	8008546 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80084e6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80084ea:	d826      	bhi.n	800853a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80084ec:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80084f0:	d02b      	beq.n	800854a <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80084f2:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80084f6:	d820      	bhi.n	800853a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80084f8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80084fc:	d012      	beq.n	8008524 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80084fe:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008502:	d81a      	bhi.n	800853a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008504:	2b00      	cmp	r3, #0
 8008506:	d022      	beq.n	800854e <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8008508:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800850c:	d115      	bne.n	800853a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800850e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008512:	3308      	adds	r3, #8
 8008514:	2100      	movs	r1, #0
 8008516:	4618      	mov	r0, r3
 8008518:	f001 fcc0 	bl	8009e9c <RCCEx_PLL2_Config>
 800851c:	4603      	mov	r3, r0
 800851e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8008522:	e015      	b.n	8008550 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008524:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008528:	3328      	adds	r3, #40	@ 0x28
 800852a:	2102      	movs	r1, #2
 800852c:	4618      	mov	r0, r3
 800852e:	f001 fd67 	bl	800a000 <RCCEx_PLL3_Config>
 8008532:	4603      	mov	r3, r0
 8008534:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8008538:	e00a      	b.n	8008550 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800853a:	2301      	movs	r3, #1
 800853c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008540:	e006      	b.n	8008550 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008542:	bf00      	nop
 8008544:	e004      	b.n	8008550 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008546:	bf00      	nop
 8008548:	e002      	b.n	8008550 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800854a:	bf00      	nop
 800854c:	e000      	b.n	8008550 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800854e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008550:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008554:	2b00      	cmp	r3, #0
 8008556:	d10b      	bne.n	8008570 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8008558:	4ba1      	ldr	r3, [pc, #644]	@ (80087e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800855a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800855c:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8008560:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008564:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008568:	4a9d      	ldr	r2, [pc, #628]	@ (80087e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800856a:	430b      	orrs	r3, r1
 800856c:	6593      	str	r3, [r2, #88]	@ 0x58
 800856e:	e003      	b.n	8008578 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008570:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008574:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8008578:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800857c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008580:	f002 0308 	and.w	r3, r2, #8
 8008584:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008588:	2300      	movs	r3, #0
 800858a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800858e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8008592:	460b      	mov	r3, r1
 8008594:	4313      	orrs	r3, r2
 8008596:	d01e      	beq.n	80085d6 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8008598:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800859c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80085a0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80085a4:	d10c      	bne.n	80085c0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80085a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80085aa:	3328      	adds	r3, #40	@ 0x28
 80085ac:	2102      	movs	r1, #2
 80085ae:	4618      	mov	r0, r3
 80085b0:	f001 fd26 	bl	800a000 <RCCEx_PLL3_Config>
 80085b4:	4603      	mov	r3, r0
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d002      	beq.n	80085c0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80085ba:	2301      	movs	r3, #1
 80085bc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80085c0:	4b87      	ldr	r3, [pc, #540]	@ (80087e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80085c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80085c4:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80085c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80085cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80085d0:	4a83      	ldr	r2, [pc, #524]	@ (80087e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80085d2:	430b      	orrs	r3, r1
 80085d4:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80085d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80085da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085de:	f002 0310 	and.w	r3, r2, #16
 80085e2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80085e6:	2300      	movs	r3, #0
 80085e8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80085ec:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80085f0:	460b      	mov	r3, r1
 80085f2:	4313      	orrs	r3, r2
 80085f4:	d01e      	beq.n	8008634 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80085f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80085fa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80085fe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008602:	d10c      	bne.n	800861e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008604:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008608:	3328      	adds	r3, #40	@ 0x28
 800860a:	2102      	movs	r1, #2
 800860c:	4618      	mov	r0, r3
 800860e:	f001 fcf7 	bl	800a000 <RCCEx_PLL3_Config>
 8008612:	4603      	mov	r3, r0
 8008614:	2b00      	cmp	r3, #0
 8008616:	d002      	beq.n	800861e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8008618:	2301      	movs	r3, #1
 800861a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800861e:	4b70      	ldr	r3, [pc, #448]	@ (80087e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008620:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008622:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8008626:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800862a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800862e:	4a6c      	ldr	r2, [pc, #432]	@ (80087e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008630:	430b      	orrs	r3, r1
 8008632:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008634:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800863c:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8008640:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008644:	2300      	movs	r3, #0
 8008646:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800864a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800864e:	460b      	mov	r3, r1
 8008650:	4313      	orrs	r3, r2
 8008652:	d03e      	beq.n	80086d2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8008654:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008658:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800865c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008660:	d022      	beq.n	80086a8 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8008662:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008666:	d81b      	bhi.n	80086a0 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8008668:	2b00      	cmp	r3, #0
 800866a:	d003      	beq.n	8008674 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800866c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008670:	d00b      	beq.n	800868a <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8008672:	e015      	b.n	80086a0 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008674:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008678:	3308      	adds	r3, #8
 800867a:	2100      	movs	r1, #0
 800867c:	4618      	mov	r0, r3
 800867e:	f001 fc0d 	bl	8009e9c <RCCEx_PLL2_Config>
 8008682:	4603      	mov	r3, r0
 8008684:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8008688:	e00f      	b.n	80086aa <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800868a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800868e:	3328      	adds	r3, #40	@ 0x28
 8008690:	2102      	movs	r1, #2
 8008692:	4618      	mov	r0, r3
 8008694:	f001 fcb4 	bl	800a000 <RCCEx_PLL3_Config>
 8008698:	4603      	mov	r3, r0
 800869a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800869e:	e004      	b.n	80086aa <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80086a0:	2301      	movs	r3, #1
 80086a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80086a6:	e000      	b.n	80086aa <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80086a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80086aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d10b      	bne.n	80086ca <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80086b2:	4b4b      	ldr	r3, [pc, #300]	@ (80087e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80086b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80086b6:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80086ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80086be:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80086c2:	4a47      	ldr	r2, [pc, #284]	@ (80087e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80086c4:	430b      	orrs	r3, r1
 80086c6:	6593      	str	r3, [r2, #88]	@ 0x58
 80086c8:	e003      	b.n	80086d2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80086ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80086ce:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80086d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80086d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086da:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80086de:	67bb      	str	r3, [r7, #120]	@ 0x78
 80086e0:	2300      	movs	r3, #0
 80086e2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80086e4:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80086e8:	460b      	mov	r3, r1
 80086ea:	4313      	orrs	r3, r2
 80086ec:	d03b      	beq.n	8008766 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80086ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80086f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80086f6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80086fa:	d01f      	beq.n	800873c <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80086fc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008700:	d818      	bhi.n	8008734 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8008702:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008706:	d003      	beq.n	8008710 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8008708:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800870c:	d007      	beq.n	800871e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800870e:	e011      	b.n	8008734 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008710:	4b33      	ldr	r3, [pc, #204]	@ (80087e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008712:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008714:	4a32      	ldr	r2, [pc, #200]	@ (80087e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008716:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800871a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800871c:	e00f      	b.n	800873e <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800871e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008722:	3328      	adds	r3, #40	@ 0x28
 8008724:	2101      	movs	r1, #1
 8008726:	4618      	mov	r0, r3
 8008728:	f001 fc6a 	bl	800a000 <RCCEx_PLL3_Config>
 800872c:	4603      	mov	r3, r0
 800872e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8008732:	e004      	b.n	800873e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008734:	2301      	movs	r3, #1
 8008736:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800873a:	e000      	b.n	800873e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800873c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800873e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008742:	2b00      	cmp	r3, #0
 8008744:	d10b      	bne.n	800875e <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008746:	4b26      	ldr	r3, [pc, #152]	@ (80087e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008748:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800874a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800874e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008752:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008756:	4a22      	ldr	r2, [pc, #136]	@ (80087e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008758:	430b      	orrs	r3, r1
 800875a:	6553      	str	r3, [r2, #84]	@ 0x54
 800875c:	e003      	b.n	8008766 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800875e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008762:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8008766:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800876a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800876e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8008772:	673b      	str	r3, [r7, #112]	@ 0x70
 8008774:	2300      	movs	r3, #0
 8008776:	677b      	str	r3, [r7, #116]	@ 0x74
 8008778:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800877c:	460b      	mov	r3, r1
 800877e:	4313      	orrs	r3, r2
 8008780:	d034      	beq.n	80087ec <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8008782:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008786:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008788:	2b00      	cmp	r3, #0
 800878a:	d003      	beq.n	8008794 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800878c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008790:	d007      	beq.n	80087a2 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8008792:	e011      	b.n	80087b8 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008794:	4b12      	ldr	r3, [pc, #72]	@ (80087e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008796:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008798:	4a11      	ldr	r2, [pc, #68]	@ (80087e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800879a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800879e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80087a0:	e00e      	b.n	80087c0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80087a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80087a6:	3308      	adds	r3, #8
 80087a8:	2102      	movs	r1, #2
 80087aa:	4618      	mov	r0, r3
 80087ac:	f001 fb76 	bl	8009e9c <RCCEx_PLL2_Config>
 80087b0:	4603      	mov	r3, r0
 80087b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80087b6:	e003      	b.n	80087c0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80087b8:	2301      	movs	r3, #1
 80087ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80087be:	bf00      	nop
    }

    if (ret == HAL_OK)
 80087c0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d10d      	bne.n	80087e4 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80087c8:	4b05      	ldr	r3, [pc, #20]	@ (80087e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80087ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80087cc:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80087d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80087d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80087d6:	4a02      	ldr	r2, [pc, #8]	@ (80087e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80087d8:	430b      	orrs	r3, r1
 80087da:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80087dc:	e006      	b.n	80087ec <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80087de:	bf00      	nop
 80087e0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80087e4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80087e8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80087ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80087f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087f4:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80087f8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80087fa:	2300      	movs	r3, #0
 80087fc:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80087fe:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8008802:	460b      	mov	r3, r1
 8008804:	4313      	orrs	r3, r2
 8008806:	d00c      	beq.n	8008822 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008808:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800880c:	3328      	adds	r3, #40	@ 0x28
 800880e:	2102      	movs	r1, #2
 8008810:	4618      	mov	r0, r3
 8008812:	f001 fbf5 	bl	800a000 <RCCEx_PLL3_Config>
 8008816:	4603      	mov	r3, r0
 8008818:	2b00      	cmp	r3, #0
 800881a:	d002      	beq.n	8008822 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800881c:	2301      	movs	r3, #1
 800881e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8008822:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008826:	e9d3 2300 	ldrd	r2, r3, [r3]
 800882a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800882e:	663b      	str	r3, [r7, #96]	@ 0x60
 8008830:	2300      	movs	r3, #0
 8008832:	667b      	str	r3, [r7, #100]	@ 0x64
 8008834:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8008838:	460b      	mov	r3, r1
 800883a:	4313      	orrs	r3, r2
 800883c:	d038      	beq.n	80088b0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800883e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008842:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008846:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800884a:	d018      	beq.n	800887e <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800884c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008850:	d811      	bhi.n	8008876 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8008852:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008856:	d014      	beq.n	8008882 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8008858:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800885c:	d80b      	bhi.n	8008876 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800885e:	2b00      	cmp	r3, #0
 8008860:	d011      	beq.n	8008886 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8008862:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008866:	d106      	bne.n	8008876 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008868:	4bc3      	ldr	r3, [pc, #780]	@ (8008b78 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800886a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800886c:	4ac2      	ldr	r2, [pc, #776]	@ (8008b78 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800886e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008872:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8008874:	e008      	b.n	8008888 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008876:	2301      	movs	r3, #1
 8008878:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800887c:	e004      	b.n	8008888 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800887e:	bf00      	nop
 8008880:	e002      	b.n	8008888 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8008882:	bf00      	nop
 8008884:	e000      	b.n	8008888 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8008886:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008888:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800888c:	2b00      	cmp	r3, #0
 800888e:	d10b      	bne.n	80088a8 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008890:	4bb9      	ldr	r3, [pc, #740]	@ (8008b78 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008892:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008894:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8008898:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800889c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80088a0:	4ab5      	ldr	r2, [pc, #724]	@ (8008b78 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80088a2:	430b      	orrs	r3, r1
 80088a4:	6553      	str	r3, [r2, #84]	@ 0x54
 80088a6:	e003      	b.n	80088b0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80088a8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80088ac:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80088b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80088b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088b8:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80088bc:	65bb      	str	r3, [r7, #88]	@ 0x58
 80088be:	2300      	movs	r3, #0
 80088c0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80088c2:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80088c6:	460b      	mov	r3, r1
 80088c8:	4313      	orrs	r3, r2
 80088ca:	d009      	beq.n	80088e0 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80088cc:	4baa      	ldr	r3, [pc, #680]	@ (8008b78 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80088ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80088d0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80088d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80088d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80088da:	4aa7      	ldr	r2, [pc, #668]	@ (8008b78 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80088dc:	430b      	orrs	r3, r1
 80088de:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80088e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80088e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088e8:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80088ec:	653b      	str	r3, [r7, #80]	@ 0x50
 80088ee:	2300      	movs	r3, #0
 80088f0:	657b      	str	r3, [r7, #84]	@ 0x54
 80088f2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80088f6:	460b      	mov	r3, r1
 80088f8:	4313      	orrs	r3, r2
 80088fa:	d00a      	beq.n	8008912 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80088fc:	4b9e      	ldr	r3, [pc, #632]	@ (8008b78 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80088fe:	691b      	ldr	r3, [r3, #16]
 8008900:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8008904:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008908:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800890c:	4a9a      	ldr	r2, [pc, #616]	@ (8008b78 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800890e:	430b      	orrs	r3, r1
 8008910:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008912:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800891a:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800891e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008920:	2300      	movs	r3, #0
 8008922:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008924:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8008928:	460b      	mov	r3, r1
 800892a:	4313      	orrs	r3, r2
 800892c:	d009      	beq.n	8008942 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800892e:	4b92      	ldr	r3, [pc, #584]	@ (8008b78 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008930:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008932:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8008936:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800893a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800893c:	4a8e      	ldr	r2, [pc, #568]	@ (8008b78 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800893e:	430b      	orrs	r3, r1
 8008940:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8008942:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800894a:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800894e:	643b      	str	r3, [r7, #64]	@ 0x40
 8008950:	2300      	movs	r3, #0
 8008952:	647b      	str	r3, [r7, #68]	@ 0x44
 8008954:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8008958:	460b      	mov	r3, r1
 800895a:	4313      	orrs	r3, r2
 800895c:	d00e      	beq.n	800897c <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800895e:	4b86      	ldr	r3, [pc, #536]	@ (8008b78 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008960:	691b      	ldr	r3, [r3, #16]
 8008962:	4a85      	ldr	r2, [pc, #532]	@ (8008b78 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008964:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008968:	6113      	str	r3, [r2, #16]
 800896a:	4b83      	ldr	r3, [pc, #524]	@ (8008b78 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800896c:	6919      	ldr	r1, [r3, #16]
 800896e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008972:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8008976:	4a80      	ldr	r2, [pc, #512]	@ (8008b78 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008978:	430b      	orrs	r3, r1
 800897a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800897c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008980:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008984:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8008988:	63bb      	str	r3, [r7, #56]	@ 0x38
 800898a:	2300      	movs	r3, #0
 800898c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800898e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8008992:	460b      	mov	r3, r1
 8008994:	4313      	orrs	r3, r2
 8008996:	d009      	beq.n	80089ac <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8008998:	4b77      	ldr	r3, [pc, #476]	@ (8008b78 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800899a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800899c:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80089a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80089a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80089a6:	4a74      	ldr	r2, [pc, #464]	@ (8008b78 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80089a8:	430b      	orrs	r3, r1
 80089aa:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80089ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80089b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089b4:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80089b8:	633b      	str	r3, [r7, #48]	@ 0x30
 80089ba:	2300      	movs	r3, #0
 80089bc:	637b      	str	r3, [r7, #52]	@ 0x34
 80089be:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80089c2:	460b      	mov	r3, r1
 80089c4:	4313      	orrs	r3, r2
 80089c6:	d00a      	beq.n	80089de <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80089c8:	4b6b      	ldr	r3, [pc, #428]	@ (8008b78 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80089ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80089cc:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80089d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80089d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80089d8:	4a67      	ldr	r2, [pc, #412]	@ (8008b78 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80089da:	430b      	orrs	r3, r1
 80089dc:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80089de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80089e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089e6:	2100      	movs	r1, #0
 80089e8:	62b9      	str	r1, [r7, #40]	@ 0x28
 80089ea:	f003 0301 	and.w	r3, r3, #1
 80089ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80089f0:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80089f4:	460b      	mov	r3, r1
 80089f6:	4313      	orrs	r3, r2
 80089f8:	d011      	beq.n	8008a1e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80089fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80089fe:	3308      	adds	r3, #8
 8008a00:	2100      	movs	r1, #0
 8008a02:	4618      	mov	r0, r3
 8008a04:	f001 fa4a 	bl	8009e9c <RCCEx_PLL2_Config>
 8008a08:	4603      	mov	r3, r0
 8008a0a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8008a0e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d003      	beq.n	8008a1e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a16:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008a1a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8008a1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a26:	2100      	movs	r1, #0
 8008a28:	6239      	str	r1, [r7, #32]
 8008a2a:	f003 0302 	and.w	r3, r3, #2
 8008a2e:	627b      	str	r3, [r7, #36]	@ 0x24
 8008a30:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8008a34:	460b      	mov	r3, r1
 8008a36:	4313      	orrs	r3, r2
 8008a38:	d011      	beq.n	8008a5e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008a3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a3e:	3308      	adds	r3, #8
 8008a40:	2101      	movs	r1, #1
 8008a42:	4618      	mov	r0, r3
 8008a44:	f001 fa2a 	bl	8009e9c <RCCEx_PLL2_Config>
 8008a48:	4603      	mov	r3, r0
 8008a4a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8008a4e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d003      	beq.n	8008a5e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a56:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008a5a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8008a5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a66:	2100      	movs	r1, #0
 8008a68:	61b9      	str	r1, [r7, #24]
 8008a6a:	f003 0304 	and.w	r3, r3, #4
 8008a6e:	61fb      	str	r3, [r7, #28]
 8008a70:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8008a74:	460b      	mov	r3, r1
 8008a76:	4313      	orrs	r3, r2
 8008a78:	d011      	beq.n	8008a9e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008a7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a7e:	3308      	adds	r3, #8
 8008a80:	2102      	movs	r1, #2
 8008a82:	4618      	mov	r0, r3
 8008a84:	f001 fa0a 	bl	8009e9c <RCCEx_PLL2_Config>
 8008a88:	4603      	mov	r3, r0
 8008a8a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8008a8e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d003      	beq.n	8008a9e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a96:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008a9a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8008a9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008aa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008aa6:	2100      	movs	r1, #0
 8008aa8:	6139      	str	r1, [r7, #16]
 8008aaa:	f003 0308 	and.w	r3, r3, #8
 8008aae:	617b      	str	r3, [r7, #20]
 8008ab0:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8008ab4:	460b      	mov	r3, r1
 8008ab6:	4313      	orrs	r3, r2
 8008ab8:	d011      	beq.n	8008ade <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008aba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008abe:	3328      	adds	r3, #40	@ 0x28
 8008ac0:	2100      	movs	r1, #0
 8008ac2:	4618      	mov	r0, r3
 8008ac4:	f001 fa9c 	bl	800a000 <RCCEx_PLL3_Config>
 8008ac8:	4603      	mov	r3, r0
 8008aca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8008ace:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d003      	beq.n	8008ade <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ad6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008ada:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8008ade:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ae6:	2100      	movs	r1, #0
 8008ae8:	60b9      	str	r1, [r7, #8]
 8008aea:	f003 0310 	and.w	r3, r3, #16
 8008aee:	60fb      	str	r3, [r7, #12]
 8008af0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8008af4:	460b      	mov	r3, r1
 8008af6:	4313      	orrs	r3, r2
 8008af8:	d011      	beq.n	8008b1e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008afa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008afe:	3328      	adds	r3, #40	@ 0x28
 8008b00:	2101      	movs	r1, #1
 8008b02:	4618      	mov	r0, r3
 8008b04:	f001 fa7c 	bl	800a000 <RCCEx_PLL3_Config>
 8008b08:	4603      	mov	r3, r0
 8008b0a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8008b0e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d003      	beq.n	8008b1e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b16:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008b1a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8008b1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b26:	2100      	movs	r1, #0
 8008b28:	6039      	str	r1, [r7, #0]
 8008b2a:	f003 0320 	and.w	r3, r3, #32
 8008b2e:	607b      	str	r3, [r7, #4]
 8008b30:	e9d7 1200 	ldrd	r1, r2, [r7]
 8008b34:	460b      	mov	r3, r1
 8008b36:	4313      	orrs	r3, r2
 8008b38:	d011      	beq.n	8008b5e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008b3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b3e:	3328      	adds	r3, #40	@ 0x28
 8008b40:	2102      	movs	r1, #2
 8008b42:	4618      	mov	r0, r3
 8008b44:	f001 fa5c 	bl	800a000 <RCCEx_PLL3_Config>
 8008b48:	4603      	mov	r3, r0
 8008b4a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8008b4e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d003      	beq.n	8008b5e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b56:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008b5a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8008b5e:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d101      	bne.n	8008b6a <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8008b66:	2300      	movs	r3, #0
 8008b68:	e000      	b.n	8008b6c <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8008b6a:	2301      	movs	r3, #1
}
 8008b6c:	4618      	mov	r0, r3
 8008b6e:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8008b72:	46bd      	mov	sp, r7
 8008b74:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008b78:	58024400 	.word	0x58024400

08008b7c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8008b7c:	b580      	push	{r7, lr}
 8008b7e:	b090      	sub	sp, #64	@ 0x40
 8008b80:	af00      	add	r7, sp, #0
 8008b82:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8008b86:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008b8a:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8008b8e:	430b      	orrs	r3, r1
 8008b90:	f040 8094 	bne.w	8008cbc <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8008b94:	4b9e      	ldr	r3, [pc, #632]	@ (8008e10 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008b96:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008b98:	f003 0307 	and.w	r3, r3, #7
 8008b9c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8008b9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ba0:	2b04      	cmp	r3, #4
 8008ba2:	f200 8087 	bhi.w	8008cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8008ba6:	a201      	add	r2, pc, #4	@ (adr r2, 8008bac <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8008ba8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bac:	08008bc1 	.word	0x08008bc1
 8008bb0:	08008be9 	.word	0x08008be9
 8008bb4:	08008c11 	.word	0x08008c11
 8008bb8:	08008cad 	.word	0x08008cad
 8008bbc:	08008c39 	.word	0x08008c39
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008bc0:	4b93      	ldr	r3, [pc, #588]	@ (8008e10 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008bc8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008bcc:	d108      	bne.n	8008be0 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008bce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008bd2:	4618      	mov	r0, r3
 8008bd4:	f001 f810 	bl	8009bf8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008bd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008bda:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008bdc:	f000 bd45 	b.w	800966a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008be0:	2300      	movs	r3, #0
 8008be2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008be4:	f000 bd41 	b.w	800966a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008be8:	4b89      	ldr	r3, [pc, #548]	@ (8008e10 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008bf0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008bf4:	d108      	bne.n	8008c08 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008bf6:	f107 0318 	add.w	r3, r7, #24
 8008bfa:	4618      	mov	r0, r3
 8008bfc:	f000 fd54 	bl	80096a8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008c00:	69bb      	ldr	r3, [r7, #24]
 8008c02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008c04:	f000 bd31 	b.w	800966a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008c08:	2300      	movs	r3, #0
 8008c0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c0c:	f000 bd2d 	b.w	800966a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008c10:	4b7f      	ldr	r3, [pc, #508]	@ (8008e10 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008c18:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008c1c:	d108      	bne.n	8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008c1e:	f107 030c 	add.w	r3, r7, #12
 8008c22:	4618      	mov	r0, r3
 8008c24:	f000 fe94 	bl	8009950 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008c2c:	f000 bd1d 	b.w	800966a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008c30:	2300      	movs	r3, #0
 8008c32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c34:	f000 bd19 	b.w	800966a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008c38:	4b75      	ldr	r3, [pc, #468]	@ (8008e10 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008c3a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008c3c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008c40:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008c42:	4b73      	ldr	r3, [pc, #460]	@ (8008e10 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	f003 0304 	and.w	r3, r3, #4
 8008c4a:	2b04      	cmp	r3, #4
 8008c4c:	d10c      	bne.n	8008c68 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8008c4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d109      	bne.n	8008c68 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008c54:	4b6e      	ldr	r3, [pc, #440]	@ (8008e10 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	08db      	lsrs	r3, r3, #3
 8008c5a:	f003 0303 	and.w	r3, r3, #3
 8008c5e:	4a6d      	ldr	r2, [pc, #436]	@ (8008e14 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008c60:	fa22 f303 	lsr.w	r3, r2, r3
 8008c64:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008c66:	e01f      	b.n	8008ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008c68:	4b69      	ldr	r3, [pc, #420]	@ (8008e10 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008c70:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008c74:	d106      	bne.n	8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8008c76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c78:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008c7c:	d102      	bne.n	8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008c7e:	4b66      	ldr	r3, [pc, #408]	@ (8008e18 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8008c80:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008c82:	e011      	b.n	8008ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008c84:	4b62      	ldr	r3, [pc, #392]	@ (8008e10 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008c8c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008c90:	d106      	bne.n	8008ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8008c92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c94:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008c98:	d102      	bne.n	8008ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008c9a:	4b60      	ldr	r3, [pc, #384]	@ (8008e1c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8008c9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008c9e:	e003      	b.n	8008ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008ca0:	2300      	movs	r3, #0
 8008ca2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008ca4:	f000 bce1 	b.w	800966a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008ca8:	f000 bcdf 	b.w	800966a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008cac:	4b5c      	ldr	r3, [pc, #368]	@ (8008e20 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008cae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008cb0:	f000 bcdb 	b.w	800966a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8008cb4:	2300      	movs	r3, #0
 8008cb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008cb8:	f000 bcd7 	b.w	800966a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8008cbc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008cc0:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8008cc4:	430b      	orrs	r3, r1
 8008cc6:	f040 80ad 	bne.w	8008e24 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8008cca:	4b51      	ldr	r3, [pc, #324]	@ (8008e10 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008ccc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008cce:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8008cd2:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8008cd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cd6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008cda:	d056      	beq.n	8008d8a <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8008cdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cde:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008ce2:	f200 8090 	bhi.w	8008e06 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8008ce6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ce8:	2bc0      	cmp	r3, #192	@ 0xc0
 8008cea:	f000 8088 	beq.w	8008dfe <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8008cee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cf0:	2bc0      	cmp	r3, #192	@ 0xc0
 8008cf2:	f200 8088 	bhi.w	8008e06 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8008cf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cf8:	2b80      	cmp	r3, #128	@ 0x80
 8008cfa:	d032      	beq.n	8008d62 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8008cfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cfe:	2b80      	cmp	r3, #128	@ 0x80
 8008d00:	f200 8081 	bhi.w	8008e06 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8008d04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d003      	beq.n	8008d12 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8008d0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d0c:	2b40      	cmp	r3, #64	@ 0x40
 8008d0e:	d014      	beq.n	8008d3a <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8008d10:	e079      	b.n	8008e06 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008d12:	4b3f      	ldr	r3, [pc, #252]	@ (8008e10 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008d1a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008d1e:	d108      	bne.n	8008d32 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008d20:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008d24:	4618      	mov	r0, r3
 8008d26:	f000 ff67 	bl	8009bf8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008d2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008d2e:	f000 bc9c 	b.w	800966a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008d32:	2300      	movs	r3, #0
 8008d34:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008d36:	f000 bc98 	b.w	800966a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008d3a:	4b35      	ldr	r3, [pc, #212]	@ (8008e10 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008d42:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008d46:	d108      	bne.n	8008d5a <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008d48:	f107 0318 	add.w	r3, r7, #24
 8008d4c:	4618      	mov	r0, r3
 8008d4e:	f000 fcab 	bl	80096a8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008d52:	69bb      	ldr	r3, [r7, #24]
 8008d54:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008d56:	f000 bc88 	b.w	800966a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008d5a:	2300      	movs	r3, #0
 8008d5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008d5e:	f000 bc84 	b.w	800966a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008d62:	4b2b      	ldr	r3, [pc, #172]	@ (8008e10 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008d6a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008d6e:	d108      	bne.n	8008d82 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008d70:	f107 030c 	add.w	r3, r7, #12
 8008d74:	4618      	mov	r0, r3
 8008d76:	f000 fdeb 	bl	8009950 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008d7e:	f000 bc74 	b.w	800966a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008d82:	2300      	movs	r3, #0
 8008d84:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008d86:	f000 bc70 	b.w	800966a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008d8a:	4b21      	ldr	r3, [pc, #132]	@ (8008e10 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008d8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008d8e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008d92:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008d94:	4b1e      	ldr	r3, [pc, #120]	@ (8008e10 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	f003 0304 	and.w	r3, r3, #4
 8008d9c:	2b04      	cmp	r3, #4
 8008d9e:	d10c      	bne.n	8008dba <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8008da0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d109      	bne.n	8008dba <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008da6:	4b1a      	ldr	r3, [pc, #104]	@ (8008e10 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	08db      	lsrs	r3, r3, #3
 8008dac:	f003 0303 	and.w	r3, r3, #3
 8008db0:	4a18      	ldr	r2, [pc, #96]	@ (8008e14 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008db2:	fa22 f303 	lsr.w	r3, r2, r3
 8008db6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008db8:	e01f      	b.n	8008dfa <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008dba:	4b15      	ldr	r3, [pc, #84]	@ (8008e10 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008dc2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008dc6:	d106      	bne.n	8008dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8008dc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008dca:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008dce:	d102      	bne.n	8008dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008dd0:	4b11      	ldr	r3, [pc, #68]	@ (8008e18 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8008dd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008dd4:	e011      	b.n	8008dfa <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008dd6:	4b0e      	ldr	r3, [pc, #56]	@ (8008e10 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008dde:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008de2:	d106      	bne.n	8008df2 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8008de4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008de6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008dea:	d102      	bne.n	8008df2 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008dec:	4b0b      	ldr	r3, [pc, #44]	@ (8008e1c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8008dee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008df0:	e003      	b.n	8008dfa <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008df2:	2300      	movs	r3, #0
 8008df4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008df6:	f000 bc38 	b.w	800966a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008dfa:	f000 bc36 	b.w	800966a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008dfe:	4b08      	ldr	r3, [pc, #32]	@ (8008e20 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008e00:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008e02:	f000 bc32 	b.w	800966a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8008e06:	2300      	movs	r3, #0
 8008e08:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008e0a:	f000 bc2e 	b.w	800966a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008e0e:	bf00      	nop
 8008e10:	58024400 	.word	0x58024400
 8008e14:	03d09000 	.word	0x03d09000
 8008e18:	003d0900 	.word	0x003d0900
 8008e1c:	017d7840 	.word	0x017d7840
 8008e20:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8008e24:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008e28:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8008e2c:	430b      	orrs	r3, r1
 8008e2e:	f040 809c 	bne.w	8008f6a <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8008e32:	4b9e      	ldr	r3, [pc, #632]	@ (80090ac <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008e34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008e36:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8008e3a:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8008e3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e3e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008e42:	d054      	beq.n	8008eee <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8008e44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e46:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008e4a:	f200 808b 	bhi.w	8008f64 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8008e4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e50:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8008e54:	f000 8083 	beq.w	8008f5e <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8008e58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e5a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8008e5e:	f200 8081 	bhi.w	8008f64 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8008e62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e64:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008e68:	d02f      	beq.n	8008eca <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8008e6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e6c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008e70:	d878      	bhi.n	8008f64 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8008e72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d004      	beq.n	8008e82 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8008e78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e7a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008e7e:	d012      	beq.n	8008ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8008e80:	e070      	b.n	8008f64 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008e82:	4b8a      	ldr	r3, [pc, #552]	@ (80090ac <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008e8a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008e8e:	d107      	bne.n	8008ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008e90:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008e94:	4618      	mov	r0, r3
 8008e96:	f000 feaf 	bl	8009bf8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008e9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008e9e:	e3e4      	b.n	800966a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008ea0:	2300      	movs	r3, #0
 8008ea2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ea4:	e3e1      	b.n	800966a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008ea6:	4b81      	ldr	r3, [pc, #516]	@ (80090ac <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008eae:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008eb2:	d107      	bne.n	8008ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008eb4:	f107 0318 	add.w	r3, r7, #24
 8008eb8:	4618      	mov	r0, r3
 8008eba:	f000 fbf5 	bl	80096a8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008ebe:	69bb      	ldr	r3, [r7, #24]
 8008ec0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008ec2:	e3d2      	b.n	800966a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008ec4:	2300      	movs	r3, #0
 8008ec6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ec8:	e3cf      	b.n	800966a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008eca:	4b78      	ldr	r3, [pc, #480]	@ (80090ac <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008ed2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008ed6:	d107      	bne.n	8008ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008ed8:	f107 030c 	add.w	r3, r7, #12
 8008edc:	4618      	mov	r0, r3
 8008ede:	f000 fd37 	bl	8009950 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008ee6:	e3c0      	b.n	800966a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008ee8:	2300      	movs	r3, #0
 8008eea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008eec:	e3bd      	b.n	800966a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008eee:	4b6f      	ldr	r3, [pc, #444]	@ (80090ac <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008ef0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008ef2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008ef6:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008ef8:	4b6c      	ldr	r3, [pc, #432]	@ (80090ac <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	f003 0304 	and.w	r3, r3, #4
 8008f00:	2b04      	cmp	r3, #4
 8008f02:	d10c      	bne.n	8008f1e <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8008f04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d109      	bne.n	8008f1e <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008f0a:	4b68      	ldr	r3, [pc, #416]	@ (80090ac <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	08db      	lsrs	r3, r3, #3
 8008f10:	f003 0303 	and.w	r3, r3, #3
 8008f14:	4a66      	ldr	r2, [pc, #408]	@ (80090b0 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8008f16:	fa22 f303 	lsr.w	r3, r2, r3
 8008f1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008f1c:	e01e      	b.n	8008f5c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008f1e:	4b63      	ldr	r3, [pc, #396]	@ (80090ac <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008f26:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008f2a:	d106      	bne.n	8008f3a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8008f2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f2e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008f32:	d102      	bne.n	8008f3a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008f34:	4b5f      	ldr	r3, [pc, #380]	@ (80090b4 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8008f36:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008f38:	e010      	b.n	8008f5c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008f3a:	4b5c      	ldr	r3, [pc, #368]	@ (80090ac <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008f42:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008f46:	d106      	bne.n	8008f56 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8008f48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f4a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008f4e:	d102      	bne.n	8008f56 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008f50:	4b59      	ldr	r3, [pc, #356]	@ (80090b8 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8008f52:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008f54:	e002      	b.n	8008f5c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008f56:	2300      	movs	r3, #0
 8008f58:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008f5a:	e386      	b.n	800966a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008f5c:	e385      	b.n	800966a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008f5e:	4b57      	ldr	r3, [pc, #348]	@ (80090bc <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8008f60:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008f62:	e382      	b.n	800966a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8008f64:	2300      	movs	r3, #0
 8008f66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008f68:	e37f      	b.n	800966a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8008f6a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008f6e:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8008f72:	430b      	orrs	r3, r1
 8008f74:	f040 80a7 	bne.w	80090c6 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8008f78:	4b4c      	ldr	r3, [pc, #304]	@ (80090ac <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008f7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008f7c:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8008f80:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8008f82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f84:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008f88:	d055      	beq.n	8009036 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8008f8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f8c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008f90:	f200 8096 	bhi.w	80090c0 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8008f94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f96:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008f9a:	f000 8084 	beq.w	80090a6 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8008f9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fa0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008fa4:	f200 808c 	bhi.w	80090c0 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8008fa8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008faa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008fae:	d030      	beq.n	8009012 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8008fb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fb2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008fb6:	f200 8083 	bhi.w	80090c0 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8008fba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d004      	beq.n	8008fca <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8008fc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fc2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008fc6:	d012      	beq.n	8008fee <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8008fc8:	e07a      	b.n	80090c0 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008fca:	4b38      	ldr	r3, [pc, #224]	@ (80090ac <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008fd2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008fd6:	d107      	bne.n	8008fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008fd8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008fdc:	4618      	mov	r0, r3
 8008fde:	f000 fe0b 	bl	8009bf8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008fe2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fe4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008fe6:	e340      	b.n	800966a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008fe8:	2300      	movs	r3, #0
 8008fea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008fec:	e33d      	b.n	800966a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008fee:	4b2f      	ldr	r3, [pc, #188]	@ (80090ac <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008ff6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008ffa:	d107      	bne.n	800900c <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008ffc:	f107 0318 	add.w	r3, r7, #24
 8009000:	4618      	mov	r0, r3
 8009002:	f000 fb51 	bl	80096a8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009006:	69bb      	ldr	r3, [r7, #24]
 8009008:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800900a:	e32e      	b.n	800966a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800900c:	2300      	movs	r3, #0
 800900e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009010:	e32b      	b.n	800966a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009012:	4b26      	ldr	r3, [pc, #152]	@ (80090ac <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800901a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800901e:	d107      	bne.n	8009030 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009020:	f107 030c 	add.w	r3, r7, #12
 8009024:	4618      	mov	r0, r3
 8009026:	f000 fc93 	bl	8009950 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800902e:	e31c      	b.n	800966a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009030:	2300      	movs	r3, #0
 8009032:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009034:	e319      	b.n	800966a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009036:	4b1d      	ldr	r3, [pc, #116]	@ (80090ac <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009038:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800903a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800903e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009040:	4b1a      	ldr	r3, [pc, #104]	@ (80090ac <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	f003 0304 	and.w	r3, r3, #4
 8009048:	2b04      	cmp	r3, #4
 800904a:	d10c      	bne.n	8009066 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800904c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800904e:	2b00      	cmp	r3, #0
 8009050:	d109      	bne.n	8009066 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009052:	4b16      	ldr	r3, [pc, #88]	@ (80090ac <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	08db      	lsrs	r3, r3, #3
 8009058:	f003 0303 	and.w	r3, r3, #3
 800905c:	4a14      	ldr	r2, [pc, #80]	@ (80090b0 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800905e:	fa22 f303 	lsr.w	r3, r2, r3
 8009062:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009064:	e01e      	b.n	80090a4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009066:	4b11      	ldr	r3, [pc, #68]	@ (80090ac <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800906e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009072:	d106      	bne.n	8009082 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8009074:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009076:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800907a:	d102      	bne.n	8009082 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800907c:	4b0d      	ldr	r3, [pc, #52]	@ (80090b4 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800907e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009080:	e010      	b.n	80090a4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009082:	4b0a      	ldr	r3, [pc, #40]	@ (80090ac <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800908a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800908e:	d106      	bne.n	800909e <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8009090:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009092:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009096:	d102      	bne.n	800909e <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009098:	4b07      	ldr	r3, [pc, #28]	@ (80090b8 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800909a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800909c:	e002      	b.n	80090a4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800909e:	2300      	movs	r3, #0
 80090a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80090a2:	e2e2      	b.n	800966a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80090a4:	e2e1      	b.n	800966a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80090a6:	4b05      	ldr	r3, [pc, #20]	@ (80090bc <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80090a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80090aa:	e2de      	b.n	800966a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80090ac:	58024400 	.word	0x58024400
 80090b0:	03d09000 	.word	0x03d09000
 80090b4:	003d0900 	.word	0x003d0900
 80090b8:	017d7840 	.word	0x017d7840
 80090bc:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 80090c0:	2300      	movs	r3, #0
 80090c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80090c4:	e2d1      	b.n	800966a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80090c6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80090ca:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 80090ce:	430b      	orrs	r3, r1
 80090d0:	f040 809c 	bne.w	800920c <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 80090d4:	4b93      	ldr	r3, [pc, #588]	@ (8009324 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80090d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80090d8:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80090dc:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80090de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090e0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80090e4:	d054      	beq.n	8009190 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 80090e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090e8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80090ec:	f200 808b 	bhi.w	8009206 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80090f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090f2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80090f6:	f000 8083 	beq.w	8009200 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 80090fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090fc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009100:	f200 8081 	bhi.w	8009206 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8009104:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009106:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800910a:	d02f      	beq.n	800916c <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800910c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800910e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009112:	d878      	bhi.n	8009206 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8009114:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009116:	2b00      	cmp	r3, #0
 8009118:	d004      	beq.n	8009124 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800911a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800911c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009120:	d012      	beq.n	8009148 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8009122:	e070      	b.n	8009206 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009124:	4b7f      	ldr	r3, [pc, #508]	@ (8009324 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800912c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009130:	d107      	bne.n	8009142 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009132:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009136:	4618      	mov	r0, r3
 8009138:	f000 fd5e 	bl	8009bf8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800913c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800913e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009140:	e293      	b.n	800966a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009142:	2300      	movs	r3, #0
 8009144:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009146:	e290      	b.n	800966a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009148:	4b76      	ldr	r3, [pc, #472]	@ (8009324 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009150:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009154:	d107      	bne.n	8009166 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009156:	f107 0318 	add.w	r3, r7, #24
 800915a:	4618      	mov	r0, r3
 800915c:	f000 faa4 	bl	80096a8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009160:	69bb      	ldr	r3, [r7, #24]
 8009162:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009164:	e281      	b.n	800966a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009166:	2300      	movs	r3, #0
 8009168:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800916a:	e27e      	b.n	800966a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800916c:	4b6d      	ldr	r3, [pc, #436]	@ (8009324 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009174:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009178:	d107      	bne.n	800918a <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800917a:	f107 030c 	add.w	r3, r7, #12
 800917e:	4618      	mov	r0, r3
 8009180:	f000 fbe6 	bl	8009950 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009188:	e26f      	b.n	800966a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800918a:	2300      	movs	r3, #0
 800918c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800918e:	e26c      	b.n	800966a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009190:	4b64      	ldr	r3, [pc, #400]	@ (8009324 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009192:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009194:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009198:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800919a:	4b62      	ldr	r3, [pc, #392]	@ (8009324 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	f003 0304 	and.w	r3, r3, #4
 80091a2:	2b04      	cmp	r3, #4
 80091a4:	d10c      	bne.n	80091c0 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 80091a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d109      	bne.n	80091c0 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80091ac:	4b5d      	ldr	r3, [pc, #372]	@ (8009324 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	08db      	lsrs	r3, r3, #3
 80091b2:	f003 0303 	and.w	r3, r3, #3
 80091b6:	4a5c      	ldr	r2, [pc, #368]	@ (8009328 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 80091b8:	fa22 f303 	lsr.w	r3, r2, r3
 80091bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80091be:	e01e      	b.n	80091fe <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80091c0:	4b58      	ldr	r3, [pc, #352]	@ (8009324 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80091c8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80091cc:	d106      	bne.n	80091dc <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 80091ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80091d0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80091d4:	d102      	bne.n	80091dc <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80091d6:	4b55      	ldr	r3, [pc, #340]	@ (800932c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80091d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80091da:	e010      	b.n	80091fe <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80091dc:	4b51      	ldr	r3, [pc, #324]	@ (8009324 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80091e4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80091e8:	d106      	bne.n	80091f8 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 80091ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80091ec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80091f0:	d102      	bne.n	80091f8 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80091f2:	4b4f      	ldr	r3, [pc, #316]	@ (8009330 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 80091f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80091f6:	e002      	b.n	80091fe <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80091f8:	2300      	movs	r3, #0
 80091fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80091fc:	e235      	b.n	800966a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80091fe:	e234      	b.n	800966a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009200:	4b4c      	ldr	r3, [pc, #304]	@ (8009334 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8009202:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009204:	e231      	b.n	800966a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8009206:	2300      	movs	r3, #0
 8009208:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800920a:	e22e      	b.n	800966a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800920c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009210:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8009214:	430b      	orrs	r3, r1
 8009216:	f040 808f 	bne.w	8009338 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800921a:	4b42      	ldr	r3, [pc, #264]	@ (8009324 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800921c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800921e:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8009222:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8009224:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009226:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800922a:	d06b      	beq.n	8009304 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800922c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800922e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009232:	d874      	bhi.n	800931e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8009234:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009236:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800923a:	d056      	beq.n	80092ea <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800923c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800923e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009242:	d86c      	bhi.n	800931e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8009244:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009246:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800924a:	d03b      	beq.n	80092c4 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800924c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800924e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009252:	d864      	bhi.n	800931e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8009254:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009256:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800925a:	d021      	beq.n	80092a0 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800925c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800925e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009262:	d85c      	bhi.n	800931e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8009264:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009266:	2b00      	cmp	r3, #0
 8009268:	d004      	beq.n	8009274 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800926a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800926c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009270:	d004      	beq.n	800927c <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8009272:	e054      	b.n	800931e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8009274:	f7fe fa4c 	bl	8007710 <HAL_RCC_GetPCLK1Freq>
 8009278:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800927a:	e1f6      	b.n	800966a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800927c:	4b29      	ldr	r3, [pc, #164]	@ (8009324 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009284:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009288:	d107      	bne.n	800929a <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800928a:	f107 0318 	add.w	r3, r7, #24
 800928e:	4618      	mov	r0, r3
 8009290:	f000 fa0a 	bl	80096a8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009294:	69fb      	ldr	r3, [r7, #28]
 8009296:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009298:	e1e7      	b.n	800966a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800929a:	2300      	movs	r3, #0
 800929c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800929e:	e1e4      	b.n	800966a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80092a0:	4b20      	ldr	r3, [pc, #128]	@ (8009324 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80092a8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80092ac:	d107      	bne.n	80092be <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80092ae:	f107 030c 	add.w	r3, r7, #12
 80092b2:	4618      	mov	r0, r3
 80092b4:	f000 fb4c 	bl	8009950 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80092b8:	693b      	ldr	r3, [r7, #16]
 80092ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80092bc:	e1d5      	b.n	800966a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80092be:	2300      	movs	r3, #0
 80092c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80092c2:	e1d2      	b.n	800966a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80092c4:	4b17      	ldr	r3, [pc, #92]	@ (8009324 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	f003 0304 	and.w	r3, r3, #4
 80092cc:	2b04      	cmp	r3, #4
 80092ce:	d109      	bne.n	80092e4 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80092d0:	4b14      	ldr	r3, [pc, #80]	@ (8009324 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	08db      	lsrs	r3, r3, #3
 80092d6:	f003 0303 	and.w	r3, r3, #3
 80092da:	4a13      	ldr	r2, [pc, #76]	@ (8009328 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 80092dc:	fa22 f303 	lsr.w	r3, r2, r3
 80092e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80092e2:	e1c2      	b.n	800966a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80092e4:	2300      	movs	r3, #0
 80092e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80092e8:	e1bf      	b.n	800966a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80092ea:	4b0e      	ldr	r3, [pc, #56]	@ (8009324 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80092f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80092f6:	d102      	bne.n	80092fe <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 80092f8:	4b0c      	ldr	r3, [pc, #48]	@ (800932c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80092fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80092fc:	e1b5      	b.n	800966a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80092fe:	2300      	movs	r3, #0
 8009300:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009302:	e1b2      	b.n	800966a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009304:	4b07      	ldr	r3, [pc, #28]	@ (8009324 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800930c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009310:	d102      	bne.n	8009318 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8009312:	4b07      	ldr	r3, [pc, #28]	@ (8009330 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8009314:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009316:	e1a8      	b.n	800966a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009318:	2300      	movs	r3, #0
 800931a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800931c:	e1a5      	b.n	800966a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800931e:	2300      	movs	r3, #0
 8009320:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009322:	e1a2      	b.n	800966a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009324:	58024400 	.word	0x58024400
 8009328:	03d09000 	.word	0x03d09000
 800932c:	003d0900 	.word	0x003d0900
 8009330:	017d7840 	.word	0x017d7840
 8009334:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8009338:	e9d7 2300 	ldrd	r2, r3, [r7]
 800933c:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8009340:	430b      	orrs	r3, r1
 8009342:	d173      	bne.n	800942c <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8009344:	4b9c      	ldr	r3, [pc, #624]	@ (80095b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009346:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009348:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800934c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800934e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009350:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009354:	d02f      	beq.n	80093b6 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8009356:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009358:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800935c:	d863      	bhi.n	8009426 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800935e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009360:	2b00      	cmp	r3, #0
 8009362:	d004      	beq.n	800936e <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8009364:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009366:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800936a:	d012      	beq.n	8009392 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800936c:	e05b      	b.n	8009426 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800936e:	4b92      	ldr	r3, [pc, #584]	@ (80095b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009376:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800937a:	d107      	bne.n	800938c <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800937c:	f107 0318 	add.w	r3, r7, #24
 8009380:	4618      	mov	r0, r3
 8009382:	f000 f991 	bl	80096a8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009386:	69bb      	ldr	r3, [r7, #24]
 8009388:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800938a:	e16e      	b.n	800966a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800938c:	2300      	movs	r3, #0
 800938e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009390:	e16b      	b.n	800966a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009392:	4b89      	ldr	r3, [pc, #548]	@ (80095b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800939a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800939e:	d107      	bne.n	80093b0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80093a0:	f107 030c 	add.w	r3, r7, #12
 80093a4:	4618      	mov	r0, r3
 80093a6:	f000 fad3 	bl	8009950 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80093aa:	697b      	ldr	r3, [r7, #20]
 80093ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80093ae:	e15c      	b.n	800966a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80093b0:	2300      	movs	r3, #0
 80093b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80093b4:	e159      	b.n	800966a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80093b6:	4b80      	ldr	r3, [pc, #512]	@ (80095b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80093b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80093ba:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80093be:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80093c0:	4b7d      	ldr	r3, [pc, #500]	@ (80095b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	f003 0304 	and.w	r3, r3, #4
 80093c8:	2b04      	cmp	r3, #4
 80093ca:	d10c      	bne.n	80093e6 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 80093cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d109      	bne.n	80093e6 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80093d2:	4b79      	ldr	r3, [pc, #484]	@ (80095b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	08db      	lsrs	r3, r3, #3
 80093d8:	f003 0303 	and.w	r3, r3, #3
 80093dc:	4a77      	ldr	r2, [pc, #476]	@ (80095bc <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 80093de:	fa22 f303 	lsr.w	r3, r2, r3
 80093e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80093e4:	e01e      	b.n	8009424 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80093e6:	4b74      	ldr	r3, [pc, #464]	@ (80095b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80093ee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80093f2:	d106      	bne.n	8009402 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 80093f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80093f6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80093fa:	d102      	bne.n	8009402 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80093fc:	4b70      	ldr	r3, [pc, #448]	@ (80095c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 80093fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009400:	e010      	b.n	8009424 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009402:	4b6d      	ldr	r3, [pc, #436]	@ (80095b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800940a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800940e:	d106      	bne.n	800941e <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8009410:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009412:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009416:	d102      	bne.n	800941e <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009418:	4b6a      	ldr	r3, [pc, #424]	@ (80095c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800941a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800941c:	e002      	b.n	8009424 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800941e:	2300      	movs	r3, #0
 8009420:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8009422:	e122      	b.n	800966a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009424:	e121      	b.n	800966a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8009426:	2300      	movs	r3, #0
 8009428:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800942a:	e11e      	b.n	800966a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800942c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009430:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8009434:	430b      	orrs	r3, r1
 8009436:	d133      	bne.n	80094a0 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8009438:	4b5f      	ldr	r3, [pc, #380]	@ (80095b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800943a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800943c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009440:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8009442:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009444:	2b00      	cmp	r3, #0
 8009446:	d004      	beq.n	8009452 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8009448:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800944a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800944e:	d012      	beq.n	8009476 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8009450:	e023      	b.n	800949a <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009452:	4b59      	ldr	r3, [pc, #356]	@ (80095b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800945a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800945e:	d107      	bne.n	8009470 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009460:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009464:	4618      	mov	r0, r3
 8009466:	f000 fbc7 	bl	8009bf8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800946a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800946c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800946e:	e0fc      	b.n	800966a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009470:	2300      	movs	r3, #0
 8009472:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009474:	e0f9      	b.n	800966a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009476:	4b50      	ldr	r3, [pc, #320]	@ (80095b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800947e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009482:	d107      	bne.n	8009494 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009484:	f107 0318 	add.w	r3, r7, #24
 8009488:	4618      	mov	r0, r3
 800948a:	f000 f90d 	bl	80096a8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800948e:	6a3b      	ldr	r3, [r7, #32]
 8009490:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009492:	e0ea      	b.n	800966a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009494:	2300      	movs	r3, #0
 8009496:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009498:	e0e7      	b.n	800966a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800949a:	2300      	movs	r3, #0
 800949c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800949e:	e0e4      	b.n	800966a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80094a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80094a4:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 80094a8:	430b      	orrs	r3, r1
 80094aa:	f040 808d 	bne.w	80095c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 80094ae:	4b42      	ldr	r3, [pc, #264]	@ (80095b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80094b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80094b2:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 80094b6:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80094b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80094be:	d06b      	beq.n	8009598 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 80094c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80094c6:	d874      	bhi.n	80095b2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80094c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80094ce:	d056      	beq.n	800957e <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 80094d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80094d6:	d86c      	bhi.n	80095b2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80094d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094da:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80094de:	d03b      	beq.n	8009558 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 80094e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094e2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80094e6:	d864      	bhi.n	80095b2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80094e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094ea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80094ee:	d021      	beq.n	8009534 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 80094f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094f2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80094f6:	d85c      	bhi.n	80095b2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80094f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d004      	beq.n	8009508 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 80094fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009500:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009504:	d004      	beq.n	8009510 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8009506:	e054      	b.n	80095b2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8009508:	f000 f8b8 	bl	800967c <HAL_RCCEx_GetD3PCLK1Freq>
 800950c:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800950e:	e0ac      	b.n	800966a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009510:	4b29      	ldr	r3, [pc, #164]	@ (80095b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009518:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800951c:	d107      	bne.n	800952e <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800951e:	f107 0318 	add.w	r3, r7, #24
 8009522:	4618      	mov	r0, r3
 8009524:	f000 f8c0 	bl	80096a8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009528:	69fb      	ldr	r3, [r7, #28]
 800952a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800952c:	e09d      	b.n	800966a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800952e:	2300      	movs	r3, #0
 8009530:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009532:	e09a      	b.n	800966a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009534:	4b20      	ldr	r3, [pc, #128]	@ (80095b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800953c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009540:	d107      	bne.n	8009552 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009542:	f107 030c 	add.w	r3, r7, #12
 8009546:	4618      	mov	r0, r3
 8009548:	f000 fa02 	bl	8009950 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800954c:	693b      	ldr	r3, [r7, #16]
 800954e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009550:	e08b      	b.n	800966a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009552:	2300      	movs	r3, #0
 8009554:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009556:	e088      	b.n	800966a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009558:	4b17      	ldr	r3, [pc, #92]	@ (80095b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	f003 0304 	and.w	r3, r3, #4
 8009560:	2b04      	cmp	r3, #4
 8009562:	d109      	bne.n	8009578 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009564:	4b14      	ldr	r3, [pc, #80]	@ (80095b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	08db      	lsrs	r3, r3, #3
 800956a:	f003 0303 	and.w	r3, r3, #3
 800956e:	4a13      	ldr	r2, [pc, #76]	@ (80095bc <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8009570:	fa22 f303 	lsr.w	r3, r2, r3
 8009574:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009576:	e078      	b.n	800966a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009578:	2300      	movs	r3, #0
 800957a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800957c:	e075      	b.n	800966a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800957e:	4b0e      	ldr	r3, [pc, #56]	@ (80095b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009586:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800958a:	d102      	bne.n	8009592 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800958c:	4b0c      	ldr	r3, [pc, #48]	@ (80095c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800958e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009590:	e06b      	b.n	800966a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009592:	2300      	movs	r3, #0
 8009594:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009596:	e068      	b.n	800966a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009598:	4b07      	ldr	r3, [pc, #28]	@ (80095b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80095a0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80095a4:	d102      	bne.n	80095ac <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 80095a6:	4b07      	ldr	r3, [pc, #28]	@ (80095c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 80095a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80095aa:	e05e      	b.n	800966a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80095ac:	2300      	movs	r3, #0
 80095ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80095b0:	e05b      	b.n	800966a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 80095b2:	2300      	movs	r3, #0
 80095b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80095b6:	e058      	b.n	800966a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80095b8:	58024400 	.word	0x58024400
 80095bc:	03d09000 	.word	0x03d09000
 80095c0:	003d0900 	.word	0x003d0900
 80095c4:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 80095c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80095cc:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 80095d0:	430b      	orrs	r3, r1
 80095d2:	d148      	bne.n	8009666 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 80095d4:	4b27      	ldr	r3, [pc, #156]	@ (8009674 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80095d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80095d8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80095dc:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80095de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095e0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80095e4:	d02a      	beq.n	800963c <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 80095e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095e8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80095ec:	d838      	bhi.n	8009660 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 80095ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d004      	beq.n	80095fe <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 80095f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095f6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80095fa:	d00d      	beq.n	8009618 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 80095fc:	e030      	b.n	8009660 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80095fe:	4b1d      	ldr	r3, [pc, #116]	@ (8009674 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009606:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800960a:	d102      	bne.n	8009612 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800960c:	4b1a      	ldr	r3, [pc, #104]	@ (8009678 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800960e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009610:	e02b      	b.n	800966a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009612:	2300      	movs	r3, #0
 8009614:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009616:	e028      	b.n	800966a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009618:	4b16      	ldr	r3, [pc, #88]	@ (8009674 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009620:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009624:	d107      	bne.n	8009636 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009626:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800962a:	4618      	mov	r0, r3
 800962c:	f000 fae4 	bl	8009bf8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009630:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009632:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009634:	e019      	b.n	800966a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009636:	2300      	movs	r3, #0
 8009638:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800963a:	e016      	b.n	800966a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800963c:	4b0d      	ldr	r3, [pc, #52]	@ (8009674 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009644:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009648:	d107      	bne.n	800965a <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800964a:	f107 0318 	add.w	r3, r7, #24
 800964e:	4618      	mov	r0, r3
 8009650:	f000 f82a 	bl	80096a8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009654:	69fb      	ldr	r3, [r7, #28]
 8009656:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009658:	e007      	b.n	800966a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800965a:	2300      	movs	r3, #0
 800965c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800965e:	e004      	b.n	800966a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8009660:	2300      	movs	r3, #0
 8009662:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009664:	e001      	b.n	800966a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8009666:	2300      	movs	r3, #0
 8009668:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800966a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800966c:	4618      	mov	r0, r3
 800966e:	3740      	adds	r7, #64	@ 0x40
 8009670:	46bd      	mov	sp, r7
 8009672:	bd80      	pop	{r7, pc}
 8009674:	58024400 	.word	0x58024400
 8009678:	017d7840 	.word	0x017d7840

0800967c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800967c:	b580      	push	{r7, lr}
 800967e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8009680:	f7fe f816 	bl	80076b0 <HAL_RCC_GetHCLKFreq>
 8009684:	4602      	mov	r2, r0
 8009686:	4b06      	ldr	r3, [pc, #24]	@ (80096a0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8009688:	6a1b      	ldr	r3, [r3, #32]
 800968a:	091b      	lsrs	r3, r3, #4
 800968c:	f003 0307 	and.w	r3, r3, #7
 8009690:	4904      	ldr	r1, [pc, #16]	@ (80096a4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8009692:	5ccb      	ldrb	r3, [r1, r3]
 8009694:	f003 031f 	and.w	r3, r3, #31
 8009698:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800969c:	4618      	mov	r0, r3
 800969e:	bd80      	pop	{r7, pc}
 80096a0:	58024400 	.word	0x58024400
 80096a4:	080126b0 	.word	0x080126b0

080096a8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80096a8:	b480      	push	{r7}
 80096aa:	b089      	sub	sp, #36	@ 0x24
 80096ac:	af00      	add	r7, sp, #0
 80096ae:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80096b0:	4ba1      	ldr	r3, [pc, #644]	@ (8009938 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80096b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80096b4:	f003 0303 	and.w	r3, r3, #3
 80096b8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80096ba:	4b9f      	ldr	r3, [pc, #636]	@ (8009938 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80096bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80096be:	0b1b      	lsrs	r3, r3, #12
 80096c0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80096c4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80096c6:	4b9c      	ldr	r3, [pc, #624]	@ (8009938 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80096c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80096ca:	091b      	lsrs	r3, r3, #4
 80096cc:	f003 0301 	and.w	r3, r3, #1
 80096d0:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80096d2:	4b99      	ldr	r3, [pc, #612]	@ (8009938 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80096d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80096d6:	08db      	lsrs	r3, r3, #3
 80096d8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80096dc:	693a      	ldr	r2, [r7, #16]
 80096de:	fb02 f303 	mul.w	r3, r2, r3
 80096e2:	ee07 3a90 	vmov	s15, r3
 80096e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096ea:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80096ee:	697b      	ldr	r3, [r7, #20]
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	f000 8111 	beq.w	8009918 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80096f6:	69bb      	ldr	r3, [r7, #24]
 80096f8:	2b02      	cmp	r3, #2
 80096fa:	f000 8083 	beq.w	8009804 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80096fe:	69bb      	ldr	r3, [r7, #24]
 8009700:	2b02      	cmp	r3, #2
 8009702:	f200 80a1 	bhi.w	8009848 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8009706:	69bb      	ldr	r3, [r7, #24]
 8009708:	2b00      	cmp	r3, #0
 800970a:	d003      	beq.n	8009714 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800970c:	69bb      	ldr	r3, [r7, #24]
 800970e:	2b01      	cmp	r3, #1
 8009710:	d056      	beq.n	80097c0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8009712:	e099      	b.n	8009848 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009714:	4b88      	ldr	r3, [pc, #544]	@ (8009938 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	f003 0320 	and.w	r3, r3, #32
 800971c:	2b00      	cmp	r3, #0
 800971e:	d02d      	beq.n	800977c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009720:	4b85      	ldr	r3, [pc, #532]	@ (8009938 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	08db      	lsrs	r3, r3, #3
 8009726:	f003 0303 	and.w	r3, r3, #3
 800972a:	4a84      	ldr	r2, [pc, #528]	@ (800993c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800972c:	fa22 f303 	lsr.w	r3, r2, r3
 8009730:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009732:	68bb      	ldr	r3, [r7, #8]
 8009734:	ee07 3a90 	vmov	s15, r3
 8009738:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800973c:	697b      	ldr	r3, [r7, #20]
 800973e:	ee07 3a90 	vmov	s15, r3
 8009742:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009746:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800974a:	4b7b      	ldr	r3, [pc, #492]	@ (8009938 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800974c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800974e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009752:	ee07 3a90 	vmov	s15, r3
 8009756:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800975a:	ed97 6a03 	vldr	s12, [r7, #12]
 800975e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8009940 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009762:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009766:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800976a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800976e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009772:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009776:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800977a:	e087      	b.n	800988c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800977c:	697b      	ldr	r3, [r7, #20]
 800977e:	ee07 3a90 	vmov	s15, r3
 8009782:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009786:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8009944 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800978a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800978e:	4b6a      	ldr	r3, [pc, #424]	@ (8009938 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009790:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009792:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009796:	ee07 3a90 	vmov	s15, r3
 800979a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800979e:	ed97 6a03 	vldr	s12, [r7, #12]
 80097a2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8009940 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80097a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80097aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80097ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80097b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80097b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80097ba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80097be:	e065      	b.n	800988c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80097c0:	697b      	ldr	r3, [r7, #20]
 80097c2:	ee07 3a90 	vmov	s15, r3
 80097c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80097ca:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8009948 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80097ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80097d2:	4b59      	ldr	r3, [pc, #356]	@ (8009938 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80097d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80097d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80097da:	ee07 3a90 	vmov	s15, r3
 80097de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80097e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80097e6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8009940 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80097ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80097ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80097f2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80097f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80097fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80097fe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009802:	e043      	b.n	800988c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009804:	697b      	ldr	r3, [r7, #20]
 8009806:	ee07 3a90 	vmov	s15, r3
 800980a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800980e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800994c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8009812:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009816:	4b48      	ldr	r3, [pc, #288]	@ (8009938 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009818:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800981a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800981e:	ee07 3a90 	vmov	s15, r3
 8009822:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009826:	ed97 6a03 	vldr	s12, [r7, #12]
 800982a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8009940 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800982e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009832:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009836:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800983a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800983e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009842:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009846:	e021      	b.n	800988c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009848:	697b      	ldr	r3, [r7, #20]
 800984a:	ee07 3a90 	vmov	s15, r3
 800984e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009852:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8009948 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009856:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800985a:	4b37      	ldr	r3, [pc, #220]	@ (8009938 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800985c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800985e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009862:	ee07 3a90 	vmov	s15, r3
 8009866:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800986a:	ed97 6a03 	vldr	s12, [r7, #12]
 800986e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8009940 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009872:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009876:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800987a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800987e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009882:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009886:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800988a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800988c:	4b2a      	ldr	r3, [pc, #168]	@ (8009938 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800988e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009890:	0a5b      	lsrs	r3, r3, #9
 8009892:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009896:	ee07 3a90 	vmov	s15, r3
 800989a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800989e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80098a2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80098a6:	edd7 6a07 	vldr	s13, [r7, #28]
 80098aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80098ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80098b2:	ee17 2a90 	vmov	r2, s15
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80098ba:	4b1f      	ldr	r3, [pc, #124]	@ (8009938 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80098bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80098be:	0c1b      	lsrs	r3, r3, #16
 80098c0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80098c4:	ee07 3a90 	vmov	s15, r3
 80098c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80098cc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80098d0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80098d4:	edd7 6a07 	vldr	s13, [r7, #28]
 80098d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80098dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80098e0:	ee17 2a90 	vmov	r2, s15
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80098e8:	4b13      	ldr	r3, [pc, #76]	@ (8009938 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80098ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80098ec:	0e1b      	lsrs	r3, r3, #24
 80098ee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80098f2:	ee07 3a90 	vmov	s15, r3
 80098f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80098fa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80098fe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009902:	edd7 6a07 	vldr	s13, [r7, #28]
 8009906:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800990a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800990e:	ee17 2a90 	vmov	r2, s15
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8009916:	e008      	b.n	800992a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	2200      	movs	r2, #0
 800991c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	2200      	movs	r2, #0
 8009922:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	2200      	movs	r2, #0
 8009928:	609a      	str	r2, [r3, #8]
}
 800992a:	bf00      	nop
 800992c:	3724      	adds	r7, #36	@ 0x24
 800992e:	46bd      	mov	sp, r7
 8009930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009934:	4770      	bx	lr
 8009936:	bf00      	nop
 8009938:	58024400 	.word	0x58024400
 800993c:	03d09000 	.word	0x03d09000
 8009940:	46000000 	.word	0x46000000
 8009944:	4c742400 	.word	0x4c742400
 8009948:	4a742400 	.word	0x4a742400
 800994c:	4bbebc20 	.word	0x4bbebc20

08009950 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8009950:	b480      	push	{r7}
 8009952:	b089      	sub	sp, #36	@ 0x24
 8009954:	af00      	add	r7, sp, #0
 8009956:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009958:	4ba1      	ldr	r3, [pc, #644]	@ (8009be0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800995a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800995c:	f003 0303 	and.w	r3, r3, #3
 8009960:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8009962:	4b9f      	ldr	r3, [pc, #636]	@ (8009be0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009964:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009966:	0d1b      	lsrs	r3, r3, #20
 8009968:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800996c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800996e:	4b9c      	ldr	r3, [pc, #624]	@ (8009be0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009970:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009972:	0a1b      	lsrs	r3, r3, #8
 8009974:	f003 0301 	and.w	r3, r3, #1
 8009978:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800997a:	4b99      	ldr	r3, [pc, #612]	@ (8009be0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800997c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800997e:	08db      	lsrs	r3, r3, #3
 8009980:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009984:	693a      	ldr	r2, [r7, #16]
 8009986:	fb02 f303 	mul.w	r3, r2, r3
 800998a:	ee07 3a90 	vmov	s15, r3
 800998e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009992:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8009996:	697b      	ldr	r3, [r7, #20]
 8009998:	2b00      	cmp	r3, #0
 800999a:	f000 8111 	beq.w	8009bc0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800999e:	69bb      	ldr	r3, [r7, #24]
 80099a0:	2b02      	cmp	r3, #2
 80099a2:	f000 8083 	beq.w	8009aac <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80099a6:	69bb      	ldr	r3, [r7, #24]
 80099a8:	2b02      	cmp	r3, #2
 80099aa:	f200 80a1 	bhi.w	8009af0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80099ae:	69bb      	ldr	r3, [r7, #24]
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d003      	beq.n	80099bc <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80099b4:	69bb      	ldr	r3, [r7, #24]
 80099b6:	2b01      	cmp	r3, #1
 80099b8:	d056      	beq.n	8009a68 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80099ba:	e099      	b.n	8009af0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80099bc:	4b88      	ldr	r3, [pc, #544]	@ (8009be0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	f003 0320 	and.w	r3, r3, #32
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d02d      	beq.n	8009a24 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80099c8:	4b85      	ldr	r3, [pc, #532]	@ (8009be0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	08db      	lsrs	r3, r3, #3
 80099ce:	f003 0303 	and.w	r3, r3, #3
 80099d2:	4a84      	ldr	r2, [pc, #528]	@ (8009be4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80099d4:	fa22 f303 	lsr.w	r3, r2, r3
 80099d8:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80099da:	68bb      	ldr	r3, [r7, #8]
 80099dc:	ee07 3a90 	vmov	s15, r3
 80099e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80099e4:	697b      	ldr	r3, [r7, #20]
 80099e6:	ee07 3a90 	vmov	s15, r3
 80099ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80099f2:	4b7b      	ldr	r3, [pc, #492]	@ (8009be0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80099f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80099f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80099fa:	ee07 3a90 	vmov	s15, r3
 80099fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a02:	ed97 6a03 	vldr	s12, [r7, #12]
 8009a06:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8009be8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009a0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009a0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009a12:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009a16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009a1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a1e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009a22:	e087      	b.n	8009b34 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009a24:	697b      	ldr	r3, [r7, #20]
 8009a26:	ee07 3a90 	vmov	s15, r3
 8009a2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a2e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8009bec <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8009a32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009a36:	4b6a      	ldr	r3, [pc, #424]	@ (8009be0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009a38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a3e:	ee07 3a90 	vmov	s15, r3
 8009a42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a46:	ed97 6a03 	vldr	s12, [r7, #12]
 8009a4a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8009be8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009a4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009a52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009a56:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009a5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009a5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a62:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009a66:	e065      	b.n	8009b34 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009a68:	697b      	ldr	r3, [r7, #20]
 8009a6a:	ee07 3a90 	vmov	s15, r3
 8009a6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a72:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8009bf0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009a76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009a7a:	4b59      	ldr	r3, [pc, #356]	@ (8009be0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009a7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a82:	ee07 3a90 	vmov	s15, r3
 8009a86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a8a:	ed97 6a03 	vldr	s12, [r7, #12]
 8009a8e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8009be8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009a92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009a96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009a9a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009a9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009aa2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009aa6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009aaa:	e043      	b.n	8009b34 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009aac:	697b      	ldr	r3, [r7, #20]
 8009aae:	ee07 3a90 	vmov	s15, r3
 8009ab2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ab6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8009bf4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8009aba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009abe:	4b48      	ldr	r3, [pc, #288]	@ (8009be0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009ac0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009ac2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ac6:	ee07 3a90 	vmov	s15, r3
 8009aca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009ace:	ed97 6a03 	vldr	s12, [r7, #12]
 8009ad2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8009be8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009ad6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009ada:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009ade:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009ae2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009ae6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009aea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009aee:	e021      	b.n	8009b34 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009af0:	697b      	ldr	r3, [r7, #20]
 8009af2:	ee07 3a90 	vmov	s15, r3
 8009af6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009afa:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8009bf0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009afe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b02:	4b37      	ldr	r3, [pc, #220]	@ (8009be0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009b04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009b06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b0a:	ee07 3a90 	vmov	s15, r3
 8009b0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b12:	ed97 6a03 	vldr	s12, [r7, #12]
 8009b16:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8009be8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009b1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009b1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009b22:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009b26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009b2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b2e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009b32:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8009b34:	4b2a      	ldr	r3, [pc, #168]	@ (8009be0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009b36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009b38:	0a5b      	lsrs	r3, r3, #9
 8009b3a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009b3e:	ee07 3a90 	vmov	s15, r3
 8009b42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b46:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009b4a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009b4e:	edd7 6a07 	vldr	s13, [r7, #28]
 8009b52:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009b56:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009b5a:	ee17 2a90 	vmov	r2, s15
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8009b62:	4b1f      	ldr	r3, [pc, #124]	@ (8009be0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009b64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009b66:	0c1b      	lsrs	r3, r3, #16
 8009b68:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009b6c:	ee07 3a90 	vmov	s15, r3
 8009b70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b74:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009b78:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009b7c:	edd7 6a07 	vldr	s13, [r7, #28]
 8009b80:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009b84:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009b88:	ee17 2a90 	vmov	r2, s15
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8009b90:	4b13      	ldr	r3, [pc, #76]	@ (8009be0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009b92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009b94:	0e1b      	lsrs	r3, r3, #24
 8009b96:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009b9a:	ee07 3a90 	vmov	s15, r3
 8009b9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ba2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009ba6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009baa:	edd7 6a07 	vldr	s13, [r7, #28]
 8009bae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009bb2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009bb6:	ee17 2a90 	vmov	r2, s15
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8009bbe:	e008      	b.n	8009bd2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	2200      	movs	r2, #0
 8009bc4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	2200      	movs	r2, #0
 8009bca:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	2200      	movs	r2, #0
 8009bd0:	609a      	str	r2, [r3, #8]
}
 8009bd2:	bf00      	nop
 8009bd4:	3724      	adds	r7, #36	@ 0x24
 8009bd6:	46bd      	mov	sp, r7
 8009bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bdc:	4770      	bx	lr
 8009bde:	bf00      	nop
 8009be0:	58024400 	.word	0x58024400
 8009be4:	03d09000 	.word	0x03d09000
 8009be8:	46000000 	.word	0x46000000
 8009bec:	4c742400 	.word	0x4c742400
 8009bf0:	4a742400 	.word	0x4a742400
 8009bf4:	4bbebc20 	.word	0x4bbebc20

08009bf8 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8009bf8:	b480      	push	{r7}
 8009bfa:	b089      	sub	sp, #36	@ 0x24
 8009bfc:	af00      	add	r7, sp, #0
 8009bfe:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009c00:	4ba0      	ldr	r3, [pc, #640]	@ (8009e84 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009c02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c04:	f003 0303 	and.w	r3, r3, #3
 8009c08:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8009c0a:	4b9e      	ldr	r3, [pc, #632]	@ (8009e84 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009c0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c0e:	091b      	lsrs	r3, r3, #4
 8009c10:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009c14:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8009c16:	4b9b      	ldr	r3, [pc, #620]	@ (8009e84 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009c18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c1a:	f003 0301 	and.w	r3, r3, #1
 8009c1e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8009c20:	4b98      	ldr	r3, [pc, #608]	@ (8009e84 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009c22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009c24:	08db      	lsrs	r3, r3, #3
 8009c26:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009c2a:	693a      	ldr	r2, [r7, #16]
 8009c2c:	fb02 f303 	mul.w	r3, r2, r3
 8009c30:	ee07 3a90 	vmov	s15, r3
 8009c34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c38:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8009c3c:	697b      	ldr	r3, [r7, #20]
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	f000 8111 	beq.w	8009e66 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8009c44:	69bb      	ldr	r3, [r7, #24]
 8009c46:	2b02      	cmp	r3, #2
 8009c48:	f000 8083 	beq.w	8009d52 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8009c4c:	69bb      	ldr	r3, [r7, #24]
 8009c4e:	2b02      	cmp	r3, #2
 8009c50:	f200 80a1 	bhi.w	8009d96 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8009c54:	69bb      	ldr	r3, [r7, #24]
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d003      	beq.n	8009c62 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8009c5a:	69bb      	ldr	r3, [r7, #24]
 8009c5c:	2b01      	cmp	r3, #1
 8009c5e:	d056      	beq.n	8009d0e <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8009c60:	e099      	b.n	8009d96 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009c62:	4b88      	ldr	r3, [pc, #544]	@ (8009e84 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	f003 0320 	and.w	r3, r3, #32
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d02d      	beq.n	8009cca <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009c6e:	4b85      	ldr	r3, [pc, #532]	@ (8009e84 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	08db      	lsrs	r3, r3, #3
 8009c74:	f003 0303 	and.w	r3, r3, #3
 8009c78:	4a83      	ldr	r2, [pc, #524]	@ (8009e88 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8009c7a:	fa22 f303 	lsr.w	r3, r2, r3
 8009c7e:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009c80:	68bb      	ldr	r3, [r7, #8]
 8009c82:	ee07 3a90 	vmov	s15, r3
 8009c86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c8a:	697b      	ldr	r3, [r7, #20]
 8009c8c:	ee07 3a90 	vmov	s15, r3
 8009c90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c94:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009c98:	4b7a      	ldr	r3, [pc, #488]	@ (8009e84 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009c9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009c9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ca0:	ee07 3a90 	vmov	s15, r3
 8009ca4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009ca8:	ed97 6a03 	vldr	s12, [r7, #12]
 8009cac:	eddf 5a77 	vldr	s11, [pc, #476]	@ 8009e8c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009cb0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009cb4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009cb8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009cbc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009cc0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009cc4:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009cc8:	e087      	b.n	8009dda <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009cca:	697b      	ldr	r3, [r7, #20]
 8009ccc:	ee07 3a90 	vmov	s15, r3
 8009cd0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009cd4:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8009e90 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009cd8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009cdc:	4b69      	ldr	r3, [pc, #420]	@ (8009e84 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009cde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009ce0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ce4:	ee07 3a90 	vmov	s15, r3
 8009ce8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009cec:	ed97 6a03 	vldr	s12, [r7, #12]
 8009cf0:	eddf 5a66 	vldr	s11, [pc, #408]	@ 8009e8c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009cf4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009cf8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009cfc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009d00:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009d04:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009d08:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009d0c:	e065      	b.n	8009dda <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009d0e:	697b      	ldr	r3, [r7, #20]
 8009d10:	ee07 3a90 	vmov	s15, r3
 8009d14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d18:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8009e94 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8009d1c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009d20:	4b58      	ldr	r3, [pc, #352]	@ (8009e84 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009d22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009d24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d28:	ee07 3a90 	vmov	s15, r3
 8009d2c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009d30:	ed97 6a03 	vldr	s12, [r7, #12]
 8009d34:	eddf 5a55 	vldr	s11, [pc, #340]	@ 8009e8c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009d38:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009d3c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009d40:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009d44:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009d48:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009d4c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009d50:	e043      	b.n	8009dda <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009d52:	697b      	ldr	r3, [r7, #20]
 8009d54:	ee07 3a90 	vmov	s15, r3
 8009d58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d5c:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8009e98 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8009d60:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009d64:	4b47      	ldr	r3, [pc, #284]	@ (8009e84 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009d66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009d68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d6c:	ee07 3a90 	vmov	s15, r3
 8009d70:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009d74:	ed97 6a03 	vldr	s12, [r7, #12]
 8009d78:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8009e8c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009d7c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009d80:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009d84:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009d88:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009d8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009d90:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009d94:	e021      	b.n	8009dda <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009d96:	697b      	ldr	r3, [r7, #20]
 8009d98:	ee07 3a90 	vmov	s15, r3
 8009d9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009da0:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8009e90 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009da4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009da8:	4b36      	ldr	r3, [pc, #216]	@ (8009e84 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009daa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009dac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009db0:	ee07 3a90 	vmov	s15, r3
 8009db4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009db8:	ed97 6a03 	vldr	s12, [r7, #12]
 8009dbc:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8009e8c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009dc0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009dc4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009dc8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009dcc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009dd0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009dd4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009dd8:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8009dda:	4b2a      	ldr	r3, [pc, #168]	@ (8009e84 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009ddc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009dde:	0a5b      	lsrs	r3, r3, #9
 8009de0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009de4:	ee07 3a90 	vmov	s15, r3
 8009de8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009dec:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009df0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009df4:	edd7 6a07 	vldr	s13, [r7, #28]
 8009df8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009dfc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009e00:	ee17 2a90 	vmov	r2, s15
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8009e08:	4b1e      	ldr	r3, [pc, #120]	@ (8009e84 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009e0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009e0c:	0c1b      	lsrs	r3, r3, #16
 8009e0e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009e12:	ee07 3a90 	vmov	s15, r3
 8009e16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e1a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009e1e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009e22:	edd7 6a07 	vldr	s13, [r7, #28]
 8009e26:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009e2a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009e2e:	ee17 2a90 	vmov	r2, s15
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8009e36:	4b13      	ldr	r3, [pc, #76]	@ (8009e84 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009e38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009e3a:	0e1b      	lsrs	r3, r3, #24
 8009e3c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009e40:	ee07 3a90 	vmov	s15, r3
 8009e44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e48:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009e4c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009e50:	edd7 6a07 	vldr	s13, [r7, #28]
 8009e54:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009e58:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009e5c:	ee17 2a90 	vmov	r2, s15
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8009e64:	e008      	b.n	8009e78 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	2200      	movs	r2, #0
 8009e6a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	2200      	movs	r2, #0
 8009e70:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	2200      	movs	r2, #0
 8009e76:	609a      	str	r2, [r3, #8]
}
 8009e78:	bf00      	nop
 8009e7a:	3724      	adds	r7, #36	@ 0x24
 8009e7c:	46bd      	mov	sp, r7
 8009e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e82:	4770      	bx	lr
 8009e84:	58024400 	.word	0x58024400
 8009e88:	03d09000 	.word	0x03d09000
 8009e8c:	46000000 	.word	0x46000000
 8009e90:	4c742400 	.word	0x4c742400
 8009e94:	4a742400 	.word	0x4a742400
 8009e98:	4bbebc20 	.word	0x4bbebc20

08009e9c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8009e9c:	b580      	push	{r7, lr}
 8009e9e:	b084      	sub	sp, #16
 8009ea0:	af00      	add	r7, sp, #0
 8009ea2:	6078      	str	r0, [r7, #4]
 8009ea4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009ea6:	2300      	movs	r3, #0
 8009ea8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009eaa:	4b53      	ldr	r3, [pc, #332]	@ (8009ff8 <RCCEx_PLL2_Config+0x15c>)
 8009eac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009eae:	f003 0303 	and.w	r3, r3, #3
 8009eb2:	2b03      	cmp	r3, #3
 8009eb4:	d101      	bne.n	8009eba <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8009eb6:	2301      	movs	r3, #1
 8009eb8:	e099      	b.n	8009fee <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8009eba:	4b4f      	ldr	r3, [pc, #316]	@ (8009ff8 <RCCEx_PLL2_Config+0x15c>)
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	4a4e      	ldr	r2, [pc, #312]	@ (8009ff8 <RCCEx_PLL2_Config+0x15c>)
 8009ec0:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009ec4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009ec6:	f7f7 ff13 	bl	8001cf0 <HAL_GetTick>
 8009eca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009ecc:	e008      	b.n	8009ee0 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009ece:	f7f7 ff0f 	bl	8001cf0 <HAL_GetTick>
 8009ed2:	4602      	mov	r2, r0
 8009ed4:	68bb      	ldr	r3, [r7, #8]
 8009ed6:	1ad3      	subs	r3, r2, r3
 8009ed8:	2b02      	cmp	r3, #2
 8009eda:	d901      	bls.n	8009ee0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009edc:	2303      	movs	r3, #3
 8009ede:	e086      	b.n	8009fee <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009ee0:	4b45      	ldr	r3, [pc, #276]	@ (8009ff8 <RCCEx_PLL2_Config+0x15c>)
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d1f0      	bne.n	8009ece <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8009eec:	4b42      	ldr	r3, [pc, #264]	@ (8009ff8 <RCCEx_PLL2_Config+0x15c>)
 8009eee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ef0:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	031b      	lsls	r3, r3, #12
 8009efa:	493f      	ldr	r1, [pc, #252]	@ (8009ff8 <RCCEx_PLL2_Config+0x15c>)
 8009efc:	4313      	orrs	r3, r2
 8009efe:	628b      	str	r3, [r1, #40]	@ 0x28
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	685b      	ldr	r3, [r3, #4]
 8009f04:	3b01      	subs	r3, #1
 8009f06:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	689b      	ldr	r3, [r3, #8]
 8009f0e:	3b01      	subs	r3, #1
 8009f10:	025b      	lsls	r3, r3, #9
 8009f12:	b29b      	uxth	r3, r3
 8009f14:	431a      	orrs	r2, r3
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	68db      	ldr	r3, [r3, #12]
 8009f1a:	3b01      	subs	r3, #1
 8009f1c:	041b      	lsls	r3, r3, #16
 8009f1e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8009f22:	431a      	orrs	r2, r3
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	691b      	ldr	r3, [r3, #16]
 8009f28:	3b01      	subs	r3, #1
 8009f2a:	061b      	lsls	r3, r3, #24
 8009f2c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8009f30:	4931      	ldr	r1, [pc, #196]	@ (8009ff8 <RCCEx_PLL2_Config+0x15c>)
 8009f32:	4313      	orrs	r3, r2
 8009f34:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8009f36:	4b30      	ldr	r3, [pc, #192]	@ (8009ff8 <RCCEx_PLL2_Config+0x15c>)
 8009f38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f3a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	695b      	ldr	r3, [r3, #20]
 8009f42:	492d      	ldr	r1, [pc, #180]	@ (8009ff8 <RCCEx_PLL2_Config+0x15c>)
 8009f44:	4313      	orrs	r3, r2
 8009f46:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8009f48:	4b2b      	ldr	r3, [pc, #172]	@ (8009ff8 <RCCEx_PLL2_Config+0x15c>)
 8009f4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f4c:	f023 0220 	bic.w	r2, r3, #32
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	699b      	ldr	r3, [r3, #24]
 8009f54:	4928      	ldr	r1, [pc, #160]	@ (8009ff8 <RCCEx_PLL2_Config+0x15c>)
 8009f56:	4313      	orrs	r3, r2
 8009f58:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8009f5a:	4b27      	ldr	r3, [pc, #156]	@ (8009ff8 <RCCEx_PLL2_Config+0x15c>)
 8009f5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f5e:	4a26      	ldr	r2, [pc, #152]	@ (8009ff8 <RCCEx_PLL2_Config+0x15c>)
 8009f60:	f023 0310 	bic.w	r3, r3, #16
 8009f64:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8009f66:	4b24      	ldr	r3, [pc, #144]	@ (8009ff8 <RCCEx_PLL2_Config+0x15c>)
 8009f68:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009f6a:	4b24      	ldr	r3, [pc, #144]	@ (8009ffc <RCCEx_PLL2_Config+0x160>)
 8009f6c:	4013      	ands	r3, r2
 8009f6e:	687a      	ldr	r2, [r7, #4]
 8009f70:	69d2      	ldr	r2, [r2, #28]
 8009f72:	00d2      	lsls	r2, r2, #3
 8009f74:	4920      	ldr	r1, [pc, #128]	@ (8009ff8 <RCCEx_PLL2_Config+0x15c>)
 8009f76:	4313      	orrs	r3, r2
 8009f78:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8009f7a:	4b1f      	ldr	r3, [pc, #124]	@ (8009ff8 <RCCEx_PLL2_Config+0x15c>)
 8009f7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f7e:	4a1e      	ldr	r2, [pc, #120]	@ (8009ff8 <RCCEx_PLL2_Config+0x15c>)
 8009f80:	f043 0310 	orr.w	r3, r3, #16
 8009f84:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8009f86:	683b      	ldr	r3, [r7, #0]
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d106      	bne.n	8009f9a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8009f8c:	4b1a      	ldr	r3, [pc, #104]	@ (8009ff8 <RCCEx_PLL2_Config+0x15c>)
 8009f8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f90:	4a19      	ldr	r2, [pc, #100]	@ (8009ff8 <RCCEx_PLL2_Config+0x15c>)
 8009f92:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009f96:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009f98:	e00f      	b.n	8009fba <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8009f9a:	683b      	ldr	r3, [r7, #0]
 8009f9c:	2b01      	cmp	r3, #1
 8009f9e:	d106      	bne.n	8009fae <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8009fa0:	4b15      	ldr	r3, [pc, #84]	@ (8009ff8 <RCCEx_PLL2_Config+0x15c>)
 8009fa2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009fa4:	4a14      	ldr	r2, [pc, #80]	@ (8009ff8 <RCCEx_PLL2_Config+0x15c>)
 8009fa6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009faa:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009fac:	e005      	b.n	8009fba <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8009fae:	4b12      	ldr	r3, [pc, #72]	@ (8009ff8 <RCCEx_PLL2_Config+0x15c>)
 8009fb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009fb2:	4a11      	ldr	r2, [pc, #68]	@ (8009ff8 <RCCEx_PLL2_Config+0x15c>)
 8009fb4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8009fb8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8009fba:	4b0f      	ldr	r3, [pc, #60]	@ (8009ff8 <RCCEx_PLL2_Config+0x15c>)
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	4a0e      	ldr	r2, [pc, #56]	@ (8009ff8 <RCCEx_PLL2_Config+0x15c>)
 8009fc0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009fc4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009fc6:	f7f7 fe93 	bl	8001cf0 <HAL_GetTick>
 8009fca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009fcc:	e008      	b.n	8009fe0 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009fce:	f7f7 fe8f 	bl	8001cf0 <HAL_GetTick>
 8009fd2:	4602      	mov	r2, r0
 8009fd4:	68bb      	ldr	r3, [r7, #8]
 8009fd6:	1ad3      	subs	r3, r2, r3
 8009fd8:	2b02      	cmp	r3, #2
 8009fda:	d901      	bls.n	8009fe0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009fdc:	2303      	movs	r3, #3
 8009fde:	e006      	b.n	8009fee <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009fe0:	4b05      	ldr	r3, [pc, #20]	@ (8009ff8 <RCCEx_PLL2_Config+0x15c>)
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d0f0      	beq.n	8009fce <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8009fec:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fee:	4618      	mov	r0, r3
 8009ff0:	3710      	adds	r7, #16
 8009ff2:	46bd      	mov	sp, r7
 8009ff4:	bd80      	pop	{r7, pc}
 8009ff6:	bf00      	nop
 8009ff8:	58024400 	.word	0x58024400
 8009ffc:	ffff0007 	.word	0xffff0007

0800a000 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800a000:	b580      	push	{r7, lr}
 800a002:	b084      	sub	sp, #16
 800a004:	af00      	add	r7, sp, #0
 800a006:	6078      	str	r0, [r7, #4]
 800a008:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a00a:	2300      	movs	r3, #0
 800a00c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a00e:	4b53      	ldr	r3, [pc, #332]	@ (800a15c <RCCEx_PLL3_Config+0x15c>)
 800a010:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a012:	f003 0303 	and.w	r3, r3, #3
 800a016:	2b03      	cmp	r3, #3
 800a018:	d101      	bne.n	800a01e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800a01a:	2301      	movs	r3, #1
 800a01c:	e099      	b.n	800a152 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800a01e:	4b4f      	ldr	r3, [pc, #316]	@ (800a15c <RCCEx_PLL3_Config+0x15c>)
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	4a4e      	ldr	r2, [pc, #312]	@ (800a15c <RCCEx_PLL3_Config+0x15c>)
 800a024:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a028:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a02a:	f7f7 fe61 	bl	8001cf0 <HAL_GetTick>
 800a02e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a030:	e008      	b.n	800a044 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a032:	f7f7 fe5d 	bl	8001cf0 <HAL_GetTick>
 800a036:	4602      	mov	r2, r0
 800a038:	68bb      	ldr	r3, [r7, #8]
 800a03a:	1ad3      	subs	r3, r2, r3
 800a03c:	2b02      	cmp	r3, #2
 800a03e:	d901      	bls.n	800a044 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a040:	2303      	movs	r3, #3
 800a042:	e086      	b.n	800a152 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a044:	4b45      	ldr	r3, [pc, #276]	@ (800a15c <RCCEx_PLL3_Config+0x15c>)
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d1f0      	bne.n	800a032 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800a050:	4b42      	ldr	r3, [pc, #264]	@ (800a15c <RCCEx_PLL3_Config+0x15c>)
 800a052:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a054:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	051b      	lsls	r3, r3, #20
 800a05e:	493f      	ldr	r1, [pc, #252]	@ (800a15c <RCCEx_PLL3_Config+0x15c>)
 800a060:	4313      	orrs	r3, r2
 800a062:	628b      	str	r3, [r1, #40]	@ 0x28
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	685b      	ldr	r3, [r3, #4]
 800a068:	3b01      	subs	r3, #1
 800a06a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	689b      	ldr	r3, [r3, #8]
 800a072:	3b01      	subs	r3, #1
 800a074:	025b      	lsls	r3, r3, #9
 800a076:	b29b      	uxth	r3, r3
 800a078:	431a      	orrs	r2, r3
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	68db      	ldr	r3, [r3, #12]
 800a07e:	3b01      	subs	r3, #1
 800a080:	041b      	lsls	r3, r3, #16
 800a082:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800a086:	431a      	orrs	r2, r3
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	691b      	ldr	r3, [r3, #16]
 800a08c:	3b01      	subs	r3, #1
 800a08e:	061b      	lsls	r3, r3, #24
 800a090:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800a094:	4931      	ldr	r1, [pc, #196]	@ (800a15c <RCCEx_PLL3_Config+0x15c>)
 800a096:	4313      	orrs	r3, r2
 800a098:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800a09a:	4b30      	ldr	r3, [pc, #192]	@ (800a15c <RCCEx_PLL3_Config+0x15c>)
 800a09c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a09e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	695b      	ldr	r3, [r3, #20]
 800a0a6:	492d      	ldr	r1, [pc, #180]	@ (800a15c <RCCEx_PLL3_Config+0x15c>)
 800a0a8:	4313      	orrs	r3, r2
 800a0aa:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800a0ac:	4b2b      	ldr	r3, [pc, #172]	@ (800a15c <RCCEx_PLL3_Config+0x15c>)
 800a0ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a0b0:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	699b      	ldr	r3, [r3, #24]
 800a0b8:	4928      	ldr	r1, [pc, #160]	@ (800a15c <RCCEx_PLL3_Config+0x15c>)
 800a0ba:	4313      	orrs	r3, r2
 800a0bc:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800a0be:	4b27      	ldr	r3, [pc, #156]	@ (800a15c <RCCEx_PLL3_Config+0x15c>)
 800a0c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a0c2:	4a26      	ldr	r2, [pc, #152]	@ (800a15c <RCCEx_PLL3_Config+0x15c>)
 800a0c4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a0c8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800a0ca:	4b24      	ldr	r3, [pc, #144]	@ (800a15c <RCCEx_PLL3_Config+0x15c>)
 800a0cc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a0ce:	4b24      	ldr	r3, [pc, #144]	@ (800a160 <RCCEx_PLL3_Config+0x160>)
 800a0d0:	4013      	ands	r3, r2
 800a0d2:	687a      	ldr	r2, [r7, #4]
 800a0d4:	69d2      	ldr	r2, [r2, #28]
 800a0d6:	00d2      	lsls	r2, r2, #3
 800a0d8:	4920      	ldr	r1, [pc, #128]	@ (800a15c <RCCEx_PLL3_Config+0x15c>)
 800a0da:	4313      	orrs	r3, r2
 800a0dc:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800a0de:	4b1f      	ldr	r3, [pc, #124]	@ (800a15c <RCCEx_PLL3_Config+0x15c>)
 800a0e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a0e2:	4a1e      	ldr	r2, [pc, #120]	@ (800a15c <RCCEx_PLL3_Config+0x15c>)
 800a0e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a0e8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800a0ea:	683b      	ldr	r3, [r7, #0]
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d106      	bne.n	800a0fe <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800a0f0:	4b1a      	ldr	r3, [pc, #104]	@ (800a15c <RCCEx_PLL3_Config+0x15c>)
 800a0f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a0f4:	4a19      	ldr	r2, [pc, #100]	@ (800a15c <RCCEx_PLL3_Config+0x15c>)
 800a0f6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800a0fa:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a0fc:	e00f      	b.n	800a11e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800a0fe:	683b      	ldr	r3, [r7, #0]
 800a100:	2b01      	cmp	r3, #1
 800a102:	d106      	bne.n	800a112 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800a104:	4b15      	ldr	r3, [pc, #84]	@ (800a15c <RCCEx_PLL3_Config+0x15c>)
 800a106:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a108:	4a14      	ldr	r2, [pc, #80]	@ (800a15c <RCCEx_PLL3_Config+0x15c>)
 800a10a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800a10e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a110:	e005      	b.n	800a11e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800a112:	4b12      	ldr	r3, [pc, #72]	@ (800a15c <RCCEx_PLL3_Config+0x15c>)
 800a114:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a116:	4a11      	ldr	r2, [pc, #68]	@ (800a15c <RCCEx_PLL3_Config+0x15c>)
 800a118:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800a11c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800a11e:	4b0f      	ldr	r3, [pc, #60]	@ (800a15c <RCCEx_PLL3_Config+0x15c>)
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	4a0e      	ldr	r2, [pc, #56]	@ (800a15c <RCCEx_PLL3_Config+0x15c>)
 800a124:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a128:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a12a:	f7f7 fde1 	bl	8001cf0 <HAL_GetTick>
 800a12e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a130:	e008      	b.n	800a144 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a132:	f7f7 fddd 	bl	8001cf0 <HAL_GetTick>
 800a136:	4602      	mov	r2, r0
 800a138:	68bb      	ldr	r3, [r7, #8]
 800a13a:	1ad3      	subs	r3, r2, r3
 800a13c:	2b02      	cmp	r3, #2
 800a13e:	d901      	bls.n	800a144 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a140:	2303      	movs	r3, #3
 800a142:	e006      	b.n	800a152 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a144:	4b05      	ldr	r3, [pc, #20]	@ (800a15c <RCCEx_PLL3_Config+0x15c>)
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d0f0      	beq.n	800a132 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800a150:	7bfb      	ldrb	r3, [r7, #15]
}
 800a152:	4618      	mov	r0, r3
 800a154:	3710      	adds	r7, #16
 800a156:	46bd      	mov	sp, r7
 800a158:	bd80      	pop	{r7, pc}
 800a15a:	bf00      	nop
 800a15c:	58024400 	.word	0x58024400
 800a160:	ffff0007 	.word	0xffff0007

0800a164 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a164:	b580      	push	{r7, lr}
 800a166:	b082      	sub	sp, #8
 800a168:	af00      	add	r7, sp, #0
 800a16a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d101      	bne.n	800a176 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a172:	2301      	movs	r3, #1
 800a174:	e049      	b.n	800a20a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a17c:	b2db      	uxtb	r3, r3
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d106      	bne.n	800a190 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	2200      	movs	r2, #0
 800a186:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a18a:	6878      	ldr	r0, [r7, #4]
 800a18c:	f7f7 fbea 	bl	8001964 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	2202      	movs	r2, #2
 800a194:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	681a      	ldr	r2, [r3, #0]
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	3304      	adds	r3, #4
 800a1a0:	4619      	mov	r1, r3
 800a1a2:	4610      	mov	r0, r2
 800a1a4:	f000 fbfc 	bl	800a9a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	2201      	movs	r2, #1
 800a1ac:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	2201      	movs	r2, #1
 800a1b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	2201      	movs	r2, #1
 800a1bc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	2201      	movs	r2, #1
 800a1c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	2201      	movs	r2, #1
 800a1cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	2201      	movs	r2, #1
 800a1d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	2201      	movs	r2, #1
 800a1dc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	2201      	movs	r2, #1
 800a1e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	2201      	movs	r2, #1
 800a1ec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	2201      	movs	r2, #1
 800a1f4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	2201      	movs	r2, #1
 800a1fc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	2201      	movs	r2, #1
 800a204:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a208:	2300      	movs	r3, #0
}
 800a20a:	4618      	mov	r0, r3
 800a20c:	3708      	adds	r7, #8
 800a20e:	46bd      	mov	sp, r7
 800a210:	bd80      	pop	{r7, pc}

0800a212 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a212:	b580      	push	{r7, lr}
 800a214:	b082      	sub	sp, #8
 800a216:	af00      	add	r7, sp, #0
 800a218:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d101      	bne.n	800a224 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a220:	2301      	movs	r3, #1
 800a222:	e049      	b.n	800a2b8 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a22a:	b2db      	uxtb	r3, r3
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d106      	bne.n	800a23e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	2200      	movs	r2, #0
 800a234:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a238:	6878      	ldr	r0, [r7, #4]
 800a23a:	f000 f841 	bl	800a2c0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	2202      	movs	r2, #2
 800a242:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	681a      	ldr	r2, [r3, #0]
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	3304      	adds	r3, #4
 800a24e:	4619      	mov	r1, r3
 800a250:	4610      	mov	r0, r2
 800a252:	f000 fba5 	bl	800a9a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	2201      	movs	r2, #1
 800a25a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	2201      	movs	r2, #1
 800a262:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	2201      	movs	r2, #1
 800a26a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	2201      	movs	r2, #1
 800a272:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	2201      	movs	r2, #1
 800a27a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	2201      	movs	r2, #1
 800a282:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	2201      	movs	r2, #1
 800a28a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	2201      	movs	r2, #1
 800a292:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	2201      	movs	r2, #1
 800a29a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	2201      	movs	r2, #1
 800a2a2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	2201      	movs	r2, #1
 800a2aa:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	2201      	movs	r2, #1
 800a2b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a2b6:	2300      	movs	r3, #0
}
 800a2b8:	4618      	mov	r0, r3
 800a2ba:	3708      	adds	r7, #8
 800a2bc:	46bd      	mov	sp, r7
 800a2be:	bd80      	pop	{r7, pc}

0800a2c0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800a2c0:	b480      	push	{r7}
 800a2c2:	b083      	sub	sp, #12
 800a2c4:	af00      	add	r7, sp, #0
 800a2c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800a2c8:	bf00      	nop
 800a2ca:	370c      	adds	r7, #12
 800a2cc:	46bd      	mov	sp, r7
 800a2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d2:	4770      	bx	lr

0800a2d4 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a2d4:	b580      	push	{r7, lr}
 800a2d6:	b084      	sub	sp, #16
 800a2d8:	af00      	add	r7, sp, #0
 800a2da:	6078      	str	r0, [r7, #4]
 800a2dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a2de:	2300      	movs	r3, #0
 800a2e0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a2e2:	683b      	ldr	r3, [r7, #0]
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d109      	bne.n	800a2fc <HAL_TIM_PWM_Start_IT+0x28>
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800a2ee:	b2db      	uxtb	r3, r3
 800a2f0:	2b01      	cmp	r3, #1
 800a2f2:	bf14      	ite	ne
 800a2f4:	2301      	movne	r3, #1
 800a2f6:	2300      	moveq	r3, #0
 800a2f8:	b2db      	uxtb	r3, r3
 800a2fa:	e03c      	b.n	800a376 <HAL_TIM_PWM_Start_IT+0xa2>
 800a2fc:	683b      	ldr	r3, [r7, #0]
 800a2fe:	2b04      	cmp	r3, #4
 800a300:	d109      	bne.n	800a316 <HAL_TIM_PWM_Start_IT+0x42>
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800a308:	b2db      	uxtb	r3, r3
 800a30a:	2b01      	cmp	r3, #1
 800a30c:	bf14      	ite	ne
 800a30e:	2301      	movne	r3, #1
 800a310:	2300      	moveq	r3, #0
 800a312:	b2db      	uxtb	r3, r3
 800a314:	e02f      	b.n	800a376 <HAL_TIM_PWM_Start_IT+0xa2>
 800a316:	683b      	ldr	r3, [r7, #0]
 800a318:	2b08      	cmp	r3, #8
 800a31a:	d109      	bne.n	800a330 <HAL_TIM_PWM_Start_IT+0x5c>
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a322:	b2db      	uxtb	r3, r3
 800a324:	2b01      	cmp	r3, #1
 800a326:	bf14      	ite	ne
 800a328:	2301      	movne	r3, #1
 800a32a:	2300      	moveq	r3, #0
 800a32c:	b2db      	uxtb	r3, r3
 800a32e:	e022      	b.n	800a376 <HAL_TIM_PWM_Start_IT+0xa2>
 800a330:	683b      	ldr	r3, [r7, #0]
 800a332:	2b0c      	cmp	r3, #12
 800a334:	d109      	bne.n	800a34a <HAL_TIM_PWM_Start_IT+0x76>
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a33c:	b2db      	uxtb	r3, r3
 800a33e:	2b01      	cmp	r3, #1
 800a340:	bf14      	ite	ne
 800a342:	2301      	movne	r3, #1
 800a344:	2300      	moveq	r3, #0
 800a346:	b2db      	uxtb	r3, r3
 800a348:	e015      	b.n	800a376 <HAL_TIM_PWM_Start_IT+0xa2>
 800a34a:	683b      	ldr	r3, [r7, #0]
 800a34c:	2b10      	cmp	r3, #16
 800a34e:	d109      	bne.n	800a364 <HAL_TIM_PWM_Start_IT+0x90>
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a356:	b2db      	uxtb	r3, r3
 800a358:	2b01      	cmp	r3, #1
 800a35a:	bf14      	ite	ne
 800a35c:	2301      	movne	r3, #1
 800a35e:	2300      	moveq	r3, #0
 800a360:	b2db      	uxtb	r3, r3
 800a362:	e008      	b.n	800a376 <HAL_TIM_PWM_Start_IT+0xa2>
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800a36a:	b2db      	uxtb	r3, r3
 800a36c:	2b01      	cmp	r3, #1
 800a36e:	bf14      	ite	ne
 800a370:	2301      	movne	r3, #1
 800a372:	2300      	moveq	r3, #0
 800a374:	b2db      	uxtb	r3, r3
 800a376:	2b00      	cmp	r3, #0
 800a378:	d001      	beq.n	800a37e <HAL_TIM_PWM_Start_IT+0xaa>
  {
    return HAL_ERROR;
 800a37a:	2301      	movs	r3, #1
 800a37c:	e0ec      	b.n	800a558 <HAL_TIM_PWM_Start_IT+0x284>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a37e:	683b      	ldr	r3, [r7, #0]
 800a380:	2b00      	cmp	r3, #0
 800a382:	d104      	bne.n	800a38e <HAL_TIM_PWM_Start_IT+0xba>
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	2202      	movs	r2, #2
 800a388:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a38c:	e023      	b.n	800a3d6 <HAL_TIM_PWM_Start_IT+0x102>
 800a38e:	683b      	ldr	r3, [r7, #0]
 800a390:	2b04      	cmp	r3, #4
 800a392:	d104      	bne.n	800a39e <HAL_TIM_PWM_Start_IT+0xca>
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	2202      	movs	r2, #2
 800a398:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a39c:	e01b      	b.n	800a3d6 <HAL_TIM_PWM_Start_IT+0x102>
 800a39e:	683b      	ldr	r3, [r7, #0]
 800a3a0:	2b08      	cmp	r3, #8
 800a3a2:	d104      	bne.n	800a3ae <HAL_TIM_PWM_Start_IT+0xda>
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	2202      	movs	r2, #2
 800a3a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a3ac:	e013      	b.n	800a3d6 <HAL_TIM_PWM_Start_IT+0x102>
 800a3ae:	683b      	ldr	r3, [r7, #0]
 800a3b0:	2b0c      	cmp	r3, #12
 800a3b2:	d104      	bne.n	800a3be <HAL_TIM_PWM_Start_IT+0xea>
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	2202      	movs	r2, #2
 800a3b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a3bc:	e00b      	b.n	800a3d6 <HAL_TIM_PWM_Start_IT+0x102>
 800a3be:	683b      	ldr	r3, [r7, #0]
 800a3c0:	2b10      	cmp	r3, #16
 800a3c2:	d104      	bne.n	800a3ce <HAL_TIM_PWM_Start_IT+0xfa>
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	2202      	movs	r2, #2
 800a3c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a3cc:	e003      	b.n	800a3d6 <HAL_TIM_PWM_Start_IT+0x102>
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	2202      	movs	r2, #2
 800a3d2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  switch (Channel)
 800a3d6:	683b      	ldr	r3, [r7, #0]
 800a3d8:	2b0c      	cmp	r3, #12
 800a3da:	d841      	bhi.n	800a460 <HAL_TIM_PWM_Start_IT+0x18c>
 800a3dc:	a201      	add	r2, pc, #4	@ (adr r2, 800a3e4 <HAL_TIM_PWM_Start_IT+0x110>)
 800a3de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3e2:	bf00      	nop
 800a3e4:	0800a419 	.word	0x0800a419
 800a3e8:	0800a461 	.word	0x0800a461
 800a3ec:	0800a461 	.word	0x0800a461
 800a3f0:	0800a461 	.word	0x0800a461
 800a3f4:	0800a42b 	.word	0x0800a42b
 800a3f8:	0800a461 	.word	0x0800a461
 800a3fc:	0800a461 	.word	0x0800a461
 800a400:	0800a461 	.word	0x0800a461
 800a404:	0800a43d 	.word	0x0800a43d
 800a408:	0800a461 	.word	0x0800a461
 800a40c:	0800a461 	.word	0x0800a461
 800a410:	0800a461 	.word	0x0800a461
 800a414:	0800a44f 	.word	0x0800a44f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	68da      	ldr	r2, [r3, #12]
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	f042 0202 	orr.w	r2, r2, #2
 800a426:	60da      	str	r2, [r3, #12]
      break;
 800a428:	e01d      	b.n	800a466 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	68da      	ldr	r2, [r3, #12]
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	f042 0204 	orr.w	r2, r2, #4
 800a438:	60da      	str	r2, [r3, #12]
      break;
 800a43a:	e014      	b.n	800a466 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	68da      	ldr	r2, [r3, #12]
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	f042 0208 	orr.w	r2, r2, #8
 800a44a:	60da      	str	r2, [r3, #12]
      break;
 800a44c:	e00b      	b.n	800a466 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	68da      	ldr	r2, [r3, #12]
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	f042 0210 	orr.w	r2, r2, #16
 800a45c:	60da      	str	r2, [r3, #12]
      break;
 800a45e:	e002      	b.n	800a466 <HAL_TIM_PWM_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800a460:	2301      	movs	r3, #1
 800a462:	73fb      	strb	r3, [r7, #15]
      break;
 800a464:	bf00      	nop
  }

  if (status == HAL_OK)
 800a466:	7bfb      	ldrb	r3, [r7, #15]
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d174      	bne.n	800a556 <HAL_TIM_PWM_Start_IT+0x282>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	2201      	movs	r2, #1
 800a472:	6839      	ldr	r1, [r7, #0]
 800a474:	4618      	mov	r0, r3
 800a476:	f000 fead 	bl	800b1d4 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	4a38      	ldr	r2, [pc, #224]	@ (800a560 <HAL_TIM_PWM_Start_IT+0x28c>)
 800a480:	4293      	cmp	r3, r2
 800a482:	d013      	beq.n	800a4ac <HAL_TIM_PWM_Start_IT+0x1d8>
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	4a36      	ldr	r2, [pc, #216]	@ (800a564 <HAL_TIM_PWM_Start_IT+0x290>)
 800a48a:	4293      	cmp	r3, r2
 800a48c:	d00e      	beq.n	800a4ac <HAL_TIM_PWM_Start_IT+0x1d8>
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	4a35      	ldr	r2, [pc, #212]	@ (800a568 <HAL_TIM_PWM_Start_IT+0x294>)
 800a494:	4293      	cmp	r3, r2
 800a496:	d009      	beq.n	800a4ac <HAL_TIM_PWM_Start_IT+0x1d8>
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	4a33      	ldr	r2, [pc, #204]	@ (800a56c <HAL_TIM_PWM_Start_IT+0x298>)
 800a49e:	4293      	cmp	r3, r2
 800a4a0:	d004      	beq.n	800a4ac <HAL_TIM_PWM_Start_IT+0x1d8>
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	4a32      	ldr	r2, [pc, #200]	@ (800a570 <HAL_TIM_PWM_Start_IT+0x29c>)
 800a4a8:	4293      	cmp	r3, r2
 800a4aa:	d101      	bne.n	800a4b0 <HAL_TIM_PWM_Start_IT+0x1dc>
 800a4ac:	2301      	movs	r3, #1
 800a4ae:	e000      	b.n	800a4b2 <HAL_TIM_PWM_Start_IT+0x1de>
 800a4b0:	2300      	movs	r3, #0
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d007      	beq.n	800a4c6 <HAL_TIM_PWM_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a4c4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	4a25      	ldr	r2, [pc, #148]	@ (800a560 <HAL_TIM_PWM_Start_IT+0x28c>)
 800a4cc:	4293      	cmp	r3, r2
 800a4ce:	d022      	beq.n	800a516 <HAL_TIM_PWM_Start_IT+0x242>
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a4d8:	d01d      	beq.n	800a516 <HAL_TIM_PWM_Start_IT+0x242>
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	4a25      	ldr	r2, [pc, #148]	@ (800a574 <HAL_TIM_PWM_Start_IT+0x2a0>)
 800a4e0:	4293      	cmp	r3, r2
 800a4e2:	d018      	beq.n	800a516 <HAL_TIM_PWM_Start_IT+0x242>
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	4a23      	ldr	r2, [pc, #140]	@ (800a578 <HAL_TIM_PWM_Start_IT+0x2a4>)
 800a4ea:	4293      	cmp	r3, r2
 800a4ec:	d013      	beq.n	800a516 <HAL_TIM_PWM_Start_IT+0x242>
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	4a22      	ldr	r2, [pc, #136]	@ (800a57c <HAL_TIM_PWM_Start_IT+0x2a8>)
 800a4f4:	4293      	cmp	r3, r2
 800a4f6:	d00e      	beq.n	800a516 <HAL_TIM_PWM_Start_IT+0x242>
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	4a19      	ldr	r2, [pc, #100]	@ (800a564 <HAL_TIM_PWM_Start_IT+0x290>)
 800a4fe:	4293      	cmp	r3, r2
 800a500:	d009      	beq.n	800a516 <HAL_TIM_PWM_Start_IT+0x242>
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	4a1e      	ldr	r2, [pc, #120]	@ (800a580 <HAL_TIM_PWM_Start_IT+0x2ac>)
 800a508:	4293      	cmp	r3, r2
 800a50a:	d004      	beq.n	800a516 <HAL_TIM_PWM_Start_IT+0x242>
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	4a15      	ldr	r2, [pc, #84]	@ (800a568 <HAL_TIM_PWM_Start_IT+0x294>)
 800a512:	4293      	cmp	r3, r2
 800a514:	d115      	bne.n	800a542 <HAL_TIM_PWM_Start_IT+0x26e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	689a      	ldr	r2, [r3, #8]
 800a51c:	4b19      	ldr	r3, [pc, #100]	@ (800a584 <HAL_TIM_PWM_Start_IT+0x2b0>)
 800a51e:	4013      	ands	r3, r2
 800a520:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a522:	68bb      	ldr	r3, [r7, #8]
 800a524:	2b06      	cmp	r3, #6
 800a526:	d015      	beq.n	800a554 <HAL_TIM_PWM_Start_IT+0x280>
 800a528:	68bb      	ldr	r3, [r7, #8]
 800a52a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a52e:	d011      	beq.n	800a554 <HAL_TIM_PWM_Start_IT+0x280>
      {
        __HAL_TIM_ENABLE(htim);
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	681a      	ldr	r2, [r3, #0]
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	f042 0201 	orr.w	r2, r2, #1
 800a53e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a540:	e008      	b.n	800a554 <HAL_TIM_PWM_Start_IT+0x280>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	681a      	ldr	r2, [r3, #0]
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	f042 0201 	orr.w	r2, r2, #1
 800a550:	601a      	str	r2, [r3, #0]
 800a552:	e000      	b.n	800a556 <HAL_TIM_PWM_Start_IT+0x282>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a554:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800a556:	7bfb      	ldrb	r3, [r7, #15]
}
 800a558:	4618      	mov	r0, r3
 800a55a:	3710      	adds	r7, #16
 800a55c:	46bd      	mov	sp, r7
 800a55e:	bd80      	pop	{r7, pc}
 800a560:	40010000 	.word	0x40010000
 800a564:	40010400 	.word	0x40010400
 800a568:	40014000 	.word	0x40014000
 800a56c:	40014400 	.word	0x40014400
 800a570:	40014800 	.word	0x40014800
 800a574:	40000400 	.word	0x40000400
 800a578:	40000800 	.word	0x40000800
 800a57c:	40000c00 	.word	0x40000c00
 800a580:	40001800 	.word	0x40001800
 800a584:	00010007 	.word	0x00010007

0800a588 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a588:	b580      	push	{r7, lr}
 800a58a:	b086      	sub	sp, #24
 800a58c:	af00      	add	r7, sp, #0
 800a58e:	60f8      	str	r0, [r7, #12]
 800a590:	60b9      	str	r1, [r7, #8]
 800a592:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a594:	2300      	movs	r3, #0
 800a596:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a59e:	2b01      	cmp	r3, #1
 800a5a0:	d101      	bne.n	800a5a6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800a5a2:	2302      	movs	r3, #2
 800a5a4:	e0ff      	b.n	800a7a6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	2201      	movs	r2, #1
 800a5aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	2b14      	cmp	r3, #20
 800a5b2:	f200 80f0 	bhi.w	800a796 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800a5b6:	a201      	add	r2, pc, #4	@ (adr r2, 800a5bc <HAL_TIM_PWM_ConfigChannel+0x34>)
 800a5b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5bc:	0800a611 	.word	0x0800a611
 800a5c0:	0800a797 	.word	0x0800a797
 800a5c4:	0800a797 	.word	0x0800a797
 800a5c8:	0800a797 	.word	0x0800a797
 800a5cc:	0800a651 	.word	0x0800a651
 800a5d0:	0800a797 	.word	0x0800a797
 800a5d4:	0800a797 	.word	0x0800a797
 800a5d8:	0800a797 	.word	0x0800a797
 800a5dc:	0800a693 	.word	0x0800a693
 800a5e0:	0800a797 	.word	0x0800a797
 800a5e4:	0800a797 	.word	0x0800a797
 800a5e8:	0800a797 	.word	0x0800a797
 800a5ec:	0800a6d3 	.word	0x0800a6d3
 800a5f0:	0800a797 	.word	0x0800a797
 800a5f4:	0800a797 	.word	0x0800a797
 800a5f8:	0800a797 	.word	0x0800a797
 800a5fc:	0800a715 	.word	0x0800a715
 800a600:	0800a797 	.word	0x0800a797
 800a604:	0800a797 	.word	0x0800a797
 800a608:	0800a797 	.word	0x0800a797
 800a60c:	0800a755 	.word	0x0800a755
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	68b9      	ldr	r1, [r7, #8]
 800a616:	4618      	mov	r0, r3
 800a618:	f000 fa68 	bl	800aaec <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	699a      	ldr	r2, [r3, #24]
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	f042 0208 	orr.w	r2, r2, #8
 800a62a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	699a      	ldr	r2, [r3, #24]
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	f022 0204 	bic.w	r2, r2, #4
 800a63a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	6999      	ldr	r1, [r3, #24]
 800a642:	68bb      	ldr	r3, [r7, #8]
 800a644:	691a      	ldr	r2, [r3, #16]
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	430a      	orrs	r2, r1
 800a64c:	619a      	str	r2, [r3, #24]
      break;
 800a64e:	e0a5      	b.n	800a79c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	68b9      	ldr	r1, [r7, #8]
 800a656:	4618      	mov	r0, r3
 800a658:	f000 fad8 	bl	800ac0c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	699a      	ldr	r2, [r3, #24]
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a66a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	699a      	ldr	r2, [r3, #24]
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a67a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	6999      	ldr	r1, [r3, #24]
 800a682:	68bb      	ldr	r3, [r7, #8]
 800a684:	691b      	ldr	r3, [r3, #16]
 800a686:	021a      	lsls	r2, r3, #8
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	430a      	orrs	r2, r1
 800a68e:	619a      	str	r2, [r3, #24]
      break;
 800a690:	e084      	b.n	800a79c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	68b9      	ldr	r1, [r7, #8]
 800a698:	4618      	mov	r0, r3
 800a69a:	f000 fb41 	bl	800ad20 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	69da      	ldr	r2, [r3, #28]
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	f042 0208 	orr.w	r2, r2, #8
 800a6ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	69da      	ldr	r2, [r3, #28]
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	f022 0204 	bic.w	r2, r2, #4
 800a6bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	69d9      	ldr	r1, [r3, #28]
 800a6c4:	68bb      	ldr	r3, [r7, #8]
 800a6c6:	691a      	ldr	r2, [r3, #16]
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	430a      	orrs	r2, r1
 800a6ce:	61da      	str	r2, [r3, #28]
      break;
 800a6d0:	e064      	b.n	800a79c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	68b9      	ldr	r1, [r7, #8]
 800a6d8:	4618      	mov	r0, r3
 800a6da:	f000 fba9 	bl	800ae30 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	69da      	ldr	r2, [r3, #28]
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a6ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	69da      	ldr	r2, [r3, #28]
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a6fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	69d9      	ldr	r1, [r3, #28]
 800a704:	68bb      	ldr	r3, [r7, #8]
 800a706:	691b      	ldr	r3, [r3, #16]
 800a708:	021a      	lsls	r2, r3, #8
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	430a      	orrs	r2, r1
 800a710:	61da      	str	r2, [r3, #28]
      break;
 800a712:	e043      	b.n	800a79c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	68b9      	ldr	r1, [r7, #8]
 800a71a:	4618      	mov	r0, r3
 800a71c:	f000 fbf2 	bl	800af04 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	f042 0208 	orr.w	r2, r2, #8
 800a72e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	f022 0204 	bic.w	r2, r2, #4
 800a73e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800a746:	68bb      	ldr	r3, [r7, #8]
 800a748:	691a      	ldr	r2, [r3, #16]
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	430a      	orrs	r2, r1
 800a750:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800a752:	e023      	b.n	800a79c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	68b9      	ldr	r1, [r7, #8]
 800a75a:	4618      	mov	r0, r3
 800a75c:	f000 fc36 	bl	800afcc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a76e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a77e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800a786:	68bb      	ldr	r3, [r7, #8]
 800a788:	691b      	ldr	r3, [r3, #16]
 800a78a:	021a      	lsls	r2, r3, #8
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	430a      	orrs	r2, r1
 800a792:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800a794:	e002      	b.n	800a79c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800a796:	2301      	movs	r3, #1
 800a798:	75fb      	strb	r3, [r7, #23]
      break;
 800a79a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	2200      	movs	r2, #0
 800a7a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a7a4:	7dfb      	ldrb	r3, [r7, #23]
}
 800a7a6:	4618      	mov	r0, r3
 800a7a8:	3718      	adds	r7, #24
 800a7aa:	46bd      	mov	sp, r7
 800a7ac:	bd80      	pop	{r7, pc}
 800a7ae:	bf00      	nop

0800a7b0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a7b0:	b580      	push	{r7, lr}
 800a7b2:	b084      	sub	sp, #16
 800a7b4:	af00      	add	r7, sp, #0
 800a7b6:	6078      	str	r0, [r7, #4]
 800a7b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a7ba:	2300      	movs	r3, #0
 800a7bc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a7c4:	2b01      	cmp	r3, #1
 800a7c6:	d101      	bne.n	800a7cc <HAL_TIM_ConfigClockSource+0x1c>
 800a7c8:	2302      	movs	r3, #2
 800a7ca:	e0dc      	b.n	800a986 <HAL_TIM_ConfigClockSource+0x1d6>
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	2201      	movs	r2, #1
 800a7d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	2202      	movs	r2, #2
 800a7d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	689b      	ldr	r3, [r3, #8]
 800a7e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a7e4:	68ba      	ldr	r2, [r7, #8]
 800a7e6:	4b6a      	ldr	r3, [pc, #424]	@ (800a990 <HAL_TIM_ConfigClockSource+0x1e0>)
 800a7e8:	4013      	ands	r3, r2
 800a7ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a7ec:	68bb      	ldr	r3, [r7, #8]
 800a7ee:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a7f2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	68ba      	ldr	r2, [r7, #8]
 800a7fa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a7fc:	683b      	ldr	r3, [r7, #0]
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	4a64      	ldr	r2, [pc, #400]	@ (800a994 <HAL_TIM_ConfigClockSource+0x1e4>)
 800a802:	4293      	cmp	r3, r2
 800a804:	f000 80a9 	beq.w	800a95a <HAL_TIM_ConfigClockSource+0x1aa>
 800a808:	4a62      	ldr	r2, [pc, #392]	@ (800a994 <HAL_TIM_ConfigClockSource+0x1e4>)
 800a80a:	4293      	cmp	r3, r2
 800a80c:	f200 80ae 	bhi.w	800a96c <HAL_TIM_ConfigClockSource+0x1bc>
 800a810:	4a61      	ldr	r2, [pc, #388]	@ (800a998 <HAL_TIM_ConfigClockSource+0x1e8>)
 800a812:	4293      	cmp	r3, r2
 800a814:	f000 80a1 	beq.w	800a95a <HAL_TIM_ConfigClockSource+0x1aa>
 800a818:	4a5f      	ldr	r2, [pc, #380]	@ (800a998 <HAL_TIM_ConfigClockSource+0x1e8>)
 800a81a:	4293      	cmp	r3, r2
 800a81c:	f200 80a6 	bhi.w	800a96c <HAL_TIM_ConfigClockSource+0x1bc>
 800a820:	4a5e      	ldr	r2, [pc, #376]	@ (800a99c <HAL_TIM_ConfigClockSource+0x1ec>)
 800a822:	4293      	cmp	r3, r2
 800a824:	f000 8099 	beq.w	800a95a <HAL_TIM_ConfigClockSource+0x1aa>
 800a828:	4a5c      	ldr	r2, [pc, #368]	@ (800a99c <HAL_TIM_ConfigClockSource+0x1ec>)
 800a82a:	4293      	cmp	r3, r2
 800a82c:	f200 809e 	bhi.w	800a96c <HAL_TIM_ConfigClockSource+0x1bc>
 800a830:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800a834:	f000 8091 	beq.w	800a95a <HAL_TIM_ConfigClockSource+0x1aa>
 800a838:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800a83c:	f200 8096 	bhi.w	800a96c <HAL_TIM_ConfigClockSource+0x1bc>
 800a840:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a844:	f000 8089 	beq.w	800a95a <HAL_TIM_ConfigClockSource+0x1aa>
 800a848:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a84c:	f200 808e 	bhi.w	800a96c <HAL_TIM_ConfigClockSource+0x1bc>
 800a850:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a854:	d03e      	beq.n	800a8d4 <HAL_TIM_ConfigClockSource+0x124>
 800a856:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a85a:	f200 8087 	bhi.w	800a96c <HAL_TIM_ConfigClockSource+0x1bc>
 800a85e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a862:	f000 8086 	beq.w	800a972 <HAL_TIM_ConfigClockSource+0x1c2>
 800a866:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a86a:	d87f      	bhi.n	800a96c <HAL_TIM_ConfigClockSource+0x1bc>
 800a86c:	2b70      	cmp	r3, #112	@ 0x70
 800a86e:	d01a      	beq.n	800a8a6 <HAL_TIM_ConfigClockSource+0xf6>
 800a870:	2b70      	cmp	r3, #112	@ 0x70
 800a872:	d87b      	bhi.n	800a96c <HAL_TIM_ConfigClockSource+0x1bc>
 800a874:	2b60      	cmp	r3, #96	@ 0x60
 800a876:	d050      	beq.n	800a91a <HAL_TIM_ConfigClockSource+0x16a>
 800a878:	2b60      	cmp	r3, #96	@ 0x60
 800a87a:	d877      	bhi.n	800a96c <HAL_TIM_ConfigClockSource+0x1bc>
 800a87c:	2b50      	cmp	r3, #80	@ 0x50
 800a87e:	d03c      	beq.n	800a8fa <HAL_TIM_ConfigClockSource+0x14a>
 800a880:	2b50      	cmp	r3, #80	@ 0x50
 800a882:	d873      	bhi.n	800a96c <HAL_TIM_ConfigClockSource+0x1bc>
 800a884:	2b40      	cmp	r3, #64	@ 0x40
 800a886:	d058      	beq.n	800a93a <HAL_TIM_ConfigClockSource+0x18a>
 800a888:	2b40      	cmp	r3, #64	@ 0x40
 800a88a:	d86f      	bhi.n	800a96c <HAL_TIM_ConfigClockSource+0x1bc>
 800a88c:	2b30      	cmp	r3, #48	@ 0x30
 800a88e:	d064      	beq.n	800a95a <HAL_TIM_ConfigClockSource+0x1aa>
 800a890:	2b30      	cmp	r3, #48	@ 0x30
 800a892:	d86b      	bhi.n	800a96c <HAL_TIM_ConfigClockSource+0x1bc>
 800a894:	2b20      	cmp	r3, #32
 800a896:	d060      	beq.n	800a95a <HAL_TIM_ConfigClockSource+0x1aa>
 800a898:	2b20      	cmp	r3, #32
 800a89a:	d867      	bhi.n	800a96c <HAL_TIM_ConfigClockSource+0x1bc>
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d05c      	beq.n	800a95a <HAL_TIM_ConfigClockSource+0x1aa>
 800a8a0:	2b10      	cmp	r3, #16
 800a8a2:	d05a      	beq.n	800a95a <HAL_TIM_ConfigClockSource+0x1aa>
 800a8a4:	e062      	b.n	800a96c <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a8aa:	683b      	ldr	r3, [r7, #0]
 800a8ac:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a8ae:	683b      	ldr	r3, [r7, #0]
 800a8b0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a8b2:	683b      	ldr	r3, [r7, #0]
 800a8b4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a8b6:	f000 fc6d 	bl	800b194 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	689b      	ldr	r3, [r3, #8]
 800a8c0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a8c2:	68bb      	ldr	r3, [r7, #8]
 800a8c4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800a8c8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	68ba      	ldr	r2, [r7, #8]
 800a8d0:	609a      	str	r2, [r3, #8]
      break;
 800a8d2:	e04f      	b.n	800a974 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a8d8:	683b      	ldr	r3, [r7, #0]
 800a8da:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a8dc:	683b      	ldr	r3, [r7, #0]
 800a8de:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a8e0:	683b      	ldr	r3, [r7, #0]
 800a8e2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a8e4:	f000 fc56 	bl	800b194 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	689a      	ldr	r2, [r3, #8]
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800a8f6:	609a      	str	r2, [r3, #8]
      break;
 800a8f8:	e03c      	b.n	800a974 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a8fe:	683b      	ldr	r3, [r7, #0]
 800a900:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a902:	683b      	ldr	r3, [r7, #0]
 800a904:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a906:	461a      	mov	r2, r3
 800a908:	f000 fbc6 	bl	800b098 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	2150      	movs	r1, #80	@ 0x50
 800a912:	4618      	mov	r0, r3
 800a914:	f000 fc20 	bl	800b158 <TIM_ITRx_SetConfig>
      break;
 800a918:	e02c      	b.n	800a974 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a91e:	683b      	ldr	r3, [r7, #0]
 800a920:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a922:	683b      	ldr	r3, [r7, #0]
 800a924:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a926:	461a      	mov	r2, r3
 800a928:	f000 fbe5 	bl	800b0f6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	2160      	movs	r1, #96	@ 0x60
 800a932:	4618      	mov	r0, r3
 800a934:	f000 fc10 	bl	800b158 <TIM_ITRx_SetConfig>
      break;
 800a938:	e01c      	b.n	800a974 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a93e:	683b      	ldr	r3, [r7, #0]
 800a940:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a942:	683b      	ldr	r3, [r7, #0]
 800a944:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a946:	461a      	mov	r2, r3
 800a948:	f000 fba6 	bl	800b098 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	2140      	movs	r1, #64	@ 0x40
 800a952:	4618      	mov	r0, r3
 800a954:	f000 fc00 	bl	800b158 <TIM_ITRx_SetConfig>
      break;
 800a958:	e00c      	b.n	800a974 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	681a      	ldr	r2, [r3, #0]
 800a95e:	683b      	ldr	r3, [r7, #0]
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	4619      	mov	r1, r3
 800a964:	4610      	mov	r0, r2
 800a966:	f000 fbf7 	bl	800b158 <TIM_ITRx_SetConfig>
      break;
 800a96a:	e003      	b.n	800a974 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800a96c:	2301      	movs	r3, #1
 800a96e:	73fb      	strb	r3, [r7, #15]
      break;
 800a970:	e000      	b.n	800a974 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800a972:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	2201      	movs	r2, #1
 800a978:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	2200      	movs	r2, #0
 800a980:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a984:	7bfb      	ldrb	r3, [r7, #15]
}
 800a986:	4618      	mov	r0, r3
 800a988:	3710      	adds	r7, #16
 800a98a:	46bd      	mov	sp, r7
 800a98c:	bd80      	pop	{r7, pc}
 800a98e:	bf00      	nop
 800a990:	ffceff88 	.word	0xffceff88
 800a994:	00100040 	.word	0x00100040
 800a998:	00100030 	.word	0x00100030
 800a99c:	00100020 	.word	0x00100020

0800a9a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a9a0:	b480      	push	{r7}
 800a9a2:	b085      	sub	sp, #20
 800a9a4:	af00      	add	r7, sp, #0
 800a9a6:	6078      	str	r0, [r7, #4]
 800a9a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	4a46      	ldr	r2, [pc, #280]	@ (800aacc <TIM_Base_SetConfig+0x12c>)
 800a9b4:	4293      	cmp	r3, r2
 800a9b6:	d013      	beq.n	800a9e0 <TIM_Base_SetConfig+0x40>
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a9be:	d00f      	beq.n	800a9e0 <TIM_Base_SetConfig+0x40>
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	4a43      	ldr	r2, [pc, #268]	@ (800aad0 <TIM_Base_SetConfig+0x130>)
 800a9c4:	4293      	cmp	r3, r2
 800a9c6:	d00b      	beq.n	800a9e0 <TIM_Base_SetConfig+0x40>
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	4a42      	ldr	r2, [pc, #264]	@ (800aad4 <TIM_Base_SetConfig+0x134>)
 800a9cc:	4293      	cmp	r3, r2
 800a9ce:	d007      	beq.n	800a9e0 <TIM_Base_SetConfig+0x40>
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	4a41      	ldr	r2, [pc, #260]	@ (800aad8 <TIM_Base_SetConfig+0x138>)
 800a9d4:	4293      	cmp	r3, r2
 800a9d6:	d003      	beq.n	800a9e0 <TIM_Base_SetConfig+0x40>
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	4a40      	ldr	r2, [pc, #256]	@ (800aadc <TIM_Base_SetConfig+0x13c>)
 800a9dc:	4293      	cmp	r3, r2
 800a9de:	d108      	bne.n	800a9f2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a9e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a9e8:	683b      	ldr	r3, [r7, #0]
 800a9ea:	685b      	ldr	r3, [r3, #4]
 800a9ec:	68fa      	ldr	r2, [r7, #12]
 800a9ee:	4313      	orrs	r3, r2
 800a9f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	4a35      	ldr	r2, [pc, #212]	@ (800aacc <TIM_Base_SetConfig+0x12c>)
 800a9f6:	4293      	cmp	r3, r2
 800a9f8:	d01f      	beq.n	800aa3a <TIM_Base_SetConfig+0x9a>
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800aa00:	d01b      	beq.n	800aa3a <TIM_Base_SetConfig+0x9a>
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	4a32      	ldr	r2, [pc, #200]	@ (800aad0 <TIM_Base_SetConfig+0x130>)
 800aa06:	4293      	cmp	r3, r2
 800aa08:	d017      	beq.n	800aa3a <TIM_Base_SetConfig+0x9a>
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	4a31      	ldr	r2, [pc, #196]	@ (800aad4 <TIM_Base_SetConfig+0x134>)
 800aa0e:	4293      	cmp	r3, r2
 800aa10:	d013      	beq.n	800aa3a <TIM_Base_SetConfig+0x9a>
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	4a30      	ldr	r2, [pc, #192]	@ (800aad8 <TIM_Base_SetConfig+0x138>)
 800aa16:	4293      	cmp	r3, r2
 800aa18:	d00f      	beq.n	800aa3a <TIM_Base_SetConfig+0x9a>
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	4a2f      	ldr	r2, [pc, #188]	@ (800aadc <TIM_Base_SetConfig+0x13c>)
 800aa1e:	4293      	cmp	r3, r2
 800aa20:	d00b      	beq.n	800aa3a <TIM_Base_SetConfig+0x9a>
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	4a2e      	ldr	r2, [pc, #184]	@ (800aae0 <TIM_Base_SetConfig+0x140>)
 800aa26:	4293      	cmp	r3, r2
 800aa28:	d007      	beq.n	800aa3a <TIM_Base_SetConfig+0x9a>
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	4a2d      	ldr	r2, [pc, #180]	@ (800aae4 <TIM_Base_SetConfig+0x144>)
 800aa2e:	4293      	cmp	r3, r2
 800aa30:	d003      	beq.n	800aa3a <TIM_Base_SetConfig+0x9a>
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	4a2c      	ldr	r2, [pc, #176]	@ (800aae8 <TIM_Base_SetConfig+0x148>)
 800aa36:	4293      	cmp	r3, r2
 800aa38:	d108      	bne.n	800aa4c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800aa40:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800aa42:	683b      	ldr	r3, [r7, #0]
 800aa44:	68db      	ldr	r3, [r3, #12]
 800aa46:	68fa      	ldr	r2, [r7, #12]
 800aa48:	4313      	orrs	r3, r2
 800aa4a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800aa52:	683b      	ldr	r3, [r7, #0]
 800aa54:	695b      	ldr	r3, [r3, #20]
 800aa56:	4313      	orrs	r3, r2
 800aa58:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	68fa      	ldr	r2, [r7, #12]
 800aa5e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800aa60:	683b      	ldr	r3, [r7, #0]
 800aa62:	689a      	ldr	r2, [r3, #8]
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800aa68:	683b      	ldr	r3, [r7, #0]
 800aa6a:	681a      	ldr	r2, [r3, #0]
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	4a16      	ldr	r2, [pc, #88]	@ (800aacc <TIM_Base_SetConfig+0x12c>)
 800aa74:	4293      	cmp	r3, r2
 800aa76:	d00f      	beq.n	800aa98 <TIM_Base_SetConfig+0xf8>
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	4a18      	ldr	r2, [pc, #96]	@ (800aadc <TIM_Base_SetConfig+0x13c>)
 800aa7c:	4293      	cmp	r3, r2
 800aa7e:	d00b      	beq.n	800aa98 <TIM_Base_SetConfig+0xf8>
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	4a17      	ldr	r2, [pc, #92]	@ (800aae0 <TIM_Base_SetConfig+0x140>)
 800aa84:	4293      	cmp	r3, r2
 800aa86:	d007      	beq.n	800aa98 <TIM_Base_SetConfig+0xf8>
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	4a16      	ldr	r2, [pc, #88]	@ (800aae4 <TIM_Base_SetConfig+0x144>)
 800aa8c:	4293      	cmp	r3, r2
 800aa8e:	d003      	beq.n	800aa98 <TIM_Base_SetConfig+0xf8>
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	4a15      	ldr	r2, [pc, #84]	@ (800aae8 <TIM_Base_SetConfig+0x148>)
 800aa94:	4293      	cmp	r3, r2
 800aa96:	d103      	bne.n	800aaa0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800aa98:	683b      	ldr	r3, [r7, #0]
 800aa9a:	691a      	ldr	r2, [r3, #16]
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	2201      	movs	r2, #1
 800aaa4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	691b      	ldr	r3, [r3, #16]
 800aaaa:	f003 0301 	and.w	r3, r3, #1
 800aaae:	2b01      	cmp	r3, #1
 800aab0:	d105      	bne.n	800aabe <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	691b      	ldr	r3, [r3, #16]
 800aab6:	f023 0201 	bic.w	r2, r3, #1
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	611a      	str	r2, [r3, #16]
  }
}
 800aabe:	bf00      	nop
 800aac0:	3714      	adds	r7, #20
 800aac2:	46bd      	mov	sp, r7
 800aac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aac8:	4770      	bx	lr
 800aaca:	bf00      	nop
 800aacc:	40010000 	.word	0x40010000
 800aad0:	40000400 	.word	0x40000400
 800aad4:	40000800 	.word	0x40000800
 800aad8:	40000c00 	.word	0x40000c00
 800aadc:	40010400 	.word	0x40010400
 800aae0:	40014000 	.word	0x40014000
 800aae4:	40014400 	.word	0x40014400
 800aae8:	40014800 	.word	0x40014800

0800aaec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800aaec:	b480      	push	{r7}
 800aaee:	b087      	sub	sp, #28
 800aaf0:	af00      	add	r7, sp, #0
 800aaf2:	6078      	str	r0, [r7, #4]
 800aaf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	6a1b      	ldr	r3, [r3, #32]
 800aafa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	6a1b      	ldr	r3, [r3, #32]
 800ab00:	f023 0201 	bic.w	r2, r3, #1
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	685b      	ldr	r3, [r3, #4]
 800ab0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	699b      	ldr	r3, [r3, #24]
 800ab12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800ab14:	68fa      	ldr	r2, [r7, #12]
 800ab16:	4b37      	ldr	r3, [pc, #220]	@ (800abf4 <TIM_OC1_SetConfig+0x108>)
 800ab18:	4013      	ands	r3, r2
 800ab1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	f023 0303 	bic.w	r3, r3, #3
 800ab22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ab24:	683b      	ldr	r3, [r7, #0]
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	68fa      	ldr	r2, [r7, #12]
 800ab2a:	4313      	orrs	r3, r2
 800ab2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800ab2e:	697b      	ldr	r3, [r7, #20]
 800ab30:	f023 0302 	bic.w	r3, r3, #2
 800ab34:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800ab36:	683b      	ldr	r3, [r7, #0]
 800ab38:	689b      	ldr	r3, [r3, #8]
 800ab3a:	697a      	ldr	r2, [r7, #20]
 800ab3c:	4313      	orrs	r3, r2
 800ab3e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	4a2d      	ldr	r2, [pc, #180]	@ (800abf8 <TIM_OC1_SetConfig+0x10c>)
 800ab44:	4293      	cmp	r3, r2
 800ab46:	d00f      	beq.n	800ab68 <TIM_OC1_SetConfig+0x7c>
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	4a2c      	ldr	r2, [pc, #176]	@ (800abfc <TIM_OC1_SetConfig+0x110>)
 800ab4c:	4293      	cmp	r3, r2
 800ab4e:	d00b      	beq.n	800ab68 <TIM_OC1_SetConfig+0x7c>
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	4a2b      	ldr	r2, [pc, #172]	@ (800ac00 <TIM_OC1_SetConfig+0x114>)
 800ab54:	4293      	cmp	r3, r2
 800ab56:	d007      	beq.n	800ab68 <TIM_OC1_SetConfig+0x7c>
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	4a2a      	ldr	r2, [pc, #168]	@ (800ac04 <TIM_OC1_SetConfig+0x118>)
 800ab5c:	4293      	cmp	r3, r2
 800ab5e:	d003      	beq.n	800ab68 <TIM_OC1_SetConfig+0x7c>
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	4a29      	ldr	r2, [pc, #164]	@ (800ac08 <TIM_OC1_SetConfig+0x11c>)
 800ab64:	4293      	cmp	r3, r2
 800ab66:	d10c      	bne.n	800ab82 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800ab68:	697b      	ldr	r3, [r7, #20]
 800ab6a:	f023 0308 	bic.w	r3, r3, #8
 800ab6e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800ab70:	683b      	ldr	r3, [r7, #0]
 800ab72:	68db      	ldr	r3, [r3, #12]
 800ab74:	697a      	ldr	r2, [r7, #20]
 800ab76:	4313      	orrs	r3, r2
 800ab78:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800ab7a:	697b      	ldr	r3, [r7, #20]
 800ab7c:	f023 0304 	bic.w	r3, r3, #4
 800ab80:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	4a1c      	ldr	r2, [pc, #112]	@ (800abf8 <TIM_OC1_SetConfig+0x10c>)
 800ab86:	4293      	cmp	r3, r2
 800ab88:	d00f      	beq.n	800abaa <TIM_OC1_SetConfig+0xbe>
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	4a1b      	ldr	r2, [pc, #108]	@ (800abfc <TIM_OC1_SetConfig+0x110>)
 800ab8e:	4293      	cmp	r3, r2
 800ab90:	d00b      	beq.n	800abaa <TIM_OC1_SetConfig+0xbe>
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	4a1a      	ldr	r2, [pc, #104]	@ (800ac00 <TIM_OC1_SetConfig+0x114>)
 800ab96:	4293      	cmp	r3, r2
 800ab98:	d007      	beq.n	800abaa <TIM_OC1_SetConfig+0xbe>
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	4a19      	ldr	r2, [pc, #100]	@ (800ac04 <TIM_OC1_SetConfig+0x118>)
 800ab9e:	4293      	cmp	r3, r2
 800aba0:	d003      	beq.n	800abaa <TIM_OC1_SetConfig+0xbe>
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	4a18      	ldr	r2, [pc, #96]	@ (800ac08 <TIM_OC1_SetConfig+0x11c>)
 800aba6:	4293      	cmp	r3, r2
 800aba8:	d111      	bne.n	800abce <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800abaa:	693b      	ldr	r3, [r7, #16]
 800abac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800abb0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800abb2:	693b      	ldr	r3, [r7, #16]
 800abb4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800abb8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800abba:	683b      	ldr	r3, [r7, #0]
 800abbc:	695b      	ldr	r3, [r3, #20]
 800abbe:	693a      	ldr	r2, [r7, #16]
 800abc0:	4313      	orrs	r3, r2
 800abc2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800abc4:	683b      	ldr	r3, [r7, #0]
 800abc6:	699b      	ldr	r3, [r3, #24]
 800abc8:	693a      	ldr	r2, [r7, #16]
 800abca:	4313      	orrs	r3, r2
 800abcc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	693a      	ldr	r2, [r7, #16]
 800abd2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	68fa      	ldr	r2, [r7, #12]
 800abd8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800abda:	683b      	ldr	r3, [r7, #0]
 800abdc:	685a      	ldr	r2, [r3, #4]
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	697a      	ldr	r2, [r7, #20]
 800abe6:	621a      	str	r2, [r3, #32]
}
 800abe8:	bf00      	nop
 800abea:	371c      	adds	r7, #28
 800abec:	46bd      	mov	sp, r7
 800abee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abf2:	4770      	bx	lr
 800abf4:	fffeff8f 	.word	0xfffeff8f
 800abf8:	40010000 	.word	0x40010000
 800abfc:	40010400 	.word	0x40010400
 800ac00:	40014000 	.word	0x40014000
 800ac04:	40014400 	.word	0x40014400
 800ac08:	40014800 	.word	0x40014800

0800ac0c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ac0c:	b480      	push	{r7}
 800ac0e:	b087      	sub	sp, #28
 800ac10:	af00      	add	r7, sp, #0
 800ac12:	6078      	str	r0, [r7, #4]
 800ac14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	6a1b      	ldr	r3, [r3, #32]
 800ac1a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	6a1b      	ldr	r3, [r3, #32]
 800ac20:	f023 0210 	bic.w	r2, r3, #16
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	685b      	ldr	r3, [r3, #4]
 800ac2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	699b      	ldr	r3, [r3, #24]
 800ac32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800ac34:	68fa      	ldr	r2, [r7, #12]
 800ac36:	4b34      	ldr	r3, [pc, #208]	@ (800ad08 <TIM_OC2_SetConfig+0xfc>)
 800ac38:	4013      	ands	r3, r2
 800ac3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ac42:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ac44:	683b      	ldr	r3, [r7, #0]
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	021b      	lsls	r3, r3, #8
 800ac4a:	68fa      	ldr	r2, [r7, #12]
 800ac4c:	4313      	orrs	r3, r2
 800ac4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800ac50:	697b      	ldr	r3, [r7, #20]
 800ac52:	f023 0320 	bic.w	r3, r3, #32
 800ac56:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800ac58:	683b      	ldr	r3, [r7, #0]
 800ac5a:	689b      	ldr	r3, [r3, #8]
 800ac5c:	011b      	lsls	r3, r3, #4
 800ac5e:	697a      	ldr	r2, [r7, #20]
 800ac60:	4313      	orrs	r3, r2
 800ac62:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	4a29      	ldr	r2, [pc, #164]	@ (800ad0c <TIM_OC2_SetConfig+0x100>)
 800ac68:	4293      	cmp	r3, r2
 800ac6a:	d003      	beq.n	800ac74 <TIM_OC2_SetConfig+0x68>
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	4a28      	ldr	r2, [pc, #160]	@ (800ad10 <TIM_OC2_SetConfig+0x104>)
 800ac70:	4293      	cmp	r3, r2
 800ac72:	d10d      	bne.n	800ac90 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800ac74:	697b      	ldr	r3, [r7, #20]
 800ac76:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ac7a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800ac7c:	683b      	ldr	r3, [r7, #0]
 800ac7e:	68db      	ldr	r3, [r3, #12]
 800ac80:	011b      	lsls	r3, r3, #4
 800ac82:	697a      	ldr	r2, [r7, #20]
 800ac84:	4313      	orrs	r3, r2
 800ac86:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800ac88:	697b      	ldr	r3, [r7, #20]
 800ac8a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ac8e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	4a1e      	ldr	r2, [pc, #120]	@ (800ad0c <TIM_OC2_SetConfig+0x100>)
 800ac94:	4293      	cmp	r3, r2
 800ac96:	d00f      	beq.n	800acb8 <TIM_OC2_SetConfig+0xac>
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	4a1d      	ldr	r2, [pc, #116]	@ (800ad10 <TIM_OC2_SetConfig+0x104>)
 800ac9c:	4293      	cmp	r3, r2
 800ac9e:	d00b      	beq.n	800acb8 <TIM_OC2_SetConfig+0xac>
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	4a1c      	ldr	r2, [pc, #112]	@ (800ad14 <TIM_OC2_SetConfig+0x108>)
 800aca4:	4293      	cmp	r3, r2
 800aca6:	d007      	beq.n	800acb8 <TIM_OC2_SetConfig+0xac>
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	4a1b      	ldr	r2, [pc, #108]	@ (800ad18 <TIM_OC2_SetConfig+0x10c>)
 800acac:	4293      	cmp	r3, r2
 800acae:	d003      	beq.n	800acb8 <TIM_OC2_SetConfig+0xac>
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	4a1a      	ldr	r2, [pc, #104]	@ (800ad1c <TIM_OC2_SetConfig+0x110>)
 800acb4:	4293      	cmp	r3, r2
 800acb6:	d113      	bne.n	800ace0 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800acb8:	693b      	ldr	r3, [r7, #16]
 800acba:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800acbe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800acc0:	693b      	ldr	r3, [r7, #16]
 800acc2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800acc6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800acc8:	683b      	ldr	r3, [r7, #0]
 800acca:	695b      	ldr	r3, [r3, #20]
 800accc:	009b      	lsls	r3, r3, #2
 800acce:	693a      	ldr	r2, [r7, #16]
 800acd0:	4313      	orrs	r3, r2
 800acd2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800acd4:	683b      	ldr	r3, [r7, #0]
 800acd6:	699b      	ldr	r3, [r3, #24]
 800acd8:	009b      	lsls	r3, r3, #2
 800acda:	693a      	ldr	r2, [r7, #16]
 800acdc:	4313      	orrs	r3, r2
 800acde:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	693a      	ldr	r2, [r7, #16]
 800ace4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	68fa      	ldr	r2, [r7, #12]
 800acea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800acec:	683b      	ldr	r3, [r7, #0]
 800acee:	685a      	ldr	r2, [r3, #4]
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	697a      	ldr	r2, [r7, #20]
 800acf8:	621a      	str	r2, [r3, #32]
}
 800acfa:	bf00      	nop
 800acfc:	371c      	adds	r7, #28
 800acfe:	46bd      	mov	sp, r7
 800ad00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad04:	4770      	bx	lr
 800ad06:	bf00      	nop
 800ad08:	feff8fff 	.word	0xfeff8fff
 800ad0c:	40010000 	.word	0x40010000
 800ad10:	40010400 	.word	0x40010400
 800ad14:	40014000 	.word	0x40014000
 800ad18:	40014400 	.word	0x40014400
 800ad1c:	40014800 	.word	0x40014800

0800ad20 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ad20:	b480      	push	{r7}
 800ad22:	b087      	sub	sp, #28
 800ad24:	af00      	add	r7, sp, #0
 800ad26:	6078      	str	r0, [r7, #4]
 800ad28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	6a1b      	ldr	r3, [r3, #32]
 800ad2e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	6a1b      	ldr	r3, [r3, #32]
 800ad34:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	685b      	ldr	r3, [r3, #4]
 800ad40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	69db      	ldr	r3, [r3, #28]
 800ad46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800ad48:	68fa      	ldr	r2, [r7, #12]
 800ad4a:	4b33      	ldr	r3, [pc, #204]	@ (800ae18 <TIM_OC3_SetConfig+0xf8>)
 800ad4c:	4013      	ands	r3, r2
 800ad4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	f023 0303 	bic.w	r3, r3, #3
 800ad56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ad58:	683b      	ldr	r3, [r7, #0]
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	68fa      	ldr	r2, [r7, #12]
 800ad5e:	4313      	orrs	r3, r2
 800ad60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800ad62:	697b      	ldr	r3, [r7, #20]
 800ad64:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800ad68:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800ad6a:	683b      	ldr	r3, [r7, #0]
 800ad6c:	689b      	ldr	r3, [r3, #8]
 800ad6e:	021b      	lsls	r3, r3, #8
 800ad70:	697a      	ldr	r2, [r7, #20]
 800ad72:	4313      	orrs	r3, r2
 800ad74:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	4a28      	ldr	r2, [pc, #160]	@ (800ae1c <TIM_OC3_SetConfig+0xfc>)
 800ad7a:	4293      	cmp	r3, r2
 800ad7c:	d003      	beq.n	800ad86 <TIM_OC3_SetConfig+0x66>
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	4a27      	ldr	r2, [pc, #156]	@ (800ae20 <TIM_OC3_SetConfig+0x100>)
 800ad82:	4293      	cmp	r3, r2
 800ad84:	d10d      	bne.n	800ada2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800ad86:	697b      	ldr	r3, [r7, #20]
 800ad88:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800ad8c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800ad8e:	683b      	ldr	r3, [r7, #0]
 800ad90:	68db      	ldr	r3, [r3, #12]
 800ad92:	021b      	lsls	r3, r3, #8
 800ad94:	697a      	ldr	r2, [r7, #20]
 800ad96:	4313      	orrs	r3, r2
 800ad98:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800ad9a:	697b      	ldr	r3, [r7, #20]
 800ad9c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800ada0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	4a1d      	ldr	r2, [pc, #116]	@ (800ae1c <TIM_OC3_SetConfig+0xfc>)
 800ada6:	4293      	cmp	r3, r2
 800ada8:	d00f      	beq.n	800adca <TIM_OC3_SetConfig+0xaa>
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	4a1c      	ldr	r2, [pc, #112]	@ (800ae20 <TIM_OC3_SetConfig+0x100>)
 800adae:	4293      	cmp	r3, r2
 800adb0:	d00b      	beq.n	800adca <TIM_OC3_SetConfig+0xaa>
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	4a1b      	ldr	r2, [pc, #108]	@ (800ae24 <TIM_OC3_SetConfig+0x104>)
 800adb6:	4293      	cmp	r3, r2
 800adb8:	d007      	beq.n	800adca <TIM_OC3_SetConfig+0xaa>
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	4a1a      	ldr	r2, [pc, #104]	@ (800ae28 <TIM_OC3_SetConfig+0x108>)
 800adbe:	4293      	cmp	r3, r2
 800adc0:	d003      	beq.n	800adca <TIM_OC3_SetConfig+0xaa>
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	4a19      	ldr	r2, [pc, #100]	@ (800ae2c <TIM_OC3_SetConfig+0x10c>)
 800adc6:	4293      	cmp	r3, r2
 800adc8:	d113      	bne.n	800adf2 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800adca:	693b      	ldr	r3, [r7, #16]
 800adcc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800add0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800add2:	693b      	ldr	r3, [r7, #16]
 800add4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800add8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800adda:	683b      	ldr	r3, [r7, #0]
 800addc:	695b      	ldr	r3, [r3, #20]
 800adde:	011b      	lsls	r3, r3, #4
 800ade0:	693a      	ldr	r2, [r7, #16]
 800ade2:	4313      	orrs	r3, r2
 800ade4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800ade6:	683b      	ldr	r3, [r7, #0]
 800ade8:	699b      	ldr	r3, [r3, #24]
 800adea:	011b      	lsls	r3, r3, #4
 800adec:	693a      	ldr	r2, [r7, #16]
 800adee:	4313      	orrs	r3, r2
 800adf0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	693a      	ldr	r2, [r7, #16]
 800adf6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	68fa      	ldr	r2, [r7, #12]
 800adfc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800adfe:	683b      	ldr	r3, [r7, #0]
 800ae00:	685a      	ldr	r2, [r3, #4]
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	697a      	ldr	r2, [r7, #20]
 800ae0a:	621a      	str	r2, [r3, #32]
}
 800ae0c:	bf00      	nop
 800ae0e:	371c      	adds	r7, #28
 800ae10:	46bd      	mov	sp, r7
 800ae12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae16:	4770      	bx	lr
 800ae18:	fffeff8f 	.word	0xfffeff8f
 800ae1c:	40010000 	.word	0x40010000
 800ae20:	40010400 	.word	0x40010400
 800ae24:	40014000 	.word	0x40014000
 800ae28:	40014400 	.word	0x40014400
 800ae2c:	40014800 	.word	0x40014800

0800ae30 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ae30:	b480      	push	{r7}
 800ae32:	b087      	sub	sp, #28
 800ae34:	af00      	add	r7, sp, #0
 800ae36:	6078      	str	r0, [r7, #4]
 800ae38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	6a1b      	ldr	r3, [r3, #32]
 800ae3e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	6a1b      	ldr	r3, [r3, #32]
 800ae44:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	685b      	ldr	r3, [r3, #4]
 800ae50:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	69db      	ldr	r3, [r3, #28]
 800ae56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800ae58:	68fa      	ldr	r2, [r7, #12]
 800ae5a:	4b24      	ldr	r3, [pc, #144]	@ (800aeec <TIM_OC4_SetConfig+0xbc>)
 800ae5c:	4013      	ands	r3, r2
 800ae5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ae66:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ae68:	683b      	ldr	r3, [r7, #0]
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	021b      	lsls	r3, r3, #8
 800ae6e:	68fa      	ldr	r2, [r7, #12]
 800ae70:	4313      	orrs	r3, r2
 800ae72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ae74:	693b      	ldr	r3, [r7, #16]
 800ae76:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800ae7a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ae7c:	683b      	ldr	r3, [r7, #0]
 800ae7e:	689b      	ldr	r3, [r3, #8]
 800ae80:	031b      	lsls	r3, r3, #12
 800ae82:	693a      	ldr	r2, [r7, #16]
 800ae84:	4313      	orrs	r3, r2
 800ae86:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	4a19      	ldr	r2, [pc, #100]	@ (800aef0 <TIM_OC4_SetConfig+0xc0>)
 800ae8c:	4293      	cmp	r3, r2
 800ae8e:	d00f      	beq.n	800aeb0 <TIM_OC4_SetConfig+0x80>
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	4a18      	ldr	r2, [pc, #96]	@ (800aef4 <TIM_OC4_SetConfig+0xc4>)
 800ae94:	4293      	cmp	r3, r2
 800ae96:	d00b      	beq.n	800aeb0 <TIM_OC4_SetConfig+0x80>
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	4a17      	ldr	r2, [pc, #92]	@ (800aef8 <TIM_OC4_SetConfig+0xc8>)
 800ae9c:	4293      	cmp	r3, r2
 800ae9e:	d007      	beq.n	800aeb0 <TIM_OC4_SetConfig+0x80>
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	4a16      	ldr	r2, [pc, #88]	@ (800aefc <TIM_OC4_SetConfig+0xcc>)
 800aea4:	4293      	cmp	r3, r2
 800aea6:	d003      	beq.n	800aeb0 <TIM_OC4_SetConfig+0x80>
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	4a15      	ldr	r2, [pc, #84]	@ (800af00 <TIM_OC4_SetConfig+0xd0>)
 800aeac:	4293      	cmp	r3, r2
 800aeae:	d109      	bne.n	800aec4 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800aeb0:	697b      	ldr	r3, [r7, #20]
 800aeb2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800aeb6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800aeb8:	683b      	ldr	r3, [r7, #0]
 800aeba:	695b      	ldr	r3, [r3, #20]
 800aebc:	019b      	lsls	r3, r3, #6
 800aebe:	697a      	ldr	r2, [r7, #20]
 800aec0:	4313      	orrs	r3, r2
 800aec2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	697a      	ldr	r2, [r7, #20]
 800aec8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	68fa      	ldr	r2, [r7, #12]
 800aece:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800aed0:	683b      	ldr	r3, [r7, #0]
 800aed2:	685a      	ldr	r2, [r3, #4]
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	693a      	ldr	r2, [r7, #16]
 800aedc:	621a      	str	r2, [r3, #32]
}
 800aede:	bf00      	nop
 800aee0:	371c      	adds	r7, #28
 800aee2:	46bd      	mov	sp, r7
 800aee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aee8:	4770      	bx	lr
 800aeea:	bf00      	nop
 800aeec:	feff8fff 	.word	0xfeff8fff
 800aef0:	40010000 	.word	0x40010000
 800aef4:	40010400 	.word	0x40010400
 800aef8:	40014000 	.word	0x40014000
 800aefc:	40014400 	.word	0x40014400
 800af00:	40014800 	.word	0x40014800

0800af04 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800af04:	b480      	push	{r7}
 800af06:	b087      	sub	sp, #28
 800af08:	af00      	add	r7, sp, #0
 800af0a:	6078      	str	r0, [r7, #4]
 800af0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	6a1b      	ldr	r3, [r3, #32]
 800af12:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	6a1b      	ldr	r3, [r3, #32]
 800af18:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	685b      	ldr	r3, [r3, #4]
 800af24:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800af2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800af2c:	68fa      	ldr	r2, [r7, #12]
 800af2e:	4b21      	ldr	r3, [pc, #132]	@ (800afb4 <TIM_OC5_SetConfig+0xb0>)
 800af30:	4013      	ands	r3, r2
 800af32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800af34:	683b      	ldr	r3, [r7, #0]
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	68fa      	ldr	r2, [r7, #12]
 800af3a:	4313      	orrs	r3, r2
 800af3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800af3e:	693b      	ldr	r3, [r7, #16]
 800af40:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800af44:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800af46:	683b      	ldr	r3, [r7, #0]
 800af48:	689b      	ldr	r3, [r3, #8]
 800af4a:	041b      	lsls	r3, r3, #16
 800af4c:	693a      	ldr	r2, [r7, #16]
 800af4e:	4313      	orrs	r3, r2
 800af50:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	4a18      	ldr	r2, [pc, #96]	@ (800afb8 <TIM_OC5_SetConfig+0xb4>)
 800af56:	4293      	cmp	r3, r2
 800af58:	d00f      	beq.n	800af7a <TIM_OC5_SetConfig+0x76>
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	4a17      	ldr	r2, [pc, #92]	@ (800afbc <TIM_OC5_SetConfig+0xb8>)
 800af5e:	4293      	cmp	r3, r2
 800af60:	d00b      	beq.n	800af7a <TIM_OC5_SetConfig+0x76>
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	4a16      	ldr	r2, [pc, #88]	@ (800afc0 <TIM_OC5_SetConfig+0xbc>)
 800af66:	4293      	cmp	r3, r2
 800af68:	d007      	beq.n	800af7a <TIM_OC5_SetConfig+0x76>
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	4a15      	ldr	r2, [pc, #84]	@ (800afc4 <TIM_OC5_SetConfig+0xc0>)
 800af6e:	4293      	cmp	r3, r2
 800af70:	d003      	beq.n	800af7a <TIM_OC5_SetConfig+0x76>
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	4a14      	ldr	r2, [pc, #80]	@ (800afc8 <TIM_OC5_SetConfig+0xc4>)
 800af76:	4293      	cmp	r3, r2
 800af78:	d109      	bne.n	800af8e <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800af7a:	697b      	ldr	r3, [r7, #20]
 800af7c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800af80:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800af82:	683b      	ldr	r3, [r7, #0]
 800af84:	695b      	ldr	r3, [r3, #20]
 800af86:	021b      	lsls	r3, r3, #8
 800af88:	697a      	ldr	r2, [r7, #20]
 800af8a:	4313      	orrs	r3, r2
 800af8c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	697a      	ldr	r2, [r7, #20]
 800af92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	68fa      	ldr	r2, [r7, #12]
 800af98:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800af9a:	683b      	ldr	r3, [r7, #0]
 800af9c:	685a      	ldr	r2, [r3, #4]
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	693a      	ldr	r2, [r7, #16]
 800afa6:	621a      	str	r2, [r3, #32]
}
 800afa8:	bf00      	nop
 800afaa:	371c      	adds	r7, #28
 800afac:	46bd      	mov	sp, r7
 800afae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afb2:	4770      	bx	lr
 800afb4:	fffeff8f 	.word	0xfffeff8f
 800afb8:	40010000 	.word	0x40010000
 800afbc:	40010400 	.word	0x40010400
 800afc0:	40014000 	.word	0x40014000
 800afc4:	40014400 	.word	0x40014400
 800afc8:	40014800 	.word	0x40014800

0800afcc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800afcc:	b480      	push	{r7}
 800afce:	b087      	sub	sp, #28
 800afd0:	af00      	add	r7, sp, #0
 800afd2:	6078      	str	r0, [r7, #4]
 800afd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	6a1b      	ldr	r3, [r3, #32]
 800afda:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	6a1b      	ldr	r3, [r3, #32]
 800afe0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	685b      	ldr	r3, [r3, #4]
 800afec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aff2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800aff4:	68fa      	ldr	r2, [r7, #12]
 800aff6:	4b22      	ldr	r3, [pc, #136]	@ (800b080 <TIM_OC6_SetConfig+0xb4>)
 800aff8:	4013      	ands	r3, r2
 800affa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800affc:	683b      	ldr	r3, [r7, #0]
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	021b      	lsls	r3, r3, #8
 800b002:	68fa      	ldr	r2, [r7, #12]
 800b004:	4313      	orrs	r3, r2
 800b006:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800b008:	693b      	ldr	r3, [r7, #16]
 800b00a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800b00e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800b010:	683b      	ldr	r3, [r7, #0]
 800b012:	689b      	ldr	r3, [r3, #8]
 800b014:	051b      	lsls	r3, r3, #20
 800b016:	693a      	ldr	r2, [r7, #16]
 800b018:	4313      	orrs	r3, r2
 800b01a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	4a19      	ldr	r2, [pc, #100]	@ (800b084 <TIM_OC6_SetConfig+0xb8>)
 800b020:	4293      	cmp	r3, r2
 800b022:	d00f      	beq.n	800b044 <TIM_OC6_SetConfig+0x78>
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	4a18      	ldr	r2, [pc, #96]	@ (800b088 <TIM_OC6_SetConfig+0xbc>)
 800b028:	4293      	cmp	r3, r2
 800b02a:	d00b      	beq.n	800b044 <TIM_OC6_SetConfig+0x78>
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	4a17      	ldr	r2, [pc, #92]	@ (800b08c <TIM_OC6_SetConfig+0xc0>)
 800b030:	4293      	cmp	r3, r2
 800b032:	d007      	beq.n	800b044 <TIM_OC6_SetConfig+0x78>
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	4a16      	ldr	r2, [pc, #88]	@ (800b090 <TIM_OC6_SetConfig+0xc4>)
 800b038:	4293      	cmp	r3, r2
 800b03a:	d003      	beq.n	800b044 <TIM_OC6_SetConfig+0x78>
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	4a15      	ldr	r2, [pc, #84]	@ (800b094 <TIM_OC6_SetConfig+0xc8>)
 800b040:	4293      	cmp	r3, r2
 800b042:	d109      	bne.n	800b058 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800b044:	697b      	ldr	r3, [r7, #20]
 800b046:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800b04a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800b04c:	683b      	ldr	r3, [r7, #0]
 800b04e:	695b      	ldr	r3, [r3, #20]
 800b050:	029b      	lsls	r3, r3, #10
 800b052:	697a      	ldr	r2, [r7, #20]
 800b054:	4313      	orrs	r3, r2
 800b056:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	697a      	ldr	r2, [r7, #20]
 800b05c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	68fa      	ldr	r2, [r7, #12]
 800b062:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800b064:	683b      	ldr	r3, [r7, #0]
 800b066:	685a      	ldr	r2, [r3, #4]
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	693a      	ldr	r2, [r7, #16]
 800b070:	621a      	str	r2, [r3, #32]
}
 800b072:	bf00      	nop
 800b074:	371c      	adds	r7, #28
 800b076:	46bd      	mov	sp, r7
 800b078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b07c:	4770      	bx	lr
 800b07e:	bf00      	nop
 800b080:	feff8fff 	.word	0xfeff8fff
 800b084:	40010000 	.word	0x40010000
 800b088:	40010400 	.word	0x40010400
 800b08c:	40014000 	.word	0x40014000
 800b090:	40014400 	.word	0x40014400
 800b094:	40014800 	.word	0x40014800

0800b098 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b098:	b480      	push	{r7}
 800b09a:	b087      	sub	sp, #28
 800b09c:	af00      	add	r7, sp, #0
 800b09e:	60f8      	str	r0, [r7, #12]
 800b0a0:	60b9      	str	r1, [r7, #8]
 800b0a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	6a1b      	ldr	r3, [r3, #32]
 800b0a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b0aa:	68fb      	ldr	r3, [r7, #12]
 800b0ac:	6a1b      	ldr	r3, [r3, #32]
 800b0ae:	f023 0201 	bic.w	r2, r3, #1
 800b0b2:	68fb      	ldr	r3, [r7, #12]
 800b0b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	699b      	ldr	r3, [r3, #24]
 800b0ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b0bc:	693b      	ldr	r3, [r7, #16]
 800b0be:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800b0c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	011b      	lsls	r3, r3, #4
 800b0c8:	693a      	ldr	r2, [r7, #16]
 800b0ca:	4313      	orrs	r3, r2
 800b0cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b0ce:	697b      	ldr	r3, [r7, #20]
 800b0d0:	f023 030a 	bic.w	r3, r3, #10
 800b0d4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b0d6:	697a      	ldr	r2, [r7, #20]
 800b0d8:	68bb      	ldr	r3, [r7, #8]
 800b0da:	4313      	orrs	r3, r2
 800b0dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	693a      	ldr	r2, [r7, #16]
 800b0e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b0e4:	68fb      	ldr	r3, [r7, #12]
 800b0e6:	697a      	ldr	r2, [r7, #20]
 800b0e8:	621a      	str	r2, [r3, #32]
}
 800b0ea:	bf00      	nop
 800b0ec:	371c      	adds	r7, #28
 800b0ee:	46bd      	mov	sp, r7
 800b0f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0f4:	4770      	bx	lr

0800b0f6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b0f6:	b480      	push	{r7}
 800b0f8:	b087      	sub	sp, #28
 800b0fa:	af00      	add	r7, sp, #0
 800b0fc:	60f8      	str	r0, [r7, #12]
 800b0fe:	60b9      	str	r1, [r7, #8]
 800b100:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800b102:	68fb      	ldr	r3, [r7, #12]
 800b104:	6a1b      	ldr	r3, [r3, #32]
 800b106:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	6a1b      	ldr	r3, [r3, #32]
 800b10c:	f023 0210 	bic.w	r2, r3, #16
 800b110:	68fb      	ldr	r3, [r7, #12]
 800b112:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	699b      	ldr	r3, [r3, #24]
 800b118:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b11a:	693b      	ldr	r3, [r7, #16]
 800b11c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800b120:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	031b      	lsls	r3, r3, #12
 800b126:	693a      	ldr	r2, [r7, #16]
 800b128:	4313      	orrs	r3, r2
 800b12a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b12c:	697b      	ldr	r3, [r7, #20]
 800b12e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800b132:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b134:	68bb      	ldr	r3, [r7, #8]
 800b136:	011b      	lsls	r3, r3, #4
 800b138:	697a      	ldr	r2, [r7, #20]
 800b13a:	4313      	orrs	r3, r2
 800b13c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	693a      	ldr	r2, [r7, #16]
 800b142:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b144:	68fb      	ldr	r3, [r7, #12]
 800b146:	697a      	ldr	r2, [r7, #20]
 800b148:	621a      	str	r2, [r3, #32]
}
 800b14a:	bf00      	nop
 800b14c:	371c      	adds	r7, #28
 800b14e:	46bd      	mov	sp, r7
 800b150:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b154:	4770      	bx	lr
	...

0800b158 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b158:	b480      	push	{r7}
 800b15a:	b085      	sub	sp, #20
 800b15c:	af00      	add	r7, sp, #0
 800b15e:	6078      	str	r0, [r7, #4]
 800b160:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	689b      	ldr	r3, [r3, #8]
 800b166:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b168:	68fa      	ldr	r2, [r7, #12]
 800b16a:	4b09      	ldr	r3, [pc, #36]	@ (800b190 <TIM_ITRx_SetConfig+0x38>)
 800b16c:	4013      	ands	r3, r2
 800b16e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b170:	683a      	ldr	r2, [r7, #0]
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	4313      	orrs	r3, r2
 800b176:	f043 0307 	orr.w	r3, r3, #7
 800b17a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	68fa      	ldr	r2, [r7, #12]
 800b180:	609a      	str	r2, [r3, #8]
}
 800b182:	bf00      	nop
 800b184:	3714      	adds	r7, #20
 800b186:	46bd      	mov	sp, r7
 800b188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b18c:	4770      	bx	lr
 800b18e:	bf00      	nop
 800b190:	ffcfff8f 	.word	0xffcfff8f

0800b194 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b194:	b480      	push	{r7}
 800b196:	b087      	sub	sp, #28
 800b198:	af00      	add	r7, sp, #0
 800b19a:	60f8      	str	r0, [r7, #12]
 800b19c:	60b9      	str	r1, [r7, #8]
 800b19e:	607a      	str	r2, [r7, #4]
 800b1a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b1a2:	68fb      	ldr	r3, [r7, #12]
 800b1a4:	689b      	ldr	r3, [r3, #8]
 800b1a6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b1a8:	697b      	ldr	r3, [r7, #20]
 800b1aa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b1ae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b1b0:	683b      	ldr	r3, [r7, #0]
 800b1b2:	021a      	lsls	r2, r3, #8
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	431a      	orrs	r2, r3
 800b1b8:	68bb      	ldr	r3, [r7, #8]
 800b1ba:	4313      	orrs	r3, r2
 800b1bc:	697a      	ldr	r2, [r7, #20]
 800b1be:	4313      	orrs	r3, r2
 800b1c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b1c2:	68fb      	ldr	r3, [r7, #12]
 800b1c4:	697a      	ldr	r2, [r7, #20]
 800b1c6:	609a      	str	r2, [r3, #8]
}
 800b1c8:	bf00      	nop
 800b1ca:	371c      	adds	r7, #28
 800b1cc:	46bd      	mov	sp, r7
 800b1ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1d2:	4770      	bx	lr

0800b1d4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b1d4:	b480      	push	{r7}
 800b1d6:	b087      	sub	sp, #28
 800b1d8:	af00      	add	r7, sp, #0
 800b1da:	60f8      	str	r0, [r7, #12]
 800b1dc:	60b9      	str	r1, [r7, #8]
 800b1de:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b1e0:	68bb      	ldr	r3, [r7, #8]
 800b1e2:	f003 031f 	and.w	r3, r3, #31
 800b1e6:	2201      	movs	r2, #1
 800b1e8:	fa02 f303 	lsl.w	r3, r2, r3
 800b1ec:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b1ee:	68fb      	ldr	r3, [r7, #12]
 800b1f0:	6a1a      	ldr	r2, [r3, #32]
 800b1f2:	697b      	ldr	r3, [r7, #20]
 800b1f4:	43db      	mvns	r3, r3
 800b1f6:	401a      	ands	r2, r3
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	6a1a      	ldr	r2, [r3, #32]
 800b200:	68bb      	ldr	r3, [r7, #8]
 800b202:	f003 031f 	and.w	r3, r3, #31
 800b206:	6879      	ldr	r1, [r7, #4]
 800b208:	fa01 f303 	lsl.w	r3, r1, r3
 800b20c:	431a      	orrs	r2, r3
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	621a      	str	r2, [r3, #32]
}
 800b212:	bf00      	nop
 800b214:	371c      	adds	r7, #28
 800b216:	46bd      	mov	sp, r7
 800b218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b21c:	4770      	bx	lr
	...

0800b220 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b220:	b480      	push	{r7}
 800b222:	b085      	sub	sp, #20
 800b224:	af00      	add	r7, sp, #0
 800b226:	6078      	str	r0, [r7, #4]
 800b228:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b230:	2b01      	cmp	r3, #1
 800b232:	d101      	bne.n	800b238 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b234:	2302      	movs	r3, #2
 800b236:	e06d      	b.n	800b314 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	2201      	movs	r2, #1
 800b23c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	2202      	movs	r2, #2
 800b244:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	685b      	ldr	r3, [r3, #4]
 800b24e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	689b      	ldr	r3, [r3, #8]
 800b256:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	4a30      	ldr	r2, [pc, #192]	@ (800b320 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b25e:	4293      	cmp	r3, r2
 800b260:	d004      	beq.n	800b26c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	4a2f      	ldr	r2, [pc, #188]	@ (800b324 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b268:	4293      	cmp	r3, r2
 800b26a:	d108      	bne.n	800b27e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b26c:	68fb      	ldr	r3, [r7, #12]
 800b26e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800b272:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b274:	683b      	ldr	r3, [r7, #0]
 800b276:	685b      	ldr	r3, [r3, #4]
 800b278:	68fa      	ldr	r2, [r7, #12]
 800b27a:	4313      	orrs	r3, r2
 800b27c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b284:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b286:	683b      	ldr	r3, [r7, #0]
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	68fa      	ldr	r2, [r7, #12]
 800b28c:	4313      	orrs	r3, r2
 800b28e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	68fa      	ldr	r2, [r7, #12]
 800b296:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	4a20      	ldr	r2, [pc, #128]	@ (800b320 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b29e:	4293      	cmp	r3, r2
 800b2a0:	d022      	beq.n	800b2e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b2aa:	d01d      	beq.n	800b2e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	4a1d      	ldr	r2, [pc, #116]	@ (800b328 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800b2b2:	4293      	cmp	r3, r2
 800b2b4:	d018      	beq.n	800b2e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	4a1c      	ldr	r2, [pc, #112]	@ (800b32c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800b2bc:	4293      	cmp	r3, r2
 800b2be:	d013      	beq.n	800b2e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	4a1a      	ldr	r2, [pc, #104]	@ (800b330 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800b2c6:	4293      	cmp	r3, r2
 800b2c8:	d00e      	beq.n	800b2e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	4a15      	ldr	r2, [pc, #84]	@ (800b324 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b2d0:	4293      	cmp	r3, r2
 800b2d2:	d009      	beq.n	800b2e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	4a16      	ldr	r2, [pc, #88]	@ (800b334 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b2da:	4293      	cmp	r3, r2
 800b2dc:	d004      	beq.n	800b2e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	4a15      	ldr	r2, [pc, #84]	@ (800b338 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b2e4:	4293      	cmp	r3, r2
 800b2e6:	d10c      	bne.n	800b302 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b2e8:	68bb      	ldr	r3, [r7, #8]
 800b2ea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b2ee:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b2f0:	683b      	ldr	r3, [r7, #0]
 800b2f2:	689b      	ldr	r3, [r3, #8]
 800b2f4:	68ba      	ldr	r2, [r7, #8]
 800b2f6:	4313      	orrs	r3, r2
 800b2f8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	68ba      	ldr	r2, [r7, #8]
 800b300:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	2201      	movs	r2, #1
 800b306:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	2200      	movs	r2, #0
 800b30e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800b312:	2300      	movs	r3, #0
}
 800b314:	4618      	mov	r0, r3
 800b316:	3714      	adds	r7, #20
 800b318:	46bd      	mov	sp, r7
 800b31a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b31e:	4770      	bx	lr
 800b320:	40010000 	.word	0x40010000
 800b324:	40010400 	.word	0x40010400
 800b328:	40000400 	.word	0x40000400
 800b32c:	40000800 	.word	0x40000800
 800b330:	40000c00 	.word	0x40000c00
 800b334:	40001800 	.word	0x40001800
 800b338:	40014000 	.word	0x40014000

0800b33c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b33c:	b580      	push	{r7, lr}
 800b33e:	b082      	sub	sp, #8
 800b340:	af00      	add	r7, sp, #0
 800b342:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	2b00      	cmp	r3, #0
 800b348:	d101      	bne.n	800b34e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b34a:	2301      	movs	r3, #1
 800b34c:	e042      	b.n	800b3d4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b354:	2b00      	cmp	r3, #0
 800b356:	d106      	bne.n	800b366 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	2200      	movs	r2, #0
 800b35c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b360:	6878      	ldr	r0, [r7, #4]
 800b362:	f7f6 fba3 	bl	8001aac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	2224      	movs	r2, #36	@ 0x24
 800b36a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	681a      	ldr	r2, [r3, #0]
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	f022 0201 	bic.w	r2, r2, #1
 800b37c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b382:	2b00      	cmp	r3, #0
 800b384:	d002      	beq.n	800b38c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800b386:	6878      	ldr	r0, [r7, #4]
 800b388:	f001 fa44 	bl	800c814 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b38c:	6878      	ldr	r0, [r7, #4]
 800b38e:	f000 fcd9 	bl	800bd44 <UART_SetConfig>
 800b392:	4603      	mov	r3, r0
 800b394:	2b01      	cmp	r3, #1
 800b396:	d101      	bne.n	800b39c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800b398:	2301      	movs	r3, #1
 800b39a:	e01b      	b.n	800b3d4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	685a      	ldr	r2, [r3, #4]
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800b3aa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	689a      	ldr	r2, [r3, #8]
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800b3ba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	681a      	ldr	r2, [r3, #0]
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	f042 0201 	orr.w	r2, r2, #1
 800b3ca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b3cc:	6878      	ldr	r0, [r7, #4]
 800b3ce:	f001 fac3 	bl	800c958 <UART_CheckIdleState>
 800b3d2:	4603      	mov	r3, r0
}
 800b3d4:	4618      	mov	r0, r3
 800b3d6:	3708      	adds	r7, #8
 800b3d8:	46bd      	mov	sp, r7
 800b3da:	bd80      	pop	{r7, pc}

0800b3dc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b3dc:	b580      	push	{r7, lr}
 800b3de:	b08a      	sub	sp, #40	@ 0x28
 800b3e0:	af02      	add	r7, sp, #8
 800b3e2:	60f8      	str	r0, [r7, #12]
 800b3e4:	60b9      	str	r1, [r7, #8]
 800b3e6:	603b      	str	r3, [r7, #0]
 800b3e8:	4613      	mov	r3, r2
 800b3ea:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b3ec:	68fb      	ldr	r3, [r7, #12]
 800b3ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b3f2:	2b20      	cmp	r3, #32
 800b3f4:	d17b      	bne.n	800b4ee <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800b3f6:	68bb      	ldr	r3, [r7, #8]
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d002      	beq.n	800b402 <HAL_UART_Transmit+0x26>
 800b3fc:	88fb      	ldrh	r3, [r7, #6]
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d101      	bne.n	800b406 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800b402:	2301      	movs	r3, #1
 800b404:	e074      	b.n	800b4f0 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	2200      	movs	r2, #0
 800b40a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b40e:	68fb      	ldr	r3, [r7, #12]
 800b410:	2221      	movs	r2, #33	@ 0x21
 800b412:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b416:	f7f6 fc6b 	bl	8001cf0 <HAL_GetTick>
 800b41a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	88fa      	ldrh	r2, [r7, #6]
 800b420:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800b424:	68fb      	ldr	r3, [r7, #12]
 800b426:	88fa      	ldrh	r2, [r7, #6]
 800b428:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b42c:	68fb      	ldr	r3, [r7, #12]
 800b42e:	689b      	ldr	r3, [r3, #8]
 800b430:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b434:	d108      	bne.n	800b448 <HAL_UART_Transmit+0x6c>
 800b436:	68fb      	ldr	r3, [r7, #12]
 800b438:	691b      	ldr	r3, [r3, #16]
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d104      	bne.n	800b448 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800b43e:	2300      	movs	r3, #0
 800b440:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800b442:	68bb      	ldr	r3, [r7, #8]
 800b444:	61bb      	str	r3, [r7, #24]
 800b446:	e003      	b.n	800b450 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800b448:	68bb      	ldr	r3, [r7, #8]
 800b44a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b44c:	2300      	movs	r3, #0
 800b44e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800b450:	e030      	b.n	800b4b4 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b452:	683b      	ldr	r3, [r7, #0]
 800b454:	9300      	str	r3, [sp, #0]
 800b456:	697b      	ldr	r3, [r7, #20]
 800b458:	2200      	movs	r2, #0
 800b45a:	2180      	movs	r1, #128	@ 0x80
 800b45c:	68f8      	ldr	r0, [r7, #12]
 800b45e:	f001 fb25 	bl	800caac <UART_WaitOnFlagUntilTimeout>
 800b462:	4603      	mov	r3, r0
 800b464:	2b00      	cmp	r3, #0
 800b466:	d005      	beq.n	800b474 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800b468:	68fb      	ldr	r3, [r7, #12]
 800b46a:	2220      	movs	r2, #32
 800b46c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800b470:	2303      	movs	r3, #3
 800b472:	e03d      	b.n	800b4f0 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800b474:	69fb      	ldr	r3, [r7, #28]
 800b476:	2b00      	cmp	r3, #0
 800b478:	d10b      	bne.n	800b492 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b47a:	69bb      	ldr	r3, [r7, #24]
 800b47c:	881b      	ldrh	r3, [r3, #0]
 800b47e:	461a      	mov	r2, r3
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b488:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800b48a:	69bb      	ldr	r3, [r7, #24]
 800b48c:	3302      	adds	r3, #2
 800b48e:	61bb      	str	r3, [r7, #24]
 800b490:	e007      	b.n	800b4a2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800b492:	69fb      	ldr	r3, [r7, #28]
 800b494:	781a      	ldrb	r2, [r3, #0]
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800b49c:	69fb      	ldr	r3, [r7, #28]
 800b49e:	3301      	adds	r3, #1
 800b4a0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b4a2:	68fb      	ldr	r3, [r7, #12]
 800b4a4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800b4a8:	b29b      	uxth	r3, r3
 800b4aa:	3b01      	subs	r3, #1
 800b4ac:	b29a      	uxth	r2, r3
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800b4b4:	68fb      	ldr	r3, [r7, #12]
 800b4b6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800b4ba:	b29b      	uxth	r3, r3
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d1c8      	bne.n	800b452 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b4c0:	683b      	ldr	r3, [r7, #0]
 800b4c2:	9300      	str	r3, [sp, #0]
 800b4c4:	697b      	ldr	r3, [r7, #20]
 800b4c6:	2200      	movs	r2, #0
 800b4c8:	2140      	movs	r1, #64	@ 0x40
 800b4ca:	68f8      	ldr	r0, [r7, #12]
 800b4cc:	f001 faee 	bl	800caac <UART_WaitOnFlagUntilTimeout>
 800b4d0:	4603      	mov	r3, r0
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	d005      	beq.n	800b4e2 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	2220      	movs	r2, #32
 800b4da:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800b4de:	2303      	movs	r3, #3
 800b4e0:	e006      	b.n	800b4f0 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b4e2:	68fb      	ldr	r3, [r7, #12]
 800b4e4:	2220      	movs	r2, #32
 800b4e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800b4ea:	2300      	movs	r3, #0
 800b4ec:	e000      	b.n	800b4f0 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800b4ee:	2302      	movs	r3, #2
  }
}
 800b4f0:	4618      	mov	r0, r3
 800b4f2:	3720      	adds	r7, #32
 800b4f4:	46bd      	mov	sp, r7
 800b4f6:	bd80      	pop	{r7, pc}

0800b4f8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b4f8:	b580      	push	{r7, lr}
 800b4fa:	b08a      	sub	sp, #40	@ 0x28
 800b4fc:	af00      	add	r7, sp, #0
 800b4fe:	60f8      	str	r0, [r7, #12]
 800b500:	60b9      	str	r1, [r7, #8]
 800b502:	4613      	mov	r3, r2
 800b504:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b506:	68fb      	ldr	r3, [r7, #12]
 800b508:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b50c:	2b20      	cmp	r3, #32
 800b50e:	d137      	bne.n	800b580 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800b510:	68bb      	ldr	r3, [r7, #8]
 800b512:	2b00      	cmp	r3, #0
 800b514:	d002      	beq.n	800b51c <HAL_UART_Receive_IT+0x24>
 800b516:	88fb      	ldrh	r3, [r7, #6]
 800b518:	2b00      	cmp	r3, #0
 800b51a:	d101      	bne.n	800b520 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800b51c:	2301      	movs	r3, #1
 800b51e:	e030      	b.n	800b582 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b520:	68fb      	ldr	r3, [r7, #12]
 800b522:	2200      	movs	r2, #0
 800b524:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b526:	68fb      	ldr	r3, [r7, #12]
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	4a18      	ldr	r2, [pc, #96]	@ (800b58c <HAL_UART_Receive_IT+0x94>)
 800b52c:	4293      	cmp	r3, r2
 800b52e:	d01f      	beq.n	800b570 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	685b      	ldr	r3, [r3, #4]
 800b536:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	d018      	beq.n	800b570 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b53e:	68fb      	ldr	r3, [r7, #12]
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b544:	697b      	ldr	r3, [r7, #20]
 800b546:	e853 3f00 	ldrex	r3, [r3]
 800b54a:	613b      	str	r3, [r7, #16]
   return(result);
 800b54c:	693b      	ldr	r3, [r7, #16]
 800b54e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800b552:	627b      	str	r3, [r7, #36]	@ 0x24
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	461a      	mov	r2, r3
 800b55a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b55c:	623b      	str	r3, [r7, #32]
 800b55e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b560:	69f9      	ldr	r1, [r7, #28]
 800b562:	6a3a      	ldr	r2, [r7, #32]
 800b564:	e841 2300 	strex	r3, r2, [r1]
 800b568:	61bb      	str	r3, [r7, #24]
   return(result);
 800b56a:	69bb      	ldr	r3, [r7, #24]
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d1e6      	bne.n	800b53e <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800b570:	88fb      	ldrh	r3, [r7, #6]
 800b572:	461a      	mov	r2, r3
 800b574:	68b9      	ldr	r1, [r7, #8]
 800b576:	68f8      	ldr	r0, [r7, #12]
 800b578:	f001 fb06 	bl	800cb88 <UART_Start_Receive_IT>
 800b57c:	4603      	mov	r3, r0
 800b57e:	e000      	b.n	800b582 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800b580:	2302      	movs	r3, #2
  }
}
 800b582:	4618      	mov	r0, r3
 800b584:	3728      	adds	r7, #40	@ 0x28
 800b586:	46bd      	mov	sp, r7
 800b588:	bd80      	pop	{r7, pc}
 800b58a:	bf00      	nop
 800b58c:	58000c00 	.word	0x58000c00

0800b590 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b590:	b580      	push	{r7, lr}
 800b592:	b0ba      	sub	sp, #232	@ 0xe8
 800b594:	af00      	add	r7, sp, #0
 800b596:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	69db      	ldr	r3, [r3, #28]
 800b59e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	681b      	ldr	r3, [r3, #0]
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	689b      	ldr	r3, [r3, #8]
 800b5b2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800b5b6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800b5ba:	f640 030f 	movw	r3, #2063	@ 0x80f
 800b5be:	4013      	ands	r3, r2
 800b5c0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800b5c4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d11b      	bne.n	800b604 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b5cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b5d0:	f003 0320 	and.w	r3, r3, #32
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d015      	beq.n	800b604 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b5d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b5dc:	f003 0320 	and.w	r3, r3, #32
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	d105      	bne.n	800b5f0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b5e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b5e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d009      	beq.n	800b604 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	f000 8377 	beq.w	800bce8 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b5fe:	6878      	ldr	r0, [r7, #4]
 800b600:	4798      	blx	r3
      }
      return;
 800b602:	e371      	b.n	800bce8 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800b604:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800b608:	2b00      	cmp	r3, #0
 800b60a:	f000 8123 	beq.w	800b854 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800b60e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800b612:	4b8d      	ldr	r3, [pc, #564]	@ (800b848 <HAL_UART_IRQHandler+0x2b8>)
 800b614:	4013      	ands	r3, r2
 800b616:	2b00      	cmp	r3, #0
 800b618:	d106      	bne.n	800b628 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800b61a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800b61e:	4b8b      	ldr	r3, [pc, #556]	@ (800b84c <HAL_UART_IRQHandler+0x2bc>)
 800b620:	4013      	ands	r3, r2
 800b622:	2b00      	cmp	r3, #0
 800b624:	f000 8116 	beq.w	800b854 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b628:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b62c:	f003 0301 	and.w	r3, r3, #1
 800b630:	2b00      	cmp	r3, #0
 800b632:	d011      	beq.n	800b658 <HAL_UART_IRQHandler+0xc8>
 800b634:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b638:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d00b      	beq.n	800b658 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	2201      	movs	r2, #1
 800b646:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b64e:	f043 0201 	orr.w	r2, r3, #1
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b658:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b65c:	f003 0302 	and.w	r3, r3, #2
 800b660:	2b00      	cmp	r3, #0
 800b662:	d011      	beq.n	800b688 <HAL_UART_IRQHandler+0xf8>
 800b664:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b668:	f003 0301 	and.w	r3, r3, #1
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d00b      	beq.n	800b688 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	2202      	movs	r2, #2
 800b676:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b67e:	f043 0204 	orr.w	r2, r3, #4
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b688:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b68c:	f003 0304 	and.w	r3, r3, #4
 800b690:	2b00      	cmp	r3, #0
 800b692:	d011      	beq.n	800b6b8 <HAL_UART_IRQHandler+0x128>
 800b694:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b698:	f003 0301 	and.w	r3, r3, #1
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d00b      	beq.n	800b6b8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	2204      	movs	r2, #4
 800b6a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b6ae:	f043 0202 	orr.w	r2, r3, #2
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800b6b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b6bc:	f003 0308 	and.w	r3, r3, #8
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d017      	beq.n	800b6f4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b6c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b6c8:	f003 0320 	and.w	r3, r3, #32
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	d105      	bne.n	800b6dc <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800b6d0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800b6d4:	4b5c      	ldr	r3, [pc, #368]	@ (800b848 <HAL_UART_IRQHandler+0x2b8>)
 800b6d6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	d00b      	beq.n	800b6f4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	2208      	movs	r2, #8
 800b6e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b6ea:	f043 0208 	orr.w	r2, r3, #8
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800b6f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b6f8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d012      	beq.n	800b726 <HAL_UART_IRQHandler+0x196>
 800b700:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b704:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d00c      	beq.n	800b726 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b714:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b71c:	f043 0220 	orr.w	r2, r3, #32
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	f000 82dd 	beq.w	800bcec <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b732:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b736:	f003 0320 	and.w	r3, r3, #32
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d013      	beq.n	800b766 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b73e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b742:	f003 0320 	and.w	r3, r3, #32
 800b746:	2b00      	cmp	r3, #0
 800b748:	d105      	bne.n	800b756 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b74a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b74e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b752:	2b00      	cmp	r3, #0
 800b754:	d007      	beq.n	800b766 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d003      	beq.n	800b766 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b762:	6878      	ldr	r0, [r7, #4]
 800b764:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b76c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	689b      	ldr	r3, [r3, #8]
 800b776:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b77a:	2b40      	cmp	r3, #64	@ 0x40
 800b77c:	d005      	beq.n	800b78a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800b77e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800b782:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b786:	2b00      	cmp	r3, #0
 800b788:	d054      	beq.n	800b834 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b78a:	6878      	ldr	r0, [r7, #4]
 800b78c:	f001 fb1e 	bl	800cdcc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	689b      	ldr	r3, [r3, #8]
 800b796:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b79a:	2b40      	cmp	r3, #64	@ 0x40
 800b79c:	d146      	bne.n	800b82c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	3308      	adds	r3, #8
 800b7a4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7a8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800b7ac:	e853 3f00 	ldrex	r3, [r3]
 800b7b0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800b7b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b7b8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b7bc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	3308      	adds	r3, #8
 800b7c6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800b7ca:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800b7ce:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7d2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800b7d6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800b7da:	e841 2300 	strex	r3, r2, [r1]
 800b7de:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800b7e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d1d9      	bne.n	800b79e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	d017      	beq.n	800b824 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b7fa:	4a15      	ldr	r2, [pc, #84]	@ (800b850 <HAL_UART_IRQHandler+0x2c0>)
 800b7fc:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b804:	4618      	mov	r0, r3
 800b806:	f7f8 fd7f 	bl	8004308 <HAL_DMA_Abort_IT>
 800b80a:	4603      	mov	r3, r0
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	d019      	beq.n	800b844 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b816:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b818:	687a      	ldr	r2, [r7, #4]
 800b81a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800b81e:	4610      	mov	r0, r2
 800b820:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b822:	e00f      	b.n	800b844 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b824:	6878      	ldr	r0, [r7, #4]
 800b826:	f000 fa77 	bl	800bd18 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b82a:	e00b      	b.n	800b844 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b82c:	6878      	ldr	r0, [r7, #4]
 800b82e:	f000 fa73 	bl	800bd18 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b832:	e007      	b.n	800b844 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b834:	6878      	ldr	r0, [r7, #4]
 800b836:	f000 fa6f 	bl	800bd18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	2200      	movs	r2, #0
 800b83e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800b842:	e253      	b.n	800bcec <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b844:	bf00      	nop
    return;
 800b846:	e251      	b.n	800bcec <HAL_UART_IRQHandler+0x75c>
 800b848:	10000001 	.word	0x10000001
 800b84c:	04000120 	.word	0x04000120
 800b850:	0800ce99 	.word	0x0800ce99

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b858:	2b01      	cmp	r3, #1
 800b85a:	f040 81e7 	bne.w	800bc2c <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800b85e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b862:	f003 0310 	and.w	r3, r3, #16
 800b866:	2b00      	cmp	r3, #0
 800b868:	f000 81e0 	beq.w	800bc2c <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800b86c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b870:	f003 0310 	and.w	r3, r3, #16
 800b874:	2b00      	cmp	r3, #0
 800b876:	f000 81d9 	beq.w	800bc2c <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	681b      	ldr	r3, [r3, #0]
 800b87e:	2210      	movs	r2, #16
 800b880:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	689b      	ldr	r3, [r3, #8]
 800b888:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b88c:	2b40      	cmp	r3, #64	@ 0x40
 800b88e:	f040 8151 	bne.w	800bb34 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	4a96      	ldr	r2, [pc, #600]	@ (800baf4 <HAL_UART_IRQHandler+0x564>)
 800b89c:	4293      	cmp	r3, r2
 800b89e:	d068      	beq.n	800b972 <HAL_UART_IRQHandler+0x3e2>
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b8a6:	681b      	ldr	r3, [r3, #0]
 800b8a8:	4a93      	ldr	r2, [pc, #588]	@ (800baf8 <HAL_UART_IRQHandler+0x568>)
 800b8aa:	4293      	cmp	r3, r2
 800b8ac:	d061      	beq.n	800b972 <HAL_UART_IRQHandler+0x3e2>
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b8b4:	681b      	ldr	r3, [r3, #0]
 800b8b6:	4a91      	ldr	r2, [pc, #580]	@ (800bafc <HAL_UART_IRQHandler+0x56c>)
 800b8b8:	4293      	cmp	r3, r2
 800b8ba:	d05a      	beq.n	800b972 <HAL_UART_IRQHandler+0x3e2>
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	4a8e      	ldr	r2, [pc, #568]	@ (800bb00 <HAL_UART_IRQHandler+0x570>)
 800b8c6:	4293      	cmp	r3, r2
 800b8c8:	d053      	beq.n	800b972 <HAL_UART_IRQHandler+0x3e2>
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	4a8c      	ldr	r2, [pc, #560]	@ (800bb04 <HAL_UART_IRQHandler+0x574>)
 800b8d4:	4293      	cmp	r3, r2
 800b8d6:	d04c      	beq.n	800b972 <HAL_UART_IRQHandler+0x3e2>
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	4a89      	ldr	r2, [pc, #548]	@ (800bb08 <HAL_UART_IRQHandler+0x578>)
 800b8e2:	4293      	cmp	r3, r2
 800b8e4:	d045      	beq.n	800b972 <HAL_UART_IRQHandler+0x3e2>
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	4a87      	ldr	r2, [pc, #540]	@ (800bb0c <HAL_UART_IRQHandler+0x57c>)
 800b8f0:	4293      	cmp	r3, r2
 800b8f2:	d03e      	beq.n	800b972 <HAL_UART_IRQHandler+0x3e2>
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	4a84      	ldr	r2, [pc, #528]	@ (800bb10 <HAL_UART_IRQHandler+0x580>)
 800b8fe:	4293      	cmp	r3, r2
 800b900:	d037      	beq.n	800b972 <HAL_UART_IRQHandler+0x3e2>
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b908:	681b      	ldr	r3, [r3, #0]
 800b90a:	4a82      	ldr	r2, [pc, #520]	@ (800bb14 <HAL_UART_IRQHandler+0x584>)
 800b90c:	4293      	cmp	r3, r2
 800b90e:	d030      	beq.n	800b972 <HAL_UART_IRQHandler+0x3e2>
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	4a7f      	ldr	r2, [pc, #508]	@ (800bb18 <HAL_UART_IRQHandler+0x588>)
 800b91a:	4293      	cmp	r3, r2
 800b91c:	d029      	beq.n	800b972 <HAL_UART_IRQHandler+0x3e2>
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	4a7d      	ldr	r2, [pc, #500]	@ (800bb1c <HAL_UART_IRQHandler+0x58c>)
 800b928:	4293      	cmp	r3, r2
 800b92a:	d022      	beq.n	800b972 <HAL_UART_IRQHandler+0x3e2>
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	4a7a      	ldr	r2, [pc, #488]	@ (800bb20 <HAL_UART_IRQHandler+0x590>)
 800b936:	4293      	cmp	r3, r2
 800b938:	d01b      	beq.n	800b972 <HAL_UART_IRQHandler+0x3e2>
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	4a78      	ldr	r2, [pc, #480]	@ (800bb24 <HAL_UART_IRQHandler+0x594>)
 800b944:	4293      	cmp	r3, r2
 800b946:	d014      	beq.n	800b972 <HAL_UART_IRQHandler+0x3e2>
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b94e:	681b      	ldr	r3, [r3, #0]
 800b950:	4a75      	ldr	r2, [pc, #468]	@ (800bb28 <HAL_UART_IRQHandler+0x598>)
 800b952:	4293      	cmp	r3, r2
 800b954:	d00d      	beq.n	800b972 <HAL_UART_IRQHandler+0x3e2>
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b95c:	681b      	ldr	r3, [r3, #0]
 800b95e:	4a73      	ldr	r2, [pc, #460]	@ (800bb2c <HAL_UART_IRQHandler+0x59c>)
 800b960:	4293      	cmp	r3, r2
 800b962:	d006      	beq.n	800b972 <HAL_UART_IRQHandler+0x3e2>
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	4a70      	ldr	r2, [pc, #448]	@ (800bb30 <HAL_UART_IRQHandler+0x5a0>)
 800b96e:	4293      	cmp	r3, r2
 800b970:	d106      	bne.n	800b980 <HAL_UART_IRQHandler+0x3f0>
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	685b      	ldr	r3, [r3, #4]
 800b97c:	b29b      	uxth	r3, r3
 800b97e:	e005      	b.n	800b98c <HAL_UART_IRQHandler+0x3fc>
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	685b      	ldr	r3, [r3, #4]
 800b98a:	b29b      	uxth	r3, r3
 800b98c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b990:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800b994:	2b00      	cmp	r3, #0
 800b996:	f000 81ab 	beq.w	800bcf0 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b9a0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b9a4:	429a      	cmp	r2, r3
 800b9a6:	f080 81a3 	bcs.w	800bcf0 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b9b0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b9ba:	69db      	ldr	r3, [r3, #28]
 800b9bc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b9c0:	f000 8087 	beq.w	800bad2 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9cc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800b9d0:	e853 3f00 	ldrex	r3, [r3]
 800b9d4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800b9d8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b9dc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b9e0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	461a      	mov	r2, r3
 800b9ea:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800b9ee:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800b9f2:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9f6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800b9fa:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800b9fe:	e841 2300 	strex	r3, r2, [r1]
 800ba02:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800ba06:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d1da      	bne.n	800b9c4 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	3308      	adds	r3, #8
 800ba14:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba16:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ba18:	e853 3f00 	ldrex	r3, [r3]
 800ba1c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800ba1e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ba20:	f023 0301 	bic.w	r3, r3, #1
 800ba24:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	3308      	adds	r3, #8
 800ba2e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800ba32:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800ba36:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba38:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800ba3a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800ba3e:	e841 2300 	strex	r3, r2, [r1]
 800ba42:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800ba44:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d1e1      	bne.n	800ba0e <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	3308      	adds	r3, #8
 800ba50:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba52:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ba54:	e853 3f00 	ldrex	r3, [r3]
 800ba58:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800ba5a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ba5c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ba60:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	3308      	adds	r3, #8
 800ba6a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800ba6e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800ba70:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba72:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800ba74:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800ba76:	e841 2300 	strex	r3, r2, [r1]
 800ba7a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800ba7c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	d1e3      	bne.n	800ba4a <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	2220      	movs	r2, #32
 800ba86:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	2200      	movs	r2, #0
 800ba8e:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba96:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ba98:	e853 3f00 	ldrex	r3, [r3]
 800ba9c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800ba9e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800baa0:	f023 0310 	bic.w	r3, r3, #16
 800baa4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	461a      	mov	r2, r3
 800baae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bab2:	65bb      	str	r3, [r7, #88]	@ 0x58
 800bab4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bab6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800bab8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800baba:	e841 2300 	strex	r3, r2, [r1]
 800babe:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800bac0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	d1e4      	bne.n	800ba90 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bacc:	4618      	mov	r0, r3
 800bace:	f7f8 f8fd 	bl	8003ccc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	2202      	movs	r2, #2
 800bad6:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800bae4:	b29b      	uxth	r3, r3
 800bae6:	1ad3      	subs	r3, r2, r3
 800bae8:	b29b      	uxth	r3, r3
 800baea:	4619      	mov	r1, r3
 800baec:	6878      	ldr	r0, [r7, #4]
 800baee:	f000 f91d 	bl	800bd2c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800baf2:	e0fd      	b.n	800bcf0 <HAL_UART_IRQHandler+0x760>
 800baf4:	40020010 	.word	0x40020010
 800baf8:	40020028 	.word	0x40020028
 800bafc:	40020040 	.word	0x40020040
 800bb00:	40020058 	.word	0x40020058
 800bb04:	40020070 	.word	0x40020070
 800bb08:	40020088 	.word	0x40020088
 800bb0c:	400200a0 	.word	0x400200a0
 800bb10:	400200b8 	.word	0x400200b8
 800bb14:	40020410 	.word	0x40020410
 800bb18:	40020428 	.word	0x40020428
 800bb1c:	40020440 	.word	0x40020440
 800bb20:	40020458 	.word	0x40020458
 800bb24:	40020470 	.word	0x40020470
 800bb28:	40020488 	.word	0x40020488
 800bb2c:	400204a0 	.word	0x400204a0
 800bb30:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800bb40:	b29b      	uxth	r3, r3
 800bb42:	1ad3      	subs	r3, r2, r3
 800bb44:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800bb4e:	b29b      	uxth	r3, r3
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	f000 80cf 	beq.w	800bcf4 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800bb56:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	f000 80ca 	beq.w	800bcf4 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb68:	e853 3f00 	ldrex	r3, [r3]
 800bb6c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800bb6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bb70:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800bb74:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	681b      	ldr	r3, [r3, #0]
 800bb7c:	461a      	mov	r2, r3
 800bb7e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800bb82:	647b      	str	r3, [r7, #68]	@ 0x44
 800bb84:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb86:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800bb88:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800bb8a:	e841 2300 	strex	r3, r2, [r1]
 800bb8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800bb90:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	d1e4      	bne.n	800bb60 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	681b      	ldr	r3, [r3, #0]
 800bb9a:	3308      	adds	r3, #8
 800bb9c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bba0:	e853 3f00 	ldrex	r3, [r3]
 800bba4:	623b      	str	r3, [r7, #32]
   return(result);
 800bba6:	6a3a      	ldr	r2, [r7, #32]
 800bba8:	4b55      	ldr	r3, [pc, #340]	@ (800bd00 <HAL_UART_IRQHandler+0x770>)
 800bbaa:	4013      	ands	r3, r2
 800bbac:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	3308      	adds	r3, #8
 800bbb6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800bbba:	633a      	str	r2, [r7, #48]	@ 0x30
 800bbbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbbe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800bbc0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bbc2:	e841 2300 	strex	r3, r2, [r1]
 800bbc6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800bbc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	d1e3      	bne.n	800bb96 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	2220      	movs	r2, #32
 800bbd2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	2200      	movs	r2, #0
 800bbda:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	2200      	movs	r2, #0
 800bbe0:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	681b      	ldr	r3, [r3, #0]
 800bbe6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbe8:	693b      	ldr	r3, [r7, #16]
 800bbea:	e853 3f00 	ldrex	r3, [r3]
 800bbee:	60fb      	str	r3, [r7, #12]
   return(result);
 800bbf0:	68fb      	ldr	r3, [r7, #12]
 800bbf2:	f023 0310 	bic.w	r3, r3, #16
 800bbf6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	681b      	ldr	r3, [r3, #0]
 800bbfe:	461a      	mov	r2, r3
 800bc00:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800bc04:	61fb      	str	r3, [r7, #28]
 800bc06:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc08:	69b9      	ldr	r1, [r7, #24]
 800bc0a:	69fa      	ldr	r2, [r7, #28]
 800bc0c:	e841 2300 	strex	r3, r2, [r1]
 800bc10:	617b      	str	r3, [r7, #20]
   return(result);
 800bc12:	697b      	ldr	r3, [r7, #20]
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	d1e4      	bne.n	800bbe2 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	2202      	movs	r2, #2
 800bc1c:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800bc1e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800bc22:	4619      	mov	r1, r3
 800bc24:	6878      	ldr	r0, [r7, #4]
 800bc26:	f000 f881 	bl	800bd2c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800bc2a:	e063      	b.n	800bcf4 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800bc2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bc30:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	d00e      	beq.n	800bc56 <HAL_UART_IRQHandler+0x6c6>
 800bc38:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800bc3c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	d008      	beq.n	800bc56 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	681b      	ldr	r3, [r3, #0]
 800bc48:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800bc4c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800bc4e:	6878      	ldr	r0, [r7, #4]
 800bc50:	f001 fe80 	bl	800d954 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800bc54:	e051      	b.n	800bcfa <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800bc56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bc5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	d014      	beq.n	800bc8c <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800bc62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bc66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	d105      	bne.n	800bc7a <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800bc6e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800bc72:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	d008      	beq.n	800bc8c <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	d03a      	beq.n	800bcf8 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800bc86:	6878      	ldr	r0, [r7, #4]
 800bc88:	4798      	blx	r3
    }
    return;
 800bc8a:	e035      	b.n	800bcf8 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800bc8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bc90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d009      	beq.n	800bcac <HAL_UART_IRQHandler+0x71c>
 800bc98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bc9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d003      	beq.n	800bcac <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800bca4:	6878      	ldr	r0, [r7, #4]
 800bca6:	f001 f90d 	bl	800cec4 <UART_EndTransmit_IT>
    return;
 800bcaa:	e026      	b.n	800bcfa <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800bcac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bcb0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	d009      	beq.n	800bccc <HAL_UART_IRQHandler+0x73c>
 800bcb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bcbc:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	d003      	beq.n	800bccc <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800bcc4:	6878      	ldr	r0, [r7, #4]
 800bcc6:	f001 fe59 	bl	800d97c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800bcca:	e016      	b.n	800bcfa <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800bccc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bcd0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	d010      	beq.n	800bcfa <HAL_UART_IRQHandler+0x76a>
 800bcd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	da0c      	bge.n	800bcfa <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800bce0:	6878      	ldr	r0, [r7, #4]
 800bce2:	f001 fe41 	bl	800d968 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800bce6:	e008      	b.n	800bcfa <HAL_UART_IRQHandler+0x76a>
      return;
 800bce8:	bf00      	nop
 800bcea:	e006      	b.n	800bcfa <HAL_UART_IRQHandler+0x76a>
    return;
 800bcec:	bf00      	nop
 800bcee:	e004      	b.n	800bcfa <HAL_UART_IRQHandler+0x76a>
      return;
 800bcf0:	bf00      	nop
 800bcf2:	e002      	b.n	800bcfa <HAL_UART_IRQHandler+0x76a>
      return;
 800bcf4:	bf00      	nop
 800bcf6:	e000      	b.n	800bcfa <HAL_UART_IRQHandler+0x76a>
    return;
 800bcf8:	bf00      	nop
  }
}
 800bcfa:	37e8      	adds	r7, #232	@ 0xe8
 800bcfc:	46bd      	mov	sp, r7
 800bcfe:	bd80      	pop	{r7, pc}
 800bd00:	effffffe 	.word	0xeffffffe

0800bd04 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800bd04:	b480      	push	{r7}
 800bd06:	b083      	sub	sp, #12
 800bd08:	af00      	add	r7, sp, #0
 800bd0a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800bd0c:	bf00      	nop
 800bd0e:	370c      	adds	r7, #12
 800bd10:	46bd      	mov	sp, r7
 800bd12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd16:	4770      	bx	lr

0800bd18 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800bd18:	b480      	push	{r7}
 800bd1a:	b083      	sub	sp, #12
 800bd1c:	af00      	add	r7, sp, #0
 800bd1e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800bd20:	bf00      	nop
 800bd22:	370c      	adds	r7, #12
 800bd24:	46bd      	mov	sp, r7
 800bd26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd2a:	4770      	bx	lr

0800bd2c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800bd2c:	b480      	push	{r7}
 800bd2e:	b083      	sub	sp, #12
 800bd30:	af00      	add	r7, sp, #0
 800bd32:	6078      	str	r0, [r7, #4]
 800bd34:	460b      	mov	r3, r1
 800bd36:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800bd38:	bf00      	nop
 800bd3a:	370c      	adds	r7, #12
 800bd3c:	46bd      	mov	sp, r7
 800bd3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd42:	4770      	bx	lr

0800bd44 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800bd44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800bd48:	b092      	sub	sp, #72	@ 0x48
 800bd4a:	af00      	add	r7, sp, #0
 800bd4c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800bd4e:	2300      	movs	r3, #0
 800bd50:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800bd54:	697b      	ldr	r3, [r7, #20]
 800bd56:	689a      	ldr	r2, [r3, #8]
 800bd58:	697b      	ldr	r3, [r7, #20]
 800bd5a:	691b      	ldr	r3, [r3, #16]
 800bd5c:	431a      	orrs	r2, r3
 800bd5e:	697b      	ldr	r3, [r7, #20]
 800bd60:	695b      	ldr	r3, [r3, #20]
 800bd62:	431a      	orrs	r2, r3
 800bd64:	697b      	ldr	r3, [r7, #20]
 800bd66:	69db      	ldr	r3, [r3, #28]
 800bd68:	4313      	orrs	r3, r2
 800bd6a:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800bd6c:	697b      	ldr	r3, [r7, #20]
 800bd6e:	681b      	ldr	r3, [r3, #0]
 800bd70:	681a      	ldr	r2, [r3, #0]
 800bd72:	4bbe      	ldr	r3, [pc, #760]	@ (800c06c <UART_SetConfig+0x328>)
 800bd74:	4013      	ands	r3, r2
 800bd76:	697a      	ldr	r2, [r7, #20]
 800bd78:	6812      	ldr	r2, [r2, #0]
 800bd7a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800bd7c:	430b      	orrs	r3, r1
 800bd7e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bd80:	697b      	ldr	r3, [r7, #20]
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	685b      	ldr	r3, [r3, #4]
 800bd86:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800bd8a:	697b      	ldr	r3, [r7, #20]
 800bd8c:	68da      	ldr	r2, [r3, #12]
 800bd8e:	697b      	ldr	r3, [r7, #20]
 800bd90:	681b      	ldr	r3, [r3, #0]
 800bd92:	430a      	orrs	r2, r1
 800bd94:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800bd96:	697b      	ldr	r3, [r7, #20]
 800bd98:	699b      	ldr	r3, [r3, #24]
 800bd9a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800bd9c:	697b      	ldr	r3, [r7, #20]
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	4ab3      	ldr	r2, [pc, #716]	@ (800c070 <UART_SetConfig+0x32c>)
 800bda2:	4293      	cmp	r3, r2
 800bda4:	d004      	beq.n	800bdb0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800bda6:	697b      	ldr	r3, [r7, #20]
 800bda8:	6a1b      	ldr	r3, [r3, #32]
 800bdaa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800bdac:	4313      	orrs	r3, r2
 800bdae:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800bdb0:	697b      	ldr	r3, [r7, #20]
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	689a      	ldr	r2, [r3, #8]
 800bdb6:	4baf      	ldr	r3, [pc, #700]	@ (800c074 <UART_SetConfig+0x330>)
 800bdb8:	4013      	ands	r3, r2
 800bdba:	697a      	ldr	r2, [r7, #20]
 800bdbc:	6812      	ldr	r2, [r2, #0]
 800bdbe:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800bdc0:	430b      	orrs	r3, r1
 800bdc2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800bdc4:	697b      	ldr	r3, [r7, #20]
 800bdc6:	681b      	ldr	r3, [r3, #0]
 800bdc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bdca:	f023 010f 	bic.w	r1, r3, #15
 800bdce:	697b      	ldr	r3, [r7, #20]
 800bdd0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800bdd2:	697b      	ldr	r3, [r7, #20]
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	430a      	orrs	r2, r1
 800bdd8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800bdda:	697b      	ldr	r3, [r7, #20]
 800bddc:	681b      	ldr	r3, [r3, #0]
 800bdde:	4aa6      	ldr	r2, [pc, #664]	@ (800c078 <UART_SetConfig+0x334>)
 800bde0:	4293      	cmp	r3, r2
 800bde2:	d177      	bne.n	800bed4 <UART_SetConfig+0x190>
 800bde4:	4ba5      	ldr	r3, [pc, #660]	@ (800c07c <UART_SetConfig+0x338>)
 800bde6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bde8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800bdec:	2b28      	cmp	r3, #40	@ 0x28
 800bdee:	d86d      	bhi.n	800becc <UART_SetConfig+0x188>
 800bdf0:	a201      	add	r2, pc, #4	@ (adr r2, 800bdf8 <UART_SetConfig+0xb4>)
 800bdf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bdf6:	bf00      	nop
 800bdf8:	0800be9d 	.word	0x0800be9d
 800bdfc:	0800becd 	.word	0x0800becd
 800be00:	0800becd 	.word	0x0800becd
 800be04:	0800becd 	.word	0x0800becd
 800be08:	0800becd 	.word	0x0800becd
 800be0c:	0800becd 	.word	0x0800becd
 800be10:	0800becd 	.word	0x0800becd
 800be14:	0800becd 	.word	0x0800becd
 800be18:	0800bea5 	.word	0x0800bea5
 800be1c:	0800becd 	.word	0x0800becd
 800be20:	0800becd 	.word	0x0800becd
 800be24:	0800becd 	.word	0x0800becd
 800be28:	0800becd 	.word	0x0800becd
 800be2c:	0800becd 	.word	0x0800becd
 800be30:	0800becd 	.word	0x0800becd
 800be34:	0800becd 	.word	0x0800becd
 800be38:	0800bead 	.word	0x0800bead
 800be3c:	0800becd 	.word	0x0800becd
 800be40:	0800becd 	.word	0x0800becd
 800be44:	0800becd 	.word	0x0800becd
 800be48:	0800becd 	.word	0x0800becd
 800be4c:	0800becd 	.word	0x0800becd
 800be50:	0800becd 	.word	0x0800becd
 800be54:	0800becd 	.word	0x0800becd
 800be58:	0800beb5 	.word	0x0800beb5
 800be5c:	0800becd 	.word	0x0800becd
 800be60:	0800becd 	.word	0x0800becd
 800be64:	0800becd 	.word	0x0800becd
 800be68:	0800becd 	.word	0x0800becd
 800be6c:	0800becd 	.word	0x0800becd
 800be70:	0800becd 	.word	0x0800becd
 800be74:	0800becd 	.word	0x0800becd
 800be78:	0800bebd 	.word	0x0800bebd
 800be7c:	0800becd 	.word	0x0800becd
 800be80:	0800becd 	.word	0x0800becd
 800be84:	0800becd 	.word	0x0800becd
 800be88:	0800becd 	.word	0x0800becd
 800be8c:	0800becd 	.word	0x0800becd
 800be90:	0800becd 	.word	0x0800becd
 800be94:	0800becd 	.word	0x0800becd
 800be98:	0800bec5 	.word	0x0800bec5
 800be9c:	2301      	movs	r3, #1
 800be9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bea2:	e222      	b.n	800c2ea <UART_SetConfig+0x5a6>
 800bea4:	2304      	movs	r3, #4
 800bea6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800beaa:	e21e      	b.n	800c2ea <UART_SetConfig+0x5a6>
 800beac:	2308      	movs	r3, #8
 800beae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800beb2:	e21a      	b.n	800c2ea <UART_SetConfig+0x5a6>
 800beb4:	2310      	movs	r3, #16
 800beb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800beba:	e216      	b.n	800c2ea <UART_SetConfig+0x5a6>
 800bebc:	2320      	movs	r3, #32
 800bebe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bec2:	e212      	b.n	800c2ea <UART_SetConfig+0x5a6>
 800bec4:	2340      	movs	r3, #64	@ 0x40
 800bec6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800beca:	e20e      	b.n	800c2ea <UART_SetConfig+0x5a6>
 800becc:	2380      	movs	r3, #128	@ 0x80
 800bece:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bed2:	e20a      	b.n	800c2ea <UART_SetConfig+0x5a6>
 800bed4:	697b      	ldr	r3, [r7, #20]
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	4a69      	ldr	r2, [pc, #420]	@ (800c080 <UART_SetConfig+0x33c>)
 800beda:	4293      	cmp	r3, r2
 800bedc:	d130      	bne.n	800bf40 <UART_SetConfig+0x1fc>
 800bede:	4b67      	ldr	r3, [pc, #412]	@ (800c07c <UART_SetConfig+0x338>)
 800bee0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bee2:	f003 0307 	and.w	r3, r3, #7
 800bee6:	2b05      	cmp	r3, #5
 800bee8:	d826      	bhi.n	800bf38 <UART_SetConfig+0x1f4>
 800beea:	a201      	add	r2, pc, #4	@ (adr r2, 800bef0 <UART_SetConfig+0x1ac>)
 800beec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bef0:	0800bf09 	.word	0x0800bf09
 800bef4:	0800bf11 	.word	0x0800bf11
 800bef8:	0800bf19 	.word	0x0800bf19
 800befc:	0800bf21 	.word	0x0800bf21
 800bf00:	0800bf29 	.word	0x0800bf29
 800bf04:	0800bf31 	.word	0x0800bf31
 800bf08:	2300      	movs	r3, #0
 800bf0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bf0e:	e1ec      	b.n	800c2ea <UART_SetConfig+0x5a6>
 800bf10:	2304      	movs	r3, #4
 800bf12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bf16:	e1e8      	b.n	800c2ea <UART_SetConfig+0x5a6>
 800bf18:	2308      	movs	r3, #8
 800bf1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bf1e:	e1e4      	b.n	800c2ea <UART_SetConfig+0x5a6>
 800bf20:	2310      	movs	r3, #16
 800bf22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bf26:	e1e0      	b.n	800c2ea <UART_SetConfig+0x5a6>
 800bf28:	2320      	movs	r3, #32
 800bf2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bf2e:	e1dc      	b.n	800c2ea <UART_SetConfig+0x5a6>
 800bf30:	2340      	movs	r3, #64	@ 0x40
 800bf32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bf36:	e1d8      	b.n	800c2ea <UART_SetConfig+0x5a6>
 800bf38:	2380      	movs	r3, #128	@ 0x80
 800bf3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bf3e:	e1d4      	b.n	800c2ea <UART_SetConfig+0x5a6>
 800bf40:	697b      	ldr	r3, [r7, #20]
 800bf42:	681b      	ldr	r3, [r3, #0]
 800bf44:	4a4f      	ldr	r2, [pc, #316]	@ (800c084 <UART_SetConfig+0x340>)
 800bf46:	4293      	cmp	r3, r2
 800bf48:	d130      	bne.n	800bfac <UART_SetConfig+0x268>
 800bf4a:	4b4c      	ldr	r3, [pc, #304]	@ (800c07c <UART_SetConfig+0x338>)
 800bf4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bf4e:	f003 0307 	and.w	r3, r3, #7
 800bf52:	2b05      	cmp	r3, #5
 800bf54:	d826      	bhi.n	800bfa4 <UART_SetConfig+0x260>
 800bf56:	a201      	add	r2, pc, #4	@ (adr r2, 800bf5c <UART_SetConfig+0x218>)
 800bf58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf5c:	0800bf75 	.word	0x0800bf75
 800bf60:	0800bf7d 	.word	0x0800bf7d
 800bf64:	0800bf85 	.word	0x0800bf85
 800bf68:	0800bf8d 	.word	0x0800bf8d
 800bf6c:	0800bf95 	.word	0x0800bf95
 800bf70:	0800bf9d 	.word	0x0800bf9d
 800bf74:	2300      	movs	r3, #0
 800bf76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bf7a:	e1b6      	b.n	800c2ea <UART_SetConfig+0x5a6>
 800bf7c:	2304      	movs	r3, #4
 800bf7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bf82:	e1b2      	b.n	800c2ea <UART_SetConfig+0x5a6>
 800bf84:	2308      	movs	r3, #8
 800bf86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bf8a:	e1ae      	b.n	800c2ea <UART_SetConfig+0x5a6>
 800bf8c:	2310      	movs	r3, #16
 800bf8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bf92:	e1aa      	b.n	800c2ea <UART_SetConfig+0x5a6>
 800bf94:	2320      	movs	r3, #32
 800bf96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bf9a:	e1a6      	b.n	800c2ea <UART_SetConfig+0x5a6>
 800bf9c:	2340      	movs	r3, #64	@ 0x40
 800bf9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bfa2:	e1a2      	b.n	800c2ea <UART_SetConfig+0x5a6>
 800bfa4:	2380      	movs	r3, #128	@ 0x80
 800bfa6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bfaa:	e19e      	b.n	800c2ea <UART_SetConfig+0x5a6>
 800bfac:	697b      	ldr	r3, [r7, #20]
 800bfae:	681b      	ldr	r3, [r3, #0]
 800bfb0:	4a35      	ldr	r2, [pc, #212]	@ (800c088 <UART_SetConfig+0x344>)
 800bfb2:	4293      	cmp	r3, r2
 800bfb4:	d130      	bne.n	800c018 <UART_SetConfig+0x2d4>
 800bfb6:	4b31      	ldr	r3, [pc, #196]	@ (800c07c <UART_SetConfig+0x338>)
 800bfb8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bfba:	f003 0307 	and.w	r3, r3, #7
 800bfbe:	2b05      	cmp	r3, #5
 800bfc0:	d826      	bhi.n	800c010 <UART_SetConfig+0x2cc>
 800bfc2:	a201      	add	r2, pc, #4	@ (adr r2, 800bfc8 <UART_SetConfig+0x284>)
 800bfc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bfc8:	0800bfe1 	.word	0x0800bfe1
 800bfcc:	0800bfe9 	.word	0x0800bfe9
 800bfd0:	0800bff1 	.word	0x0800bff1
 800bfd4:	0800bff9 	.word	0x0800bff9
 800bfd8:	0800c001 	.word	0x0800c001
 800bfdc:	0800c009 	.word	0x0800c009
 800bfe0:	2300      	movs	r3, #0
 800bfe2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bfe6:	e180      	b.n	800c2ea <UART_SetConfig+0x5a6>
 800bfe8:	2304      	movs	r3, #4
 800bfea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bfee:	e17c      	b.n	800c2ea <UART_SetConfig+0x5a6>
 800bff0:	2308      	movs	r3, #8
 800bff2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bff6:	e178      	b.n	800c2ea <UART_SetConfig+0x5a6>
 800bff8:	2310      	movs	r3, #16
 800bffa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bffe:	e174      	b.n	800c2ea <UART_SetConfig+0x5a6>
 800c000:	2320      	movs	r3, #32
 800c002:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c006:	e170      	b.n	800c2ea <UART_SetConfig+0x5a6>
 800c008:	2340      	movs	r3, #64	@ 0x40
 800c00a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c00e:	e16c      	b.n	800c2ea <UART_SetConfig+0x5a6>
 800c010:	2380      	movs	r3, #128	@ 0x80
 800c012:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c016:	e168      	b.n	800c2ea <UART_SetConfig+0x5a6>
 800c018:	697b      	ldr	r3, [r7, #20]
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	4a1b      	ldr	r2, [pc, #108]	@ (800c08c <UART_SetConfig+0x348>)
 800c01e:	4293      	cmp	r3, r2
 800c020:	d142      	bne.n	800c0a8 <UART_SetConfig+0x364>
 800c022:	4b16      	ldr	r3, [pc, #88]	@ (800c07c <UART_SetConfig+0x338>)
 800c024:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c026:	f003 0307 	and.w	r3, r3, #7
 800c02a:	2b05      	cmp	r3, #5
 800c02c:	d838      	bhi.n	800c0a0 <UART_SetConfig+0x35c>
 800c02e:	a201      	add	r2, pc, #4	@ (adr r2, 800c034 <UART_SetConfig+0x2f0>)
 800c030:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c034:	0800c04d 	.word	0x0800c04d
 800c038:	0800c055 	.word	0x0800c055
 800c03c:	0800c05d 	.word	0x0800c05d
 800c040:	0800c065 	.word	0x0800c065
 800c044:	0800c091 	.word	0x0800c091
 800c048:	0800c099 	.word	0x0800c099
 800c04c:	2300      	movs	r3, #0
 800c04e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c052:	e14a      	b.n	800c2ea <UART_SetConfig+0x5a6>
 800c054:	2304      	movs	r3, #4
 800c056:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c05a:	e146      	b.n	800c2ea <UART_SetConfig+0x5a6>
 800c05c:	2308      	movs	r3, #8
 800c05e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c062:	e142      	b.n	800c2ea <UART_SetConfig+0x5a6>
 800c064:	2310      	movs	r3, #16
 800c066:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c06a:	e13e      	b.n	800c2ea <UART_SetConfig+0x5a6>
 800c06c:	cfff69f3 	.word	0xcfff69f3
 800c070:	58000c00 	.word	0x58000c00
 800c074:	11fff4ff 	.word	0x11fff4ff
 800c078:	40011000 	.word	0x40011000
 800c07c:	58024400 	.word	0x58024400
 800c080:	40004400 	.word	0x40004400
 800c084:	40004800 	.word	0x40004800
 800c088:	40004c00 	.word	0x40004c00
 800c08c:	40005000 	.word	0x40005000
 800c090:	2320      	movs	r3, #32
 800c092:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c096:	e128      	b.n	800c2ea <UART_SetConfig+0x5a6>
 800c098:	2340      	movs	r3, #64	@ 0x40
 800c09a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c09e:	e124      	b.n	800c2ea <UART_SetConfig+0x5a6>
 800c0a0:	2380      	movs	r3, #128	@ 0x80
 800c0a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c0a6:	e120      	b.n	800c2ea <UART_SetConfig+0x5a6>
 800c0a8:	697b      	ldr	r3, [r7, #20]
 800c0aa:	681b      	ldr	r3, [r3, #0]
 800c0ac:	4acb      	ldr	r2, [pc, #812]	@ (800c3dc <UART_SetConfig+0x698>)
 800c0ae:	4293      	cmp	r3, r2
 800c0b0:	d176      	bne.n	800c1a0 <UART_SetConfig+0x45c>
 800c0b2:	4bcb      	ldr	r3, [pc, #812]	@ (800c3e0 <UART_SetConfig+0x69c>)
 800c0b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c0b6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800c0ba:	2b28      	cmp	r3, #40	@ 0x28
 800c0bc:	d86c      	bhi.n	800c198 <UART_SetConfig+0x454>
 800c0be:	a201      	add	r2, pc, #4	@ (adr r2, 800c0c4 <UART_SetConfig+0x380>)
 800c0c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0c4:	0800c169 	.word	0x0800c169
 800c0c8:	0800c199 	.word	0x0800c199
 800c0cc:	0800c199 	.word	0x0800c199
 800c0d0:	0800c199 	.word	0x0800c199
 800c0d4:	0800c199 	.word	0x0800c199
 800c0d8:	0800c199 	.word	0x0800c199
 800c0dc:	0800c199 	.word	0x0800c199
 800c0e0:	0800c199 	.word	0x0800c199
 800c0e4:	0800c171 	.word	0x0800c171
 800c0e8:	0800c199 	.word	0x0800c199
 800c0ec:	0800c199 	.word	0x0800c199
 800c0f0:	0800c199 	.word	0x0800c199
 800c0f4:	0800c199 	.word	0x0800c199
 800c0f8:	0800c199 	.word	0x0800c199
 800c0fc:	0800c199 	.word	0x0800c199
 800c100:	0800c199 	.word	0x0800c199
 800c104:	0800c179 	.word	0x0800c179
 800c108:	0800c199 	.word	0x0800c199
 800c10c:	0800c199 	.word	0x0800c199
 800c110:	0800c199 	.word	0x0800c199
 800c114:	0800c199 	.word	0x0800c199
 800c118:	0800c199 	.word	0x0800c199
 800c11c:	0800c199 	.word	0x0800c199
 800c120:	0800c199 	.word	0x0800c199
 800c124:	0800c181 	.word	0x0800c181
 800c128:	0800c199 	.word	0x0800c199
 800c12c:	0800c199 	.word	0x0800c199
 800c130:	0800c199 	.word	0x0800c199
 800c134:	0800c199 	.word	0x0800c199
 800c138:	0800c199 	.word	0x0800c199
 800c13c:	0800c199 	.word	0x0800c199
 800c140:	0800c199 	.word	0x0800c199
 800c144:	0800c189 	.word	0x0800c189
 800c148:	0800c199 	.word	0x0800c199
 800c14c:	0800c199 	.word	0x0800c199
 800c150:	0800c199 	.word	0x0800c199
 800c154:	0800c199 	.word	0x0800c199
 800c158:	0800c199 	.word	0x0800c199
 800c15c:	0800c199 	.word	0x0800c199
 800c160:	0800c199 	.word	0x0800c199
 800c164:	0800c191 	.word	0x0800c191
 800c168:	2301      	movs	r3, #1
 800c16a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c16e:	e0bc      	b.n	800c2ea <UART_SetConfig+0x5a6>
 800c170:	2304      	movs	r3, #4
 800c172:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c176:	e0b8      	b.n	800c2ea <UART_SetConfig+0x5a6>
 800c178:	2308      	movs	r3, #8
 800c17a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c17e:	e0b4      	b.n	800c2ea <UART_SetConfig+0x5a6>
 800c180:	2310      	movs	r3, #16
 800c182:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c186:	e0b0      	b.n	800c2ea <UART_SetConfig+0x5a6>
 800c188:	2320      	movs	r3, #32
 800c18a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c18e:	e0ac      	b.n	800c2ea <UART_SetConfig+0x5a6>
 800c190:	2340      	movs	r3, #64	@ 0x40
 800c192:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c196:	e0a8      	b.n	800c2ea <UART_SetConfig+0x5a6>
 800c198:	2380      	movs	r3, #128	@ 0x80
 800c19a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c19e:	e0a4      	b.n	800c2ea <UART_SetConfig+0x5a6>
 800c1a0:	697b      	ldr	r3, [r7, #20]
 800c1a2:	681b      	ldr	r3, [r3, #0]
 800c1a4:	4a8f      	ldr	r2, [pc, #572]	@ (800c3e4 <UART_SetConfig+0x6a0>)
 800c1a6:	4293      	cmp	r3, r2
 800c1a8:	d130      	bne.n	800c20c <UART_SetConfig+0x4c8>
 800c1aa:	4b8d      	ldr	r3, [pc, #564]	@ (800c3e0 <UART_SetConfig+0x69c>)
 800c1ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c1ae:	f003 0307 	and.w	r3, r3, #7
 800c1b2:	2b05      	cmp	r3, #5
 800c1b4:	d826      	bhi.n	800c204 <UART_SetConfig+0x4c0>
 800c1b6:	a201      	add	r2, pc, #4	@ (adr r2, 800c1bc <UART_SetConfig+0x478>)
 800c1b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1bc:	0800c1d5 	.word	0x0800c1d5
 800c1c0:	0800c1dd 	.word	0x0800c1dd
 800c1c4:	0800c1e5 	.word	0x0800c1e5
 800c1c8:	0800c1ed 	.word	0x0800c1ed
 800c1cc:	0800c1f5 	.word	0x0800c1f5
 800c1d0:	0800c1fd 	.word	0x0800c1fd
 800c1d4:	2300      	movs	r3, #0
 800c1d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c1da:	e086      	b.n	800c2ea <UART_SetConfig+0x5a6>
 800c1dc:	2304      	movs	r3, #4
 800c1de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c1e2:	e082      	b.n	800c2ea <UART_SetConfig+0x5a6>
 800c1e4:	2308      	movs	r3, #8
 800c1e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c1ea:	e07e      	b.n	800c2ea <UART_SetConfig+0x5a6>
 800c1ec:	2310      	movs	r3, #16
 800c1ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c1f2:	e07a      	b.n	800c2ea <UART_SetConfig+0x5a6>
 800c1f4:	2320      	movs	r3, #32
 800c1f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c1fa:	e076      	b.n	800c2ea <UART_SetConfig+0x5a6>
 800c1fc:	2340      	movs	r3, #64	@ 0x40
 800c1fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c202:	e072      	b.n	800c2ea <UART_SetConfig+0x5a6>
 800c204:	2380      	movs	r3, #128	@ 0x80
 800c206:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c20a:	e06e      	b.n	800c2ea <UART_SetConfig+0x5a6>
 800c20c:	697b      	ldr	r3, [r7, #20]
 800c20e:	681b      	ldr	r3, [r3, #0]
 800c210:	4a75      	ldr	r2, [pc, #468]	@ (800c3e8 <UART_SetConfig+0x6a4>)
 800c212:	4293      	cmp	r3, r2
 800c214:	d130      	bne.n	800c278 <UART_SetConfig+0x534>
 800c216:	4b72      	ldr	r3, [pc, #456]	@ (800c3e0 <UART_SetConfig+0x69c>)
 800c218:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c21a:	f003 0307 	and.w	r3, r3, #7
 800c21e:	2b05      	cmp	r3, #5
 800c220:	d826      	bhi.n	800c270 <UART_SetConfig+0x52c>
 800c222:	a201      	add	r2, pc, #4	@ (adr r2, 800c228 <UART_SetConfig+0x4e4>)
 800c224:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c228:	0800c241 	.word	0x0800c241
 800c22c:	0800c249 	.word	0x0800c249
 800c230:	0800c251 	.word	0x0800c251
 800c234:	0800c259 	.word	0x0800c259
 800c238:	0800c261 	.word	0x0800c261
 800c23c:	0800c269 	.word	0x0800c269
 800c240:	2300      	movs	r3, #0
 800c242:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c246:	e050      	b.n	800c2ea <UART_SetConfig+0x5a6>
 800c248:	2304      	movs	r3, #4
 800c24a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c24e:	e04c      	b.n	800c2ea <UART_SetConfig+0x5a6>
 800c250:	2308      	movs	r3, #8
 800c252:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c256:	e048      	b.n	800c2ea <UART_SetConfig+0x5a6>
 800c258:	2310      	movs	r3, #16
 800c25a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c25e:	e044      	b.n	800c2ea <UART_SetConfig+0x5a6>
 800c260:	2320      	movs	r3, #32
 800c262:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c266:	e040      	b.n	800c2ea <UART_SetConfig+0x5a6>
 800c268:	2340      	movs	r3, #64	@ 0x40
 800c26a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c26e:	e03c      	b.n	800c2ea <UART_SetConfig+0x5a6>
 800c270:	2380      	movs	r3, #128	@ 0x80
 800c272:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c276:	e038      	b.n	800c2ea <UART_SetConfig+0x5a6>
 800c278:	697b      	ldr	r3, [r7, #20]
 800c27a:	681b      	ldr	r3, [r3, #0]
 800c27c:	4a5b      	ldr	r2, [pc, #364]	@ (800c3ec <UART_SetConfig+0x6a8>)
 800c27e:	4293      	cmp	r3, r2
 800c280:	d130      	bne.n	800c2e4 <UART_SetConfig+0x5a0>
 800c282:	4b57      	ldr	r3, [pc, #348]	@ (800c3e0 <UART_SetConfig+0x69c>)
 800c284:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c286:	f003 0307 	and.w	r3, r3, #7
 800c28a:	2b05      	cmp	r3, #5
 800c28c:	d826      	bhi.n	800c2dc <UART_SetConfig+0x598>
 800c28e:	a201      	add	r2, pc, #4	@ (adr r2, 800c294 <UART_SetConfig+0x550>)
 800c290:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c294:	0800c2ad 	.word	0x0800c2ad
 800c298:	0800c2b5 	.word	0x0800c2b5
 800c29c:	0800c2bd 	.word	0x0800c2bd
 800c2a0:	0800c2c5 	.word	0x0800c2c5
 800c2a4:	0800c2cd 	.word	0x0800c2cd
 800c2a8:	0800c2d5 	.word	0x0800c2d5
 800c2ac:	2302      	movs	r3, #2
 800c2ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c2b2:	e01a      	b.n	800c2ea <UART_SetConfig+0x5a6>
 800c2b4:	2304      	movs	r3, #4
 800c2b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c2ba:	e016      	b.n	800c2ea <UART_SetConfig+0x5a6>
 800c2bc:	2308      	movs	r3, #8
 800c2be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c2c2:	e012      	b.n	800c2ea <UART_SetConfig+0x5a6>
 800c2c4:	2310      	movs	r3, #16
 800c2c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c2ca:	e00e      	b.n	800c2ea <UART_SetConfig+0x5a6>
 800c2cc:	2320      	movs	r3, #32
 800c2ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c2d2:	e00a      	b.n	800c2ea <UART_SetConfig+0x5a6>
 800c2d4:	2340      	movs	r3, #64	@ 0x40
 800c2d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c2da:	e006      	b.n	800c2ea <UART_SetConfig+0x5a6>
 800c2dc:	2380      	movs	r3, #128	@ 0x80
 800c2de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c2e2:	e002      	b.n	800c2ea <UART_SetConfig+0x5a6>
 800c2e4:	2380      	movs	r3, #128	@ 0x80
 800c2e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c2ea:	697b      	ldr	r3, [r7, #20]
 800c2ec:	681b      	ldr	r3, [r3, #0]
 800c2ee:	4a3f      	ldr	r2, [pc, #252]	@ (800c3ec <UART_SetConfig+0x6a8>)
 800c2f0:	4293      	cmp	r3, r2
 800c2f2:	f040 80f8 	bne.w	800c4e6 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800c2f6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800c2fa:	2b20      	cmp	r3, #32
 800c2fc:	dc46      	bgt.n	800c38c <UART_SetConfig+0x648>
 800c2fe:	2b02      	cmp	r3, #2
 800c300:	f2c0 8082 	blt.w	800c408 <UART_SetConfig+0x6c4>
 800c304:	3b02      	subs	r3, #2
 800c306:	2b1e      	cmp	r3, #30
 800c308:	d87e      	bhi.n	800c408 <UART_SetConfig+0x6c4>
 800c30a:	a201      	add	r2, pc, #4	@ (adr r2, 800c310 <UART_SetConfig+0x5cc>)
 800c30c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c310:	0800c393 	.word	0x0800c393
 800c314:	0800c409 	.word	0x0800c409
 800c318:	0800c39b 	.word	0x0800c39b
 800c31c:	0800c409 	.word	0x0800c409
 800c320:	0800c409 	.word	0x0800c409
 800c324:	0800c409 	.word	0x0800c409
 800c328:	0800c3ab 	.word	0x0800c3ab
 800c32c:	0800c409 	.word	0x0800c409
 800c330:	0800c409 	.word	0x0800c409
 800c334:	0800c409 	.word	0x0800c409
 800c338:	0800c409 	.word	0x0800c409
 800c33c:	0800c409 	.word	0x0800c409
 800c340:	0800c409 	.word	0x0800c409
 800c344:	0800c409 	.word	0x0800c409
 800c348:	0800c3bb 	.word	0x0800c3bb
 800c34c:	0800c409 	.word	0x0800c409
 800c350:	0800c409 	.word	0x0800c409
 800c354:	0800c409 	.word	0x0800c409
 800c358:	0800c409 	.word	0x0800c409
 800c35c:	0800c409 	.word	0x0800c409
 800c360:	0800c409 	.word	0x0800c409
 800c364:	0800c409 	.word	0x0800c409
 800c368:	0800c409 	.word	0x0800c409
 800c36c:	0800c409 	.word	0x0800c409
 800c370:	0800c409 	.word	0x0800c409
 800c374:	0800c409 	.word	0x0800c409
 800c378:	0800c409 	.word	0x0800c409
 800c37c:	0800c409 	.word	0x0800c409
 800c380:	0800c409 	.word	0x0800c409
 800c384:	0800c409 	.word	0x0800c409
 800c388:	0800c3fb 	.word	0x0800c3fb
 800c38c:	2b40      	cmp	r3, #64	@ 0x40
 800c38e:	d037      	beq.n	800c400 <UART_SetConfig+0x6bc>
 800c390:	e03a      	b.n	800c408 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800c392:	f7fd f973 	bl	800967c <HAL_RCCEx_GetD3PCLK1Freq>
 800c396:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c398:	e03c      	b.n	800c414 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c39a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c39e:	4618      	mov	r0, r3
 800c3a0:	f7fd f982 	bl	80096a8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c3a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c3a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c3a8:	e034      	b.n	800c414 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c3aa:	f107 0318 	add.w	r3, r7, #24
 800c3ae:	4618      	mov	r0, r3
 800c3b0:	f7fd face 	bl	8009950 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c3b4:	69fb      	ldr	r3, [r7, #28]
 800c3b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c3b8:	e02c      	b.n	800c414 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c3ba:	4b09      	ldr	r3, [pc, #36]	@ (800c3e0 <UART_SetConfig+0x69c>)
 800c3bc:	681b      	ldr	r3, [r3, #0]
 800c3be:	f003 0320 	and.w	r3, r3, #32
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	d016      	beq.n	800c3f4 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c3c6:	4b06      	ldr	r3, [pc, #24]	@ (800c3e0 <UART_SetConfig+0x69c>)
 800c3c8:	681b      	ldr	r3, [r3, #0]
 800c3ca:	08db      	lsrs	r3, r3, #3
 800c3cc:	f003 0303 	and.w	r3, r3, #3
 800c3d0:	4a07      	ldr	r2, [pc, #28]	@ (800c3f0 <UART_SetConfig+0x6ac>)
 800c3d2:	fa22 f303 	lsr.w	r3, r2, r3
 800c3d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c3d8:	e01c      	b.n	800c414 <UART_SetConfig+0x6d0>
 800c3da:	bf00      	nop
 800c3dc:	40011400 	.word	0x40011400
 800c3e0:	58024400 	.word	0x58024400
 800c3e4:	40007800 	.word	0x40007800
 800c3e8:	40007c00 	.word	0x40007c00
 800c3ec:	58000c00 	.word	0x58000c00
 800c3f0:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800c3f4:	4b9d      	ldr	r3, [pc, #628]	@ (800c66c <UART_SetConfig+0x928>)
 800c3f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c3f8:	e00c      	b.n	800c414 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c3fa:	4b9d      	ldr	r3, [pc, #628]	@ (800c670 <UART_SetConfig+0x92c>)
 800c3fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c3fe:	e009      	b.n	800c414 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c400:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c404:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c406:	e005      	b.n	800c414 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800c408:	2300      	movs	r3, #0
 800c40a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800c40c:	2301      	movs	r3, #1
 800c40e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800c412:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800c414:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c416:	2b00      	cmp	r3, #0
 800c418:	f000 81de 	beq.w	800c7d8 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c41c:	697b      	ldr	r3, [r7, #20]
 800c41e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c420:	4a94      	ldr	r2, [pc, #592]	@ (800c674 <UART_SetConfig+0x930>)
 800c422:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c426:	461a      	mov	r2, r3
 800c428:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c42a:	fbb3 f3f2 	udiv	r3, r3, r2
 800c42e:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c430:	697b      	ldr	r3, [r7, #20]
 800c432:	685a      	ldr	r2, [r3, #4]
 800c434:	4613      	mov	r3, r2
 800c436:	005b      	lsls	r3, r3, #1
 800c438:	4413      	add	r3, r2
 800c43a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c43c:	429a      	cmp	r2, r3
 800c43e:	d305      	bcc.n	800c44c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800c440:	697b      	ldr	r3, [r7, #20]
 800c442:	685b      	ldr	r3, [r3, #4]
 800c444:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c446:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c448:	429a      	cmp	r2, r3
 800c44a:	d903      	bls.n	800c454 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800c44c:	2301      	movs	r3, #1
 800c44e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800c452:	e1c1      	b.n	800c7d8 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c454:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c456:	2200      	movs	r2, #0
 800c458:	60bb      	str	r3, [r7, #8]
 800c45a:	60fa      	str	r2, [r7, #12]
 800c45c:	697b      	ldr	r3, [r7, #20]
 800c45e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c460:	4a84      	ldr	r2, [pc, #528]	@ (800c674 <UART_SetConfig+0x930>)
 800c462:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c466:	b29b      	uxth	r3, r3
 800c468:	2200      	movs	r2, #0
 800c46a:	603b      	str	r3, [r7, #0]
 800c46c:	607a      	str	r2, [r7, #4]
 800c46e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c472:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800c476:	f7f4 f947 	bl	8000708 <__aeabi_uldivmod>
 800c47a:	4602      	mov	r2, r0
 800c47c:	460b      	mov	r3, r1
 800c47e:	4610      	mov	r0, r2
 800c480:	4619      	mov	r1, r3
 800c482:	f04f 0200 	mov.w	r2, #0
 800c486:	f04f 0300 	mov.w	r3, #0
 800c48a:	020b      	lsls	r3, r1, #8
 800c48c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800c490:	0202      	lsls	r2, r0, #8
 800c492:	6979      	ldr	r1, [r7, #20]
 800c494:	6849      	ldr	r1, [r1, #4]
 800c496:	0849      	lsrs	r1, r1, #1
 800c498:	2000      	movs	r0, #0
 800c49a:	460c      	mov	r4, r1
 800c49c:	4605      	mov	r5, r0
 800c49e:	eb12 0804 	adds.w	r8, r2, r4
 800c4a2:	eb43 0905 	adc.w	r9, r3, r5
 800c4a6:	697b      	ldr	r3, [r7, #20]
 800c4a8:	685b      	ldr	r3, [r3, #4]
 800c4aa:	2200      	movs	r2, #0
 800c4ac:	469a      	mov	sl, r3
 800c4ae:	4693      	mov	fp, r2
 800c4b0:	4652      	mov	r2, sl
 800c4b2:	465b      	mov	r3, fp
 800c4b4:	4640      	mov	r0, r8
 800c4b6:	4649      	mov	r1, r9
 800c4b8:	f7f4 f926 	bl	8000708 <__aeabi_uldivmod>
 800c4bc:	4602      	mov	r2, r0
 800c4be:	460b      	mov	r3, r1
 800c4c0:	4613      	mov	r3, r2
 800c4c2:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c4c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c4c6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c4ca:	d308      	bcc.n	800c4de <UART_SetConfig+0x79a>
 800c4cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c4ce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c4d2:	d204      	bcs.n	800c4de <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800c4d4:	697b      	ldr	r3, [r7, #20]
 800c4d6:	681b      	ldr	r3, [r3, #0]
 800c4d8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c4da:	60da      	str	r2, [r3, #12]
 800c4dc:	e17c      	b.n	800c7d8 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800c4de:	2301      	movs	r3, #1
 800c4e0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800c4e4:	e178      	b.n	800c7d8 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c4e6:	697b      	ldr	r3, [r7, #20]
 800c4e8:	69db      	ldr	r3, [r3, #28]
 800c4ea:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c4ee:	f040 80c5 	bne.w	800c67c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800c4f2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800c4f6:	2b20      	cmp	r3, #32
 800c4f8:	dc48      	bgt.n	800c58c <UART_SetConfig+0x848>
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	db7b      	blt.n	800c5f6 <UART_SetConfig+0x8b2>
 800c4fe:	2b20      	cmp	r3, #32
 800c500:	d879      	bhi.n	800c5f6 <UART_SetConfig+0x8b2>
 800c502:	a201      	add	r2, pc, #4	@ (adr r2, 800c508 <UART_SetConfig+0x7c4>)
 800c504:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c508:	0800c593 	.word	0x0800c593
 800c50c:	0800c59b 	.word	0x0800c59b
 800c510:	0800c5f7 	.word	0x0800c5f7
 800c514:	0800c5f7 	.word	0x0800c5f7
 800c518:	0800c5a3 	.word	0x0800c5a3
 800c51c:	0800c5f7 	.word	0x0800c5f7
 800c520:	0800c5f7 	.word	0x0800c5f7
 800c524:	0800c5f7 	.word	0x0800c5f7
 800c528:	0800c5b3 	.word	0x0800c5b3
 800c52c:	0800c5f7 	.word	0x0800c5f7
 800c530:	0800c5f7 	.word	0x0800c5f7
 800c534:	0800c5f7 	.word	0x0800c5f7
 800c538:	0800c5f7 	.word	0x0800c5f7
 800c53c:	0800c5f7 	.word	0x0800c5f7
 800c540:	0800c5f7 	.word	0x0800c5f7
 800c544:	0800c5f7 	.word	0x0800c5f7
 800c548:	0800c5c3 	.word	0x0800c5c3
 800c54c:	0800c5f7 	.word	0x0800c5f7
 800c550:	0800c5f7 	.word	0x0800c5f7
 800c554:	0800c5f7 	.word	0x0800c5f7
 800c558:	0800c5f7 	.word	0x0800c5f7
 800c55c:	0800c5f7 	.word	0x0800c5f7
 800c560:	0800c5f7 	.word	0x0800c5f7
 800c564:	0800c5f7 	.word	0x0800c5f7
 800c568:	0800c5f7 	.word	0x0800c5f7
 800c56c:	0800c5f7 	.word	0x0800c5f7
 800c570:	0800c5f7 	.word	0x0800c5f7
 800c574:	0800c5f7 	.word	0x0800c5f7
 800c578:	0800c5f7 	.word	0x0800c5f7
 800c57c:	0800c5f7 	.word	0x0800c5f7
 800c580:	0800c5f7 	.word	0x0800c5f7
 800c584:	0800c5f7 	.word	0x0800c5f7
 800c588:	0800c5e9 	.word	0x0800c5e9
 800c58c:	2b40      	cmp	r3, #64	@ 0x40
 800c58e:	d02e      	beq.n	800c5ee <UART_SetConfig+0x8aa>
 800c590:	e031      	b.n	800c5f6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c592:	f7fb f8bd 	bl	8007710 <HAL_RCC_GetPCLK1Freq>
 800c596:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c598:	e033      	b.n	800c602 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c59a:	f7fb f8cf 	bl	800773c <HAL_RCC_GetPCLK2Freq>
 800c59e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c5a0:	e02f      	b.n	800c602 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c5a2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c5a6:	4618      	mov	r0, r3
 800c5a8:	f7fd f87e 	bl	80096a8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c5ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c5ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c5b0:	e027      	b.n	800c602 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c5b2:	f107 0318 	add.w	r3, r7, #24
 800c5b6:	4618      	mov	r0, r3
 800c5b8:	f7fd f9ca 	bl	8009950 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c5bc:	69fb      	ldr	r3, [r7, #28]
 800c5be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c5c0:	e01f      	b.n	800c602 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c5c2:	4b2d      	ldr	r3, [pc, #180]	@ (800c678 <UART_SetConfig+0x934>)
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	f003 0320 	and.w	r3, r3, #32
 800c5ca:	2b00      	cmp	r3, #0
 800c5cc:	d009      	beq.n	800c5e2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c5ce:	4b2a      	ldr	r3, [pc, #168]	@ (800c678 <UART_SetConfig+0x934>)
 800c5d0:	681b      	ldr	r3, [r3, #0]
 800c5d2:	08db      	lsrs	r3, r3, #3
 800c5d4:	f003 0303 	and.w	r3, r3, #3
 800c5d8:	4a24      	ldr	r2, [pc, #144]	@ (800c66c <UART_SetConfig+0x928>)
 800c5da:	fa22 f303 	lsr.w	r3, r2, r3
 800c5de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c5e0:	e00f      	b.n	800c602 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800c5e2:	4b22      	ldr	r3, [pc, #136]	@ (800c66c <UART_SetConfig+0x928>)
 800c5e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c5e6:	e00c      	b.n	800c602 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c5e8:	4b21      	ldr	r3, [pc, #132]	@ (800c670 <UART_SetConfig+0x92c>)
 800c5ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c5ec:	e009      	b.n	800c602 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c5ee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c5f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c5f4:	e005      	b.n	800c602 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800c5f6:	2300      	movs	r3, #0
 800c5f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800c5fa:	2301      	movs	r3, #1
 800c5fc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800c600:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c602:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c604:	2b00      	cmp	r3, #0
 800c606:	f000 80e7 	beq.w	800c7d8 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c60a:	697b      	ldr	r3, [r7, #20]
 800c60c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c60e:	4a19      	ldr	r2, [pc, #100]	@ (800c674 <UART_SetConfig+0x930>)
 800c610:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c614:	461a      	mov	r2, r3
 800c616:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c618:	fbb3 f3f2 	udiv	r3, r3, r2
 800c61c:	005a      	lsls	r2, r3, #1
 800c61e:	697b      	ldr	r3, [r7, #20]
 800c620:	685b      	ldr	r3, [r3, #4]
 800c622:	085b      	lsrs	r3, r3, #1
 800c624:	441a      	add	r2, r3
 800c626:	697b      	ldr	r3, [r7, #20]
 800c628:	685b      	ldr	r3, [r3, #4]
 800c62a:	fbb2 f3f3 	udiv	r3, r2, r3
 800c62e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c630:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c632:	2b0f      	cmp	r3, #15
 800c634:	d916      	bls.n	800c664 <UART_SetConfig+0x920>
 800c636:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c638:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c63c:	d212      	bcs.n	800c664 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c63e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c640:	b29b      	uxth	r3, r3
 800c642:	f023 030f 	bic.w	r3, r3, #15
 800c646:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c648:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c64a:	085b      	lsrs	r3, r3, #1
 800c64c:	b29b      	uxth	r3, r3
 800c64e:	f003 0307 	and.w	r3, r3, #7
 800c652:	b29a      	uxth	r2, r3
 800c654:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800c656:	4313      	orrs	r3, r2
 800c658:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800c65a:	697b      	ldr	r3, [r7, #20]
 800c65c:	681b      	ldr	r3, [r3, #0]
 800c65e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800c660:	60da      	str	r2, [r3, #12]
 800c662:	e0b9      	b.n	800c7d8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800c664:	2301      	movs	r3, #1
 800c666:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800c66a:	e0b5      	b.n	800c7d8 <UART_SetConfig+0xa94>
 800c66c:	03d09000 	.word	0x03d09000
 800c670:	003d0900 	.word	0x003d0900
 800c674:	080126c8 	.word	0x080126c8
 800c678:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800c67c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800c680:	2b20      	cmp	r3, #32
 800c682:	dc49      	bgt.n	800c718 <UART_SetConfig+0x9d4>
 800c684:	2b00      	cmp	r3, #0
 800c686:	db7c      	blt.n	800c782 <UART_SetConfig+0xa3e>
 800c688:	2b20      	cmp	r3, #32
 800c68a:	d87a      	bhi.n	800c782 <UART_SetConfig+0xa3e>
 800c68c:	a201      	add	r2, pc, #4	@ (adr r2, 800c694 <UART_SetConfig+0x950>)
 800c68e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c692:	bf00      	nop
 800c694:	0800c71f 	.word	0x0800c71f
 800c698:	0800c727 	.word	0x0800c727
 800c69c:	0800c783 	.word	0x0800c783
 800c6a0:	0800c783 	.word	0x0800c783
 800c6a4:	0800c72f 	.word	0x0800c72f
 800c6a8:	0800c783 	.word	0x0800c783
 800c6ac:	0800c783 	.word	0x0800c783
 800c6b0:	0800c783 	.word	0x0800c783
 800c6b4:	0800c73f 	.word	0x0800c73f
 800c6b8:	0800c783 	.word	0x0800c783
 800c6bc:	0800c783 	.word	0x0800c783
 800c6c0:	0800c783 	.word	0x0800c783
 800c6c4:	0800c783 	.word	0x0800c783
 800c6c8:	0800c783 	.word	0x0800c783
 800c6cc:	0800c783 	.word	0x0800c783
 800c6d0:	0800c783 	.word	0x0800c783
 800c6d4:	0800c74f 	.word	0x0800c74f
 800c6d8:	0800c783 	.word	0x0800c783
 800c6dc:	0800c783 	.word	0x0800c783
 800c6e0:	0800c783 	.word	0x0800c783
 800c6e4:	0800c783 	.word	0x0800c783
 800c6e8:	0800c783 	.word	0x0800c783
 800c6ec:	0800c783 	.word	0x0800c783
 800c6f0:	0800c783 	.word	0x0800c783
 800c6f4:	0800c783 	.word	0x0800c783
 800c6f8:	0800c783 	.word	0x0800c783
 800c6fc:	0800c783 	.word	0x0800c783
 800c700:	0800c783 	.word	0x0800c783
 800c704:	0800c783 	.word	0x0800c783
 800c708:	0800c783 	.word	0x0800c783
 800c70c:	0800c783 	.word	0x0800c783
 800c710:	0800c783 	.word	0x0800c783
 800c714:	0800c775 	.word	0x0800c775
 800c718:	2b40      	cmp	r3, #64	@ 0x40
 800c71a:	d02e      	beq.n	800c77a <UART_SetConfig+0xa36>
 800c71c:	e031      	b.n	800c782 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c71e:	f7fa fff7 	bl	8007710 <HAL_RCC_GetPCLK1Freq>
 800c722:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c724:	e033      	b.n	800c78e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c726:	f7fb f809 	bl	800773c <HAL_RCC_GetPCLK2Freq>
 800c72a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c72c:	e02f      	b.n	800c78e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c72e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c732:	4618      	mov	r0, r3
 800c734:	f7fc ffb8 	bl	80096a8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c738:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c73a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c73c:	e027      	b.n	800c78e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c73e:	f107 0318 	add.w	r3, r7, #24
 800c742:	4618      	mov	r0, r3
 800c744:	f7fd f904 	bl	8009950 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c748:	69fb      	ldr	r3, [r7, #28]
 800c74a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c74c:	e01f      	b.n	800c78e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c74e:	4b2d      	ldr	r3, [pc, #180]	@ (800c804 <UART_SetConfig+0xac0>)
 800c750:	681b      	ldr	r3, [r3, #0]
 800c752:	f003 0320 	and.w	r3, r3, #32
 800c756:	2b00      	cmp	r3, #0
 800c758:	d009      	beq.n	800c76e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c75a:	4b2a      	ldr	r3, [pc, #168]	@ (800c804 <UART_SetConfig+0xac0>)
 800c75c:	681b      	ldr	r3, [r3, #0]
 800c75e:	08db      	lsrs	r3, r3, #3
 800c760:	f003 0303 	and.w	r3, r3, #3
 800c764:	4a28      	ldr	r2, [pc, #160]	@ (800c808 <UART_SetConfig+0xac4>)
 800c766:	fa22 f303 	lsr.w	r3, r2, r3
 800c76a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c76c:	e00f      	b.n	800c78e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800c76e:	4b26      	ldr	r3, [pc, #152]	@ (800c808 <UART_SetConfig+0xac4>)
 800c770:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c772:	e00c      	b.n	800c78e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c774:	4b25      	ldr	r3, [pc, #148]	@ (800c80c <UART_SetConfig+0xac8>)
 800c776:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c778:	e009      	b.n	800c78e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c77a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c77e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c780:	e005      	b.n	800c78e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800c782:	2300      	movs	r3, #0
 800c784:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800c786:	2301      	movs	r3, #1
 800c788:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800c78c:	bf00      	nop
    }

    if (pclk != 0U)
 800c78e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c790:	2b00      	cmp	r3, #0
 800c792:	d021      	beq.n	800c7d8 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c794:	697b      	ldr	r3, [r7, #20]
 800c796:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c798:	4a1d      	ldr	r2, [pc, #116]	@ (800c810 <UART_SetConfig+0xacc>)
 800c79a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c79e:	461a      	mov	r2, r3
 800c7a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c7a2:	fbb3 f2f2 	udiv	r2, r3, r2
 800c7a6:	697b      	ldr	r3, [r7, #20]
 800c7a8:	685b      	ldr	r3, [r3, #4]
 800c7aa:	085b      	lsrs	r3, r3, #1
 800c7ac:	441a      	add	r2, r3
 800c7ae:	697b      	ldr	r3, [r7, #20]
 800c7b0:	685b      	ldr	r3, [r3, #4]
 800c7b2:	fbb2 f3f3 	udiv	r3, r2, r3
 800c7b6:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c7b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c7ba:	2b0f      	cmp	r3, #15
 800c7bc:	d909      	bls.n	800c7d2 <UART_SetConfig+0xa8e>
 800c7be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c7c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c7c4:	d205      	bcs.n	800c7d2 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800c7c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c7c8:	b29a      	uxth	r2, r3
 800c7ca:	697b      	ldr	r3, [r7, #20]
 800c7cc:	681b      	ldr	r3, [r3, #0]
 800c7ce:	60da      	str	r2, [r3, #12]
 800c7d0:	e002      	b.n	800c7d8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800c7d2:	2301      	movs	r3, #1
 800c7d4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800c7d8:	697b      	ldr	r3, [r7, #20]
 800c7da:	2201      	movs	r2, #1
 800c7dc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800c7e0:	697b      	ldr	r3, [r7, #20]
 800c7e2:	2201      	movs	r2, #1
 800c7e4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c7e8:	697b      	ldr	r3, [r7, #20]
 800c7ea:	2200      	movs	r2, #0
 800c7ec:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800c7ee:	697b      	ldr	r3, [r7, #20]
 800c7f0:	2200      	movs	r2, #0
 800c7f2:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800c7f4:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800c7f8:	4618      	mov	r0, r3
 800c7fa:	3748      	adds	r7, #72	@ 0x48
 800c7fc:	46bd      	mov	sp, r7
 800c7fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c802:	bf00      	nop
 800c804:	58024400 	.word	0x58024400
 800c808:	03d09000 	.word	0x03d09000
 800c80c:	003d0900 	.word	0x003d0900
 800c810:	080126c8 	.word	0x080126c8

0800c814 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c814:	b480      	push	{r7}
 800c816:	b083      	sub	sp, #12
 800c818:	af00      	add	r7, sp, #0
 800c81a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c820:	f003 0308 	and.w	r3, r3, #8
 800c824:	2b00      	cmp	r3, #0
 800c826:	d00a      	beq.n	800c83e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	681b      	ldr	r3, [r3, #0]
 800c82c:	685b      	ldr	r3, [r3, #4]
 800c82e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	681b      	ldr	r3, [r3, #0]
 800c83a:	430a      	orrs	r2, r1
 800c83c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c842:	f003 0301 	and.w	r3, r3, #1
 800c846:	2b00      	cmp	r3, #0
 800c848:	d00a      	beq.n	800c860 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	681b      	ldr	r3, [r3, #0]
 800c84e:	685b      	ldr	r3, [r3, #4]
 800c850:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	681b      	ldr	r3, [r3, #0]
 800c85c:	430a      	orrs	r2, r1
 800c85e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c864:	f003 0302 	and.w	r3, r3, #2
 800c868:	2b00      	cmp	r3, #0
 800c86a:	d00a      	beq.n	800c882 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	681b      	ldr	r3, [r3, #0]
 800c870:	685b      	ldr	r3, [r3, #4]
 800c872:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	681b      	ldr	r3, [r3, #0]
 800c87e:	430a      	orrs	r2, r1
 800c880:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c886:	f003 0304 	and.w	r3, r3, #4
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	d00a      	beq.n	800c8a4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	681b      	ldr	r3, [r3, #0]
 800c892:	685b      	ldr	r3, [r3, #4]
 800c894:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	681b      	ldr	r3, [r3, #0]
 800c8a0:	430a      	orrs	r2, r1
 800c8a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c8a8:	f003 0310 	and.w	r3, r3, #16
 800c8ac:	2b00      	cmp	r3, #0
 800c8ae:	d00a      	beq.n	800c8c6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	681b      	ldr	r3, [r3, #0]
 800c8b4:	689b      	ldr	r3, [r3, #8]
 800c8b6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	681b      	ldr	r3, [r3, #0]
 800c8c2:	430a      	orrs	r2, r1
 800c8c4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c8ca:	f003 0320 	and.w	r3, r3, #32
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	d00a      	beq.n	800c8e8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	681b      	ldr	r3, [r3, #0]
 800c8d6:	689b      	ldr	r3, [r3, #8]
 800c8d8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	681b      	ldr	r3, [r3, #0]
 800c8e4:	430a      	orrs	r2, r1
 800c8e6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c8ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	d01a      	beq.n	800c92a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	681b      	ldr	r3, [r3, #0]
 800c8f8:	685b      	ldr	r3, [r3, #4]
 800c8fa:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	681b      	ldr	r3, [r3, #0]
 800c906:	430a      	orrs	r2, r1
 800c908:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c90e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c912:	d10a      	bne.n	800c92a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	681b      	ldr	r3, [r3, #0]
 800c918:	685b      	ldr	r3, [r3, #4]
 800c91a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	681b      	ldr	r3, [r3, #0]
 800c926:	430a      	orrs	r2, r1
 800c928:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c92e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c932:	2b00      	cmp	r3, #0
 800c934:	d00a      	beq.n	800c94c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	681b      	ldr	r3, [r3, #0]
 800c93a:	685b      	ldr	r3, [r3, #4]
 800c93c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	681b      	ldr	r3, [r3, #0]
 800c948:	430a      	orrs	r2, r1
 800c94a:	605a      	str	r2, [r3, #4]
  }
}
 800c94c:	bf00      	nop
 800c94e:	370c      	adds	r7, #12
 800c950:	46bd      	mov	sp, r7
 800c952:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c956:	4770      	bx	lr

0800c958 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c958:	b580      	push	{r7, lr}
 800c95a:	b098      	sub	sp, #96	@ 0x60
 800c95c:	af02      	add	r7, sp, #8
 800c95e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	2200      	movs	r2, #0
 800c964:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c968:	f7f5 f9c2 	bl	8001cf0 <HAL_GetTick>
 800c96c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	681b      	ldr	r3, [r3, #0]
 800c972:	681b      	ldr	r3, [r3, #0]
 800c974:	f003 0308 	and.w	r3, r3, #8
 800c978:	2b08      	cmp	r3, #8
 800c97a:	d12f      	bne.n	800c9dc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c97c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800c980:	9300      	str	r3, [sp, #0]
 800c982:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c984:	2200      	movs	r2, #0
 800c986:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800c98a:	6878      	ldr	r0, [r7, #4]
 800c98c:	f000 f88e 	bl	800caac <UART_WaitOnFlagUntilTimeout>
 800c990:	4603      	mov	r3, r0
 800c992:	2b00      	cmp	r3, #0
 800c994:	d022      	beq.n	800c9dc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	681b      	ldr	r3, [r3, #0]
 800c99a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c99c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c99e:	e853 3f00 	ldrex	r3, [r3]
 800c9a2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c9a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c9a6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c9aa:	653b      	str	r3, [r7, #80]	@ 0x50
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	681b      	ldr	r3, [r3, #0]
 800c9b0:	461a      	mov	r2, r3
 800c9b2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c9b4:	647b      	str	r3, [r7, #68]	@ 0x44
 800c9b6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c9b8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c9ba:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c9bc:	e841 2300 	strex	r3, r2, [r1]
 800c9c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c9c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	d1e6      	bne.n	800c996 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	2220      	movs	r2, #32
 800c9cc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	2200      	movs	r2, #0
 800c9d4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c9d8:	2303      	movs	r3, #3
 800c9da:	e063      	b.n	800caa4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	681b      	ldr	r3, [r3, #0]
 800c9e0:	681b      	ldr	r3, [r3, #0]
 800c9e2:	f003 0304 	and.w	r3, r3, #4
 800c9e6:	2b04      	cmp	r3, #4
 800c9e8:	d149      	bne.n	800ca7e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c9ea:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800c9ee:	9300      	str	r3, [sp, #0]
 800c9f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c9f2:	2200      	movs	r2, #0
 800c9f4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800c9f8:	6878      	ldr	r0, [r7, #4]
 800c9fa:	f000 f857 	bl	800caac <UART_WaitOnFlagUntilTimeout>
 800c9fe:	4603      	mov	r3, r0
 800ca00:	2b00      	cmp	r3, #0
 800ca02:	d03c      	beq.n	800ca7e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	681b      	ldr	r3, [r3, #0]
 800ca08:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca0c:	e853 3f00 	ldrex	r3, [r3]
 800ca10:	623b      	str	r3, [r7, #32]
   return(result);
 800ca12:	6a3b      	ldr	r3, [r7, #32]
 800ca14:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ca18:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	681b      	ldr	r3, [r3, #0]
 800ca1e:	461a      	mov	r2, r3
 800ca20:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ca22:	633b      	str	r3, [r7, #48]	@ 0x30
 800ca24:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca26:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ca28:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ca2a:	e841 2300 	strex	r3, r2, [r1]
 800ca2e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ca30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca32:	2b00      	cmp	r3, #0
 800ca34:	d1e6      	bne.n	800ca04 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	681b      	ldr	r3, [r3, #0]
 800ca3a:	3308      	adds	r3, #8
 800ca3c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca3e:	693b      	ldr	r3, [r7, #16]
 800ca40:	e853 3f00 	ldrex	r3, [r3]
 800ca44:	60fb      	str	r3, [r7, #12]
   return(result);
 800ca46:	68fb      	ldr	r3, [r7, #12]
 800ca48:	f023 0301 	bic.w	r3, r3, #1
 800ca4c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	681b      	ldr	r3, [r3, #0]
 800ca52:	3308      	adds	r3, #8
 800ca54:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ca56:	61fa      	str	r2, [r7, #28]
 800ca58:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca5a:	69b9      	ldr	r1, [r7, #24]
 800ca5c:	69fa      	ldr	r2, [r7, #28]
 800ca5e:	e841 2300 	strex	r3, r2, [r1]
 800ca62:	617b      	str	r3, [r7, #20]
   return(result);
 800ca64:	697b      	ldr	r3, [r7, #20]
 800ca66:	2b00      	cmp	r3, #0
 800ca68:	d1e5      	bne.n	800ca36 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	2220      	movs	r2, #32
 800ca6e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	2200      	movs	r2, #0
 800ca76:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ca7a:	2303      	movs	r3, #3
 800ca7c:	e012      	b.n	800caa4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	2220      	movs	r2, #32
 800ca82:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	2220      	movs	r2, #32
 800ca8a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	2200      	movs	r2, #0
 800ca92:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	2200      	movs	r2, #0
 800ca98:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	2200      	movs	r2, #0
 800ca9e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800caa2:	2300      	movs	r3, #0
}
 800caa4:	4618      	mov	r0, r3
 800caa6:	3758      	adds	r7, #88	@ 0x58
 800caa8:	46bd      	mov	sp, r7
 800caaa:	bd80      	pop	{r7, pc}

0800caac <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800caac:	b580      	push	{r7, lr}
 800caae:	b084      	sub	sp, #16
 800cab0:	af00      	add	r7, sp, #0
 800cab2:	60f8      	str	r0, [r7, #12]
 800cab4:	60b9      	str	r1, [r7, #8]
 800cab6:	603b      	str	r3, [r7, #0]
 800cab8:	4613      	mov	r3, r2
 800caba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cabc:	e04f      	b.n	800cb5e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800cabe:	69bb      	ldr	r3, [r7, #24]
 800cac0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cac4:	d04b      	beq.n	800cb5e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cac6:	f7f5 f913 	bl	8001cf0 <HAL_GetTick>
 800caca:	4602      	mov	r2, r0
 800cacc:	683b      	ldr	r3, [r7, #0]
 800cace:	1ad3      	subs	r3, r2, r3
 800cad0:	69ba      	ldr	r2, [r7, #24]
 800cad2:	429a      	cmp	r2, r3
 800cad4:	d302      	bcc.n	800cadc <UART_WaitOnFlagUntilTimeout+0x30>
 800cad6:	69bb      	ldr	r3, [r7, #24]
 800cad8:	2b00      	cmp	r3, #0
 800cada:	d101      	bne.n	800cae0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800cadc:	2303      	movs	r3, #3
 800cade:	e04e      	b.n	800cb7e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800cae0:	68fb      	ldr	r3, [r7, #12]
 800cae2:	681b      	ldr	r3, [r3, #0]
 800cae4:	681b      	ldr	r3, [r3, #0]
 800cae6:	f003 0304 	and.w	r3, r3, #4
 800caea:	2b00      	cmp	r3, #0
 800caec:	d037      	beq.n	800cb5e <UART_WaitOnFlagUntilTimeout+0xb2>
 800caee:	68bb      	ldr	r3, [r7, #8]
 800caf0:	2b80      	cmp	r3, #128	@ 0x80
 800caf2:	d034      	beq.n	800cb5e <UART_WaitOnFlagUntilTimeout+0xb2>
 800caf4:	68bb      	ldr	r3, [r7, #8]
 800caf6:	2b40      	cmp	r3, #64	@ 0x40
 800caf8:	d031      	beq.n	800cb5e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800cafa:	68fb      	ldr	r3, [r7, #12]
 800cafc:	681b      	ldr	r3, [r3, #0]
 800cafe:	69db      	ldr	r3, [r3, #28]
 800cb00:	f003 0308 	and.w	r3, r3, #8
 800cb04:	2b08      	cmp	r3, #8
 800cb06:	d110      	bne.n	800cb2a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800cb08:	68fb      	ldr	r3, [r7, #12]
 800cb0a:	681b      	ldr	r3, [r3, #0]
 800cb0c:	2208      	movs	r2, #8
 800cb0e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800cb10:	68f8      	ldr	r0, [r7, #12]
 800cb12:	f000 f95b 	bl	800cdcc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800cb16:	68fb      	ldr	r3, [r7, #12]
 800cb18:	2208      	movs	r2, #8
 800cb1a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800cb1e:	68fb      	ldr	r3, [r7, #12]
 800cb20:	2200      	movs	r2, #0
 800cb22:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800cb26:	2301      	movs	r3, #1
 800cb28:	e029      	b.n	800cb7e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800cb2a:	68fb      	ldr	r3, [r7, #12]
 800cb2c:	681b      	ldr	r3, [r3, #0]
 800cb2e:	69db      	ldr	r3, [r3, #28]
 800cb30:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800cb34:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800cb38:	d111      	bne.n	800cb5e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800cb3a:	68fb      	ldr	r3, [r7, #12]
 800cb3c:	681b      	ldr	r3, [r3, #0]
 800cb3e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800cb42:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800cb44:	68f8      	ldr	r0, [r7, #12]
 800cb46:	f000 f941 	bl	800cdcc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800cb4a:	68fb      	ldr	r3, [r7, #12]
 800cb4c:	2220      	movs	r2, #32
 800cb4e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800cb52:	68fb      	ldr	r3, [r7, #12]
 800cb54:	2200      	movs	r2, #0
 800cb56:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800cb5a:	2303      	movs	r3, #3
 800cb5c:	e00f      	b.n	800cb7e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cb5e:	68fb      	ldr	r3, [r7, #12]
 800cb60:	681b      	ldr	r3, [r3, #0]
 800cb62:	69da      	ldr	r2, [r3, #28]
 800cb64:	68bb      	ldr	r3, [r7, #8]
 800cb66:	4013      	ands	r3, r2
 800cb68:	68ba      	ldr	r2, [r7, #8]
 800cb6a:	429a      	cmp	r2, r3
 800cb6c:	bf0c      	ite	eq
 800cb6e:	2301      	moveq	r3, #1
 800cb70:	2300      	movne	r3, #0
 800cb72:	b2db      	uxtb	r3, r3
 800cb74:	461a      	mov	r2, r3
 800cb76:	79fb      	ldrb	r3, [r7, #7]
 800cb78:	429a      	cmp	r2, r3
 800cb7a:	d0a0      	beq.n	800cabe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800cb7c:	2300      	movs	r3, #0
}
 800cb7e:	4618      	mov	r0, r3
 800cb80:	3710      	adds	r7, #16
 800cb82:	46bd      	mov	sp, r7
 800cb84:	bd80      	pop	{r7, pc}
	...

0800cb88 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800cb88:	b480      	push	{r7}
 800cb8a:	b0a3      	sub	sp, #140	@ 0x8c
 800cb8c:	af00      	add	r7, sp, #0
 800cb8e:	60f8      	str	r0, [r7, #12]
 800cb90:	60b9      	str	r1, [r7, #8]
 800cb92:	4613      	mov	r3, r2
 800cb94:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800cb96:	68fb      	ldr	r3, [r7, #12]
 800cb98:	68ba      	ldr	r2, [r7, #8]
 800cb9a:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 800cb9c:	68fb      	ldr	r3, [r7, #12]
 800cb9e:	88fa      	ldrh	r2, [r7, #6]
 800cba0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 800cba4:	68fb      	ldr	r3, [r7, #12]
 800cba6:	88fa      	ldrh	r2, [r7, #6]
 800cba8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 800cbac:	68fb      	ldr	r3, [r7, #12]
 800cbae:	2200      	movs	r2, #0
 800cbb0:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800cbb2:	68fb      	ldr	r3, [r7, #12]
 800cbb4:	689b      	ldr	r3, [r3, #8]
 800cbb6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cbba:	d10e      	bne.n	800cbda <UART_Start_Receive_IT+0x52>
 800cbbc:	68fb      	ldr	r3, [r7, #12]
 800cbbe:	691b      	ldr	r3, [r3, #16]
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	d105      	bne.n	800cbd0 <UART_Start_Receive_IT+0x48>
 800cbc4:	68fb      	ldr	r3, [r7, #12]
 800cbc6:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800cbca:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800cbce:	e02d      	b.n	800cc2c <UART_Start_Receive_IT+0xa4>
 800cbd0:	68fb      	ldr	r3, [r7, #12]
 800cbd2:	22ff      	movs	r2, #255	@ 0xff
 800cbd4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800cbd8:	e028      	b.n	800cc2c <UART_Start_Receive_IT+0xa4>
 800cbda:	68fb      	ldr	r3, [r7, #12]
 800cbdc:	689b      	ldr	r3, [r3, #8]
 800cbde:	2b00      	cmp	r3, #0
 800cbe0:	d10d      	bne.n	800cbfe <UART_Start_Receive_IT+0x76>
 800cbe2:	68fb      	ldr	r3, [r7, #12]
 800cbe4:	691b      	ldr	r3, [r3, #16]
 800cbe6:	2b00      	cmp	r3, #0
 800cbe8:	d104      	bne.n	800cbf4 <UART_Start_Receive_IT+0x6c>
 800cbea:	68fb      	ldr	r3, [r7, #12]
 800cbec:	22ff      	movs	r2, #255	@ 0xff
 800cbee:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800cbf2:	e01b      	b.n	800cc2c <UART_Start_Receive_IT+0xa4>
 800cbf4:	68fb      	ldr	r3, [r7, #12]
 800cbf6:	227f      	movs	r2, #127	@ 0x7f
 800cbf8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800cbfc:	e016      	b.n	800cc2c <UART_Start_Receive_IT+0xa4>
 800cbfe:	68fb      	ldr	r3, [r7, #12]
 800cc00:	689b      	ldr	r3, [r3, #8]
 800cc02:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800cc06:	d10d      	bne.n	800cc24 <UART_Start_Receive_IT+0x9c>
 800cc08:	68fb      	ldr	r3, [r7, #12]
 800cc0a:	691b      	ldr	r3, [r3, #16]
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	d104      	bne.n	800cc1a <UART_Start_Receive_IT+0x92>
 800cc10:	68fb      	ldr	r3, [r7, #12]
 800cc12:	227f      	movs	r2, #127	@ 0x7f
 800cc14:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800cc18:	e008      	b.n	800cc2c <UART_Start_Receive_IT+0xa4>
 800cc1a:	68fb      	ldr	r3, [r7, #12]
 800cc1c:	223f      	movs	r2, #63	@ 0x3f
 800cc1e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800cc22:	e003      	b.n	800cc2c <UART_Start_Receive_IT+0xa4>
 800cc24:	68fb      	ldr	r3, [r7, #12]
 800cc26:	2200      	movs	r2, #0
 800cc28:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cc2c:	68fb      	ldr	r3, [r7, #12]
 800cc2e:	2200      	movs	r2, #0
 800cc30:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800cc34:	68fb      	ldr	r3, [r7, #12]
 800cc36:	2222      	movs	r2, #34	@ 0x22
 800cc38:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cc3c:	68fb      	ldr	r3, [r7, #12]
 800cc3e:	681b      	ldr	r3, [r3, #0]
 800cc40:	3308      	adds	r3, #8
 800cc42:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc44:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800cc46:	e853 3f00 	ldrex	r3, [r3]
 800cc4a:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800cc4c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800cc4e:	f043 0301 	orr.w	r3, r3, #1
 800cc52:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800cc56:	68fb      	ldr	r3, [r7, #12]
 800cc58:	681b      	ldr	r3, [r3, #0]
 800cc5a:	3308      	adds	r3, #8
 800cc5c:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800cc60:	673a      	str	r2, [r7, #112]	@ 0x70
 800cc62:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc64:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800cc66:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800cc68:	e841 2300 	strex	r3, r2, [r1]
 800cc6c:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 800cc6e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800cc70:	2b00      	cmp	r3, #0
 800cc72:	d1e3      	bne.n	800cc3c <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800cc74:	68fb      	ldr	r3, [r7, #12]
 800cc76:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cc78:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800cc7c:	d14f      	bne.n	800cd1e <UART_Start_Receive_IT+0x196>
 800cc7e:	68fb      	ldr	r3, [r7, #12]
 800cc80:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800cc84:	88fa      	ldrh	r2, [r7, #6]
 800cc86:	429a      	cmp	r2, r3
 800cc88:	d349      	bcc.n	800cd1e <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cc8a:	68fb      	ldr	r3, [r7, #12]
 800cc8c:	689b      	ldr	r3, [r3, #8]
 800cc8e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cc92:	d107      	bne.n	800cca4 <UART_Start_Receive_IT+0x11c>
 800cc94:	68fb      	ldr	r3, [r7, #12]
 800cc96:	691b      	ldr	r3, [r3, #16]
 800cc98:	2b00      	cmp	r3, #0
 800cc9a:	d103      	bne.n	800cca4 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800cc9c:	68fb      	ldr	r3, [r7, #12]
 800cc9e:	4a47      	ldr	r2, [pc, #284]	@ (800cdbc <UART_Start_Receive_IT+0x234>)
 800cca0:	675a      	str	r2, [r3, #116]	@ 0x74
 800cca2:	e002      	b.n	800ccaa <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800cca4:	68fb      	ldr	r3, [r7, #12]
 800cca6:	4a46      	ldr	r2, [pc, #280]	@ (800cdc0 <UART_Start_Receive_IT+0x238>)
 800cca8:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800ccaa:	68fb      	ldr	r3, [r7, #12]
 800ccac:	691b      	ldr	r3, [r3, #16]
 800ccae:	2b00      	cmp	r3, #0
 800ccb0:	d01a      	beq.n	800cce8 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ccb2:	68fb      	ldr	r3, [r7, #12]
 800ccb4:	681b      	ldr	r3, [r3, #0]
 800ccb6:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ccb8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ccba:	e853 3f00 	ldrex	r3, [r3]
 800ccbe:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800ccc0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ccc2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ccc6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800ccca:	68fb      	ldr	r3, [r7, #12]
 800cccc:	681b      	ldr	r3, [r3, #0]
 800ccce:	461a      	mov	r2, r3
 800ccd0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800ccd4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ccd6:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ccd8:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800ccda:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800ccdc:	e841 2300 	strex	r3, r2, [r1]
 800cce0:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800cce2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	d1e4      	bne.n	800ccb2 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800cce8:	68fb      	ldr	r3, [r7, #12]
 800ccea:	681b      	ldr	r3, [r3, #0]
 800ccec:	3308      	adds	r3, #8
 800ccee:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ccf0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ccf2:	e853 3f00 	ldrex	r3, [r3]
 800ccf6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ccf8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ccfa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ccfe:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800cd00:	68fb      	ldr	r3, [r7, #12]
 800cd02:	681b      	ldr	r3, [r3, #0]
 800cd04:	3308      	adds	r3, #8
 800cd06:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800cd08:	64ba      	str	r2, [r7, #72]	@ 0x48
 800cd0a:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd0c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800cd0e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800cd10:	e841 2300 	strex	r3, r2, [r1]
 800cd14:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800cd16:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cd18:	2b00      	cmp	r3, #0
 800cd1a:	d1e5      	bne.n	800cce8 <UART_Start_Receive_IT+0x160>
 800cd1c:	e046      	b.n	800cdac <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cd1e:	68fb      	ldr	r3, [r7, #12]
 800cd20:	689b      	ldr	r3, [r3, #8]
 800cd22:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cd26:	d107      	bne.n	800cd38 <UART_Start_Receive_IT+0x1b0>
 800cd28:	68fb      	ldr	r3, [r7, #12]
 800cd2a:	691b      	ldr	r3, [r3, #16]
 800cd2c:	2b00      	cmp	r3, #0
 800cd2e:	d103      	bne.n	800cd38 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800cd30:	68fb      	ldr	r3, [r7, #12]
 800cd32:	4a24      	ldr	r2, [pc, #144]	@ (800cdc4 <UART_Start_Receive_IT+0x23c>)
 800cd34:	675a      	str	r2, [r3, #116]	@ 0x74
 800cd36:	e002      	b.n	800cd3e <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800cd38:	68fb      	ldr	r3, [r7, #12]
 800cd3a:	4a23      	ldr	r2, [pc, #140]	@ (800cdc8 <UART_Start_Receive_IT+0x240>)
 800cd3c:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800cd3e:	68fb      	ldr	r3, [r7, #12]
 800cd40:	691b      	ldr	r3, [r3, #16]
 800cd42:	2b00      	cmp	r3, #0
 800cd44:	d019      	beq.n	800cd7a <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800cd46:	68fb      	ldr	r3, [r7, #12]
 800cd48:	681b      	ldr	r3, [r3, #0]
 800cd4a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd4e:	e853 3f00 	ldrex	r3, [r3]
 800cd52:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800cd54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd56:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800cd5a:	677b      	str	r3, [r7, #116]	@ 0x74
 800cd5c:	68fb      	ldr	r3, [r7, #12]
 800cd5e:	681b      	ldr	r3, [r3, #0]
 800cd60:	461a      	mov	r2, r3
 800cd62:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800cd64:	637b      	str	r3, [r7, #52]	@ 0x34
 800cd66:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd68:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800cd6a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800cd6c:	e841 2300 	strex	r3, r2, [r1]
 800cd70:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800cd72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	d1e6      	bne.n	800cd46 <UART_Start_Receive_IT+0x1be>
 800cd78:	e018      	b.n	800cdac <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800cd7a:	68fb      	ldr	r3, [r7, #12]
 800cd7c:	681b      	ldr	r3, [r3, #0]
 800cd7e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd80:	697b      	ldr	r3, [r7, #20]
 800cd82:	e853 3f00 	ldrex	r3, [r3]
 800cd86:	613b      	str	r3, [r7, #16]
   return(result);
 800cd88:	693b      	ldr	r3, [r7, #16]
 800cd8a:	f043 0320 	orr.w	r3, r3, #32
 800cd8e:	67bb      	str	r3, [r7, #120]	@ 0x78
 800cd90:	68fb      	ldr	r3, [r7, #12]
 800cd92:	681b      	ldr	r3, [r3, #0]
 800cd94:	461a      	mov	r2, r3
 800cd96:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800cd98:	623b      	str	r3, [r7, #32]
 800cd9a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd9c:	69f9      	ldr	r1, [r7, #28]
 800cd9e:	6a3a      	ldr	r2, [r7, #32]
 800cda0:	e841 2300 	strex	r3, r2, [r1]
 800cda4:	61bb      	str	r3, [r7, #24]
   return(result);
 800cda6:	69bb      	ldr	r3, [r7, #24]
 800cda8:	2b00      	cmp	r3, #0
 800cdaa:	d1e6      	bne.n	800cd7a <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800cdac:	2300      	movs	r3, #0
}
 800cdae:	4618      	mov	r0, r3
 800cdb0:	378c      	adds	r7, #140	@ 0x8c
 800cdb2:	46bd      	mov	sp, r7
 800cdb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdb8:	4770      	bx	lr
 800cdba:	bf00      	nop
 800cdbc:	0800d5ed 	.word	0x0800d5ed
 800cdc0:	0800d28d 	.word	0x0800d28d
 800cdc4:	0800d0d5 	.word	0x0800d0d5
 800cdc8:	0800cf1d 	.word	0x0800cf1d

0800cdcc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800cdcc:	b480      	push	{r7}
 800cdce:	b095      	sub	sp, #84	@ 0x54
 800cdd0:	af00      	add	r7, sp, #0
 800cdd2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	681b      	ldr	r3, [r3, #0]
 800cdd8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cdda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cddc:	e853 3f00 	ldrex	r3, [r3]
 800cde0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800cde2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cde4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800cde8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	681b      	ldr	r3, [r3, #0]
 800cdee:	461a      	mov	r2, r3
 800cdf0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cdf2:	643b      	str	r3, [r7, #64]	@ 0x40
 800cdf4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cdf6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800cdf8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800cdfa:	e841 2300 	strex	r3, r2, [r1]
 800cdfe:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ce00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce02:	2b00      	cmp	r3, #0
 800ce04:	d1e6      	bne.n	800cdd4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	681b      	ldr	r3, [r3, #0]
 800ce0a:	3308      	adds	r3, #8
 800ce0c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce0e:	6a3b      	ldr	r3, [r7, #32]
 800ce10:	e853 3f00 	ldrex	r3, [r3]
 800ce14:	61fb      	str	r3, [r7, #28]
   return(result);
 800ce16:	69fa      	ldr	r2, [r7, #28]
 800ce18:	4b1e      	ldr	r3, [pc, #120]	@ (800ce94 <UART_EndRxTransfer+0xc8>)
 800ce1a:	4013      	ands	r3, r2
 800ce1c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	681b      	ldr	r3, [r3, #0]
 800ce22:	3308      	adds	r3, #8
 800ce24:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ce26:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ce28:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce2a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ce2c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ce2e:	e841 2300 	strex	r3, r2, [r1]
 800ce32:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ce34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce36:	2b00      	cmp	r3, #0
 800ce38:	d1e5      	bne.n	800ce06 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ce3e:	2b01      	cmp	r3, #1
 800ce40:	d118      	bne.n	800ce74 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	681b      	ldr	r3, [r3, #0]
 800ce46:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce48:	68fb      	ldr	r3, [r7, #12]
 800ce4a:	e853 3f00 	ldrex	r3, [r3]
 800ce4e:	60bb      	str	r3, [r7, #8]
   return(result);
 800ce50:	68bb      	ldr	r3, [r7, #8]
 800ce52:	f023 0310 	bic.w	r3, r3, #16
 800ce56:	647b      	str	r3, [r7, #68]	@ 0x44
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	681b      	ldr	r3, [r3, #0]
 800ce5c:	461a      	mov	r2, r3
 800ce5e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ce60:	61bb      	str	r3, [r7, #24]
 800ce62:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce64:	6979      	ldr	r1, [r7, #20]
 800ce66:	69ba      	ldr	r2, [r7, #24]
 800ce68:	e841 2300 	strex	r3, r2, [r1]
 800ce6c:	613b      	str	r3, [r7, #16]
   return(result);
 800ce6e:	693b      	ldr	r3, [r7, #16]
 800ce70:	2b00      	cmp	r3, #0
 800ce72:	d1e6      	bne.n	800ce42 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	2220      	movs	r2, #32
 800ce78:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	2200      	movs	r2, #0
 800ce80:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	2200      	movs	r2, #0
 800ce86:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800ce88:	bf00      	nop
 800ce8a:	3754      	adds	r7, #84	@ 0x54
 800ce8c:	46bd      	mov	sp, r7
 800ce8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce92:	4770      	bx	lr
 800ce94:	effffffe 	.word	0xeffffffe

0800ce98 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ce98:	b580      	push	{r7, lr}
 800ce9a:	b084      	sub	sp, #16
 800ce9c:	af00      	add	r7, sp, #0
 800ce9e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cea4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800cea6:	68fb      	ldr	r3, [r7, #12]
 800cea8:	2200      	movs	r2, #0
 800ceaa:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800ceae:	68fb      	ldr	r3, [r7, #12]
 800ceb0:	2200      	movs	r2, #0
 800ceb2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ceb6:	68f8      	ldr	r0, [r7, #12]
 800ceb8:	f7fe ff2e 	bl	800bd18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cebc:	bf00      	nop
 800cebe:	3710      	adds	r7, #16
 800cec0:	46bd      	mov	sp, r7
 800cec2:	bd80      	pop	{r7, pc}

0800cec4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800cec4:	b580      	push	{r7, lr}
 800cec6:	b088      	sub	sp, #32
 800cec8:	af00      	add	r7, sp, #0
 800ceca:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	681b      	ldr	r3, [r3, #0]
 800ced0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ced2:	68fb      	ldr	r3, [r7, #12]
 800ced4:	e853 3f00 	ldrex	r3, [r3]
 800ced8:	60bb      	str	r3, [r7, #8]
   return(result);
 800ceda:	68bb      	ldr	r3, [r7, #8]
 800cedc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800cee0:	61fb      	str	r3, [r7, #28]
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	681b      	ldr	r3, [r3, #0]
 800cee6:	461a      	mov	r2, r3
 800cee8:	69fb      	ldr	r3, [r7, #28]
 800ceea:	61bb      	str	r3, [r7, #24]
 800ceec:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ceee:	6979      	ldr	r1, [r7, #20]
 800cef0:	69ba      	ldr	r2, [r7, #24]
 800cef2:	e841 2300 	strex	r3, r2, [r1]
 800cef6:	613b      	str	r3, [r7, #16]
   return(result);
 800cef8:	693b      	ldr	r3, [r7, #16]
 800cefa:	2b00      	cmp	r3, #0
 800cefc:	d1e6      	bne.n	800cecc <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	2220      	movs	r2, #32
 800cf02:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	2200      	movs	r2, #0
 800cf0a:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800cf0c:	6878      	ldr	r0, [r7, #4]
 800cf0e:	f7fe fef9 	bl	800bd04 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cf12:	bf00      	nop
 800cf14:	3720      	adds	r7, #32
 800cf16:	46bd      	mov	sp, r7
 800cf18:	bd80      	pop	{r7, pc}
	...

0800cf1c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800cf1c:	b580      	push	{r7, lr}
 800cf1e:	b09c      	sub	sp, #112	@ 0x70
 800cf20:	af00      	add	r7, sp, #0
 800cf22:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800cf2a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800cf34:	2b22      	cmp	r3, #34	@ 0x22
 800cf36:	f040 80be 	bne.w	800d0b6 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	681b      	ldr	r3, [r3, #0]
 800cf3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cf40:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800cf44:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800cf48:	b2d9      	uxtb	r1, r3
 800cf4a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800cf4e:	b2da      	uxtb	r2, r3
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cf54:	400a      	ands	r2, r1
 800cf56:	b2d2      	uxtb	r2, r2
 800cf58:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cf5e:	1c5a      	adds	r2, r3, #1
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800cf6a:	b29b      	uxth	r3, r3
 800cf6c:	3b01      	subs	r3, #1
 800cf6e:	b29a      	uxth	r2, r3
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800cf7c:	b29b      	uxth	r3, r3
 800cf7e:	2b00      	cmp	r3, #0
 800cf80:	f040 80a1 	bne.w	800d0c6 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	681b      	ldr	r3, [r3, #0]
 800cf88:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf8a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cf8c:	e853 3f00 	ldrex	r3, [r3]
 800cf90:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800cf92:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cf94:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800cf98:	66bb      	str	r3, [r7, #104]	@ 0x68
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	681b      	ldr	r3, [r3, #0]
 800cf9e:	461a      	mov	r2, r3
 800cfa0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800cfa2:	65bb      	str	r3, [r7, #88]	@ 0x58
 800cfa4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cfa6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800cfa8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800cfaa:	e841 2300 	strex	r3, r2, [r1]
 800cfae:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800cfb0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cfb2:	2b00      	cmp	r3, #0
 800cfb4:	d1e6      	bne.n	800cf84 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	681b      	ldr	r3, [r3, #0]
 800cfba:	3308      	adds	r3, #8
 800cfbc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cfbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cfc0:	e853 3f00 	ldrex	r3, [r3]
 800cfc4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800cfc6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cfc8:	f023 0301 	bic.w	r3, r3, #1
 800cfcc:	667b      	str	r3, [r7, #100]	@ 0x64
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	681b      	ldr	r3, [r3, #0]
 800cfd2:	3308      	adds	r3, #8
 800cfd4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800cfd6:	647a      	str	r2, [r7, #68]	@ 0x44
 800cfd8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cfda:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800cfdc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800cfde:	e841 2300 	strex	r3, r2, [r1]
 800cfe2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800cfe4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cfe6:	2b00      	cmp	r3, #0
 800cfe8:	d1e5      	bne.n	800cfb6 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	2220      	movs	r2, #32
 800cfee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	2200      	movs	r2, #0
 800cff6:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	2200      	movs	r2, #0
 800cffc:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	681b      	ldr	r3, [r3, #0]
 800d002:	4a33      	ldr	r2, [pc, #204]	@ (800d0d0 <UART_RxISR_8BIT+0x1b4>)
 800d004:	4293      	cmp	r3, r2
 800d006:	d01f      	beq.n	800d048 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	681b      	ldr	r3, [r3, #0]
 800d00c:	685b      	ldr	r3, [r3, #4]
 800d00e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d012:	2b00      	cmp	r3, #0
 800d014:	d018      	beq.n	800d048 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	681b      	ldr	r3, [r3, #0]
 800d01a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d01c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d01e:	e853 3f00 	ldrex	r3, [r3]
 800d022:	623b      	str	r3, [r7, #32]
   return(result);
 800d024:	6a3b      	ldr	r3, [r7, #32]
 800d026:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800d02a:	663b      	str	r3, [r7, #96]	@ 0x60
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	681b      	ldr	r3, [r3, #0]
 800d030:	461a      	mov	r2, r3
 800d032:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d034:	633b      	str	r3, [r7, #48]	@ 0x30
 800d036:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d038:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d03a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d03c:	e841 2300 	strex	r3, r2, [r1]
 800d040:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d042:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d044:	2b00      	cmp	r3, #0
 800d046:	d1e6      	bne.n	800d016 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d04c:	2b01      	cmp	r3, #1
 800d04e:	d12e      	bne.n	800d0ae <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	2200      	movs	r2, #0
 800d054:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	681b      	ldr	r3, [r3, #0]
 800d05a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d05c:	693b      	ldr	r3, [r7, #16]
 800d05e:	e853 3f00 	ldrex	r3, [r3]
 800d062:	60fb      	str	r3, [r7, #12]
   return(result);
 800d064:	68fb      	ldr	r3, [r7, #12]
 800d066:	f023 0310 	bic.w	r3, r3, #16
 800d06a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	681b      	ldr	r3, [r3, #0]
 800d070:	461a      	mov	r2, r3
 800d072:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d074:	61fb      	str	r3, [r7, #28]
 800d076:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d078:	69b9      	ldr	r1, [r7, #24]
 800d07a:	69fa      	ldr	r2, [r7, #28]
 800d07c:	e841 2300 	strex	r3, r2, [r1]
 800d080:	617b      	str	r3, [r7, #20]
   return(result);
 800d082:	697b      	ldr	r3, [r7, #20]
 800d084:	2b00      	cmp	r3, #0
 800d086:	d1e6      	bne.n	800d056 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	681b      	ldr	r3, [r3, #0]
 800d08c:	69db      	ldr	r3, [r3, #28]
 800d08e:	f003 0310 	and.w	r3, r3, #16
 800d092:	2b10      	cmp	r3, #16
 800d094:	d103      	bne.n	800d09e <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	681b      	ldr	r3, [r3, #0]
 800d09a:	2210      	movs	r2, #16
 800d09c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800d0a4:	4619      	mov	r1, r3
 800d0a6:	6878      	ldr	r0, [r7, #4]
 800d0a8:	f7fe fe40 	bl	800bd2c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800d0ac:	e00b      	b.n	800d0c6 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800d0ae:	6878      	ldr	r0, [r7, #4]
 800d0b0:	f7f4 f926 	bl	8001300 <HAL_UART_RxCpltCallback>
}
 800d0b4:	e007      	b.n	800d0c6 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	681b      	ldr	r3, [r3, #0]
 800d0ba:	699a      	ldr	r2, [r3, #24]
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	681b      	ldr	r3, [r3, #0]
 800d0c0:	f042 0208 	orr.w	r2, r2, #8
 800d0c4:	619a      	str	r2, [r3, #24]
}
 800d0c6:	bf00      	nop
 800d0c8:	3770      	adds	r7, #112	@ 0x70
 800d0ca:	46bd      	mov	sp, r7
 800d0cc:	bd80      	pop	{r7, pc}
 800d0ce:	bf00      	nop
 800d0d0:	58000c00 	.word	0x58000c00

0800d0d4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800d0d4:	b580      	push	{r7, lr}
 800d0d6:	b09c      	sub	sp, #112	@ 0x70
 800d0d8:	af00      	add	r7, sp, #0
 800d0da:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800d0e2:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800d0ec:	2b22      	cmp	r3, #34	@ 0x22
 800d0ee:	f040 80be 	bne.w	800d26e <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	681b      	ldr	r3, [r3, #0]
 800d0f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d0f8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d100:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800d102:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800d106:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800d10a:	4013      	ands	r3, r2
 800d10c:	b29a      	uxth	r2, r3
 800d10e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d110:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d116:	1c9a      	adds	r2, r3, #2
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d122:	b29b      	uxth	r3, r3
 800d124:	3b01      	subs	r3, #1
 800d126:	b29a      	uxth	r2, r3
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d134:	b29b      	uxth	r3, r3
 800d136:	2b00      	cmp	r3, #0
 800d138:	f040 80a1 	bne.w	800d27e <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	681b      	ldr	r3, [r3, #0]
 800d140:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d142:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d144:	e853 3f00 	ldrex	r3, [r3]
 800d148:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800d14a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d14c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d150:	667b      	str	r3, [r7, #100]	@ 0x64
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	681b      	ldr	r3, [r3, #0]
 800d156:	461a      	mov	r2, r3
 800d158:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d15a:	657b      	str	r3, [r7, #84]	@ 0x54
 800d15c:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d15e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800d160:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800d162:	e841 2300 	strex	r3, r2, [r1]
 800d166:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800d168:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d16a:	2b00      	cmp	r3, #0
 800d16c:	d1e6      	bne.n	800d13c <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	681b      	ldr	r3, [r3, #0]
 800d172:	3308      	adds	r3, #8
 800d174:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d176:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d178:	e853 3f00 	ldrex	r3, [r3]
 800d17c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800d17e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d180:	f023 0301 	bic.w	r3, r3, #1
 800d184:	663b      	str	r3, [r7, #96]	@ 0x60
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	681b      	ldr	r3, [r3, #0]
 800d18a:	3308      	adds	r3, #8
 800d18c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800d18e:	643a      	str	r2, [r7, #64]	@ 0x40
 800d190:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d192:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800d194:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800d196:	e841 2300 	strex	r3, r2, [r1]
 800d19a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800d19c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d19e:	2b00      	cmp	r3, #0
 800d1a0:	d1e5      	bne.n	800d16e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	2220      	movs	r2, #32
 800d1a6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	2200      	movs	r2, #0
 800d1ae:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	2200      	movs	r2, #0
 800d1b4:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	681b      	ldr	r3, [r3, #0]
 800d1ba:	4a33      	ldr	r2, [pc, #204]	@ (800d288 <UART_RxISR_16BIT+0x1b4>)
 800d1bc:	4293      	cmp	r3, r2
 800d1be:	d01f      	beq.n	800d200 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	681b      	ldr	r3, [r3, #0]
 800d1c4:	685b      	ldr	r3, [r3, #4]
 800d1c6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d1ca:	2b00      	cmp	r3, #0
 800d1cc:	d018      	beq.n	800d200 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	681b      	ldr	r3, [r3, #0]
 800d1d2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d1d4:	6a3b      	ldr	r3, [r7, #32]
 800d1d6:	e853 3f00 	ldrex	r3, [r3]
 800d1da:	61fb      	str	r3, [r7, #28]
   return(result);
 800d1dc:	69fb      	ldr	r3, [r7, #28]
 800d1de:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800d1e2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	681b      	ldr	r3, [r3, #0]
 800d1e8:	461a      	mov	r2, r3
 800d1ea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d1ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d1ee:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d1f0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d1f2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d1f4:	e841 2300 	strex	r3, r2, [r1]
 800d1f8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d1fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d1fc:	2b00      	cmp	r3, #0
 800d1fe:	d1e6      	bne.n	800d1ce <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d204:	2b01      	cmp	r3, #1
 800d206:	d12e      	bne.n	800d266 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	2200      	movs	r2, #0
 800d20c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	681b      	ldr	r3, [r3, #0]
 800d212:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d214:	68fb      	ldr	r3, [r7, #12]
 800d216:	e853 3f00 	ldrex	r3, [r3]
 800d21a:	60bb      	str	r3, [r7, #8]
   return(result);
 800d21c:	68bb      	ldr	r3, [r7, #8]
 800d21e:	f023 0310 	bic.w	r3, r3, #16
 800d222:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	681b      	ldr	r3, [r3, #0]
 800d228:	461a      	mov	r2, r3
 800d22a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d22c:	61bb      	str	r3, [r7, #24]
 800d22e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d230:	6979      	ldr	r1, [r7, #20]
 800d232:	69ba      	ldr	r2, [r7, #24]
 800d234:	e841 2300 	strex	r3, r2, [r1]
 800d238:	613b      	str	r3, [r7, #16]
   return(result);
 800d23a:	693b      	ldr	r3, [r7, #16]
 800d23c:	2b00      	cmp	r3, #0
 800d23e:	d1e6      	bne.n	800d20e <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	681b      	ldr	r3, [r3, #0]
 800d244:	69db      	ldr	r3, [r3, #28]
 800d246:	f003 0310 	and.w	r3, r3, #16
 800d24a:	2b10      	cmp	r3, #16
 800d24c:	d103      	bne.n	800d256 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	681b      	ldr	r3, [r3, #0]
 800d252:	2210      	movs	r2, #16
 800d254:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800d25c:	4619      	mov	r1, r3
 800d25e:	6878      	ldr	r0, [r7, #4]
 800d260:	f7fe fd64 	bl	800bd2c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800d264:	e00b      	b.n	800d27e <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800d266:	6878      	ldr	r0, [r7, #4]
 800d268:	f7f4 f84a 	bl	8001300 <HAL_UART_RxCpltCallback>
}
 800d26c:	e007      	b.n	800d27e <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	681b      	ldr	r3, [r3, #0]
 800d272:	699a      	ldr	r2, [r3, #24]
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	681b      	ldr	r3, [r3, #0]
 800d278:	f042 0208 	orr.w	r2, r2, #8
 800d27c:	619a      	str	r2, [r3, #24]
}
 800d27e:	bf00      	nop
 800d280:	3770      	adds	r7, #112	@ 0x70
 800d282:	46bd      	mov	sp, r7
 800d284:	bd80      	pop	{r7, pc}
 800d286:	bf00      	nop
 800d288:	58000c00 	.word	0x58000c00

0800d28c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800d28c:	b580      	push	{r7, lr}
 800d28e:	b0ac      	sub	sp, #176	@ 0xb0
 800d290:	af00      	add	r7, sp, #0
 800d292:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800d29a:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	681b      	ldr	r3, [r3, #0]
 800d2a2:	69db      	ldr	r3, [r3, #28]
 800d2a4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	681b      	ldr	r3, [r3, #0]
 800d2ac:	681b      	ldr	r3, [r3, #0]
 800d2ae:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	681b      	ldr	r3, [r3, #0]
 800d2b6:	689b      	ldr	r3, [r3, #8]
 800d2b8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800d2c2:	2b22      	cmp	r3, #34	@ 0x22
 800d2c4:	f040 8180 	bne.w	800d5c8 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800d2ce:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800d2d2:	e123      	b.n	800d51c <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	681b      	ldr	r3, [r3, #0]
 800d2d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d2da:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800d2de:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 800d2e2:	b2d9      	uxtb	r1, r3
 800d2e4:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 800d2e8:	b2da      	uxtb	r2, r3
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d2ee:	400a      	ands	r2, r1
 800d2f0:	b2d2      	uxtb	r2, r2
 800d2f2:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d2f8:	1c5a      	adds	r2, r3, #1
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d304:	b29b      	uxth	r3, r3
 800d306:	3b01      	subs	r3, #1
 800d308:	b29a      	uxth	r2, r3
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	681b      	ldr	r3, [r3, #0]
 800d314:	69db      	ldr	r3, [r3, #28]
 800d316:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800d31a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d31e:	f003 0307 	and.w	r3, r3, #7
 800d322:	2b00      	cmp	r3, #0
 800d324:	d053      	beq.n	800d3ce <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800d326:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d32a:	f003 0301 	and.w	r3, r3, #1
 800d32e:	2b00      	cmp	r3, #0
 800d330:	d011      	beq.n	800d356 <UART_RxISR_8BIT_FIFOEN+0xca>
 800d332:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800d336:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d33a:	2b00      	cmp	r3, #0
 800d33c:	d00b      	beq.n	800d356 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	681b      	ldr	r3, [r3, #0]
 800d342:	2201      	movs	r2, #1
 800d344:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d34c:	f043 0201 	orr.w	r2, r3, #1
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d356:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d35a:	f003 0302 	and.w	r3, r3, #2
 800d35e:	2b00      	cmp	r3, #0
 800d360:	d011      	beq.n	800d386 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800d362:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800d366:	f003 0301 	and.w	r3, r3, #1
 800d36a:	2b00      	cmp	r3, #0
 800d36c:	d00b      	beq.n	800d386 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	681b      	ldr	r3, [r3, #0]
 800d372:	2202      	movs	r2, #2
 800d374:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d37c:	f043 0204 	orr.w	r2, r3, #4
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d386:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d38a:	f003 0304 	and.w	r3, r3, #4
 800d38e:	2b00      	cmp	r3, #0
 800d390:	d011      	beq.n	800d3b6 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800d392:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800d396:	f003 0301 	and.w	r3, r3, #1
 800d39a:	2b00      	cmp	r3, #0
 800d39c:	d00b      	beq.n	800d3b6 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	681b      	ldr	r3, [r3, #0]
 800d3a2:	2204      	movs	r2, #4
 800d3a4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d3ac:	f043 0202 	orr.w	r2, r3, #2
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d3bc:	2b00      	cmp	r3, #0
 800d3be:	d006      	beq.n	800d3ce <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d3c0:	6878      	ldr	r0, [r7, #4]
 800d3c2:	f7fe fca9 	bl	800bd18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	2200      	movs	r2, #0
 800d3ca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d3d4:	b29b      	uxth	r3, r3
 800d3d6:	2b00      	cmp	r3, #0
 800d3d8:	f040 80a0 	bne.w	800d51c <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	681b      	ldr	r3, [r3, #0]
 800d3e0:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d3e2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d3e4:	e853 3f00 	ldrex	r3, [r3]
 800d3e8:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 800d3ea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d3ec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d3f0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	681b      	ldr	r3, [r3, #0]
 800d3f8:	461a      	mov	r2, r3
 800d3fa:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800d3fe:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800d400:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d402:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800d404:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800d406:	e841 2300 	strex	r3, r2, [r1]
 800d40a:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 800d40c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800d40e:	2b00      	cmp	r3, #0
 800d410:	d1e4      	bne.n	800d3dc <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	681b      	ldr	r3, [r3, #0]
 800d416:	3308      	adds	r3, #8
 800d418:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d41a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d41c:	e853 3f00 	ldrex	r3, [r3]
 800d420:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800d422:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d424:	4b6e      	ldr	r3, [pc, #440]	@ (800d5e0 <UART_RxISR_8BIT_FIFOEN+0x354>)
 800d426:	4013      	ands	r3, r2
 800d428:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	681b      	ldr	r3, [r3, #0]
 800d430:	3308      	adds	r3, #8
 800d432:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800d436:	66ba      	str	r2, [r7, #104]	@ 0x68
 800d438:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d43a:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800d43c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800d43e:	e841 2300 	strex	r3, r2, [r1]
 800d442:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800d444:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d446:	2b00      	cmp	r3, #0
 800d448:	d1e3      	bne.n	800d412 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	2220      	movs	r2, #32
 800d44e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	2200      	movs	r2, #0
 800d456:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	2200      	movs	r2, #0
 800d45c:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	681b      	ldr	r3, [r3, #0]
 800d462:	4a60      	ldr	r2, [pc, #384]	@ (800d5e4 <UART_RxISR_8BIT_FIFOEN+0x358>)
 800d464:	4293      	cmp	r3, r2
 800d466:	d021      	beq.n	800d4ac <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	681b      	ldr	r3, [r3, #0]
 800d46c:	685b      	ldr	r3, [r3, #4]
 800d46e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d472:	2b00      	cmp	r3, #0
 800d474:	d01a      	beq.n	800d4ac <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	681b      	ldr	r3, [r3, #0]
 800d47a:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d47c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d47e:	e853 3f00 	ldrex	r3, [r3]
 800d482:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800d484:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d486:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800d48a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	681b      	ldr	r3, [r3, #0]
 800d492:	461a      	mov	r2, r3
 800d494:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800d498:	657b      	str	r3, [r7, #84]	@ 0x54
 800d49a:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d49c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800d49e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800d4a0:	e841 2300 	strex	r3, r2, [r1]
 800d4a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800d4a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d4a8:	2b00      	cmp	r3, #0
 800d4aa:	d1e4      	bne.n	800d476 <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d4b0:	2b01      	cmp	r3, #1
 800d4b2:	d130      	bne.n	800d516 <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	2200      	movs	r2, #0
 800d4b8:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	681b      	ldr	r3, [r3, #0]
 800d4be:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d4c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d4c2:	e853 3f00 	ldrex	r3, [r3]
 800d4c6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800d4c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d4ca:	f023 0310 	bic.w	r3, r3, #16
 800d4ce:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	681b      	ldr	r3, [r3, #0]
 800d4d6:	461a      	mov	r2, r3
 800d4d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d4dc:	643b      	str	r3, [r7, #64]	@ 0x40
 800d4de:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d4e0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800d4e2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800d4e4:	e841 2300 	strex	r3, r2, [r1]
 800d4e8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800d4ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d4ec:	2b00      	cmp	r3, #0
 800d4ee:	d1e4      	bne.n	800d4ba <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	681b      	ldr	r3, [r3, #0]
 800d4f4:	69db      	ldr	r3, [r3, #28]
 800d4f6:	f003 0310 	and.w	r3, r3, #16
 800d4fa:	2b10      	cmp	r3, #16
 800d4fc:	d103      	bne.n	800d506 <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	681b      	ldr	r3, [r3, #0]
 800d502:	2210      	movs	r2, #16
 800d504:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800d50c:	4619      	mov	r1, r3
 800d50e:	6878      	ldr	r0, [r7, #4]
 800d510:	f7fe fc0c 	bl	800bd2c <HAL_UARTEx_RxEventCallback>
 800d514:	e002      	b.n	800d51c <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800d516:	6878      	ldr	r0, [r7, #4]
 800d518:	f7f3 fef2 	bl	8001300 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800d51c:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 800d520:	2b00      	cmp	r3, #0
 800d522:	d006      	beq.n	800d532 <UART_RxISR_8BIT_FIFOEN+0x2a6>
 800d524:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d528:	f003 0320 	and.w	r3, r3, #32
 800d52c:	2b00      	cmp	r3, #0
 800d52e:	f47f aed1 	bne.w	800d2d4 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d538:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800d53c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800d540:	2b00      	cmp	r3, #0
 800d542:	d049      	beq.n	800d5d8 <UART_RxISR_8BIT_FIFOEN+0x34c>
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800d54a:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 800d54e:	429a      	cmp	r2, r3
 800d550:	d242      	bcs.n	800d5d8 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	681b      	ldr	r3, [r3, #0]
 800d556:	3308      	adds	r3, #8
 800d558:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d55a:	6a3b      	ldr	r3, [r7, #32]
 800d55c:	e853 3f00 	ldrex	r3, [r3]
 800d560:	61fb      	str	r3, [r7, #28]
   return(result);
 800d562:	69fb      	ldr	r3, [r7, #28]
 800d564:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800d568:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	681b      	ldr	r3, [r3, #0]
 800d570:	3308      	adds	r3, #8
 800d572:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800d576:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800d578:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d57a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d57c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d57e:	e841 2300 	strex	r3, r2, [r1]
 800d582:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d584:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d586:	2b00      	cmp	r3, #0
 800d588:	d1e3      	bne.n	800d552 <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	4a16      	ldr	r2, [pc, #88]	@ (800d5e8 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800d58e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	681b      	ldr	r3, [r3, #0]
 800d594:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d596:	68fb      	ldr	r3, [r7, #12]
 800d598:	e853 3f00 	ldrex	r3, [r3]
 800d59c:	60bb      	str	r3, [r7, #8]
   return(result);
 800d59e:	68bb      	ldr	r3, [r7, #8]
 800d5a0:	f043 0320 	orr.w	r3, r3, #32
 800d5a4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	681b      	ldr	r3, [r3, #0]
 800d5ac:	461a      	mov	r2, r3
 800d5ae:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800d5b2:	61bb      	str	r3, [r7, #24]
 800d5b4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d5b6:	6979      	ldr	r1, [r7, #20]
 800d5b8:	69ba      	ldr	r2, [r7, #24]
 800d5ba:	e841 2300 	strex	r3, r2, [r1]
 800d5be:	613b      	str	r3, [r7, #16]
   return(result);
 800d5c0:	693b      	ldr	r3, [r7, #16]
 800d5c2:	2b00      	cmp	r3, #0
 800d5c4:	d1e4      	bne.n	800d590 <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800d5c6:	e007      	b.n	800d5d8 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	681b      	ldr	r3, [r3, #0]
 800d5cc:	699a      	ldr	r2, [r3, #24]
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	681b      	ldr	r3, [r3, #0]
 800d5d2:	f042 0208 	orr.w	r2, r2, #8
 800d5d6:	619a      	str	r2, [r3, #24]
}
 800d5d8:	bf00      	nop
 800d5da:	37b0      	adds	r7, #176	@ 0xb0
 800d5dc:	46bd      	mov	sp, r7
 800d5de:	bd80      	pop	{r7, pc}
 800d5e0:	effffffe 	.word	0xeffffffe
 800d5e4:	58000c00 	.word	0x58000c00
 800d5e8:	0800cf1d 	.word	0x0800cf1d

0800d5ec <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800d5ec:	b580      	push	{r7, lr}
 800d5ee:	b0ae      	sub	sp, #184	@ 0xb8
 800d5f0:	af00      	add	r7, sp, #0
 800d5f2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800d5fa:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	681b      	ldr	r3, [r3, #0]
 800d602:	69db      	ldr	r3, [r3, #28]
 800d604:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	681b      	ldr	r3, [r3, #0]
 800d60c:	681b      	ldr	r3, [r3, #0]
 800d60e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	681b      	ldr	r3, [r3, #0]
 800d616:	689b      	ldr	r3, [r3, #8]
 800d618:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800d622:	2b22      	cmp	r3, #34	@ 0x22
 800d624:	f040 8184 	bne.w	800d930 <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800d62e:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800d632:	e127      	b.n	800d884 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	681b      	ldr	r3, [r3, #0]
 800d638:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d63a:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d642:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800d646:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800d64a:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800d64e:	4013      	ands	r3, r2
 800d650:	b29a      	uxth	r2, r3
 800d652:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800d656:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d65c:	1c9a      	adds	r2, r3, #2
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d668:	b29b      	uxth	r3, r3
 800d66a:	3b01      	subs	r3, #1
 800d66c:	b29a      	uxth	r2, r3
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	681b      	ldr	r3, [r3, #0]
 800d678:	69db      	ldr	r3, [r3, #28]
 800d67a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800d67e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800d682:	f003 0307 	and.w	r3, r3, #7
 800d686:	2b00      	cmp	r3, #0
 800d688:	d053      	beq.n	800d732 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800d68a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800d68e:	f003 0301 	and.w	r3, r3, #1
 800d692:	2b00      	cmp	r3, #0
 800d694:	d011      	beq.n	800d6ba <UART_RxISR_16BIT_FIFOEN+0xce>
 800d696:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d69a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d69e:	2b00      	cmp	r3, #0
 800d6a0:	d00b      	beq.n	800d6ba <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	681b      	ldr	r3, [r3, #0]
 800d6a6:	2201      	movs	r2, #1
 800d6a8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d6b0:	f043 0201 	orr.w	r2, r3, #1
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d6ba:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800d6be:	f003 0302 	and.w	r3, r3, #2
 800d6c2:	2b00      	cmp	r3, #0
 800d6c4:	d011      	beq.n	800d6ea <UART_RxISR_16BIT_FIFOEN+0xfe>
 800d6c6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800d6ca:	f003 0301 	and.w	r3, r3, #1
 800d6ce:	2b00      	cmp	r3, #0
 800d6d0:	d00b      	beq.n	800d6ea <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	681b      	ldr	r3, [r3, #0]
 800d6d6:	2202      	movs	r2, #2
 800d6d8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d6e0:	f043 0204 	orr.w	r2, r3, #4
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d6ea:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800d6ee:	f003 0304 	and.w	r3, r3, #4
 800d6f2:	2b00      	cmp	r3, #0
 800d6f4:	d011      	beq.n	800d71a <UART_RxISR_16BIT_FIFOEN+0x12e>
 800d6f6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800d6fa:	f003 0301 	and.w	r3, r3, #1
 800d6fe:	2b00      	cmp	r3, #0
 800d700:	d00b      	beq.n	800d71a <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	681b      	ldr	r3, [r3, #0]
 800d706:	2204      	movs	r2, #4
 800d708:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d710:	f043 0202 	orr.w	r2, r3, #2
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d720:	2b00      	cmp	r3, #0
 800d722:	d006      	beq.n	800d732 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d724:	6878      	ldr	r0, [r7, #4]
 800d726:	f7fe faf7 	bl	800bd18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	2200      	movs	r2, #0
 800d72e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d738:	b29b      	uxth	r3, r3
 800d73a:	2b00      	cmp	r3, #0
 800d73c:	f040 80a2 	bne.w	800d884 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	681b      	ldr	r3, [r3, #0]
 800d744:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d746:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800d748:	e853 3f00 	ldrex	r3, [r3]
 800d74c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800d74e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d750:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d754:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	681b      	ldr	r3, [r3, #0]
 800d75c:	461a      	mov	r2, r3
 800d75e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800d762:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800d766:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d768:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800d76a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800d76e:	e841 2300 	strex	r3, r2, [r1]
 800d772:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800d774:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d776:	2b00      	cmp	r3, #0
 800d778:	d1e2      	bne.n	800d740 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	681b      	ldr	r3, [r3, #0]
 800d77e:	3308      	adds	r3, #8
 800d780:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d782:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d784:	e853 3f00 	ldrex	r3, [r3]
 800d788:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800d78a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800d78c:	4b6e      	ldr	r3, [pc, #440]	@ (800d948 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 800d78e:	4013      	ands	r3, r2
 800d790:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	681b      	ldr	r3, [r3, #0]
 800d798:	3308      	adds	r3, #8
 800d79a:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800d79e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800d7a0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d7a2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800d7a4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800d7a6:	e841 2300 	strex	r3, r2, [r1]
 800d7aa:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800d7ac:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d7ae:	2b00      	cmp	r3, #0
 800d7b0:	d1e3      	bne.n	800d77a <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	2220      	movs	r2, #32
 800d7b6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	2200      	movs	r2, #0
 800d7be:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	2200      	movs	r2, #0
 800d7c4:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	681b      	ldr	r3, [r3, #0]
 800d7ca:	4a60      	ldr	r2, [pc, #384]	@ (800d94c <UART_RxISR_16BIT_FIFOEN+0x360>)
 800d7cc:	4293      	cmp	r3, r2
 800d7ce:	d021      	beq.n	800d814 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	681b      	ldr	r3, [r3, #0]
 800d7d4:	685b      	ldr	r3, [r3, #4]
 800d7d6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d7da:	2b00      	cmp	r3, #0
 800d7dc:	d01a      	beq.n	800d814 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	681b      	ldr	r3, [r3, #0]
 800d7e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d7e4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d7e6:	e853 3f00 	ldrex	r3, [r3]
 800d7ea:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800d7ec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d7ee:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800d7f2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	681b      	ldr	r3, [r3, #0]
 800d7fa:	461a      	mov	r2, r3
 800d7fc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800d800:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d802:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d804:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800d806:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d808:	e841 2300 	strex	r3, r2, [r1]
 800d80c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800d80e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d810:	2b00      	cmp	r3, #0
 800d812:	d1e4      	bne.n	800d7de <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d818:	2b01      	cmp	r3, #1
 800d81a:	d130      	bne.n	800d87e <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	2200      	movs	r2, #0
 800d820:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	681b      	ldr	r3, [r3, #0]
 800d826:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d828:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d82a:	e853 3f00 	ldrex	r3, [r3]
 800d82e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800d830:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d832:	f023 0310 	bic.w	r3, r3, #16
 800d836:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	681b      	ldr	r3, [r3, #0]
 800d83e:	461a      	mov	r2, r3
 800d840:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800d844:	647b      	str	r3, [r7, #68]	@ 0x44
 800d846:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d848:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d84a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d84c:	e841 2300 	strex	r3, r2, [r1]
 800d850:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800d852:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d854:	2b00      	cmp	r3, #0
 800d856:	d1e4      	bne.n	800d822 <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	681b      	ldr	r3, [r3, #0]
 800d85c:	69db      	ldr	r3, [r3, #28]
 800d85e:	f003 0310 	and.w	r3, r3, #16
 800d862:	2b10      	cmp	r3, #16
 800d864:	d103      	bne.n	800d86e <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	681b      	ldr	r3, [r3, #0]
 800d86a:	2210      	movs	r2, #16
 800d86c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800d874:	4619      	mov	r1, r3
 800d876:	6878      	ldr	r0, [r7, #4]
 800d878:	f7fe fa58 	bl	800bd2c <HAL_UARTEx_RxEventCallback>
 800d87c:	e002      	b.n	800d884 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800d87e:	6878      	ldr	r0, [r7, #4]
 800d880:	f7f3 fd3e 	bl	8001300 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800d884:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800d888:	2b00      	cmp	r3, #0
 800d88a:	d006      	beq.n	800d89a <UART_RxISR_16BIT_FIFOEN+0x2ae>
 800d88c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800d890:	f003 0320 	and.w	r3, r3, #32
 800d894:	2b00      	cmp	r3, #0
 800d896:	f47f aecd 	bne.w	800d634 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d8a0:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800d8a4:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800d8a8:	2b00      	cmp	r3, #0
 800d8aa:	d049      	beq.n	800d940 <UART_RxISR_16BIT_FIFOEN+0x354>
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800d8b2:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 800d8b6:	429a      	cmp	r2, r3
 800d8b8:	d242      	bcs.n	800d940 <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	681b      	ldr	r3, [r3, #0]
 800d8be:	3308      	adds	r3, #8
 800d8c0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d8c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d8c4:	e853 3f00 	ldrex	r3, [r3]
 800d8c8:	623b      	str	r3, [r7, #32]
   return(result);
 800d8ca:	6a3b      	ldr	r3, [r7, #32]
 800d8cc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800d8d0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	681b      	ldr	r3, [r3, #0]
 800d8d8:	3308      	adds	r3, #8
 800d8da:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800d8de:	633a      	str	r2, [r7, #48]	@ 0x30
 800d8e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d8e2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d8e4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d8e6:	e841 2300 	strex	r3, r2, [r1]
 800d8ea:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d8ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d8ee:	2b00      	cmp	r3, #0
 800d8f0:	d1e3      	bne.n	800d8ba <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	4a16      	ldr	r2, [pc, #88]	@ (800d950 <UART_RxISR_16BIT_FIFOEN+0x364>)
 800d8f6:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	681b      	ldr	r3, [r3, #0]
 800d8fc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d8fe:	693b      	ldr	r3, [r7, #16]
 800d900:	e853 3f00 	ldrex	r3, [r3]
 800d904:	60fb      	str	r3, [r7, #12]
   return(result);
 800d906:	68fb      	ldr	r3, [r7, #12]
 800d908:	f043 0320 	orr.w	r3, r3, #32
 800d90c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	681b      	ldr	r3, [r3, #0]
 800d914:	461a      	mov	r2, r3
 800d916:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800d91a:	61fb      	str	r3, [r7, #28]
 800d91c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d91e:	69b9      	ldr	r1, [r7, #24]
 800d920:	69fa      	ldr	r2, [r7, #28]
 800d922:	e841 2300 	strex	r3, r2, [r1]
 800d926:	617b      	str	r3, [r7, #20]
   return(result);
 800d928:	697b      	ldr	r3, [r7, #20]
 800d92a:	2b00      	cmp	r3, #0
 800d92c:	d1e4      	bne.n	800d8f8 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800d92e:	e007      	b.n	800d940 <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	681b      	ldr	r3, [r3, #0]
 800d934:	699a      	ldr	r2, [r3, #24]
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	681b      	ldr	r3, [r3, #0]
 800d93a:	f042 0208 	orr.w	r2, r2, #8
 800d93e:	619a      	str	r2, [r3, #24]
}
 800d940:	bf00      	nop
 800d942:	37b8      	adds	r7, #184	@ 0xb8
 800d944:	46bd      	mov	sp, r7
 800d946:	bd80      	pop	{r7, pc}
 800d948:	effffffe 	.word	0xeffffffe
 800d94c:	58000c00 	.word	0x58000c00
 800d950:	0800d0d5 	.word	0x0800d0d5

0800d954 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800d954:	b480      	push	{r7}
 800d956:	b083      	sub	sp, #12
 800d958:	af00      	add	r7, sp, #0
 800d95a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800d95c:	bf00      	nop
 800d95e:	370c      	adds	r7, #12
 800d960:	46bd      	mov	sp, r7
 800d962:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d966:	4770      	bx	lr

0800d968 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800d968:	b480      	push	{r7}
 800d96a:	b083      	sub	sp, #12
 800d96c:	af00      	add	r7, sp, #0
 800d96e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800d970:	bf00      	nop
 800d972:	370c      	adds	r7, #12
 800d974:	46bd      	mov	sp, r7
 800d976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d97a:	4770      	bx	lr

0800d97c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800d97c:	b480      	push	{r7}
 800d97e:	b083      	sub	sp, #12
 800d980:	af00      	add	r7, sp, #0
 800d982:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800d984:	bf00      	nop
 800d986:	370c      	adds	r7, #12
 800d988:	46bd      	mov	sp, r7
 800d98a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d98e:	4770      	bx	lr

0800d990 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800d990:	b480      	push	{r7}
 800d992:	b085      	sub	sp, #20
 800d994:	af00      	add	r7, sp, #0
 800d996:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800d99e:	2b01      	cmp	r3, #1
 800d9a0:	d101      	bne.n	800d9a6 <HAL_UARTEx_DisableFifoMode+0x16>
 800d9a2:	2302      	movs	r3, #2
 800d9a4:	e027      	b.n	800d9f6 <HAL_UARTEx_DisableFifoMode+0x66>
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	2201      	movs	r2, #1
 800d9aa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	2224      	movs	r2, #36	@ 0x24
 800d9b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	681b      	ldr	r3, [r3, #0]
 800d9ba:	681b      	ldr	r3, [r3, #0]
 800d9bc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	681b      	ldr	r3, [r3, #0]
 800d9c2:	681a      	ldr	r2, [r3, #0]
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	681b      	ldr	r3, [r3, #0]
 800d9c8:	f022 0201 	bic.w	r2, r2, #1
 800d9cc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800d9ce:	68fb      	ldr	r3, [r7, #12]
 800d9d0:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800d9d4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	2200      	movs	r2, #0
 800d9da:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	681b      	ldr	r3, [r3, #0]
 800d9e0:	68fa      	ldr	r2, [r7, #12]
 800d9e2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	2220      	movs	r2, #32
 800d9e8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	2200      	movs	r2, #0
 800d9f0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d9f4:	2300      	movs	r3, #0
}
 800d9f6:	4618      	mov	r0, r3
 800d9f8:	3714      	adds	r7, #20
 800d9fa:	46bd      	mov	sp, r7
 800d9fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da00:	4770      	bx	lr

0800da02 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800da02:	b580      	push	{r7, lr}
 800da04:	b084      	sub	sp, #16
 800da06:	af00      	add	r7, sp, #0
 800da08:	6078      	str	r0, [r7, #4]
 800da0a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800da12:	2b01      	cmp	r3, #1
 800da14:	d101      	bne.n	800da1a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800da16:	2302      	movs	r3, #2
 800da18:	e02d      	b.n	800da76 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	2201      	movs	r2, #1
 800da1e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	2224      	movs	r2, #36	@ 0x24
 800da26:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	681b      	ldr	r3, [r3, #0]
 800da2e:	681b      	ldr	r3, [r3, #0]
 800da30:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	681b      	ldr	r3, [r3, #0]
 800da36:	681a      	ldr	r2, [r3, #0]
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	681b      	ldr	r3, [r3, #0]
 800da3c:	f022 0201 	bic.w	r2, r2, #1
 800da40:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	681b      	ldr	r3, [r3, #0]
 800da46:	689b      	ldr	r3, [r3, #8]
 800da48:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	681b      	ldr	r3, [r3, #0]
 800da50:	683a      	ldr	r2, [r7, #0]
 800da52:	430a      	orrs	r2, r1
 800da54:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800da56:	6878      	ldr	r0, [r7, #4]
 800da58:	f000 f850 	bl	800dafc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	681b      	ldr	r3, [r3, #0]
 800da60:	68fa      	ldr	r2, [r7, #12]
 800da62:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	2220      	movs	r2, #32
 800da68:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	2200      	movs	r2, #0
 800da70:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800da74:	2300      	movs	r3, #0
}
 800da76:	4618      	mov	r0, r3
 800da78:	3710      	adds	r7, #16
 800da7a:	46bd      	mov	sp, r7
 800da7c:	bd80      	pop	{r7, pc}

0800da7e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800da7e:	b580      	push	{r7, lr}
 800da80:	b084      	sub	sp, #16
 800da82:	af00      	add	r7, sp, #0
 800da84:	6078      	str	r0, [r7, #4]
 800da86:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800da8e:	2b01      	cmp	r3, #1
 800da90:	d101      	bne.n	800da96 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800da92:	2302      	movs	r3, #2
 800da94:	e02d      	b.n	800daf2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	2201      	movs	r2, #1
 800da9a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	2224      	movs	r2, #36	@ 0x24
 800daa2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	681b      	ldr	r3, [r3, #0]
 800daaa:	681b      	ldr	r3, [r3, #0]
 800daac:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	681b      	ldr	r3, [r3, #0]
 800dab2:	681a      	ldr	r2, [r3, #0]
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	681b      	ldr	r3, [r3, #0]
 800dab8:	f022 0201 	bic.w	r2, r2, #1
 800dabc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	681b      	ldr	r3, [r3, #0]
 800dac2:	689b      	ldr	r3, [r3, #8]
 800dac4:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	681b      	ldr	r3, [r3, #0]
 800dacc:	683a      	ldr	r2, [r7, #0]
 800dace:	430a      	orrs	r2, r1
 800dad0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800dad2:	6878      	ldr	r0, [r7, #4]
 800dad4:	f000 f812 	bl	800dafc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	681b      	ldr	r3, [r3, #0]
 800dadc:	68fa      	ldr	r2, [r7, #12]
 800dade:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	2220      	movs	r2, #32
 800dae4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	2200      	movs	r2, #0
 800daec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800daf0:	2300      	movs	r3, #0
}
 800daf2:	4618      	mov	r0, r3
 800daf4:	3710      	adds	r7, #16
 800daf6:	46bd      	mov	sp, r7
 800daf8:	bd80      	pop	{r7, pc}
	...

0800dafc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800dafc:	b480      	push	{r7}
 800dafe:	b085      	sub	sp, #20
 800db00:	af00      	add	r7, sp, #0
 800db02:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800db08:	2b00      	cmp	r3, #0
 800db0a:	d108      	bne.n	800db1e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	2201      	movs	r2, #1
 800db10:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	2201      	movs	r2, #1
 800db18:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800db1c:	e031      	b.n	800db82 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800db1e:	2310      	movs	r3, #16
 800db20:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800db22:	2310      	movs	r3, #16
 800db24:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	681b      	ldr	r3, [r3, #0]
 800db2a:	689b      	ldr	r3, [r3, #8]
 800db2c:	0e5b      	lsrs	r3, r3, #25
 800db2e:	b2db      	uxtb	r3, r3
 800db30:	f003 0307 	and.w	r3, r3, #7
 800db34:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	681b      	ldr	r3, [r3, #0]
 800db3a:	689b      	ldr	r3, [r3, #8]
 800db3c:	0f5b      	lsrs	r3, r3, #29
 800db3e:	b2db      	uxtb	r3, r3
 800db40:	f003 0307 	and.w	r3, r3, #7
 800db44:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800db46:	7bbb      	ldrb	r3, [r7, #14]
 800db48:	7b3a      	ldrb	r2, [r7, #12]
 800db4a:	4911      	ldr	r1, [pc, #68]	@ (800db90 <UARTEx_SetNbDataToProcess+0x94>)
 800db4c:	5c8a      	ldrb	r2, [r1, r2]
 800db4e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800db52:	7b3a      	ldrb	r2, [r7, #12]
 800db54:	490f      	ldr	r1, [pc, #60]	@ (800db94 <UARTEx_SetNbDataToProcess+0x98>)
 800db56:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800db58:	fb93 f3f2 	sdiv	r3, r3, r2
 800db5c:	b29a      	uxth	r2, r3
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800db64:	7bfb      	ldrb	r3, [r7, #15]
 800db66:	7b7a      	ldrb	r2, [r7, #13]
 800db68:	4909      	ldr	r1, [pc, #36]	@ (800db90 <UARTEx_SetNbDataToProcess+0x94>)
 800db6a:	5c8a      	ldrb	r2, [r1, r2]
 800db6c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800db70:	7b7a      	ldrb	r2, [r7, #13]
 800db72:	4908      	ldr	r1, [pc, #32]	@ (800db94 <UARTEx_SetNbDataToProcess+0x98>)
 800db74:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800db76:	fb93 f3f2 	sdiv	r3, r3, r2
 800db7a:	b29a      	uxth	r2, r3
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800db82:	bf00      	nop
 800db84:	3714      	adds	r7, #20
 800db86:	46bd      	mov	sp, r7
 800db88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db8c:	4770      	bx	lr
 800db8e:	bf00      	nop
 800db90:	080126e0 	.word	0x080126e0
 800db94:	080126e8 	.word	0x080126e8

0800db98 <__cvt>:
 800db98:	b5f0      	push	{r4, r5, r6, r7, lr}
 800db9a:	ed2d 8b02 	vpush	{d8}
 800db9e:	eeb0 8b40 	vmov.f64	d8, d0
 800dba2:	b085      	sub	sp, #20
 800dba4:	4617      	mov	r7, r2
 800dba6:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 800dba8:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800dbaa:	ee18 2a90 	vmov	r2, s17
 800dbae:	f025 0520 	bic.w	r5, r5, #32
 800dbb2:	2a00      	cmp	r2, #0
 800dbb4:	bfb6      	itet	lt
 800dbb6:	222d      	movlt	r2, #45	@ 0x2d
 800dbb8:	2200      	movge	r2, #0
 800dbba:	eeb1 8b40 	vneglt.f64	d8, d0
 800dbbe:	2d46      	cmp	r5, #70	@ 0x46
 800dbc0:	460c      	mov	r4, r1
 800dbc2:	701a      	strb	r2, [r3, #0]
 800dbc4:	d004      	beq.n	800dbd0 <__cvt+0x38>
 800dbc6:	2d45      	cmp	r5, #69	@ 0x45
 800dbc8:	d100      	bne.n	800dbcc <__cvt+0x34>
 800dbca:	3401      	adds	r4, #1
 800dbcc:	2102      	movs	r1, #2
 800dbce:	e000      	b.n	800dbd2 <__cvt+0x3a>
 800dbd0:	2103      	movs	r1, #3
 800dbd2:	ab03      	add	r3, sp, #12
 800dbd4:	9301      	str	r3, [sp, #4]
 800dbd6:	ab02      	add	r3, sp, #8
 800dbd8:	9300      	str	r3, [sp, #0]
 800dbda:	4622      	mov	r2, r4
 800dbdc:	4633      	mov	r3, r6
 800dbde:	eeb0 0b48 	vmov.f64	d0, d8
 800dbe2:	f001 f851 	bl	800ec88 <_dtoa_r>
 800dbe6:	2d47      	cmp	r5, #71	@ 0x47
 800dbe8:	d114      	bne.n	800dc14 <__cvt+0x7c>
 800dbea:	07fb      	lsls	r3, r7, #31
 800dbec:	d50a      	bpl.n	800dc04 <__cvt+0x6c>
 800dbee:	1902      	adds	r2, r0, r4
 800dbf0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800dbf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dbf8:	bf08      	it	eq
 800dbfa:	9203      	streq	r2, [sp, #12]
 800dbfc:	2130      	movs	r1, #48	@ 0x30
 800dbfe:	9b03      	ldr	r3, [sp, #12]
 800dc00:	4293      	cmp	r3, r2
 800dc02:	d319      	bcc.n	800dc38 <__cvt+0xa0>
 800dc04:	9b03      	ldr	r3, [sp, #12]
 800dc06:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800dc08:	1a1b      	subs	r3, r3, r0
 800dc0a:	6013      	str	r3, [r2, #0]
 800dc0c:	b005      	add	sp, #20
 800dc0e:	ecbd 8b02 	vpop	{d8}
 800dc12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dc14:	2d46      	cmp	r5, #70	@ 0x46
 800dc16:	eb00 0204 	add.w	r2, r0, r4
 800dc1a:	d1e9      	bne.n	800dbf0 <__cvt+0x58>
 800dc1c:	7803      	ldrb	r3, [r0, #0]
 800dc1e:	2b30      	cmp	r3, #48	@ 0x30
 800dc20:	d107      	bne.n	800dc32 <__cvt+0x9a>
 800dc22:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800dc26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dc2a:	bf1c      	itt	ne
 800dc2c:	f1c4 0401 	rsbne	r4, r4, #1
 800dc30:	6034      	strne	r4, [r6, #0]
 800dc32:	6833      	ldr	r3, [r6, #0]
 800dc34:	441a      	add	r2, r3
 800dc36:	e7db      	b.n	800dbf0 <__cvt+0x58>
 800dc38:	1c5c      	adds	r4, r3, #1
 800dc3a:	9403      	str	r4, [sp, #12]
 800dc3c:	7019      	strb	r1, [r3, #0]
 800dc3e:	e7de      	b.n	800dbfe <__cvt+0x66>

0800dc40 <__exponent>:
 800dc40:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800dc42:	2900      	cmp	r1, #0
 800dc44:	bfba      	itte	lt
 800dc46:	4249      	neglt	r1, r1
 800dc48:	232d      	movlt	r3, #45	@ 0x2d
 800dc4a:	232b      	movge	r3, #43	@ 0x2b
 800dc4c:	2909      	cmp	r1, #9
 800dc4e:	7002      	strb	r2, [r0, #0]
 800dc50:	7043      	strb	r3, [r0, #1]
 800dc52:	dd29      	ble.n	800dca8 <__exponent+0x68>
 800dc54:	f10d 0307 	add.w	r3, sp, #7
 800dc58:	461d      	mov	r5, r3
 800dc5a:	270a      	movs	r7, #10
 800dc5c:	461a      	mov	r2, r3
 800dc5e:	fbb1 f6f7 	udiv	r6, r1, r7
 800dc62:	fb07 1416 	mls	r4, r7, r6, r1
 800dc66:	3430      	adds	r4, #48	@ 0x30
 800dc68:	f802 4c01 	strb.w	r4, [r2, #-1]
 800dc6c:	460c      	mov	r4, r1
 800dc6e:	2c63      	cmp	r4, #99	@ 0x63
 800dc70:	f103 33ff 	add.w	r3, r3, #4294967295
 800dc74:	4631      	mov	r1, r6
 800dc76:	dcf1      	bgt.n	800dc5c <__exponent+0x1c>
 800dc78:	3130      	adds	r1, #48	@ 0x30
 800dc7a:	1e94      	subs	r4, r2, #2
 800dc7c:	f803 1c01 	strb.w	r1, [r3, #-1]
 800dc80:	1c41      	adds	r1, r0, #1
 800dc82:	4623      	mov	r3, r4
 800dc84:	42ab      	cmp	r3, r5
 800dc86:	d30a      	bcc.n	800dc9e <__exponent+0x5e>
 800dc88:	f10d 0309 	add.w	r3, sp, #9
 800dc8c:	1a9b      	subs	r3, r3, r2
 800dc8e:	42ac      	cmp	r4, r5
 800dc90:	bf88      	it	hi
 800dc92:	2300      	movhi	r3, #0
 800dc94:	3302      	adds	r3, #2
 800dc96:	4403      	add	r3, r0
 800dc98:	1a18      	subs	r0, r3, r0
 800dc9a:	b003      	add	sp, #12
 800dc9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dc9e:	f813 6b01 	ldrb.w	r6, [r3], #1
 800dca2:	f801 6f01 	strb.w	r6, [r1, #1]!
 800dca6:	e7ed      	b.n	800dc84 <__exponent+0x44>
 800dca8:	2330      	movs	r3, #48	@ 0x30
 800dcaa:	3130      	adds	r1, #48	@ 0x30
 800dcac:	7083      	strb	r3, [r0, #2]
 800dcae:	70c1      	strb	r1, [r0, #3]
 800dcb0:	1d03      	adds	r3, r0, #4
 800dcb2:	e7f1      	b.n	800dc98 <__exponent+0x58>
 800dcb4:	0000      	movs	r0, r0
	...

0800dcb8 <_printf_float>:
 800dcb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dcbc:	b08d      	sub	sp, #52	@ 0x34
 800dcbe:	460c      	mov	r4, r1
 800dcc0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800dcc4:	4616      	mov	r6, r2
 800dcc6:	461f      	mov	r7, r3
 800dcc8:	4605      	mov	r5, r0
 800dcca:	f000 fed7 	bl	800ea7c <_localeconv_r>
 800dcce:	f8d0 b000 	ldr.w	fp, [r0]
 800dcd2:	4658      	mov	r0, fp
 800dcd4:	f7f2 fb54 	bl	8000380 <strlen>
 800dcd8:	2300      	movs	r3, #0
 800dcda:	930a      	str	r3, [sp, #40]	@ 0x28
 800dcdc:	f8d8 3000 	ldr.w	r3, [r8]
 800dce0:	f894 9018 	ldrb.w	r9, [r4, #24]
 800dce4:	6822      	ldr	r2, [r4, #0]
 800dce6:	9005      	str	r0, [sp, #20]
 800dce8:	3307      	adds	r3, #7
 800dcea:	f023 0307 	bic.w	r3, r3, #7
 800dcee:	f103 0108 	add.w	r1, r3, #8
 800dcf2:	f8c8 1000 	str.w	r1, [r8]
 800dcf6:	ed93 0b00 	vldr	d0, [r3]
 800dcfa:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 800df58 <_printf_float+0x2a0>
 800dcfe:	eeb0 7bc0 	vabs.f64	d7, d0
 800dd02:	eeb4 7b46 	vcmp.f64	d7, d6
 800dd06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dd0a:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 800dd0e:	dd24      	ble.n	800dd5a <_printf_float+0xa2>
 800dd10:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800dd14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dd18:	d502      	bpl.n	800dd20 <_printf_float+0x68>
 800dd1a:	232d      	movs	r3, #45	@ 0x2d
 800dd1c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800dd20:	498f      	ldr	r1, [pc, #572]	@ (800df60 <_printf_float+0x2a8>)
 800dd22:	4b90      	ldr	r3, [pc, #576]	@ (800df64 <_printf_float+0x2ac>)
 800dd24:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 800dd28:	bf94      	ite	ls
 800dd2a:	4688      	movls	r8, r1
 800dd2c:	4698      	movhi	r8, r3
 800dd2e:	f022 0204 	bic.w	r2, r2, #4
 800dd32:	2303      	movs	r3, #3
 800dd34:	6123      	str	r3, [r4, #16]
 800dd36:	6022      	str	r2, [r4, #0]
 800dd38:	f04f 0a00 	mov.w	sl, #0
 800dd3c:	9700      	str	r7, [sp, #0]
 800dd3e:	4633      	mov	r3, r6
 800dd40:	aa0b      	add	r2, sp, #44	@ 0x2c
 800dd42:	4621      	mov	r1, r4
 800dd44:	4628      	mov	r0, r5
 800dd46:	f000 f9d1 	bl	800e0ec <_printf_common>
 800dd4a:	3001      	adds	r0, #1
 800dd4c:	f040 8089 	bne.w	800de62 <_printf_float+0x1aa>
 800dd50:	f04f 30ff 	mov.w	r0, #4294967295
 800dd54:	b00d      	add	sp, #52	@ 0x34
 800dd56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd5a:	eeb4 0b40 	vcmp.f64	d0, d0
 800dd5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dd62:	d709      	bvc.n	800dd78 <_printf_float+0xc0>
 800dd64:	ee10 3a90 	vmov	r3, s1
 800dd68:	2b00      	cmp	r3, #0
 800dd6a:	bfbc      	itt	lt
 800dd6c:	232d      	movlt	r3, #45	@ 0x2d
 800dd6e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800dd72:	497d      	ldr	r1, [pc, #500]	@ (800df68 <_printf_float+0x2b0>)
 800dd74:	4b7d      	ldr	r3, [pc, #500]	@ (800df6c <_printf_float+0x2b4>)
 800dd76:	e7d5      	b.n	800dd24 <_printf_float+0x6c>
 800dd78:	6863      	ldr	r3, [r4, #4]
 800dd7a:	1c59      	adds	r1, r3, #1
 800dd7c:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 800dd80:	d139      	bne.n	800ddf6 <_printf_float+0x13e>
 800dd82:	2306      	movs	r3, #6
 800dd84:	6063      	str	r3, [r4, #4]
 800dd86:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800dd8a:	2300      	movs	r3, #0
 800dd8c:	6022      	str	r2, [r4, #0]
 800dd8e:	9303      	str	r3, [sp, #12]
 800dd90:	ab0a      	add	r3, sp, #40	@ 0x28
 800dd92:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800dd96:	ab09      	add	r3, sp, #36	@ 0x24
 800dd98:	9300      	str	r3, [sp, #0]
 800dd9a:	6861      	ldr	r1, [r4, #4]
 800dd9c:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800dda0:	4628      	mov	r0, r5
 800dda2:	f7ff fef9 	bl	800db98 <__cvt>
 800dda6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800ddaa:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ddac:	4680      	mov	r8, r0
 800ddae:	d129      	bne.n	800de04 <_printf_float+0x14c>
 800ddb0:	1cc8      	adds	r0, r1, #3
 800ddb2:	db02      	blt.n	800ddba <_printf_float+0x102>
 800ddb4:	6863      	ldr	r3, [r4, #4]
 800ddb6:	4299      	cmp	r1, r3
 800ddb8:	dd41      	ble.n	800de3e <_printf_float+0x186>
 800ddba:	f1a9 0902 	sub.w	r9, r9, #2
 800ddbe:	fa5f f989 	uxtb.w	r9, r9
 800ddc2:	3901      	subs	r1, #1
 800ddc4:	464a      	mov	r2, r9
 800ddc6:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800ddca:	9109      	str	r1, [sp, #36]	@ 0x24
 800ddcc:	f7ff ff38 	bl	800dc40 <__exponent>
 800ddd0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ddd2:	1813      	adds	r3, r2, r0
 800ddd4:	2a01      	cmp	r2, #1
 800ddd6:	4682      	mov	sl, r0
 800ddd8:	6123      	str	r3, [r4, #16]
 800ddda:	dc02      	bgt.n	800dde2 <_printf_float+0x12a>
 800dddc:	6822      	ldr	r2, [r4, #0]
 800ddde:	07d2      	lsls	r2, r2, #31
 800dde0:	d501      	bpl.n	800dde6 <_printf_float+0x12e>
 800dde2:	3301      	adds	r3, #1
 800dde4:	6123      	str	r3, [r4, #16]
 800dde6:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800ddea:	2b00      	cmp	r3, #0
 800ddec:	d0a6      	beq.n	800dd3c <_printf_float+0x84>
 800ddee:	232d      	movs	r3, #45	@ 0x2d
 800ddf0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ddf4:	e7a2      	b.n	800dd3c <_printf_float+0x84>
 800ddf6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800ddfa:	d1c4      	bne.n	800dd86 <_printf_float+0xce>
 800ddfc:	2b00      	cmp	r3, #0
 800ddfe:	d1c2      	bne.n	800dd86 <_printf_float+0xce>
 800de00:	2301      	movs	r3, #1
 800de02:	e7bf      	b.n	800dd84 <_printf_float+0xcc>
 800de04:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800de08:	d9db      	bls.n	800ddc2 <_printf_float+0x10a>
 800de0a:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 800de0e:	d118      	bne.n	800de42 <_printf_float+0x18a>
 800de10:	2900      	cmp	r1, #0
 800de12:	6863      	ldr	r3, [r4, #4]
 800de14:	dd0b      	ble.n	800de2e <_printf_float+0x176>
 800de16:	6121      	str	r1, [r4, #16]
 800de18:	b913      	cbnz	r3, 800de20 <_printf_float+0x168>
 800de1a:	6822      	ldr	r2, [r4, #0]
 800de1c:	07d0      	lsls	r0, r2, #31
 800de1e:	d502      	bpl.n	800de26 <_printf_float+0x16e>
 800de20:	3301      	adds	r3, #1
 800de22:	440b      	add	r3, r1
 800de24:	6123      	str	r3, [r4, #16]
 800de26:	65a1      	str	r1, [r4, #88]	@ 0x58
 800de28:	f04f 0a00 	mov.w	sl, #0
 800de2c:	e7db      	b.n	800dde6 <_printf_float+0x12e>
 800de2e:	b913      	cbnz	r3, 800de36 <_printf_float+0x17e>
 800de30:	6822      	ldr	r2, [r4, #0]
 800de32:	07d2      	lsls	r2, r2, #31
 800de34:	d501      	bpl.n	800de3a <_printf_float+0x182>
 800de36:	3302      	adds	r3, #2
 800de38:	e7f4      	b.n	800de24 <_printf_float+0x16c>
 800de3a:	2301      	movs	r3, #1
 800de3c:	e7f2      	b.n	800de24 <_printf_float+0x16c>
 800de3e:	f04f 0967 	mov.w	r9, #103	@ 0x67
 800de42:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800de44:	4299      	cmp	r1, r3
 800de46:	db05      	blt.n	800de54 <_printf_float+0x19c>
 800de48:	6823      	ldr	r3, [r4, #0]
 800de4a:	6121      	str	r1, [r4, #16]
 800de4c:	07d8      	lsls	r0, r3, #31
 800de4e:	d5ea      	bpl.n	800de26 <_printf_float+0x16e>
 800de50:	1c4b      	adds	r3, r1, #1
 800de52:	e7e7      	b.n	800de24 <_printf_float+0x16c>
 800de54:	2900      	cmp	r1, #0
 800de56:	bfd4      	ite	le
 800de58:	f1c1 0202 	rsble	r2, r1, #2
 800de5c:	2201      	movgt	r2, #1
 800de5e:	4413      	add	r3, r2
 800de60:	e7e0      	b.n	800de24 <_printf_float+0x16c>
 800de62:	6823      	ldr	r3, [r4, #0]
 800de64:	055a      	lsls	r2, r3, #21
 800de66:	d407      	bmi.n	800de78 <_printf_float+0x1c0>
 800de68:	6923      	ldr	r3, [r4, #16]
 800de6a:	4642      	mov	r2, r8
 800de6c:	4631      	mov	r1, r6
 800de6e:	4628      	mov	r0, r5
 800de70:	47b8      	blx	r7
 800de72:	3001      	adds	r0, #1
 800de74:	d12a      	bne.n	800decc <_printf_float+0x214>
 800de76:	e76b      	b.n	800dd50 <_printf_float+0x98>
 800de78:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800de7c:	f240 80e0 	bls.w	800e040 <_printf_float+0x388>
 800de80:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800de84:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800de88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de8c:	d133      	bne.n	800def6 <_printf_float+0x23e>
 800de8e:	4a38      	ldr	r2, [pc, #224]	@ (800df70 <_printf_float+0x2b8>)
 800de90:	2301      	movs	r3, #1
 800de92:	4631      	mov	r1, r6
 800de94:	4628      	mov	r0, r5
 800de96:	47b8      	blx	r7
 800de98:	3001      	adds	r0, #1
 800de9a:	f43f af59 	beq.w	800dd50 <_printf_float+0x98>
 800de9e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800dea2:	4543      	cmp	r3, r8
 800dea4:	db02      	blt.n	800deac <_printf_float+0x1f4>
 800dea6:	6823      	ldr	r3, [r4, #0]
 800dea8:	07d8      	lsls	r0, r3, #31
 800deaa:	d50f      	bpl.n	800decc <_printf_float+0x214>
 800deac:	9b05      	ldr	r3, [sp, #20]
 800deae:	465a      	mov	r2, fp
 800deb0:	4631      	mov	r1, r6
 800deb2:	4628      	mov	r0, r5
 800deb4:	47b8      	blx	r7
 800deb6:	3001      	adds	r0, #1
 800deb8:	f43f af4a 	beq.w	800dd50 <_printf_float+0x98>
 800debc:	f04f 0900 	mov.w	r9, #0
 800dec0:	f108 38ff 	add.w	r8, r8, #4294967295
 800dec4:	f104 0a1a 	add.w	sl, r4, #26
 800dec8:	45c8      	cmp	r8, r9
 800deca:	dc09      	bgt.n	800dee0 <_printf_float+0x228>
 800decc:	6823      	ldr	r3, [r4, #0]
 800dece:	079b      	lsls	r3, r3, #30
 800ded0:	f100 8107 	bmi.w	800e0e2 <_printf_float+0x42a>
 800ded4:	68e0      	ldr	r0, [r4, #12]
 800ded6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ded8:	4298      	cmp	r0, r3
 800deda:	bfb8      	it	lt
 800dedc:	4618      	movlt	r0, r3
 800dede:	e739      	b.n	800dd54 <_printf_float+0x9c>
 800dee0:	2301      	movs	r3, #1
 800dee2:	4652      	mov	r2, sl
 800dee4:	4631      	mov	r1, r6
 800dee6:	4628      	mov	r0, r5
 800dee8:	47b8      	blx	r7
 800deea:	3001      	adds	r0, #1
 800deec:	f43f af30 	beq.w	800dd50 <_printf_float+0x98>
 800def0:	f109 0901 	add.w	r9, r9, #1
 800def4:	e7e8      	b.n	800dec8 <_printf_float+0x210>
 800def6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800def8:	2b00      	cmp	r3, #0
 800defa:	dc3b      	bgt.n	800df74 <_printf_float+0x2bc>
 800defc:	4a1c      	ldr	r2, [pc, #112]	@ (800df70 <_printf_float+0x2b8>)
 800defe:	2301      	movs	r3, #1
 800df00:	4631      	mov	r1, r6
 800df02:	4628      	mov	r0, r5
 800df04:	47b8      	blx	r7
 800df06:	3001      	adds	r0, #1
 800df08:	f43f af22 	beq.w	800dd50 <_printf_float+0x98>
 800df0c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800df10:	ea59 0303 	orrs.w	r3, r9, r3
 800df14:	d102      	bne.n	800df1c <_printf_float+0x264>
 800df16:	6823      	ldr	r3, [r4, #0]
 800df18:	07d9      	lsls	r1, r3, #31
 800df1a:	d5d7      	bpl.n	800decc <_printf_float+0x214>
 800df1c:	9b05      	ldr	r3, [sp, #20]
 800df1e:	465a      	mov	r2, fp
 800df20:	4631      	mov	r1, r6
 800df22:	4628      	mov	r0, r5
 800df24:	47b8      	blx	r7
 800df26:	3001      	adds	r0, #1
 800df28:	f43f af12 	beq.w	800dd50 <_printf_float+0x98>
 800df2c:	f04f 0a00 	mov.w	sl, #0
 800df30:	f104 0b1a 	add.w	fp, r4, #26
 800df34:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800df36:	425b      	negs	r3, r3
 800df38:	4553      	cmp	r3, sl
 800df3a:	dc01      	bgt.n	800df40 <_printf_float+0x288>
 800df3c:	464b      	mov	r3, r9
 800df3e:	e794      	b.n	800de6a <_printf_float+0x1b2>
 800df40:	2301      	movs	r3, #1
 800df42:	465a      	mov	r2, fp
 800df44:	4631      	mov	r1, r6
 800df46:	4628      	mov	r0, r5
 800df48:	47b8      	blx	r7
 800df4a:	3001      	adds	r0, #1
 800df4c:	f43f af00 	beq.w	800dd50 <_printf_float+0x98>
 800df50:	f10a 0a01 	add.w	sl, sl, #1
 800df54:	e7ee      	b.n	800df34 <_printf_float+0x27c>
 800df56:	bf00      	nop
 800df58:	ffffffff 	.word	0xffffffff
 800df5c:	7fefffff 	.word	0x7fefffff
 800df60:	080126f0 	.word	0x080126f0
 800df64:	080126f4 	.word	0x080126f4
 800df68:	080126f8 	.word	0x080126f8
 800df6c:	080126fc 	.word	0x080126fc
 800df70:	08012700 	.word	0x08012700
 800df74:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800df76:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800df7a:	4553      	cmp	r3, sl
 800df7c:	bfa8      	it	ge
 800df7e:	4653      	movge	r3, sl
 800df80:	2b00      	cmp	r3, #0
 800df82:	4699      	mov	r9, r3
 800df84:	dc37      	bgt.n	800dff6 <_printf_float+0x33e>
 800df86:	2300      	movs	r3, #0
 800df88:	9307      	str	r3, [sp, #28]
 800df8a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800df8e:	f104 021a 	add.w	r2, r4, #26
 800df92:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800df94:	9907      	ldr	r1, [sp, #28]
 800df96:	9306      	str	r3, [sp, #24]
 800df98:	eba3 0309 	sub.w	r3, r3, r9
 800df9c:	428b      	cmp	r3, r1
 800df9e:	dc31      	bgt.n	800e004 <_printf_float+0x34c>
 800dfa0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dfa2:	459a      	cmp	sl, r3
 800dfa4:	dc3b      	bgt.n	800e01e <_printf_float+0x366>
 800dfa6:	6823      	ldr	r3, [r4, #0]
 800dfa8:	07da      	lsls	r2, r3, #31
 800dfaa:	d438      	bmi.n	800e01e <_printf_float+0x366>
 800dfac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dfae:	ebaa 0903 	sub.w	r9, sl, r3
 800dfb2:	9b06      	ldr	r3, [sp, #24]
 800dfb4:	ebaa 0303 	sub.w	r3, sl, r3
 800dfb8:	4599      	cmp	r9, r3
 800dfba:	bfa8      	it	ge
 800dfbc:	4699      	movge	r9, r3
 800dfbe:	f1b9 0f00 	cmp.w	r9, #0
 800dfc2:	dc34      	bgt.n	800e02e <_printf_float+0x376>
 800dfc4:	f04f 0800 	mov.w	r8, #0
 800dfc8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800dfcc:	f104 0b1a 	add.w	fp, r4, #26
 800dfd0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dfd2:	ebaa 0303 	sub.w	r3, sl, r3
 800dfd6:	eba3 0309 	sub.w	r3, r3, r9
 800dfda:	4543      	cmp	r3, r8
 800dfdc:	f77f af76 	ble.w	800decc <_printf_float+0x214>
 800dfe0:	2301      	movs	r3, #1
 800dfe2:	465a      	mov	r2, fp
 800dfe4:	4631      	mov	r1, r6
 800dfe6:	4628      	mov	r0, r5
 800dfe8:	47b8      	blx	r7
 800dfea:	3001      	adds	r0, #1
 800dfec:	f43f aeb0 	beq.w	800dd50 <_printf_float+0x98>
 800dff0:	f108 0801 	add.w	r8, r8, #1
 800dff4:	e7ec      	b.n	800dfd0 <_printf_float+0x318>
 800dff6:	4642      	mov	r2, r8
 800dff8:	4631      	mov	r1, r6
 800dffa:	4628      	mov	r0, r5
 800dffc:	47b8      	blx	r7
 800dffe:	3001      	adds	r0, #1
 800e000:	d1c1      	bne.n	800df86 <_printf_float+0x2ce>
 800e002:	e6a5      	b.n	800dd50 <_printf_float+0x98>
 800e004:	2301      	movs	r3, #1
 800e006:	4631      	mov	r1, r6
 800e008:	4628      	mov	r0, r5
 800e00a:	9206      	str	r2, [sp, #24]
 800e00c:	47b8      	blx	r7
 800e00e:	3001      	adds	r0, #1
 800e010:	f43f ae9e 	beq.w	800dd50 <_printf_float+0x98>
 800e014:	9b07      	ldr	r3, [sp, #28]
 800e016:	9a06      	ldr	r2, [sp, #24]
 800e018:	3301      	adds	r3, #1
 800e01a:	9307      	str	r3, [sp, #28]
 800e01c:	e7b9      	b.n	800df92 <_printf_float+0x2da>
 800e01e:	9b05      	ldr	r3, [sp, #20]
 800e020:	465a      	mov	r2, fp
 800e022:	4631      	mov	r1, r6
 800e024:	4628      	mov	r0, r5
 800e026:	47b8      	blx	r7
 800e028:	3001      	adds	r0, #1
 800e02a:	d1bf      	bne.n	800dfac <_printf_float+0x2f4>
 800e02c:	e690      	b.n	800dd50 <_printf_float+0x98>
 800e02e:	9a06      	ldr	r2, [sp, #24]
 800e030:	464b      	mov	r3, r9
 800e032:	4442      	add	r2, r8
 800e034:	4631      	mov	r1, r6
 800e036:	4628      	mov	r0, r5
 800e038:	47b8      	blx	r7
 800e03a:	3001      	adds	r0, #1
 800e03c:	d1c2      	bne.n	800dfc4 <_printf_float+0x30c>
 800e03e:	e687      	b.n	800dd50 <_printf_float+0x98>
 800e040:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 800e044:	f1b9 0f01 	cmp.w	r9, #1
 800e048:	dc01      	bgt.n	800e04e <_printf_float+0x396>
 800e04a:	07db      	lsls	r3, r3, #31
 800e04c:	d536      	bpl.n	800e0bc <_printf_float+0x404>
 800e04e:	2301      	movs	r3, #1
 800e050:	4642      	mov	r2, r8
 800e052:	4631      	mov	r1, r6
 800e054:	4628      	mov	r0, r5
 800e056:	47b8      	blx	r7
 800e058:	3001      	adds	r0, #1
 800e05a:	f43f ae79 	beq.w	800dd50 <_printf_float+0x98>
 800e05e:	9b05      	ldr	r3, [sp, #20]
 800e060:	465a      	mov	r2, fp
 800e062:	4631      	mov	r1, r6
 800e064:	4628      	mov	r0, r5
 800e066:	47b8      	blx	r7
 800e068:	3001      	adds	r0, #1
 800e06a:	f43f ae71 	beq.w	800dd50 <_printf_float+0x98>
 800e06e:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800e072:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800e076:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e07a:	f109 39ff 	add.w	r9, r9, #4294967295
 800e07e:	d018      	beq.n	800e0b2 <_printf_float+0x3fa>
 800e080:	464b      	mov	r3, r9
 800e082:	f108 0201 	add.w	r2, r8, #1
 800e086:	4631      	mov	r1, r6
 800e088:	4628      	mov	r0, r5
 800e08a:	47b8      	blx	r7
 800e08c:	3001      	adds	r0, #1
 800e08e:	d10c      	bne.n	800e0aa <_printf_float+0x3f2>
 800e090:	e65e      	b.n	800dd50 <_printf_float+0x98>
 800e092:	2301      	movs	r3, #1
 800e094:	465a      	mov	r2, fp
 800e096:	4631      	mov	r1, r6
 800e098:	4628      	mov	r0, r5
 800e09a:	47b8      	blx	r7
 800e09c:	3001      	adds	r0, #1
 800e09e:	f43f ae57 	beq.w	800dd50 <_printf_float+0x98>
 800e0a2:	f108 0801 	add.w	r8, r8, #1
 800e0a6:	45c8      	cmp	r8, r9
 800e0a8:	dbf3      	blt.n	800e092 <_printf_float+0x3da>
 800e0aa:	4653      	mov	r3, sl
 800e0ac:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800e0b0:	e6dc      	b.n	800de6c <_printf_float+0x1b4>
 800e0b2:	f04f 0800 	mov.w	r8, #0
 800e0b6:	f104 0b1a 	add.w	fp, r4, #26
 800e0ba:	e7f4      	b.n	800e0a6 <_printf_float+0x3ee>
 800e0bc:	2301      	movs	r3, #1
 800e0be:	4642      	mov	r2, r8
 800e0c0:	e7e1      	b.n	800e086 <_printf_float+0x3ce>
 800e0c2:	2301      	movs	r3, #1
 800e0c4:	464a      	mov	r2, r9
 800e0c6:	4631      	mov	r1, r6
 800e0c8:	4628      	mov	r0, r5
 800e0ca:	47b8      	blx	r7
 800e0cc:	3001      	adds	r0, #1
 800e0ce:	f43f ae3f 	beq.w	800dd50 <_printf_float+0x98>
 800e0d2:	f108 0801 	add.w	r8, r8, #1
 800e0d6:	68e3      	ldr	r3, [r4, #12]
 800e0d8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e0da:	1a5b      	subs	r3, r3, r1
 800e0dc:	4543      	cmp	r3, r8
 800e0de:	dcf0      	bgt.n	800e0c2 <_printf_float+0x40a>
 800e0e0:	e6f8      	b.n	800ded4 <_printf_float+0x21c>
 800e0e2:	f04f 0800 	mov.w	r8, #0
 800e0e6:	f104 0919 	add.w	r9, r4, #25
 800e0ea:	e7f4      	b.n	800e0d6 <_printf_float+0x41e>

0800e0ec <_printf_common>:
 800e0ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e0f0:	4616      	mov	r6, r2
 800e0f2:	4698      	mov	r8, r3
 800e0f4:	688a      	ldr	r2, [r1, #8]
 800e0f6:	690b      	ldr	r3, [r1, #16]
 800e0f8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800e0fc:	4293      	cmp	r3, r2
 800e0fe:	bfb8      	it	lt
 800e100:	4613      	movlt	r3, r2
 800e102:	6033      	str	r3, [r6, #0]
 800e104:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800e108:	4607      	mov	r7, r0
 800e10a:	460c      	mov	r4, r1
 800e10c:	b10a      	cbz	r2, 800e112 <_printf_common+0x26>
 800e10e:	3301      	adds	r3, #1
 800e110:	6033      	str	r3, [r6, #0]
 800e112:	6823      	ldr	r3, [r4, #0]
 800e114:	0699      	lsls	r1, r3, #26
 800e116:	bf42      	ittt	mi
 800e118:	6833      	ldrmi	r3, [r6, #0]
 800e11a:	3302      	addmi	r3, #2
 800e11c:	6033      	strmi	r3, [r6, #0]
 800e11e:	6825      	ldr	r5, [r4, #0]
 800e120:	f015 0506 	ands.w	r5, r5, #6
 800e124:	d106      	bne.n	800e134 <_printf_common+0x48>
 800e126:	f104 0a19 	add.w	sl, r4, #25
 800e12a:	68e3      	ldr	r3, [r4, #12]
 800e12c:	6832      	ldr	r2, [r6, #0]
 800e12e:	1a9b      	subs	r3, r3, r2
 800e130:	42ab      	cmp	r3, r5
 800e132:	dc26      	bgt.n	800e182 <_printf_common+0x96>
 800e134:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800e138:	6822      	ldr	r2, [r4, #0]
 800e13a:	3b00      	subs	r3, #0
 800e13c:	bf18      	it	ne
 800e13e:	2301      	movne	r3, #1
 800e140:	0692      	lsls	r2, r2, #26
 800e142:	d42b      	bmi.n	800e19c <_printf_common+0xb0>
 800e144:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800e148:	4641      	mov	r1, r8
 800e14a:	4638      	mov	r0, r7
 800e14c:	47c8      	blx	r9
 800e14e:	3001      	adds	r0, #1
 800e150:	d01e      	beq.n	800e190 <_printf_common+0xa4>
 800e152:	6823      	ldr	r3, [r4, #0]
 800e154:	6922      	ldr	r2, [r4, #16]
 800e156:	f003 0306 	and.w	r3, r3, #6
 800e15a:	2b04      	cmp	r3, #4
 800e15c:	bf02      	ittt	eq
 800e15e:	68e5      	ldreq	r5, [r4, #12]
 800e160:	6833      	ldreq	r3, [r6, #0]
 800e162:	1aed      	subeq	r5, r5, r3
 800e164:	68a3      	ldr	r3, [r4, #8]
 800e166:	bf0c      	ite	eq
 800e168:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e16c:	2500      	movne	r5, #0
 800e16e:	4293      	cmp	r3, r2
 800e170:	bfc4      	itt	gt
 800e172:	1a9b      	subgt	r3, r3, r2
 800e174:	18ed      	addgt	r5, r5, r3
 800e176:	2600      	movs	r6, #0
 800e178:	341a      	adds	r4, #26
 800e17a:	42b5      	cmp	r5, r6
 800e17c:	d11a      	bne.n	800e1b4 <_printf_common+0xc8>
 800e17e:	2000      	movs	r0, #0
 800e180:	e008      	b.n	800e194 <_printf_common+0xa8>
 800e182:	2301      	movs	r3, #1
 800e184:	4652      	mov	r2, sl
 800e186:	4641      	mov	r1, r8
 800e188:	4638      	mov	r0, r7
 800e18a:	47c8      	blx	r9
 800e18c:	3001      	adds	r0, #1
 800e18e:	d103      	bne.n	800e198 <_printf_common+0xac>
 800e190:	f04f 30ff 	mov.w	r0, #4294967295
 800e194:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e198:	3501      	adds	r5, #1
 800e19a:	e7c6      	b.n	800e12a <_printf_common+0x3e>
 800e19c:	18e1      	adds	r1, r4, r3
 800e19e:	1c5a      	adds	r2, r3, #1
 800e1a0:	2030      	movs	r0, #48	@ 0x30
 800e1a2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800e1a6:	4422      	add	r2, r4
 800e1a8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800e1ac:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800e1b0:	3302      	adds	r3, #2
 800e1b2:	e7c7      	b.n	800e144 <_printf_common+0x58>
 800e1b4:	2301      	movs	r3, #1
 800e1b6:	4622      	mov	r2, r4
 800e1b8:	4641      	mov	r1, r8
 800e1ba:	4638      	mov	r0, r7
 800e1bc:	47c8      	blx	r9
 800e1be:	3001      	adds	r0, #1
 800e1c0:	d0e6      	beq.n	800e190 <_printf_common+0xa4>
 800e1c2:	3601      	adds	r6, #1
 800e1c4:	e7d9      	b.n	800e17a <_printf_common+0x8e>
	...

0800e1c8 <_printf_i>:
 800e1c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e1cc:	7e0f      	ldrb	r7, [r1, #24]
 800e1ce:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800e1d0:	2f78      	cmp	r7, #120	@ 0x78
 800e1d2:	4691      	mov	r9, r2
 800e1d4:	4680      	mov	r8, r0
 800e1d6:	460c      	mov	r4, r1
 800e1d8:	469a      	mov	sl, r3
 800e1da:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800e1de:	d807      	bhi.n	800e1f0 <_printf_i+0x28>
 800e1e0:	2f62      	cmp	r7, #98	@ 0x62
 800e1e2:	d80a      	bhi.n	800e1fa <_printf_i+0x32>
 800e1e4:	2f00      	cmp	r7, #0
 800e1e6:	f000 80d2 	beq.w	800e38e <_printf_i+0x1c6>
 800e1ea:	2f58      	cmp	r7, #88	@ 0x58
 800e1ec:	f000 80b9 	beq.w	800e362 <_printf_i+0x19a>
 800e1f0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e1f4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800e1f8:	e03a      	b.n	800e270 <_printf_i+0xa8>
 800e1fa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800e1fe:	2b15      	cmp	r3, #21
 800e200:	d8f6      	bhi.n	800e1f0 <_printf_i+0x28>
 800e202:	a101      	add	r1, pc, #4	@ (adr r1, 800e208 <_printf_i+0x40>)
 800e204:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e208:	0800e261 	.word	0x0800e261
 800e20c:	0800e275 	.word	0x0800e275
 800e210:	0800e1f1 	.word	0x0800e1f1
 800e214:	0800e1f1 	.word	0x0800e1f1
 800e218:	0800e1f1 	.word	0x0800e1f1
 800e21c:	0800e1f1 	.word	0x0800e1f1
 800e220:	0800e275 	.word	0x0800e275
 800e224:	0800e1f1 	.word	0x0800e1f1
 800e228:	0800e1f1 	.word	0x0800e1f1
 800e22c:	0800e1f1 	.word	0x0800e1f1
 800e230:	0800e1f1 	.word	0x0800e1f1
 800e234:	0800e375 	.word	0x0800e375
 800e238:	0800e29f 	.word	0x0800e29f
 800e23c:	0800e32f 	.word	0x0800e32f
 800e240:	0800e1f1 	.word	0x0800e1f1
 800e244:	0800e1f1 	.word	0x0800e1f1
 800e248:	0800e397 	.word	0x0800e397
 800e24c:	0800e1f1 	.word	0x0800e1f1
 800e250:	0800e29f 	.word	0x0800e29f
 800e254:	0800e1f1 	.word	0x0800e1f1
 800e258:	0800e1f1 	.word	0x0800e1f1
 800e25c:	0800e337 	.word	0x0800e337
 800e260:	6833      	ldr	r3, [r6, #0]
 800e262:	1d1a      	adds	r2, r3, #4
 800e264:	681b      	ldr	r3, [r3, #0]
 800e266:	6032      	str	r2, [r6, #0]
 800e268:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e26c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800e270:	2301      	movs	r3, #1
 800e272:	e09d      	b.n	800e3b0 <_printf_i+0x1e8>
 800e274:	6833      	ldr	r3, [r6, #0]
 800e276:	6820      	ldr	r0, [r4, #0]
 800e278:	1d19      	adds	r1, r3, #4
 800e27a:	6031      	str	r1, [r6, #0]
 800e27c:	0606      	lsls	r6, r0, #24
 800e27e:	d501      	bpl.n	800e284 <_printf_i+0xbc>
 800e280:	681d      	ldr	r5, [r3, #0]
 800e282:	e003      	b.n	800e28c <_printf_i+0xc4>
 800e284:	0645      	lsls	r5, r0, #25
 800e286:	d5fb      	bpl.n	800e280 <_printf_i+0xb8>
 800e288:	f9b3 5000 	ldrsh.w	r5, [r3]
 800e28c:	2d00      	cmp	r5, #0
 800e28e:	da03      	bge.n	800e298 <_printf_i+0xd0>
 800e290:	232d      	movs	r3, #45	@ 0x2d
 800e292:	426d      	negs	r5, r5
 800e294:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e298:	4859      	ldr	r0, [pc, #356]	@ (800e400 <_printf_i+0x238>)
 800e29a:	230a      	movs	r3, #10
 800e29c:	e011      	b.n	800e2c2 <_printf_i+0xfa>
 800e29e:	6821      	ldr	r1, [r4, #0]
 800e2a0:	6833      	ldr	r3, [r6, #0]
 800e2a2:	0608      	lsls	r0, r1, #24
 800e2a4:	f853 5b04 	ldr.w	r5, [r3], #4
 800e2a8:	d402      	bmi.n	800e2b0 <_printf_i+0xe8>
 800e2aa:	0649      	lsls	r1, r1, #25
 800e2ac:	bf48      	it	mi
 800e2ae:	b2ad      	uxthmi	r5, r5
 800e2b0:	2f6f      	cmp	r7, #111	@ 0x6f
 800e2b2:	4853      	ldr	r0, [pc, #332]	@ (800e400 <_printf_i+0x238>)
 800e2b4:	6033      	str	r3, [r6, #0]
 800e2b6:	bf14      	ite	ne
 800e2b8:	230a      	movne	r3, #10
 800e2ba:	2308      	moveq	r3, #8
 800e2bc:	2100      	movs	r1, #0
 800e2be:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800e2c2:	6866      	ldr	r6, [r4, #4]
 800e2c4:	60a6      	str	r6, [r4, #8]
 800e2c6:	2e00      	cmp	r6, #0
 800e2c8:	bfa2      	ittt	ge
 800e2ca:	6821      	ldrge	r1, [r4, #0]
 800e2cc:	f021 0104 	bicge.w	r1, r1, #4
 800e2d0:	6021      	strge	r1, [r4, #0]
 800e2d2:	b90d      	cbnz	r5, 800e2d8 <_printf_i+0x110>
 800e2d4:	2e00      	cmp	r6, #0
 800e2d6:	d04b      	beq.n	800e370 <_printf_i+0x1a8>
 800e2d8:	4616      	mov	r6, r2
 800e2da:	fbb5 f1f3 	udiv	r1, r5, r3
 800e2de:	fb03 5711 	mls	r7, r3, r1, r5
 800e2e2:	5dc7      	ldrb	r7, [r0, r7]
 800e2e4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e2e8:	462f      	mov	r7, r5
 800e2ea:	42bb      	cmp	r3, r7
 800e2ec:	460d      	mov	r5, r1
 800e2ee:	d9f4      	bls.n	800e2da <_printf_i+0x112>
 800e2f0:	2b08      	cmp	r3, #8
 800e2f2:	d10b      	bne.n	800e30c <_printf_i+0x144>
 800e2f4:	6823      	ldr	r3, [r4, #0]
 800e2f6:	07df      	lsls	r7, r3, #31
 800e2f8:	d508      	bpl.n	800e30c <_printf_i+0x144>
 800e2fa:	6923      	ldr	r3, [r4, #16]
 800e2fc:	6861      	ldr	r1, [r4, #4]
 800e2fe:	4299      	cmp	r1, r3
 800e300:	bfde      	ittt	le
 800e302:	2330      	movle	r3, #48	@ 0x30
 800e304:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e308:	f106 36ff 	addle.w	r6, r6, #4294967295
 800e30c:	1b92      	subs	r2, r2, r6
 800e30e:	6122      	str	r2, [r4, #16]
 800e310:	f8cd a000 	str.w	sl, [sp]
 800e314:	464b      	mov	r3, r9
 800e316:	aa03      	add	r2, sp, #12
 800e318:	4621      	mov	r1, r4
 800e31a:	4640      	mov	r0, r8
 800e31c:	f7ff fee6 	bl	800e0ec <_printf_common>
 800e320:	3001      	adds	r0, #1
 800e322:	d14a      	bne.n	800e3ba <_printf_i+0x1f2>
 800e324:	f04f 30ff 	mov.w	r0, #4294967295
 800e328:	b004      	add	sp, #16
 800e32a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e32e:	6823      	ldr	r3, [r4, #0]
 800e330:	f043 0320 	orr.w	r3, r3, #32
 800e334:	6023      	str	r3, [r4, #0]
 800e336:	4833      	ldr	r0, [pc, #204]	@ (800e404 <_printf_i+0x23c>)
 800e338:	2778      	movs	r7, #120	@ 0x78
 800e33a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800e33e:	6823      	ldr	r3, [r4, #0]
 800e340:	6831      	ldr	r1, [r6, #0]
 800e342:	061f      	lsls	r7, r3, #24
 800e344:	f851 5b04 	ldr.w	r5, [r1], #4
 800e348:	d402      	bmi.n	800e350 <_printf_i+0x188>
 800e34a:	065f      	lsls	r7, r3, #25
 800e34c:	bf48      	it	mi
 800e34e:	b2ad      	uxthmi	r5, r5
 800e350:	6031      	str	r1, [r6, #0]
 800e352:	07d9      	lsls	r1, r3, #31
 800e354:	bf44      	itt	mi
 800e356:	f043 0320 	orrmi.w	r3, r3, #32
 800e35a:	6023      	strmi	r3, [r4, #0]
 800e35c:	b11d      	cbz	r5, 800e366 <_printf_i+0x19e>
 800e35e:	2310      	movs	r3, #16
 800e360:	e7ac      	b.n	800e2bc <_printf_i+0xf4>
 800e362:	4827      	ldr	r0, [pc, #156]	@ (800e400 <_printf_i+0x238>)
 800e364:	e7e9      	b.n	800e33a <_printf_i+0x172>
 800e366:	6823      	ldr	r3, [r4, #0]
 800e368:	f023 0320 	bic.w	r3, r3, #32
 800e36c:	6023      	str	r3, [r4, #0]
 800e36e:	e7f6      	b.n	800e35e <_printf_i+0x196>
 800e370:	4616      	mov	r6, r2
 800e372:	e7bd      	b.n	800e2f0 <_printf_i+0x128>
 800e374:	6833      	ldr	r3, [r6, #0]
 800e376:	6825      	ldr	r5, [r4, #0]
 800e378:	6961      	ldr	r1, [r4, #20]
 800e37a:	1d18      	adds	r0, r3, #4
 800e37c:	6030      	str	r0, [r6, #0]
 800e37e:	062e      	lsls	r6, r5, #24
 800e380:	681b      	ldr	r3, [r3, #0]
 800e382:	d501      	bpl.n	800e388 <_printf_i+0x1c0>
 800e384:	6019      	str	r1, [r3, #0]
 800e386:	e002      	b.n	800e38e <_printf_i+0x1c6>
 800e388:	0668      	lsls	r0, r5, #25
 800e38a:	d5fb      	bpl.n	800e384 <_printf_i+0x1bc>
 800e38c:	8019      	strh	r1, [r3, #0]
 800e38e:	2300      	movs	r3, #0
 800e390:	6123      	str	r3, [r4, #16]
 800e392:	4616      	mov	r6, r2
 800e394:	e7bc      	b.n	800e310 <_printf_i+0x148>
 800e396:	6833      	ldr	r3, [r6, #0]
 800e398:	1d1a      	adds	r2, r3, #4
 800e39a:	6032      	str	r2, [r6, #0]
 800e39c:	681e      	ldr	r6, [r3, #0]
 800e39e:	6862      	ldr	r2, [r4, #4]
 800e3a0:	2100      	movs	r1, #0
 800e3a2:	4630      	mov	r0, r6
 800e3a4:	f7f1 ff9c 	bl	80002e0 <memchr>
 800e3a8:	b108      	cbz	r0, 800e3ae <_printf_i+0x1e6>
 800e3aa:	1b80      	subs	r0, r0, r6
 800e3ac:	6060      	str	r0, [r4, #4]
 800e3ae:	6863      	ldr	r3, [r4, #4]
 800e3b0:	6123      	str	r3, [r4, #16]
 800e3b2:	2300      	movs	r3, #0
 800e3b4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e3b8:	e7aa      	b.n	800e310 <_printf_i+0x148>
 800e3ba:	6923      	ldr	r3, [r4, #16]
 800e3bc:	4632      	mov	r2, r6
 800e3be:	4649      	mov	r1, r9
 800e3c0:	4640      	mov	r0, r8
 800e3c2:	47d0      	blx	sl
 800e3c4:	3001      	adds	r0, #1
 800e3c6:	d0ad      	beq.n	800e324 <_printf_i+0x15c>
 800e3c8:	6823      	ldr	r3, [r4, #0]
 800e3ca:	079b      	lsls	r3, r3, #30
 800e3cc:	d413      	bmi.n	800e3f6 <_printf_i+0x22e>
 800e3ce:	68e0      	ldr	r0, [r4, #12]
 800e3d0:	9b03      	ldr	r3, [sp, #12]
 800e3d2:	4298      	cmp	r0, r3
 800e3d4:	bfb8      	it	lt
 800e3d6:	4618      	movlt	r0, r3
 800e3d8:	e7a6      	b.n	800e328 <_printf_i+0x160>
 800e3da:	2301      	movs	r3, #1
 800e3dc:	4632      	mov	r2, r6
 800e3de:	4649      	mov	r1, r9
 800e3e0:	4640      	mov	r0, r8
 800e3e2:	47d0      	blx	sl
 800e3e4:	3001      	adds	r0, #1
 800e3e6:	d09d      	beq.n	800e324 <_printf_i+0x15c>
 800e3e8:	3501      	adds	r5, #1
 800e3ea:	68e3      	ldr	r3, [r4, #12]
 800e3ec:	9903      	ldr	r1, [sp, #12]
 800e3ee:	1a5b      	subs	r3, r3, r1
 800e3f0:	42ab      	cmp	r3, r5
 800e3f2:	dcf2      	bgt.n	800e3da <_printf_i+0x212>
 800e3f4:	e7eb      	b.n	800e3ce <_printf_i+0x206>
 800e3f6:	2500      	movs	r5, #0
 800e3f8:	f104 0619 	add.w	r6, r4, #25
 800e3fc:	e7f5      	b.n	800e3ea <_printf_i+0x222>
 800e3fe:	bf00      	nop
 800e400:	08012702 	.word	0x08012702
 800e404:	08012713 	.word	0x08012713

0800e408 <_scanf_float>:
 800e408:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e40c:	b087      	sub	sp, #28
 800e40e:	4617      	mov	r7, r2
 800e410:	9303      	str	r3, [sp, #12]
 800e412:	688b      	ldr	r3, [r1, #8]
 800e414:	1e5a      	subs	r2, r3, #1
 800e416:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800e41a:	bf81      	itttt	hi
 800e41c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800e420:	eb03 0b05 	addhi.w	fp, r3, r5
 800e424:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800e428:	608b      	strhi	r3, [r1, #8]
 800e42a:	680b      	ldr	r3, [r1, #0]
 800e42c:	460a      	mov	r2, r1
 800e42e:	f04f 0500 	mov.w	r5, #0
 800e432:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800e436:	f842 3b1c 	str.w	r3, [r2], #28
 800e43a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800e43e:	4680      	mov	r8, r0
 800e440:	460c      	mov	r4, r1
 800e442:	bf98      	it	ls
 800e444:	f04f 0b00 	movls.w	fp, #0
 800e448:	9201      	str	r2, [sp, #4]
 800e44a:	4616      	mov	r6, r2
 800e44c:	46aa      	mov	sl, r5
 800e44e:	46a9      	mov	r9, r5
 800e450:	9502      	str	r5, [sp, #8]
 800e452:	68a2      	ldr	r2, [r4, #8]
 800e454:	b152      	cbz	r2, 800e46c <_scanf_float+0x64>
 800e456:	683b      	ldr	r3, [r7, #0]
 800e458:	781b      	ldrb	r3, [r3, #0]
 800e45a:	2b4e      	cmp	r3, #78	@ 0x4e
 800e45c:	d864      	bhi.n	800e528 <_scanf_float+0x120>
 800e45e:	2b40      	cmp	r3, #64	@ 0x40
 800e460:	d83c      	bhi.n	800e4dc <_scanf_float+0xd4>
 800e462:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800e466:	b2c8      	uxtb	r0, r1
 800e468:	280e      	cmp	r0, #14
 800e46a:	d93a      	bls.n	800e4e2 <_scanf_float+0xda>
 800e46c:	f1b9 0f00 	cmp.w	r9, #0
 800e470:	d003      	beq.n	800e47a <_scanf_float+0x72>
 800e472:	6823      	ldr	r3, [r4, #0]
 800e474:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e478:	6023      	str	r3, [r4, #0]
 800e47a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e47e:	f1ba 0f01 	cmp.w	sl, #1
 800e482:	f200 8117 	bhi.w	800e6b4 <_scanf_float+0x2ac>
 800e486:	9b01      	ldr	r3, [sp, #4]
 800e488:	429e      	cmp	r6, r3
 800e48a:	f200 8108 	bhi.w	800e69e <_scanf_float+0x296>
 800e48e:	2001      	movs	r0, #1
 800e490:	b007      	add	sp, #28
 800e492:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e496:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800e49a:	2a0d      	cmp	r2, #13
 800e49c:	d8e6      	bhi.n	800e46c <_scanf_float+0x64>
 800e49e:	a101      	add	r1, pc, #4	@ (adr r1, 800e4a4 <_scanf_float+0x9c>)
 800e4a0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800e4a4:	0800e5eb 	.word	0x0800e5eb
 800e4a8:	0800e46d 	.word	0x0800e46d
 800e4ac:	0800e46d 	.word	0x0800e46d
 800e4b0:	0800e46d 	.word	0x0800e46d
 800e4b4:	0800e64b 	.word	0x0800e64b
 800e4b8:	0800e623 	.word	0x0800e623
 800e4bc:	0800e46d 	.word	0x0800e46d
 800e4c0:	0800e46d 	.word	0x0800e46d
 800e4c4:	0800e5f9 	.word	0x0800e5f9
 800e4c8:	0800e46d 	.word	0x0800e46d
 800e4cc:	0800e46d 	.word	0x0800e46d
 800e4d0:	0800e46d 	.word	0x0800e46d
 800e4d4:	0800e46d 	.word	0x0800e46d
 800e4d8:	0800e5b1 	.word	0x0800e5b1
 800e4dc:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800e4e0:	e7db      	b.n	800e49a <_scanf_float+0x92>
 800e4e2:	290e      	cmp	r1, #14
 800e4e4:	d8c2      	bhi.n	800e46c <_scanf_float+0x64>
 800e4e6:	a001      	add	r0, pc, #4	@ (adr r0, 800e4ec <_scanf_float+0xe4>)
 800e4e8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800e4ec:	0800e5a1 	.word	0x0800e5a1
 800e4f0:	0800e46d 	.word	0x0800e46d
 800e4f4:	0800e5a1 	.word	0x0800e5a1
 800e4f8:	0800e637 	.word	0x0800e637
 800e4fc:	0800e46d 	.word	0x0800e46d
 800e500:	0800e549 	.word	0x0800e549
 800e504:	0800e587 	.word	0x0800e587
 800e508:	0800e587 	.word	0x0800e587
 800e50c:	0800e587 	.word	0x0800e587
 800e510:	0800e587 	.word	0x0800e587
 800e514:	0800e587 	.word	0x0800e587
 800e518:	0800e587 	.word	0x0800e587
 800e51c:	0800e587 	.word	0x0800e587
 800e520:	0800e587 	.word	0x0800e587
 800e524:	0800e587 	.word	0x0800e587
 800e528:	2b6e      	cmp	r3, #110	@ 0x6e
 800e52a:	d809      	bhi.n	800e540 <_scanf_float+0x138>
 800e52c:	2b60      	cmp	r3, #96	@ 0x60
 800e52e:	d8b2      	bhi.n	800e496 <_scanf_float+0x8e>
 800e530:	2b54      	cmp	r3, #84	@ 0x54
 800e532:	d07b      	beq.n	800e62c <_scanf_float+0x224>
 800e534:	2b59      	cmp	r3, #89	@ 0x59
 800e536:	d199      	bne.n	800e46c <_scanf_float+0x64>
 800e538:	2d07      	cmp	r5, #7
 800e53a:	d197      	bne.n	800e46c <_scanf_float+0x64>
 800e53c:	2508      	movs	r5, #8
 800e53e:	e02c      	b.n	800e59a <_scanf_float+0x192>
 800e540:	2b74      	cmp	r3, #116	@ 0x74
 800e542:	d073      	beq.n	800e62c <_scanf_float+0x224>
 800e544:	2b79      	cmp	r3, #121	@ 0x79
 800e546:	e7f6      	b.n	800e536 <_scanf_float+0x12e>
 800e548:	6821      	ldr	r1, [r4, #0]
 800e54a:	05c8      	lsls	r0, r1, #23
 800e54c:	d51b      	bpl.n	800e586 <_scanf_float+0x17e>
 800e54e:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800e552:	6021      	str	r1, [r4, #0]
 800e554:	f109 0901 	add.w	r9, r9, #1
 800e558:	f1bb 0f00 	cmp.w	fp, #0
 800e55c:	d003      	beq.n	800e566 <_scanf_float+0x15e>
 800e55e:	3201      	adds	r2, #1
 800e560:	f10b 3bff 	add.w	fp, fp, #4294967295
 800e564:	60a2      	str	r2, [r4, #8]
 800e566:	68a3      	ldr	r3, [r4, #8]
 800e568:	3b01      	subs	r3, #1
 800e56a:	60a3      	str	r3, [r4, #8]
 800e56c:	6923      	ldr	r3, [r4, #16]
 800e56e:	3301      	adds	r3, #1
 800e570:	6123      	str	r3, [r4, #16]
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	3b01      	subs	r3, #1
 800e576:	2b00      	cmp	r3, #0
 800e578:	607b      	str	r3, [r7, #4]
 800e57a:	f340 8087 	ble.w	800e68c <_scanf_float+0x284>
 800e57e:	683b      	ldr	r3, [r7, #0]
 800e580:	3301      	adds	r3, #1
 800e582:	603b      	str	r3, [r7, #0]
 800e584:	e765      	b.n	800e452 <_scanf_float+0x4a>
 800e586:	eb1a 0105 	adds.w	r1, sl, r5
 800e58a:	f47f af6f 	bne.w	800e46c <_scanf_float+0x64>
 800e58e:	6822      	ldr	r2, [r4, #0]
 800e590:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800e594:	6022      	str	r2, [r4, #0]
 800e596:	460d      	mov	r5, r1
 800e598:	468a      	mov	sl, r1
 800e59a:	f806 3b01 	strb.w	r3, [r6], #1
 800e59e:	e7e2      	b.n	800e566 <_scanf_float+0x15e>
 800e5a0:	6822      	ldr	r2, [r4, #0]
 800e5a2:	0610      	lsls	r0, r2, #24
 800e5a4:	f57f af62 	bpl.w	800e46c <_scanf_float+0x64>
 800e5a8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800e5ac:	6022      	str	r2, [r4, #0]
 800e5ae:	e7f4      	b.n	800e59a <_scanf_float+0x192>
 800e5b0:	f1ba 0f00 	cmp.w	sl, #0
 800e5b4:	d10e      	bne.n	800e5d4 <_scanf_float+0x1cc>
 800e5b6:	f1b9 0f00 	cmp.w	r9, #0
 800e5ba:	d10e      	bne.n	800e5da <_scanf_float+0x1d2>
 800e5bc:	6822      	ldr	r2, [r4, #0]
 800e5be:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800e5c2:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800e5c6:	d108      	bne.n	800e5da <_scanf_float+0x1d2>
 800e5c8:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800e5cc:	6022      	str	r2, [r4, #0]
 800e5ce:	f04f 0a01 	mov.w	sl, #1
 800e5d2:	e7e2      	b.n	800e59a <_scanf_float+0x192>
 800e5d4:	f1ba 0f02 	cmp.w	sl, #2
 800e5d8:	d055      	beq.n	800e686 <_scanf_float+0x27e>
 800e5da:	2d01      	cmp	r5, #1
 800e5dc:	d002      	beq.n	800e5e4 <_scanf_float+0x1dc>
 800e5de:	2d04      	cmp	r5, #4
 800e5e0:	f47f af44 	bne.w	800e46c <_scanf_float+0x64>
 800e5e4:	3501      	adds	r5, #1
 800e5e6:	b2ed      	uxtb	r5, r5
 800e5e8:	e7d7      	b.n	800e59a <_scanf_float+0x192>
 800e5ea:	f1ba 0f01 	cmp.w	sl, #1
 800e5ee:	f47f af3d 	bne.w	800e46c <_scanf_float+0x64>
 800e5f2:	f04f 0a02 	mov.w	sl, #2
 800e5f6:	e7d0      	b.n	800e59a <_scanf_float+0x192>
 800e5f8:	b97d      	cbnz	r5, 800e61a <_scanf_float+0x212>
 800e5fa:	f1b9 0f00 	cmp.w	r9, #0
 800e5fe:	f47f af38 	bne.w	800e472 <_scanf_float+0x6a>
 800e602:	6822      	ldr	r2, [r4, #0]
 800e604:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800e608:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800e60c:	f040 8101 	bne.w	800e812 <_scanf_float+0x40a>
 800e610:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800e614:	6022      	str	r2, [r4, #0]
 800e616:	2501      	movs	r5, #1
 800e618:	e7bf      	b.n	800e59a <_scanf_float+0x192>
 800e61a:	2d03      	cmp	r5, #3
 800e61c:	d0e2      	beq.n	800e5e4 <_scanf_float+0x1dc>
 800e61e:	2d05      	cmp	r5, #5
 800e620:	e7de      	b.n	800e5e0 <_scanf_float+0x1d8>
 800e622:	2d02      	cmp	r5, #2
 800e624:	f47f af22 	bne.w	800e46c <_scanf_float+0x64>
 800e628:	2503      	movs	r5, #3
 800e62a:	e7b6      	b.n	800e59a <_scanf_float+0x192>
 800e62c:	2d06      	cmp	r5, #6
 800e62e:	f47f af1d 	bne.w	800e46c <_scanf_float+0x64>
 800e632:	2507      	movs	r5, #7
 800e634:	e7b1      	b.n	800e59a <_scanf_float+0x192>
 800e636:	6822      	ldr	r2, [r4, #0]
 800e638:	0591      	lsls	r1, r2, #22
 800e63a:	f57f af17 	bpl.w	800e46c <_scanf_float+0x64>
 800e63e:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800e642:	6022      	str	r2, [r4, #0]
 800e644:	f8cd 9008 	str.w	r9, [sp, #8]
 800e648:	e7a7      	b.n	800e59a <_scanf_float+0x192>
 800e64a:	6822      	ldr	r2, [r4, #0]
 800e64c:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800e650:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800e654:	d006      	beq.n	800e664 <_scanf_float+0x25c>
 800e656:	0550      	lsls	r0, r2, #21
 800e658:	f57f af08 	bpl.w	800e46c <_scanf_float+0x64>
 800e65c:	f1b9 0f00 	cmp.w	r9, #0
 800e660:	f000 80d7 	beq.w	800e812 <_scanf_float+0x40a>
 800e664:	0591      	lsls	r1, r2, #22
 800e666:	bf58      	it	pl
 800e668:	9902      	ldrpl	r1, [sp, #8]
 800e66a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800e66e:	bf58      	it	pl
 800e670:	eba9 0101 	subpl.w	r1, r9, r1
 800e674:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800e678:	bf58      	it	pl
 800e67a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800e67e:	6022      	str	r2, [r4, #0]
 800e680:	f04f 0900 	mov.w	r9, #0
 800e684:	e789      	b.n	800e59a <_scanf_float+0x192>
 800e686:	f04f 0a03 	mov.w	sl, #3
 800e68a:	e786      	b.n	800e59a <_scanf_float+0x192>
 800e68c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800e690:	4639      	mov	r1, r7
 800e692:	4640      	mov	r0, r8
 800e694:	4798      	blx	r3
 800e696:	2800      	cmp	r0, #0
 800e698:	f43f aedb 	beq.w	800e452 <_scanf_float+0x4a>
 800e69c:	e6e6      	b.n	800e46c <_scanf_float+0x64>
 800e69e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e6a2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800e6a6:	463a      	mov	r2, r7
 800e6a8:	4640      	mov	r0, r8
 800e6aa:	4798      	blx	r3
 800e6ac:	6923      	ldr	r3, [r4, #16]
 800e6ae:	3b01      	subs	r3, #1
 800e6b0:	6123      	str	r3, [r4, #16]
 800e6b2:	e6e8      	b.n	800e486 <_scanf_float+0x7e>
 800e6b4:	1e6b      	subs	r3, r5, #1
 800e6b6:	2b06      	cmp	r3, #6
 800e6b8:	d824      	bhi.n	800e704 <_scanf_float+0x2fc>
 800e6ba:	2d02      	cmp	r5, #2
 800e6bc:	d836      	bhi.n	800e72c <_scanf_float+0x324>
 800e6be:	9b01      	ldr	r3, [sp, #4]
 800e6c0:	429e      	cmp	r6, r3
 800e6c2:	f67f aee4 	bls.w	800e48e <_scanf_float+0x86>
 800e6c6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e6ca:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800e6ce:	463a      	mov	r2, r7
 800e6d0:	4640      	mov	r0, r8
 800e6d2:	4798      	blx	r3
 800e6d4:	6923      	ldr	r3, [r4, #16]
 800e6d6:	3b01      	subs	r3, #1
 800e6d8:	6123      	str	r3, [r4, #16]
 800e6da:	e7f0      	b.n	800e6be <_scanf_float+0x2b6>
 800e6dc:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e6e0:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800e6e4:	463a      	mov	r2, r7
 800e6e6:	4640      	mov	r0, r8
 800e6e8:	4798      	blx	r3
 800e6ea:	6923      	ldr	r3, [r4, #16]
 800e6ec:	3b01      	subs	r3, #1
 800e6ee:	6123      	str	r3, [r4, #16]
 800e6f0:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e6f4:	fa5f fa8a 	uxtb.w	sl, sl
 800e6f8:	f1ba 0f02 	cmp.w	sl, #2
 800e6fc:	d1ee      	bne.n	800e6dc <_scanf_float+0x2d4>
 800e6fe:	3d03      	subs	r5, #3
 800e700:	b2ed      	uxtb	r5, r5
 800e702:	1b76      	subs	r6, r6, r5
 800e704:	6823      	ldr	r3, [r4, #0]
 800e706:	05da      	lsls	r2, r3, #23
 800e708:	d530      	bpl.n	800e76c <_scanf_float+0x364>
 800e70a:	055b      	lsls	r3, r3, #21
 800e70c:	d511      	bpl.n	800e732 <_scanf_float+0x32a>
 800e70e:	9b01      	ldr	r3, [sp, #4]
 800e710:	429e      	cmp	r6, r3
 800e712:	f67f aebc 	bls.w	800e48e <_scanf_float+0x86>
 800e716:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e71a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800e71e:	463a      	mov	r2, r7
 800e720:	4640      	mov	r0, r8
 800e722:	4798      	blx	r3
 800e724:	6923      	ldr	r3, [r4, #16]
 800e726:	3b01      	subs	r3, #1
 800e728:	6123      	str	r3, [r4, #16]
 800e72a:	e7f0      	b.n	800e70e <_scanf_float+0x306>
 800e72c:	46aa      	mov	sl, r5
 800e72e:	46b3      	mov	fp, r6
 800e730:	e7de      	b.n	800e6f0 <_scanf_float+0x2e8>
 800e732:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800e736:	6923      	ldr	r3, [r4, #16]
 800e738:	2965      	cmp	r1, #101	@ 0x65
 800e73a:	f103 33ff 	add.w	r3, r3, #4294967295
 800e73e:	f106 35ff 	add.w	r5, r6, #4294967295
 800e742:	6123      	str	r3, [r4, #16]
 800e744:	d00c      	beq.n	800e760 <_scanf_float+0x358>
 800e746:	2945      	cmp	r1, #69	@ 0x45
 800e748:	d00a      	beq.n	800e760 <_scanf_float+0x358>
 800e74a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e74e:	463a      	mov	r2, r7
 800e750:	4640      	mov	r0, r8
 800e752:	4798      	blx	r3
 800e754:	6923      	ldr	r3, [r4, #16]
 800e756:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800e75a:	3b01      	subs	r3, #1
 800e75c:	1eb5      	subs	r5, r6, #2
 800e75e:	6123      	str	r3, [r4, #16]
 800e760:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e764:	463a      	mov	r2, r7
 800e766:	4640      	mov	r0, r8
 800e768:	4798      	blx	r3
 800e76a:	462e      	mov	r6, r5
 800e76c:	6822      	ldr	r2, [r4, #0]
 800e76e:	f012 0210 	ands.w	r2, r2, #16
 800e772:	d001      	beq.n	800e778 <_scanf_float+0x370>
 800e774:	2000      	movs	r0, #0
 800e776:	e68b      	b.n	800e490 <_scanf_float+0x88>
 800e778:	7032      	strb	r2, [r6, #0]
 800e77a:	6823      	ldr	r3, [r4, #0]
 800e77c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800e780:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e784:	d11a      	bne.n	800e7bc <_scanf_float+0x3b4>
 800e786:	9b02      	ldr	r3, [sp, #8]
 800e788:	454b      	cmp	r3, r9
 800e78a:	eba3 0209 	sub.w	r2, r3, r9
 800e78e:	d121      	bne.n	800e7d4 <_scanf_float+0x3cc>
 800e790:	9901      	ldr	r1, [sp, #4]
 800e792:	2200      	movs	r2, #0
 800e794:	4640      	mov	r0, r8
 800e796:	f002 fb2d 	bl	8010df4 <_strtod_r>
 800e79a:	9b03      	ldr	r3, [sp, #12]
 800e79c:	6821      	ldr	r1, [r4, #0]
 800e79e:	681b      	ldr	r3, [r3, #0]
 800e7a0:	f011 0f02 	tst.w	r1, #2
 800e7a4:	f103 0204 	add.w	r2, r3, #4
 800e7a8:	d01f      	beq.n	800e7ea <_scanf_float+0x3e2>
 800e7aa:	9903      	ldr	r1, [sp, #12]
 800e7ac:	600a      	str	r2, [r1, #0]
 800e7ae:	681b      	ldr	r3, [r3, #0]
 800e7b0:	ed83 0b00 	vstr	d0, [r3]
 800e7b4:	68e3      	ldr	r3, [r4, #12]
 800e7b6:	3301      	adds	r3, #1
 800e7b8:	60e3      	str	r3, [r4, #12]
 800e7ba:	e7db      	b.n	800e774 <_scanf_float+0x36c>
 800e7bc:	9b04      	ldr	r3, [sp, #16]
 800e7be:	2b00      	cmp	r3, #0
 800e7c0:	d0e6      	beq.n	800e790 <_scanf_float+0x388>
 800e7c2:	9905      	ldr	r1, [sp, #20]
 800e7c4:	230a      	movs	r3, #10
 800e7c6:	3101      	adds	r1, #1
 800e7c8:	4640      	mov	r0, r8
 800e7ca:	f002 fb93 	bl	8010ef4 <_strtol_r>
 800e7ce:	9b04      	ldr	r3, [sp, #16]
 800e7d0:	9e05      	ldr	r6, [sp, #20]
 800e7d2:	1ac2      	subs	r2, r0, r3
 800e7d4:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800e7d8:	429e      	cmp	r6, r3
 800e7da:	bf28      	it	cs
 800e7dc:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800e7e0:	490d      	ldr	r1, [pc, #52]	@ (800e818 <_scanf_float+0x410>)
 800e7e2:	4630      	mov	r0, r6
 800e7e4:	f000 f8de 	bl	800e9a4 <siprintf>
 800e7e8:	e7d2      	b.n	800e790 <_scanf_float+0x388>
 800e7ea:	f011 0f04 	tst.w	r1, #4
 800e7ee:	9903      	ldr	r1, [sp, #12]
 800e7f0:	600a      	str	r2, [r1, #0]
 800e7f2:	d1dc      	bne.n	800e7ae <_scanf_float+0x3a6>
 800e7f4:	eeb4 0b40 	vcmp.f64	d0, d0
 800e7f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e7fc:	681d      	ldr	r5, [r3, #0]
 800e7fe:	d705      	bvc.n	800e80c <_scanf_float+0x404>
 800e800:	4806      	ldr	r0, [pc, #24]	@ (800e81c <_scanf_float+0x414>)
 800e802:	f000 f9b3 	bl	800eb6c <nanf>
 800e806:	ed85 0a00 	vstr	s0, [r5]
 800e80a:	e7d3      	b.n	800e7b4 <_scanf_float+0x3ac>
 800e80c:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800e810:	e7f9      	b.n	800e806 <_scanf_float+0x3fe>
 800e812:	f04f 0900 	mov.w	r9, #0
 800e816:	e630      	b.n	800e47a <_scanf_float+0x72>
 800e818:	08012724 	.word	0x08012724
 800e81c:	08012abd 	.word	0x08012abd

0800e820 <std>:
 800e820:	2300      	movs	r3, #0
 800e822:	b510      	push	{r4, lr}
 800e824:	4604      	mov	r4, r0
 800e826:	e9c0 3300 	strd	r3, r3, [r0]
 800e82a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e82e:	6083      	str	r3, [r0, #8]
 800e830:	8181      	strh	r1, [r0, #12]
 800e832:	6643      	str	r3, [r0, #100]	@ 0x64
 800e834:	81c2      	strh	r2, [r0, #14]
 800e836:	6183      	str	r3, [r0, #24]
 800e838:	4619      	mov	r1, r3
 800e83a:	2208      	movs	r2, #8
 800e83c:	305c      	adds	r0, #92	@ 0x5c
 800e83e:	f000 f914 	bl	800ea6a <memset>
 800e842:	4b0d      	ldr	r3, [pc, #52]	@ (800e878 <std+0x58>)
 800e844:	6263      	str	r3, [r4, #36]	@ 0x24
 800e846:	4b0d      	ldr	r3, [pc, #52]	@ (800e87c <std+0x5c>)
 800e848:	62a3      	str	r3, [r4, #40]	@ 0x28
 800e84a:	4b0d      	ldr	r3, [pc, #52]	@ (800e880 <std+0x60>)
 800e84c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800e84e:	4b0d      	ldr	r3, [pc, #52]	@ (800e884 <std+0x64>)
 800e850:	6323      	str	r3, [r4, #48]	@ 0x30
 800e852:	4b0d      	ldr	r3, [pc, #52]	@ (800e888 <std+0x68>)
 800e854:	6224      	str	r4, [r4, #32]
 800e856:	429c      	cmp	r4, r3
 800e858:	d006      	beq.n	800e868 <std+0x48>
 800e85a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800e85e:	4294      	cmp	r4, r2
 800e860:	d002      	beq.n	800e868 <std+0x48>
 800e862:	33d0      	adds	r3, #208	@ 0xd0
 800e864:	429c      	cmp	r4, r3
 800e866:	d105      	bne.n	800e874 <std+0x54>
 800e868:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800e86c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e870:	f000 b978 	b.w	800eb64 <__retarget_lock_init_recursive>
 800e874:	bd10      	pop	{r4, pc}
 800e876:	bf00      	nop
 800e878:	0800e9e5 	.word	0x0800e9e5
 800e87c:	0800ea07 	.word	0x0800ea07
 800e880:	0800ea3f 	.word	0x0800ea3f
 800e884:	0800ea63 	.word	0x0800ea63
 800e888:	24000434 	.word	0x24000434

0800e88c <stdio_exit_handler>:
 800e88c:	4a02      	ldr	r2, [pc, #8]	@ (800e898 <stdio_exit_handler+0xc>)
 800e88e:	4903      	ldr	r1, [pc, #12]	@ (800e89c <stdio_exit_handler+0x10>)
 800e890:	4803      	ldr	r0, [pc, #12]	@ (800e8a0 <stdio_exit_handler+0x14>)
 800e892:	f000 b869 	b.w	800e968 <_fwalk_sglue>
 800e896:	bf00      	nop
 800e898:	24000010 	.word	0x24000010
 800e89c:	080112b1 	.word	0x080112b1
 800e8a0:	24000020 	.word	0x24000020

0800e8a4 <cleanup_stdio>:
 800e8a4:	6841      	ldr	r1, [r0, #4]
 800e8a6:	4b0c      	ldr	r3, [pc, #48]	@ (800e8d8 <cleanup_stdio+0x34>)
 800e8a8:	4299      	cmp	r1, r3
 800e8aa:	b510      	push	{r4, lr}
 800e8ac:	4604      	mov	r4, r0
 800e8ae:	d001      	beq.n	800e8b4 <cleanup_stdio+0x10>
 800e8b0:	f002 fcfe 	bl	80112b0 <_fflush_r>
 800e8b4:	68a1      	ldr	r1, [r4, #8]
 800e8b6:	4b09      	ldr	r3, [pc, #36]	@ (800e8dc <cleanup_stdio+0x38>)
 800e8b8:	4299      	cmp	r1, r3
 800e8ba:	d002      	beq.n	800e8c2 <cleanup_stdio+0x1e>
 800e8bc:	4620      	mov	r0, r4
 800e8be:	f002 fcf7 	bl	80112b0 <_fflush_r>
 800e8c2:	68e1      	ldr	r1, [r4, #12]
 800e8c4:	4b06      	ldr	r3, [pc, #24]	@ (800e8e0 <cleanup_stdio+0x3c>)
 800e8c6:	4299      	cmp	r1, r3
 800e8c8:	d004      	beq.n	800e8d4 <cleanup_stdio+0x30>
 800e8ca:	4620      	mov	r0, r4
 800e8cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e8d0:	f002 bcee 	b.w	80112b0 <_fflush_r>
 800e8d4:	bd10      	pop	{r4, pc}
 800e8d6:	bf00      	nop
 800e8d8:	24000434 	.word	0x24000434
 800e8dc:	2400049c 	.word	0x2400049c
 800e8e0:	24000504 	.word	0x24000504

0800e8e4 <global_stdio_init.part.0>:
 800e8e4:	b510      	push	{r4, lr}
 800e8e6:	4b0b      	ldr	r3, [pc, #44]	@ (800e914 <global_stdio_init.part.0+0x30>)
 800e8e8:	4c0b      	ldr	r4, [pc, #44]	@ (800e918 <global_stdio_init.part.0+0x34>)
 800e8ea:	4a0c      	ldr	r2, [pc, #48]	@ (800e91c <global_stdio_init.part.0+0x38>)
 800e8ec:	601a      	str	r2, [r3, #0]
 800e8ee:	4620      	mov	r0, r4
 800e8f0:	2200      	movs	r2, #0
 800e8f2:	2104      	movs	r1, #4
 800e8f4:	f7ff ff94 	bl	800e820 <std>
 800e8f8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800e8fc:	2201      	movs	r2, #1
 800e8fe:	2109      	movs	r1, #9
 800e900:	f7ff ff8e 	bl	800e820 <std>
 800e904:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800e908:	2202      	movs	r2, #2
 800e90a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e90e:	2112      	movs	r1, #18
 800e910:	f7ff bf86 	b.w	800e820 <std>
 800e914:	2400056c 	.word	0x2400056c
 800e918:	24000434 	.word	0x24000434
 800e91c:	0800e88d 	.word	0x0800e88d

0800e920 <__sfp_lock_acquire>:
 800e920:	4801      	ldr	r0, [pc, #4]	@ (800e928 <__sfp_lock_acquire+0x8>)
 800e922:	f000 b920 	b.w	800eb66 <__retarget_lock_acquire_recursive>
 800e926:	bf00      	nop
 800e928:	24000575 	.word	0x24000575

0800e92c <__sfp_lock_release>:
 800e92c:	4801      	ldr	r0, [pc, #4]	@ (800e934 <__sfp_lock_release+0x8>)
 800e92e:	f000 b91b 	b.w	800eb68 <__retarget_lock_release_recursive>
 800e932:	bf00      	nop
 800e934:	24000575 	.word	0x24000575

0800e938 <__sinit>:
 800e938:	b510      	push	{r4, lr}
 800e93a:	4604      	mov	r4, r0
 800e93c:	f7ff fff0 	bl	800e920 <__sfp_lock_acquire>
 800e940:	6a23      	ldr	r3, [r4, #32]
 800e942:	b11b      	cbz	r3, 800e94c <__sinit+0x14>
 800e944:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e948:	f7ff bff0 	b.w	800e92c <__sfp_lock_release>
 800e94c:	4b04      	ldr	r3, [pc, #16]	@ (800e960 <__sinit+0x28>)
 800e94e:	6223      	str	r3, [r4, #32]
 800e950:	4b04      	ldr	r3, [pc, #16]	@ (800e964 <__sinit+0x2c>)
 800e952:	681b      	ldr	r3, [r3, #0]
 800e954:	2b00      	cmp	r3, #0
 800e956:	d1f5      	bne.n	800e944 <__sinit+0xc>
 800e958:	f7ff ffc4 	bl	800e8e4 <global_stdio_init.part.0>
 800e95c:	e7f2      	b.n	800e944 <__sinit+0xc>
 800e95e:	bf00      	nop
 800e960:	0800e8a5 	.word	0x0800e8a5
 800e964:	2400056c 	.word	0x2400056c

0800e968 <_fwalk_sglue>:
 800e968:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e96c:	4607      	mov	r7, r0
 800e96e:	4688      	mov	r8, r1
 800e970:	4614      	mov	r4, r2
 800e972:	2600      	movs	r6, #0
 800e974:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e978:	f1b9 0901 	subs.w	r9, r9, #1
 800e97c:	d505      	bpl.n	800e98a <_fwalk_sglue+0x22>
 800e97e:	6824      	ldr	r4, [r4, #0]
 800e980:	2c00      	cmp	r4, #0
 800e982:	d1f7      	bne.n	800e974 <_fwalk_sglue+0xc>
 800e984:	4630      	mov	r0, r6
 800e986:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e98a:	89ab      	ldrh	r3, [r5, #12]
 800e98c:	2b01      	cmp	r3, #1
 800e98e:	d907      	bls.n	800e9a0 <_fwalk_sglue+0x38>
 800e990:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e994:	3301      	adds	r3, #1
 800e996:	d003      	beq.n	800e9a0 <_fwalk_sglue+0x38>
 800e998:	4629      	mov	r1, r5
 800e99a:	4638      	mov	r0, r7
 800e99c:	47c0      	blx	r8
 800e99e:	4306      	orrs	r6, r0
 800e9a0:	3568      	adds	r5, #104	@ 0x68
 800e9a2:	e7e9      	b.n	800e978 <_fwalk_sglue+0x10>

0800e9a4 <siprintf>:
 800e9a4:	b40e      	push	{r1, r2, r3}
 800e9a6:	b500      	push	{lr}
 800e9a8:	b09c      	sub	sp, #112	@ 0x70
 800e9aa:	ab1d      	add	r3, sp, #116	@ 0x74
 800e9ac:	9002      	str	r0, [sp, #8]
 800e9ae:	9006      	str	r0, [sp, #24]
 800e9b0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800e9b4:	4809      	ldr	r0, [pc, #36]	@ (800e9dc <siprintf+0x38>)
 800e9b6:	9107      	str	r1, [sp, #28]
 800e9b8:	9104      	str	r1, [sp, #16]
 800e9ba:	4909      	ldr	r1, [pc, #36]	@ (800e9e0 <siprintf+0x3c>)
 800e9bc:	f853 2b04 	ldr.w	r2, [r3], #4
 800e9c0:	9105      	str	r1, [sp, #20]
 800e9c2:	6800      	ldr	r0, [r0, #0]
 800e9c4:	9301      	str	r3, [sp, #4]
 800e9c6:	a902      	add	r1, sp, #8
 800e9c8:	f002 faf2 	bl	8010fb0 <_svfiprintf_r>
 800e9cc:	9b02      	ldr	r3, [sp, #8]
 800e9ce:	2200      	movs	r2, #0
 800e9d0:	701a      	strb	r2, [r3, #0]
 800e9d2:	b01c      	add	sp, #112	@ 0x70
 800e9d4:	f85d eb04 	ldr.w	lr, [sp], #4
 800e9d8:	b003      	add	sp, #12
 800e9da:	4770      	bx	lr
 800e9dc:	2400001c 	.word	0x2400001c
 800e9e0:	ffff0208 	.word	0xffff0208

0800e9e4 <__sread>:
 800e9e4:	b510      	push	{r4, lr}
 800e9e6:	460c      	mov	r4, r1
 800e9e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e9ec:	f000 f86c 	bl	800eac8 <_read_r>
 800e9f0:	2800      	cmp	r0, #0
 800e9f2:	bfab      	itete	ge
 800e9f4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800e9f6:	89a3      	ldrhlt	r3, [r4, #12]
 800e9f8:	181b      	addge	r3, r3, r0
 800e9fa:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800e9fe:	bfac      	ite	ge
 800ea00:	6563      	strge	r3, [r4, #84]	@ 0x54
 800ea02:	81a3      	strhlt	r3, [r4, #12]
 800ea04:	bd10      	pop	{r4, pc}

0800ea06 <__swrite>:
 800ea06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ea0a:	461f      	mov	r7, r3
 800ea0c:	898b      	ldrh	r3, [r1, #12]
 800ea0e:	05db      	lsls	r3, r3, #23
 800ea10:	4605      	mov	r5, r0
 800ea12:	460c      	mov	r4, r1
 800ea14:	4616      	mov	r6, r2
 800ea16:	d505      	bpl.n	800ea24 <__swrite+0x1e>
 800ea18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ea1c:	2302      	movs	r3, #2
 800ea1e:	2200      	movs	r2, #0
 800ea20:	f000 f840 	bl	800eaa4 <_lseek_r>
 800ea24:	89a3      	ldrh	r3, [r4, #12]
 800ea26:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ea2a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ea2e:	81a3      	strh	r3, [r4, #12]
 800ea30:	4632      	mov	r2, r6
 800ea32:	463b      	mov	r3, r7
 800ea34:	4628      	mov	r0, r5
 800ea36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ea3a:	f000 b857 	b.w	800eaec <_write_r>

0800ea3e <__sseek>:
 800ea3e:	b510      	push	{r4, lr}
 800ea40:	460c      	mov	r4, r1
 800ea42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ea46:	f000 f82d 	bl	800eaa4 <_lseek_r>
 800ea4a:	1c43      	adds	r3, r0, #1
 800ea4c:	89a3      	ldrh	r3, [r4, #12]
 800ea4e:	bf15      	itete	ne
 800ea50:	6560      	strne	r0, [r4, #84]	@ 0x54
 800ea52:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800ea56:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800ea5a:	81a3      	strheq	r3, [r4, #12]
 800ea5c:	bf18      	it	ne
 800ea5e:	81a3      	strhne	r3, [r4, #12]
 800ea60:	bd10      	pop	{r4, pc}

0800ea62 <__sclose>:
 800ea62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ea66:	f000 b80d 	b.w	800ea84 <_close_r>

0800ea6a <memset>:
 800ea6a:	4402      	add	r2, r0
 800ea6c:	4603      	mov	r3, r0
 800ea6e:	4293      	cmp	r3, r2
 800ea70:	d100      	bne.n	800ea74 <memset+0xa>
 800ea72:	4770      	bx	lr
 800ea74:	f803 1b01 	strb.w	r1, [r3], #1
 800ea78:	e7f9      	b.n	800ea6e <memset+0x4>
	...

0800ea7c <_localeconv_r>:
 800ea7c:	4800      	ldr	r0, [pc, #0]	@ (800ea80 <_localeconv_r+0x4>)
 800ea7e:	4770      	bx	lr
 800ea80:	2400015c 	.word	0x2400015c

0800ea84 <_close_r>:
 800ea84:	b538      	push	{r3, r4, r5, lr}
 800ea86:	4d06      	ldr	r5, [pc, #24]	@ (800eaa0 <_close_r+0x1c>)
 800ea88:	2300      	movs	r3, #0
 800ea8a:	4604      	mov	r4, r0
 800ea8c:	4608      	mov	r0, r1
 800ea8e:	602b      	str	r3, [r5, #0]
 800ea90:	f7f2 fe88 	bl	80017a4 <_close>
 800ea94:	1c43      	adds	r3, r0, #1
 800ea96:	d102      	bne.n	800ea9e <_close_r+0x1a>
 800ea98:	682b      	ldr	r3, [r5, #0]
 800ea9a:	b103      	cbz	r3, 800ea9e <_close_r+0x1a>
 800ea9c:	6023      	str	r3, [r4, #0]
 800ea9e:	bd38      	pop	{r3, r4, r5, pc}
 800eaa0:	24000570 	.word	0x24000570

0800eaa4 <_lseek_r>:
 800eaa4:	b538      	push	{r3, r4, r5, lr}
 800eaa6:	4d07      	ldr	r5, [pc, #28]	@ (800eac4 <_lseek_r+0x20>)
 800eaa8:	4604      	mov	r4, r0
 800eaaa:	4608      	mov	r0, r1
 800eaac:	4611      	mov	r1, r2
 800eaae:	2200      	movs	r2, #0
 800eab0:	602a      	str	r2, [r5, #0]
 800eab2:	461a      	mov	r2, r3
 800eab4:	f7f2 fe9d 	bl	80017f2 <_lseek>
 800eab8:	1c43      	adds	r3, r0, #1
 800eaba:	d102      	bne.n	800eac2 <_lseek_r+0x1e>
 800eabc:	682b      	ldr	r3, [r5, #0]
 800eabe:	b103      	cbz	r3, 800eac2 <_lseek_r+0x1e>
 800eac0:	6023      	str	r3, [r4, #0]
 800eac2:	bd38      	pop	{r3, r4, r5, pc}
 800eac4:	24000570 	.word	0x24000570

0800eac8 <_read_r>:
 800eac8:	b538      	push	{r3, r4, r5, lr}
 800eaca:	4d07      	ldr	r5, [pc, #28]	@ (800eae8 <_read_r+0x20>)
 800eacc:	4604      	mov	r4, r0
 800eace:	4608      	mov	r0, r1
 800ead0:	4611      	mov	r1, r2
 800ead2:	2200      	movs	r2, #0
 800ead4:	602a      	str	r2, [r5, #0]
 800ead6:	461a      	mov	r2, r3
 800ead8:	f7f2 fe2b 	bl	8001732 <_read>
 800eadc:	1c43      	adds	r3, r0, #1
 800eade:	d102      	bne.n	800eae6 <_read_r+0x1e>
 800eae0:	682b      	ldr	r3, [r5, #0]
 800eae2:	b103      	cbz	r3, 800eae6 <_read_r+0x1e>
 800eae4:	6023      	str	r3, [r4, #0]
 800eae6:	bd38      	pop	{r3, r4, r5, pc}
 800eae8:	24000570 	.word	0x24000570

0800eaec <_write_r>:
 800eaec:	b538      	push	{r3, r4, r5, lr}
 800eaee:	4d07      	ldr	r5, [pc, #28]	@ (800eb0c <_write_r+0x20>)
 800eaf0:	4604      	mov	r4, r0
 800eaf2:	4608      	mov	r0, r1
 800eaf4:	4611      	mov	r1, r2
 800eaf6:	2200      	movs	r2, #0
 800eaf8:	602a      	str	r2, [r5, #0]
 800eafa:	461a      	mov	r2, r3
 800eafc:	f7f2 fe36 	bl	800176c <_write>
 800eb00:	1c43      	adds	r3, r0, #1
 800eb02:	d102      	bne.n	800eb0a <_write_r+0x1e>
 800eb04:	682b      	ldr	r3, [r5, #0]
 800eb06:	b103      	cbz	r3, 800eb0a <_write_r+0x1e>
 800eb08:	6023      	str	r3, [r4, #0]
 800eb0a:	bd38      	pop	{r3, r4, r5, pc}
 800eb0c:	24000570 	.word	0x24000570

0800eb10 <__errno>:
 800eb10:	4b01      	ldr	r3, [pc, #4]	@ (800eb18 <__errno+0x8>)
 800eb12:	6818      	ldr	r0, [r3, #0]
 800eb14:	4770      	bx	lr
 800eb16:	bf00      	nop
 800eb18:	2400001c 	.word	0x2400001c

0800eb1c <__libc_init_array>:
 800eb1c:	b570      	push	{r4, r5, r6, lr}
 800eb1e:	4d0d      	ldr	r5, [pc, #52]	@ (800eb54 <__libc_init_array+0x38>)
 800eb20:	4c0d      	ldr	r4, [pc, #52]	@ (800eb58 <__libc_init_array+0x3c>)
 800eb22:	1b64      	subs	r4, r4, r5
 800eb24:	10a4      	asrs	r4, r4, #2
 800eb26:	2600      	movs	r6, #0
 800eb28:	42a6      	cmp	r6, r4
 800eb2a:	d109      	bne.n	800eb40 <__libc_init_array+0x24>
 800eb2c:	4d0b      	ldr	r5, [pc, #44]	@ (800eb5c <__libc_init_array+0x40>)
 800eb2e:	4c0c      	ldr	r4, [pc, #48]	@ (800eb60 <__libc_init_array+0x44>)
 800eb30:	f003 fdaa 	bl	8012688 <_init>
 800eb34:	1b64      	subs	r4, r4, r5
 800eb36:	10a4      	asrs	r4, r4, #2
 800eb38:	2600      	movs	r6, #0
 800eb3a:	42a6      	cmp	r6, r4
 800eb3c:	d105      	bne.n	800eb4a <__libc_init_array+0x2e>
 800eb3e:	bd70      	pop	{r4, r5, r6, pc}
 800eb40:	f855 3b04 	ldr.w	r3, [r5], #4
 800eb44:	4798      	blx	r3
 800eb46:	3601      	adds	r6, #1
 800eb48:	e7ee      	b.n	800eb28 <__libc_init_array+0xc>
 800eb4a:	f855 3b04 	ldr.w	r3, [r5], #4
 800eb4e:	4798      	blx	r3
 800eb50:	3601      	adds	r6, #1
 800eb52:	e7f2      	b.n	800eb3a <__libc_init_array+0x1e>
 800eb54:	080143e0 	.word	0x080143e0
 800eb58:	080143e0 	.word	0x080143e0
 800eb5c:	080143e0 	.word	0x080143e0
 800eb60:	080143e4 	.word	0x080143e4

0800eb64 <__retarget_lock_init_recursive>:
 800eb64:	4770      	bx	lr

0800eb66 <__retarget_lock_acquire_recursive>:
 800eb66:	4770      	bx	lr

0800eb68 <__retarget_lock_release_recursive>:
 800eb68:	4770      	bx	lr
	...

0800eb6c <nanf>:
 800eb6c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800eb74 <nanf+0x8>
 800eb70:	4770      	bx	lr
 800eb72:	bf00      	nop
 800eb74:	7fc00000 	.word	0x7fc00000

0800eb78 <quorem>:
 800eb78:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb7c:	6903      	ldr	r3, [r0, #16]
 800eb7e:	690c      	ldr	r4, [r1, #16]
 800eb80:	42a3      	cmp	r3, r4
 800eb82:	4607      	mov	r7, r0
 800eb84:	db7e      	blt.n	800ec84 <quorem+0x10c>
 800eb86:	3c01      	subs	r4, #1
 800eb88:	f101 0814 	add.w	r8, r1, #20
 800eb8c:	00a3      	lsls	r3, r4, #2
 800eb8e:	f100 0514 	add.w	r5, r0, #20
 800eb92:	9300      	str	r3, [sp, #0]
 800eb94:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800eb98:	9301      	str	r3, [sp, #4]
 800eb9a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800eb9e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800eba2:	3301      	adds	r3, #1
 800eba4:	429a      	cmp	r2, r3
 800eba6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ebaa:	fbb2 f6f3 	udiv	r6, r2, r3
 800ebae:	d32e      	bcc.n	800ec0e <quorem+0x96>
 800ebb0:	f04f 0a00 	mov.w	sl, #0
 800ebb4:	46c4      	mov	ip, r8
 800ebb6:	46ae      	mov	lr, r5
 800ebb8:	46d3      	mov	fp, sl
 800ebba:	f85c 3b04 	ldr.w	r3, [ip], #4
 800ebbe:	b298      	uxth	r0, r3
 800ebc0:	fb06 a000 	mla	r0, r6, r0, sl
 800ebc4:	0c02      	lsrs	r2, r0, #16
 800ebc6:	0c1b      	lsrs	r3, r3, #16
 800ebc8:	fb06 2303 	mla	r3, r6, r3, r2
 800ebcc:	f8de 2000 	ldr.w	r2, [lr]
 800ebd0:	b280      	uxth	r0, r0
 800ebd2:	b292      	uxth	r2, r2
 800ebd4:	1a12      	subs	r2, r2, r0
 800ebd6:	445a      	add	r2, fp
 800ebd8:	f8de 0000 	ldr.w	r0, [lr]
 800ebdc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ebe0:	b29b      	uxth	r3, r3
 800ebe2:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800ebe6:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800ebea:	b292      	uxth	r2, r2
 800ebec:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800ebf0:	45e1      	cmp	r9, ip
 800ebf2:	f84e 2b04 	str.w	r2, [lr], #4
 800ebf6:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800ebfa:	d2de      	bcs.n	800ebba <quorem+0x42>
 800ebfc:	9b00      	ldr	r3, [sp, #0]
 800ebfe:	58eb      	ldr	r3, [r5, r3]
 800ec00:	b92b      	cbnz	r3, 800ec0e <quorem+0x96>
 800ec02:	9b01      	ldr	r3, [sp, #4]
 800ec04:	3b04      	subs	r3, #4
 800ec06:	429d      	cmp	r5, r3
 800ec08:	461a      	mov	r2, r3
 800ec0a:	d32f      	bcc.n	800ec6c <quorem+0xf4>
 800ec0c:	613c      	str	r4, [r7, #16]
 800ec0e:	4638      	mov	r0, r7
 800ec10:	f001 f954 	bl	800febc <__mcmp>
 800ec14:	2800      	cmp	r0, #0
 800ec16:	db25      	blt.n	800ec64 <quorem+0xec>
 800ec18:	4629      	mov	r1, r5
 800ec1a:	2000      	movs	r0, #0
 800ec1c:	f858 2b04 	ldr.w	r2, [r8], #4
 800ec20:	f8d1 c000 	ldr.w	ip, [r1]
 800ec24:	fa1f fe82 	uxth.w	lr, r2
 800ec28:	fa1f f38c 	uxth.w	r3, ip
 800ec2c:	eba3 030e 	sub.w	r3, r3, lr
 800ec30:	4403      	add	r3, r0
 800ec32:	0c12      	lsrs	r2, r2, #16
 800ec34:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800ec38:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800ec3c:	b29b      	uxth	r3, r3
 800ec3e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ec42:	45c1      	cmp	r9, r8
 800ec44:	f841 3b04 	str.w	r3, [r1], #4
 800ec48:	ea4f 4022 	mov.w	r0, r2, asr #16
 800ec4c:	d2e6      	bcs.n	800ec1c <quorem+0xa4>
 800ec4e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ec52:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ec56:	b922      	cbnz	r2, 800ec62 <quorem+0xea>
 800ec58:	3b04      	subs	r3, #4
 800ec5a:	429d      	cmp	r5, r3
 800ec5c:	461a      	mov	r2, r3
 800ec5e:	d30b      	bcc.n	800ec78 <quorem+0x100>
 800ec60:	613c      	str	r4, [r7, #16]
 800ec62:	3601      	adds	r6, #1
 800ec64:	4630      	mov	r0, r6
 800ec66:	b003      	add	sp, #12
 800ec68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec6c:	6812      	ldr	r2, [r2, #0]
 800ec6e:	3b04      	subs	r3, #4
 800ec70:	2a00      	cmp	r2, #0
 800ec72:	d1cb      	bne.n	800ec0c <quorem+0x94>
 800ec74:	3c01      	subs	r4, #1
 800ec76:	e7c6      	b.n	800ec06 <quorem+0x8e>
 800ec78:	6812      	ldr	r2, [r2, #0]
 800ec7a:	3b04      	subs	r3, #4
 800ec7c:	2a00      	cmp	r2, #0
 800ec7e:	d1ef      	bne.n	800ec60 <quorem+0xe8>
 800ec80:	3c01      	subs	r4, #1
 800ec82:	e7ea      	b.n	800ec5a <quorem+0xe2>
 800ec84:	2000      	movs	r0, #0
 800ec86:	e7ee      	b.n	800ec66 <quorem+0xee>

0800ec88 <_dtoa_r>:
 800ec88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec8c:	ed2d 8b02 	vpush	{d8}
 800ec90:	69c7      	ldr	r7, [r0, #28]
 800ec92:	b091      	sub	sp, #68	@ 0x44
 800ec94:	ed8d 0b02 	vstr	d0, [sp, #8]
 800ec98:	ec55 4b10 	vmov	r4, r5, d0
 800ec9c:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 800ec9e:	9107      	str	r1, [sp, #28]
 800eca0:	4681      	mov	r9, r0
 800eca2:	9209      	str	r2, [sp, #36]	@ 0x24
 800eca4:	930d      	str	r3, [sp, #52]	@ 0x34
 800eca6:	b97f      	cbnz	r7, 800ecc8 <_dtoa_r+0x40>
 800eca8:	2010      	movs	r0, #16
 800ecaa:	f000 fd8d 	bl	800f7c8 <malloc>
 800ecae:	4602      	mov	r2, r0
 800ecb0:	f8c9 001c 	str.w	r0, [r9, #28]
 800ecb4:	b920      	cbnz	r0, 800ecc0 <_dtoa_r+0x38>
 800ecb6:	4ba0      	ldr	r3, [pc, #640]	@ (800ef38 <_dtoa_r+0x2b0>)
 800ecb8:	21ef      	movs	r1, #239	@ 0xef
 800ecba:	48a0      	ldr	r0, [pc, #640]	@ (800ef3c <_dtoa_r+0x2b4>)
 800ecbc:	f002 fb74 	bl	80113a8 <__assert_func>
 800ecc0:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800ecc4:	6007      	str	r7, [r0, #0]
 800ecc6:	60c7      	str	r7, [r0, #12]
 800ecc8:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800eccc:	6819      	ldr	r1, [r3, #0]
 800ecce:	b159      	cbz	r1, 800ece8 <_dtoa_r+0x60>
 800ecd0:	685a      	ldr	r2, [r3, #4]
 800ecd2:	604a      	str	r2, [r1, #4]
 800ecd4:	2301      	movs	r3, #1
 800ecd6:	4093      	lsls	r3, r2
 800ecd8:	608b      	str	r3, [r1, #8]
 800ecda:	4648      	mov	r0, r9
 800ecdc:	f000 fe6a 	bl	800f9b4 <_Bfree>
 800ece0:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800ece4:	2200      	movs	r2, #0
 800ece6:	601a      	str	r2, [r3, #0]
 800ece8:	1e2b      	subs	r3, r5, #0
 800ecea:	bfbb      	ittet	lt
 800ecec:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800ecf0:	9303      	strlt	r3, [sp, #12]
 800ecf2:	2300      	movge	r3, #0
 800ecf4:	2201      	movlt	r2, #1
 800ecf6:	bfac      	ite	ge
 800ecf8:	6033      	strge	r3, [r6, #0]
 800ecfa:	6032      	strlt	r2, [r6, #0]
 800ecfc:	4b90      	ldr	r3, [pc, #576]	@ (800ef40 <_dtoa_r+0x2b8>)
 800ecfe:	9e03      	ldr	r6, [sp, #12]
 800ed00:	43b3      	bics	r3, r6
 800ed02:	d110      	bne.n	800ed26 <_dtoa_r+0x9e>
 800ed04:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800ed06:	f242 730f 	movw	r3, #9999	@ 0x270f
 800ed0a:	6013      	str	r3, [r2, #0]
 800ed0c:	f3c6 0313 	ubfx	r3, r6, #0, #20
 800ed10:	4323      	orrs	r3, r4
 800ed12:	f000 84de 	beq.w	800f6d2 <_dtoa_r+0xa4a>
 800ed16:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800ed18:	4f8a      	ldr	r7, [pc, #552]	@ (800ef44 <_dtoa_r+0x2bc>)
 800ed1a:	2b00      	cmp	r3, #0
 800ed1c:	f000 84e0 	beq.w	800f6e0 <_dtoa_r+0xa58>
 800ed20:	1cfb      	adds	r3, r7, #3
 800ed22:	f000 bcdb 	b.w	800f6dc <_dtoa_r+0xa54>
 800ed26:	ed9d 8b02 	vldr	d8, [sp, #8]
 800ed2a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800ed2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed32:	d10a      	bne.n	800ed4a <_dtoa_r+0xc2>
 800ed34:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800ed36:	2301      	movs	r3, #1
 800ed38:	6013      	str	r3, [r2, #0]
 800ed3a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800ed3c:	b113      	cbz	r3, 800ed44 <_dtoa_r+0xbc>
 800ed3e:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800ed40:	4b81      	ldr	r3, [pc, #516]	@ (800ef48 <_dtoa_r+0x2c0>)
 800ed42:	6013      	str	r3, [r2, #0]
 800ed44:	4f81      	ldr	r7, [pc, #516]	@ (800ef4c <_dtoa_r+0x2c4>)
 800ed46:	f000 bccb 	b.w	800f6e0 <_dtoa_r+0xa58>
 800ed4a:	aa0e      	add	r2, sp, #56	@ 0x38
 800ed4c:	a90f      	add	r1, sp, #60	@ 0x3c
 800ed4e:	4648      	mov	r0, r9
 800ed50:	eeb0 0b48 	vmov.f64	d0, d8
 800ed54:	f001 f9d2 	bl	80100fc <__d2b>
 800ed58:	f3c6 530a 	ubfx	r3, r6, #20, #11
 800ed5c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ed5e:	9001      	str	r0, [sp, #4]
 800ed60:	2b00      	cmp	r3, #0
 800ed62:	d045      	beq.n	800edf0 <_dtoa_r+0x168>
 800ed64:	eeb0 7b48 	vmov.f64	d7, d8
 800ed68:	ee18 1a90 	vmov	r1, s17
 800ed6c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800ed70:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 800ed74:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800ed78:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800ed7c:	2500      	movs	r5, #0
 800ed7e:	ee07 1a90 	vmov	s15, r1
 800ed82:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 800ed86:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800ef20 <_dtoa_r+0x298>
 800ed8a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800ed8e:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 800ef28 <_dtoa_r+0x2a0>
 800ed92:	eea7 6b05 	vfma.f64	d6, d7, d5
 800ed96:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800ef30 <_dtoa_r+0x2a8>
 800ed9a:	ee07 3a90 	vmov	s15, r3
 800ed9e:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800eda2:	eeb0 7b46 	vmov.f64	d7, d6
 800eda6:	eea4 7b05 	vfma.f64	d7, d4, d5
 800edaa:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800edae:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800edb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800edb6:	ee16 8a90 	vmov	r8, s13
 800edba:	d508      	bpl.n	800edce <_dtoa_r+0x146>
 800edbc:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800edc0:	eeb4 6b47 	vcmp.f64	d6, d7
 800edc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800edc8:	bf18      	it	ne
 800edca:	f108 38ff 	addne.w	r8, r8, #4294967295
 800edce:	f1b8 0f16 	cmp.w	r8, #22
 800edd2:	d82b      	bhi.n	800ee2c <_dtoa_r+0x1a4>
 800edd4:	495e      	ldr	r1, [pc, #376]	@ (800ef50 <_dtoa_r+0x2c8>)
 800edd6:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 800edda:	ed91 7b00 	vldr	d7, [r1]
 800edde:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800ede2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ede6:	d501      	bpl.n	800edec <_dtoa_r+0x164>
 800ede8:	f108 38ff 	add.w	r8, r8, #4294967295
 800edec:	2100      	movs	r1, #0
 800edee:	e01e      	b.n	800ee2e <_dtoa_r+0x1a6>
 800edf0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800edf2:	4413      	add	r3, r2
 800edf4:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 800edf8:	2920      	cmp	r1, #32
 800edfa:	bfc1      	itttt	gt
 800edfc:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 800ee00:	408e      	lslgt	r6, r1
 800ee02:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 800ee06:	fa24 f101 	lsrgt.w	r1, r4, r1
 800ee0a:	bfd6      	itet	le
 800ee0c:	f1c1 0120 	rsble	r1, r1, #32
 800ee10:	4331      	orrgt	r1, r6
 800ee12:	fa04 f101 	lslle.w	r1, r4, r1
 800ee16:	ee07 1a90 	vmov	s15, r1
 800ee1a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800ee1e:	3b01      	subs	r3, #1
 800ee20:	ee17 1a90 	vmov	r1, s15
 800ee24:	2501      	movs	r5, #1
 800ee26:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 800ee2a:	e7a8      	b.n	800ed7e <_dtoa_r+0xf6>
 800ee2c:	2101      	movs	r1, #1
 800ee2e:	1ad2      	subs	r2, r2, r3
 800ee30:	1e53      	subs	r3, r2, #1
 800ee32:	9306      	str	r3, [sp, #24]
 800ee34:	bf45      	ittet	mi
 800ee36:	f1c2 0301 	rsbmi	r3, r2, #1
 800ee3a:	9305      	strmi	r3, [sp, #20]
 800ee3c:	2300      	movpl	r3, #0
 800ee3e:	2300      	movmi	r3, #0
 800ee40:	bf4c      	ite	mi
 800ee42:	9306      	strmi	r3, [sp, #24]
 800ee44:	9305      	strpl	r3, [sp, #20]
 800ee46:	f1b8 0f00 	cmp.w	r8, #0
 800ee4a:	910c      	str	r1, [sp, #48]	@ 0x30
 800ee4c:	db18      	blt.n	800ee80 <_dtoa_r+0x1f8>
 800ee4e:	9b06      	ldr	r3, [sp, #24]
 800ee50:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800ee54:	4443      	add	r3, r8
 800ee56:	9306      	str	r3, [sp, #24]
 800ee58:	2300      	movs	r3, #0
 800ee5a:	9a07      	ldr	r2, [sp, #28]
 800ee5c:	2a09      	cmp	r2, #9
 800ee5e:	d849      	bhi.n	800eef4 <_dtoa_r+0x26c>
 800ee60:	2a05      	cmp	r2, #5
 800ee62:	bfc4      	itt	gt
 800ee64:	3a04      	subgt	r2, #4
 800ee66:	9207      	strgt	r2, [sp, #28]
 800ee68:	9a07      	ldr	r2, [sp, #28]
 800ee6a:	f1a2 0202 	sub.w	r2, r2, #2
 800ee6e:	bfcc      	ite	gt
 800ee70:	2400      	movgt	r4, #0
 800ee72:	2401      	movle	r4, #1
 800ee74:	2a03      	cmp	r2, #3
 800ee76:	d848      	bhi.n	800ef0a <_dtoa_r+0x282>
 800ee78:	e8df f002 	tbb	[pc, r2]
 800ee7c:	3a2c2e0b 	.word	0x3a2c2e0b
 800ee80:	9b05      	ldr	r3, [sp, #20]
 800ee82:	2200      	movs	r2, #0
 800ee84:	eba3 0308 	sub.w	r3, r3, r8
 800ee88:	9305      	str	r3, [sp, #20]
 800ee8a:	920a      	str	r2, [sp, #40]	@ 0x28
 800ee8c:	f1c8 0300 	rsb	r3, r8, #0
 800ee90:	e7e3      	b.n	800ee5a <_dtoa_r+0x1d2>
 800ee92:	2200      	movs	r2, #0
 800ee94:	9208      	str	r2, [sp, #32]
 800ee96:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ee98:	2a00      	cmp	r2, #0
 800ee9a:	dc39      	bgt.n	800ef10 <_dtoa_r+0x288>
 800ee9c:	f04f 0b01 	mov.w	fp, #1
 800eea0:	46da      	mov	sl, fp
 800eea2:	465a      	mov	r2, fp
 800eea4:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 800eea8:	f8d9 701c 	ldr.w	r7, [r9, #28]
 800eeac:	2100      	movs	r1, #0
 800eeae:	2004      	movs	r0, #4
 800eeb0:	f100 0614 	add.w	r6, r0, #20
 800eeb4:	4296      	cmp	r6, r2
 800eeb6:	d930      	bls.n	800ef1a <_dtoa_r+0x292>
 800eeb8:	6079      	str	r1, [r7, #4]
 800eeba:	4648      	mov	r0, r9
 800eebc:	9304      	str	r3, [sp, #16]
 800eebe:	f000 fd39 	bl	800f934 <_Balloc>
 800eec2:	9b04      	ldr	r3, [sp, #16]
 800eec4:	4607      	mov	r7, r0
 800eec6:	2800      	cmp	r0, #0
 800eec8:	d146      	bne.n	800ef58 <_dtoa_r+0x2d0>
 800eeca:	4b22      	ldr	r3, [pc, #136]	@ (800ef54 <_dtoa_r+0x2cc>)
 800eecc:	4602      	mov	r2, r0
 800eece:	f240 11af 	movw	r1, #431	@ 0x1af
 800eed2:	e6f2      	b.n	800ecba <_dtoa_r+0x32>
 800eed4:	2201      	movs	r2, #1
 800eed6:	e7dd      	b.n	800ee94 <_dtoa_r+0x20c>
 800eed8:	2200      	movs	r2, #0
 800eeda:	9208      	str	r2, [sp, #32]
 800eedc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800eede:	eb08 0b02 	add.w	fp, r8, r2
 800eee2:	f10b 0a01 	add.w	sl, fp, #1
 800eee6:	4652      	mov	r2, sl
 800eee8:	2a01      	cmp	r2, #1
 800eeea:	bfb8      	it	lt
 800eeec:	2201      	movlt	r2, #1
 800eeee:	e7db      	b.n	800eea8 <_dtoa_r+0x220>
 800eef0:	2201      	movs	r2, #1
 800eef2:	e7f2      	b.n	800eeda <_dtoa_r+0x252>
 800eef4:	2401      	movs	r4, #1
 800eef6:	2200      	movs	r2, #0
 800eef8:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800eefc:	f04f 3bff 	mov.w	fp, #4294967295
 800ef00:	2100      	movs	r1, #0
 800ef02:	46da      	mov	sl, fp
 800ef04:	2212      	movs	r2, #18
 800ef06:	9109      	str	r1, [sp, #36]	@ 0x24
 800ef08:	e7ce      	b.n	800eea8 <_dtoa_r+0x220>
 800ef0a:	2201      	movs	r2, #1
 800ef0c:	9208      	str	r2, [sp, #32]
 800ef0e:	e7f5      	b.n	800eefc <_dtoa_r+0x274>
 800ef10:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 800ef14:	46da      	mov	sl, fp
 800ef16:	465a      	mov	r2, fp
 800ef18:	e7c6      	b.n	800eea8 <_dtoa_r+0x220>
 800ef1a:	3101      	adds	r1, #1
 800ef1c:	0040      	lsls	r0, r0, #1
 800ef1e:	e7c7      	b.n	800eeb0 <_dtoa_r+0x228>
 800ef20:	636f4361 	.word	0x636f4361
 800ef24:	3fd287a7 	.word	0x3fd287a7
 800ef28:	8b60c8b3 	.word	0x8b60c8b3
 800ef2c:	3fc68a28 	.word	0x3fc68a28
 800ef30:	509f79fb 	.word	0x509f79fb
 800ef34:	3fd34413 	.word	0x3fd34413
 800ef38:	08012736 	.word	0x08012736
 800ef3c:	0801274d 	.word	0x0801274d
 800ef40:	7ff00000 	.word	0x7ff00000
 800ef44:	08012732 	.word	0x08012732
 800ef48:	08012701 	.word	0x08012701
 800ef4c:	08012700 	.word	0x08012700
 800ef50:	08012848 	.word	0x08012848
 800ef54:	080127a5 	.word	0x080127a5
 800ef58:	f8d9 201c 	ldr.w	r2, [r9, #28]
 800ef5c:	f1ba 0f0e 	cmp.w	sl, #14
 800ef60:	6010      	str	r0, [r2, #0]
 800ef62:	d86f      	bhi.n	800f044 <_dtoa_r+0x3bc>
 800ef64:	2c00      	cmp	r4, #0
 800ef66:	d06d      	beq.n	800f044 <_dtoa_r+0x3bc>
 800ef68:	f1b8 0f00 	cmp.w	r8, #0
 800ef6c:	f340 80c2 	ble.w	800f0f4 <_dtoa_r+0x46c>
 800ef70:	4aca      	ldr	r2, [pc, #808]	@ (800f29c <_dtoa_r+0x614>)
 800ef72:	f008 010f 	and.w	r1, r8, #15
 800ef76:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800ef7a:	f418 7f80 	tst.w	r8, #256	@ 0x100
 800ef7e:	ed92 7b00 	vldr	d7, [r2]
 800ef82:	ea4f 1128 	mov.w	r1, r8, asr #4
 800ef86:	f000 80a9 	beq.w	800f0dc <_dtoa_r+0x454>
 800ef8a:	4ac5      	ldr	r2, [pc, #788]	@ (800f2a0 <_dtoa_r+0x618>)
 800ef8c:	ed92 6b08 	vldr	d6, [r2, #32]
 800ef90:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800ef94:	ed8d 6b02 	vstr	d6, [sp, #8]
 800ef98:	f001 010f 	and.w	r1, r1, #15
 800ef9c:	2203      	movs	r2, #3
 800ef9e:	48c0      	ldr	r0, [pc, #768]	@ (800f2a0 <_dtoa_r+0x618>)
 800efa0:	2900      	cmp	r1, #0
 800efa2:	f040 809d 	bne.w	800f0e0 <_dtoa_r+0x458>
 800efa6:	ed9d 6b02 	vldr	d6, [sp, #8]
 800efaa:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800efae:	ed8d 7b02 	vstr	d7, [sp, #8]
 800efb2:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800efb4:	ed9d 7b02 	vldr	d7, [sp, #8]
 800efb8:	2900      	cmp	r1, #0
 800efba:	f000 80c1 	beq.w	800f140 <_dtoa_r+0x4b8>
 800efbe:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800efc2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800efc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800efca:	f140 80b9 	bpl.w	800f140 <_dtoa_r+0x4b8>
 800efce:	f1ba 0f00 	cmp.w	sl, #0
 800efd2:	f000 80b5 	beq.w	800f140 <_dtoa_r+0x4b8>
 800efd6:	f1bb 0f00 	cmp.w	fp, #0
 800efda:	dd31      	ble.n	800f040 <_dtoa_r+0x3b8>
 800efdc:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 800efe0:	ee27 7b06 	vmul.f64	d7, d7, d6
 800efe4:	ed8d 7b02 	vstr	d7, [sp, #8]
 800efe8:	f108 31ff 	add.w	r1, r8, #4294967295
 800efec:	9104      	str	r1, [sp, #16]
 800efee:	3201      	adds	r2, #1
 800eff0:	465c      	mov	r4, fp
 800eff2:	ed9d 6b02 	vldr	d6, [sp, #8]
 800eff6:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 800effa:	ee07 2a90 	vmov	s15, r2
 800effe:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800f002:	eea7 5b06 	vfma.f64	d5, d7, d6
 800f006:	ee15 2a90 	vmov	r2, s11
 800f00a:	ec51 0b15 	vmov	r0, r1, d5
 800f00e:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 800f012:	2c00      	cmp	r4, #0
 800f014:	f040 8098 	bne.w	800f148 <_dtoa_r+0x4c0>
 800f018:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800f01c:	ee36 6b47 	vsub.f64	d6, d6, d7
 800f020:	ec41 0b17 	vmov	d7, r0, r1
 800f024:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800f028:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f02c:	f300 8261 	bgt.w	800f4f2 <_dtoa_r+0x86a>
 800f030:	eeb1 7b47 	vneg.f64	d7, d7
 800f034:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800f038:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f03c:	f100 80f5 	bmi.w	800f22a <_dtoa_r+0x5a2>
 800f040:	ed8d 8b02 	vstr	d8, [sp, #8]
 800f044:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800f046:	2a00      	cmp	r2, #0
 800f048:	f2c0 812c 	blt.w	800f2a4 <_dtoa_r+0x61c>
 800f04c:	f1b8 0f0e 	cmp.w	r8, #14
 800f050:	f300 8128 	bgt.w	800f2a4 <_dtoa_r+0x61c>
 800f054:	4b91      	ldr	r3, [pc, #580]	@ (800f29c <_dtoa_r+0x614>)
 800f056:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800f05a:	ed93 6b00 	vldr	d6, [r3]
 800f05e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f060:	2b00      	cmp	r3, #0
 800f062:	da03      	bge.n	800f06c <_dtoa_r+0x3e4>
 800f064:	f1ba 0f00 	cmp.w	sl, #0
 800f068:	f340 80d2 	ble.w	800f210 <_dtoa_r+0x588>
 800f06c:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 800f070:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f074:	463e      	mov	r6, r7
 800f076:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800f07a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800f07e:	ee15 3a10 	vmov	r3, s10
 800f082:	3330      	adds	r3, #48	@ 0x30
 800f084:	f806 3b01 	strb.w	r3, [r6], #1
 800f088:	1bf3      	subs	r3, r6, r7
 800f08a:	459a      	cmp	sl, r3
 800f08c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800f090:	eea3 7b46 	vfms.f64	d7, d3, d6
 800f094:	f040 80f8 	bne.w	800f288 <_dtoa_r+0x600>
 800f098:	ee37 7b07 	vadd.f64	d7, d7, d7
 800f09c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800f0a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f0a4:	f300 80dd 	bgt.w	800f262 <_dtoa_r+0x5da>
 800f0a8:	eeb4 7b46 	vcmp.f64	d7, d6
 800f0ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f0b0:	d104      	bne.n	800f0bc <_dtoa_r+0x434>
 800f0b2:	ee15 3a10 	vmov	r3, s10
 800f0b6:	07db      	lsls	r3, r3, #31
 800f0b8:	f100 80d3 	bmi.w	800f262 <_dtoa_r+0x5da>
 800f0bc:	9901      	ldr	r1, [sp, #4]
 800f0be:	4648      	mov	r0, r9
 800f0c0:	f000 fc78 	bl	800f9b4 <_Bfree>
 800f0c4:	2300      	movs	r3, #0
 800f0c6:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800f0c8:	7033      	strb	r3, [r6, #0]
 800f0ca:	f108 0301 	add.w	r3, r8, #1
 800f0ce:	6013      	str	r3, [r2, #0]
 800f0d0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800f0d2:	2b00      	cmp	r3, #0
 800f0d4:	f000 8304 	beq.w	800f6e0 <_dtoa_r+0xa58>
 800f0d8:	601e      	str	r6, [r3, #0]
 800f0da:	e301      	b.n	800f6e0 <_dtoa_r+0xa58>
 800f0dc:	2202      	movs	r2, #2
 800f0de:	e75e      	b.n	800ef9e <_dtoa_r+0x316>
 800f0e0:	07cc      	lsls	r4, r1, #31
 800f0e2:	d504      	bpl.n	800f0ee <_dtoa_r+0x466>
 800f0e4:	ed90 6b00 	vldr	d6, [r0]
 800f0e8:	3201      	adds	r2, #1
 800f0ea:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f0ee:	1049      	asrs	r1, r1, #1
 800f0f0:	3008      	adds	r0, #8
 800f0f2:	e755      	b.n	800efa0 <_dtoa_r+0x318>
 800f0f4:	d022      	beq.n	800f13c <_dtoa_r+0x4b4>
 800f0f6:	f1c8 0100 	rsb	r1, r8, #0
 800f0fa:	4a68      	ldr	r2, [pc, #416]	@ (800f29c <_dtoa_r+0x614>)
 800f0fc:	f001 000f 	and.w	r0, r1, #15
 800f100:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800f104:	ed92 7b00 	vldr	d7, [r2]
 800f108:	ee28 7b07 	vmul.f64	d7, d8, d7
 800f10c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f110:	4863      	ldr	r0, [pc, #396]	@ (800f2a0 <_dtoa_r+0x618>)
 800f112:	1109      	asrs	r1, r1, #4
 800f114:	2400      	movs	r4, #0
 800f116:	2202      	movs	r2, #2
 800f118:	b929      	cbnz	r1, 800f126 <_dtoa_r+0x49e>
 800f11a:	2c00      	cmp	r4, #0
 800f11c:	f43f af49 	beq.w	800efb2 <_dtoa_r+0x32a>
 800f120:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f124:	e745      	b.n	800efb2 <_dtoa_r+0x32a>
 800f126:	07ce      	lsls	r6, r1, #31
 800f128:	d505      	bpl.n	800f136 <_dtoa_r+0x4ae>
 800f12a:	ed90 6b00 	vldr	d6, [r0]
 800f12e:	3201      	adds	r2, #1
 800f130:	2401      	movs	r4, #1
 800f132:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f136:	1049      	asrs	r1, r1, #1
 800f138:	3008      	adds	r0, #8
 800f13a:	e7ed      	b.n	800f118 <_dtoa_r+0x490>
 800f13c:	2202      	movs	r2, #2
 800f13e:	e738      	b.n	800efb2 <_dtoa_r+0x32a>
 800f140:	f8cd 8010 	str.w	r8, [sp, #16]
 800f144:	4654      	mov	r4, sl
 800f146:	e754      	b.n	800eff2 <_dtoa_r+0x36a>
 800f148:	4a54      	ldr	r2, [pc, #336]	@ (800f29c <_dtoa_r+0x614>)
 800f14a:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800f14e:	ed12 4b02 	vldr	d4, [r2, #-8]
 800f152:	9a08      	ldr	r2, [sp, #32]
 800f154:	ec41 0b17 	vmov	d7, r0, r1
 800f158:	443c      	add	r4, r7
 800f15a:	b34a      	cbz	r2, 800f1b0 <_dtoa_r+0x528>
 800f15c:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 800f160:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 800f164:	463e      	mov	r6, r7
 800f166:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800f16a:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800f16e:	ee35 7b47 	vsub.f64	d7, d5, d7
 800f172:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800f176:	ee14 2a90 	vmov	r2, s9
 800f17a:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800f17e:	3230      	adds	r2, #48	@ 0x30
 800f180:	ee36 6b45 	vsub.f64	d6, d6, d5
 800f184:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800f188:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f18c:	f806 2b01 	strb.w	r2, [r6], #1
 800f190:	d438      	bmi.n	800f204 <_dtoa_r+0x57c>
 800f192:	ee32 5b46 	vsub.f64	d5, d2, d6
 800f196:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800f19a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f19e:	d462      	bmi.n	800f266 <_dtoa_r+0x5de>
 800f1a0:	42a6      	cmp	r6, r4
 800f1a2:	f43f af4d 	beq.w	800f040 <_dtoa_r+0x3b8>
 800f1a6:	ee27 7b03 	vmul.f64	d7, d7, d3
 800f1aa:	ee26 6b03 	vmul.f64	d6, d6, d3
 800f1ae:	e7e0      	b.n	800f172 <_dtoa_r+0x4ea>
 800f1b0:	4621      	mov	r1, r4
 800f1b2:	463e      	mov	r6, r7
 800f1b4:	ee27 7b04 	vmul.f64	d7, d7, d4
 800f1b8:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800f1bc:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800f1c0:	ee14 2a90 	vmov	r2, s9
 800f1c4:	3230      	adds	r2, #48	@ 0x30
 800f1c6:	f806 2b01 	strb.w	r2, [r6], #1
 800f1ca:	42a6      	cmp	r6, r4
 800f1cc:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800f1d0:	ee36 6b45 	vsub.f64	d6, d6, d5
 800f1d4:	d119      	bne.n	800f20a <_dtoa_r+0x582>
 800f1d6:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 800f1da:	ee37 4b05 	vadd.f64	d4, d7, d5
 800f1de:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800f1e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f1e6:	dc3e      	bgt.n	800f266 <_dtoa_r+0x5de>
 800f1e8:	ee35 5b47 	vsub.f64	d5, d5, d7
 800f1ec:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800f1f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f1f4:	f57f af24 	bpl.w	800f040 <_dtoa_r+0x3b8>
 800f1f8:	460e      	mov	r6, r1
 800f1fa:	3901      	subs	r1, #1
 800f1fc:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800f200:	2b30      	cmp	r3, #48	@ 0x30
 800f202:	d0f9      	beq.n	800f1f8 <_dtoa_r+0x570>
 800f204:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800f208:	e758      	b.n	800f0bc <_dtoa_r+0x434>
 800f20a:	ee26 6b03 	vmul.f64	d6, d6, d3
 800f20e:	e7d5      	b.n	800f1bc <_dtoa_r+0x534>
 800f210:	d10b      	bne.n	800f22a <_dtoa_r+0x5a2>
 800f212:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800f216:	ee26 6b07 	vmul.f64	d6, d6, d7
 800f21a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f21e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800f222:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f226:	f2c0 8161 	blt.w	800f4ec <_dtoa_r+0x864>
 800f22a:	2400      	movs	r4, #0
 800f22c:	4625      	mov	r5, r4
 800f22e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f230:	43db      	mvns	r3, r3
 800f232:	9304      	str	r3, [sp, #16]
 800f234:	463e      	mov	r6, r7
 800f236:	f04f 0800 	mov.w	r8, #0
 800f23a:	4621      	mov	r1, r4
 800f23c:	4648      	mov	r0, r9
 800f23e:	f000 fbb9 	bl	800f9b4 <_Bfree>
 800f242:	2d00      	cmp	r5, #0
 800f244:	d0de      	beq.n	800f204 <_dtoa_r+0x57c>
 800f246:	f1b8 0f00 	cmp.w	r8, #0
 800f24a:	d005      	beq.n	800f258 <_dtoa_r+0x5d0>
 800f24c:	45a8      	cmp	r8, r5
 800f24e:	d003      	beq.n	800f258 <_dtoa_r+0x5d0>
 800f250:	4641      	mov	r1, r8
 800f252:	4648      	mov	r0, r9
 800f254:	f000 fbae 	bl	800f9b4 <_Bfree>
 800f258:	4629      	mov	r1, r5
 800f25a:	4648      	mov	r0, r9
 800f25c:	f000 fbaa 	bl	800f9b4 <_Bfree>
 800f260:	e7d0      	b.n	800f204 <_dtoa_r+0x57c>
 800f262:	f8cd 8010 	str.w	r8, [sp, #16]
 800f266:	4633      	mov	r3, r6
 800f268:	461e      	mov	r6, r3
 800f26a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f26e:	2a39      	cmp	r2, #57	@ 0x39
 800f270:	d106      	bne.n	800f280 <_dtoa_r+0x5f8>
 800f272:	429f      	cmp	r7, r3
 800f274:	d1f8      	bne.n	800f268 <_dtoa_r+0x5e0>
 800f276:	9a04      	ldr	r2, [sp, #16]
 800f278:	3201      	adds	r2, #1
 800f27a:	9204      	str	r2, [sp, #16]
 800f27c:	2230      	movs	r2, #48	@ 0x30
 800f27e:	703a      	strb	r2, [r7, #0]
 800f280:	781a      	ldrb	r2, [r3, #0]
 800f282:	3201      	adds	r2, #1
 800f284:	701a      	strb	r2, [r3, #0]
 800f286:	e7bd      	b.n	800f204 <_dtoa_r+0x57c>
 800f288:	ee27 7b04 	vmul.f64	d7, d7, d4
 800f28c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800f290:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f294:	f47f aeef 	bne.w	800f076 <_dtoa_r+0x3ee>
 800f298:	e710      	b.n	800f0bc <_dtoa_r+0x434>
 800f29a:	bf00      	nop
 800f29c:	08012848 	.word	0x08012848
 800f2a0:	08012820 	.word	0x08012820
 800f2a4:	9908      	ldr	r1, [sp, #32]
 800f2a6:	2900      	cmp	r1, #0
 800f2a8:	f000 80e3 	beq.w	800f472 <_dtoa_r+0x7ea>
 800f2ac:	9907      	ldr	r1, [sp, #28]
 800f2ae:	2901      	cmp	r1, #1
 800f2b0:	f300 80c8 	bgt.w	800f444 <_dtoa_r+0x7bc>
 800f2b4:	2d00      	cmp	r5, #0
 800f2b6:	f000 80c1 	beq.w	800f43c <_dtoa_r+0x7b4>
 800f2ba:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800f2be:	9e05      	ldr	r6, [sp, #20]
 800f2c0:	461c      	mov	r4, r3
 800f2c2:	9304      	str	r3, [sp, #16]
 800f2c4:	9b05      	ldr	r3, [sp, #20]
 800f2c6:	4413      	add	r3, r2
 800f2c8:	9305      	str	r3, [sp, #20]
 800f2ca:	9b06      	ldr	r3, [sp, #24]
 800f2cc:	2101      	movs	r1, #1
 800f2ce:	4413      	add	r3, r2
 800f2d0:	4648      	mov	r0, r9
 800f2d2:	9306      	str	r3, [sp, #24]
 800f2d4:	f000 fc6c 	bl	800fbb0 <__i2b>
 800f2d8:	9b04      	ldr	r3, [sp, #16]
 800f2da:	4605      	mov	r5, r0
 800f2dc:	b166      	cbz	r6, 800f2f8 <_dtoa_r+0x670>
 800f2de:	9a06      	ldr	r2, [sp, #24]
 800f2e0:	2a00      	cmp	r2, #0
 800f2e2:	dd09      	ble.n	800f2f8 <_dtoa_r+0x670>
 800f2e4:	42b2      	cmp	r2, r6
 800f2e6:	9905      	ldr	r1, [sp, #20]
 800f2e8:	bfa8      	it	ge
 800f2ea:	4632      	movge	r2, r6
 800f2ec:	1a89      	subs	r1, r1, r2
 800f2ee:	9105      	str	r1, [sp, #20]
 800f2f0:	9906      	ldr	r1, [sp, #24]
 800f2f2:	1ab6      	subs	r6, r6, r2
 800f2f4:	1a8a      	subs	r2, r1, r2
 800f2f6:	9206      	str	r2, [sp, #24]
 800f2f8:	b1fb      	cbz	r3, 800f33a <_dtoa_r+0x6b2>
 800f2fa:	9a08      	ldr	r2, [sp, #32]
 800f2fc:	2a00      	cmp	r2, #0
 800f2fe:	f000 80bc 	beq.w	800f47a <_dtoa_r+0x7f2>
 800f302:	b19c      	cbz	r4, 800f32c <_dtoa_r+0x6a4>
 800f304:	4629      	mov	r1, r5
 800f306:	4622      	mov	r2, r4
 800f308:	4648      	mov	r0, r9
 800f30a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f30c:	f000 fd10 	bl	800fd30 <__pow5mult>
 800f310:	9a01      	ldr	r2, [sp, #4]
 800f312:	4601      	mov	r1, r0
 800f314:	4605      	mov	r5, r0
 800f316:	4648      	mov	r0, r9
 800f318:	f000 fc60 	bl	800fbdc <__multiply>
 800f31c:	9901      	ldr	r1, [sp, #4]
 800f31e:	9004      	str	r0, [sp, #16]
 800f320:	4648      	mov	r0, r9
 800f322:	f000 fb47 	bl	800f9b4 <_Bfree>
 800f326:	9a04      	ldr	r2, [sp, #16]
 800f328:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f32a:	9201      	str	r2, [sp, #4]
 800f32c:	1b1a      	subs	r2, r3, r4
 800f32e:	d004      	beq.n	800f33a <_dtoa_r+0x6b2>
 800f330:	9901      	ldr	r1, [sp, #4]
 800f332:	4648      	mov	r0, r9
 800f334:	f000 fcfc 	bl	800fd30 <__pow5mult>
 800f338:	9001      	str	r0, [sp, #4]
 800f33a:	2101      	movs	r1, #1
 800f33c:	4648      	mov	r0, r9
 800f33e:	f000 fc37 	bl	800fbb0 <__i2b>
 800f342:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f344:	4604      	mov	r4, r0
 800f346:	2b00      	cmp	r3, #0
 800f348:	f000 81d0 	beq.w	800f6ec <_dtoa_r+0xa64>
 800f34c:	461a      	mov	r2, r3
 800f34e:	4601      	mov	r1, r0
 800f350:	4648      	mov	r0, r9
 800f352:	f000 fced 	bl	800fd30 <__pow5mult>
 800f356:	9b07      	ldr	r3, [sp, #28]
 800f358:	2b01      	cmp	r3, #1
 800f35a:	4604      	mov	r4, r0
 800f35c:	f300 8095 	bgt.w	800f48a <_dtoa_r+0x802>
 800f360:	9b02      	ldr	r3, [sp, #8]
 800f362:	2b00      	cmp	r3, #0
 800f364:	f040 808b 	bne.w	800f47e <_dtoa_r+0x7f6>
 800f368:	9b03      	ldr	r3, [sp, #12]
 800f36a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800f36e:	2a00      	cmp	r2, #0
 800f370:	f040 8087 	bne.w	800f482 <_dtoa_r+0x7fa>
 800f374:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800f378:	0d12      	lsrs	r2, r2, #20
 800f37a:	0512      	lsls	r2, r2, #20
 800f37c:	2a00      	cmp	r2, #0
 800f37e:	f000 8082 	beq.w	800f486 <_dtoa_r+0x7fe>
 800f382:	9b05      	ldr	r3, [sp, #20]
 800f384:	3301      	adds	r3, #1
 800f386:	9305      	str	r3, [sp, #20]
 800f388:	9b06      	ldr	r3, [sp, #24]
 800f38a:	3301      	adds	r3, #1
 800f38c:	9306      	str	r3, [sp, #24]
 800f38e:	2301      	movs	r3, #1
 800f390:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f392:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f394:	2b00      	cmp	r3, #0
 800f396:	f000 81af 	beq.w	800f6f8 <_dtoa_r+0xa70>
 800f39a:	6922      	ldr	r2, [r4, #16]
 800f39c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800f3a0:	6910      	ldr	r0, [r2, #16]
 800f3a2:	f000 fbb9 	bl	800fb18 <__hi0bits>
 800f3a6:	f1c0 0020 	rsb	r0, r0, #32
 800f3aa:	9b06      	ldr	r3, [sp, #24]
 800f3ac:	4418      	add	r0, r3
 800f3ae:	f010 001f 	ands.w	r0, r0, #31
 800f3b2:	d076      	beq.n	800f4a2 <_dtoa_r+0x81a>
 800f3b4:	f1c0 0220 	rsb	r2, r0, #32
 800f3b8:	2a04      	cmp	r2, #4
 800f3ba:	dd69      	ble.n	800f490 <_dtoa_r+0x808>
 800f3bc:	9b05      	ldr	r3, [sp, #20]
 800f3be:	f1c0 001c 	rsb	r0, r0, #28
 800f3c2:	4403      	add	r3, r0
 800f3c4:	9305      	str	r3, [sp, #20]
 800f3c6:	9b06      	ldr	r3, [sp, #24]
 800f3c8:	4406      	add	r6, r0
 800f3ca:	4403      	add	r3, r0
 800f3cc:	9306      	str	r3, [sp, #24]
 800f3ce:	9b05      	ldr	r3, [sp, #20]
 800f3d0:	2b00      	cmp	r3, #0
 800f3d2:	dd05      	ble.n	800f3e0 <_dtoa_r+0x758>
 800f3d4:	9901      	ldr	r1, [sp, #4]
 800f3d6:	461a      	mov	r2, r3
 800f3d8:	4648      	mov	r0, r9
 800f3da:	f000 fd03 	bl	800fde4 <__lshift>
 800f3de:	9001      	str	r0, [sp, #4]
 800f3e0:	9b06      	ldr	r3, [sp, #24]
 800f3e2:	2b00      	cmp	r3, #0
 800f3e4:	dd05      	ble.n	800f3f2 <_dtoa_r+0x76a>
 800f3e6:	4621      	mov	r1, r4
 800f3e8:	461a      	mov	r2, r3
 800f3ea:	4648      	mov	r0, r9
 800f3ec:	f000 fcfa 	bl	800fde4 <__lshift>
 800f3f0:	4604      	mov	r4, r0
 800f3f2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f3f4:	2b00      	cmp	r3, #0
 800f3f6:	d056      	beq.n	800f4a6 <_dtoa_r+0x81e>
 800f3f8:	9801      	ldr	r0, [sp, #4]
 800f3fa:	4621      	mov	r1, r4
 800f3fc:	f000 fd5e 	bl	800febc <__mcmp>
 800f400:	2800      	cmp	r0, #0
 800f402:	da50      	bge.n	800f4a6 <_dtoa_r+0x81e>
 800f404:	f108 33ff 	add.w	r3, r8, #4294967295
 800f408:	9304      	str	r3, [sp, #16]
 800f40a:	9901      	ldr	r1, [sp, #4]
 800f40c:	2300      	movs	r3, #0
 800f40e:	220a      	movs	r2, #10
 800f410:	4648      	mov	r0, r9
 800f412:	f000 faf1 	bl	800f9f8 <__multadd>
 800f416:	9b08      	ldr	r3, [sp, #32]
 800f418:	9001      	str	r0, [sp, #4]
 800f41a:	2b00      	cmp	r3, #0
 800f41c:	f000 816e 	beq.w	800f6fc <_dtoa_r+0xa74>
 800f420:	4629      	mov	r1, r5
 800f422:	2300      	movs	r3, #0
 800f424:	220a      	movs	r2, #10
 800f426:	4648      	mov	r0, r9
 800f428:	f000 fae6 	bl	800f9f8 <__multadd>
 800f42c:	f1bb 0f00 	cmp.w	fp, #0
 800f430:	4605      	mov	r5, r0
 800f432:	dc64      	bgt.n	800f4fe <_dtoa_r+0x876>
 800f434:	9b07      	ldr	r3, [sp, #28]
 800f436:	2b02      	cmp	r3, #2
 800f438:	dc3e      	bgt.n	800f4b8 <_dtoa_r+0x830>
 800f43a:	e060      	b.n	800f4fe <_dtoa_r+0x876>
 800f43c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f43e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800f442:	e73c      	b.n	800f2be <_dtoa_r+0x636>
 800f444:	f10a 34ff 	add.w	r4, sl, #4294967295
 800f448:	42a3      	cmp	r3, r4
 800f44a:	bfbf      	itttt	lt
 800f44c:	1ae2      	sublt	r2, r4, r3
 800f44e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800f450:	189b      	addlt	r3, r3, r2
 800f452:	930a      	strlt	r3, [sp, #40]	@ 0x28
 800f454:	bfae      	itee	ge
 800f456:	1b1c      	subge	r4, r3, r4
 800f458:	4623      	movlt	r3, r4
 800f45a:	2400      	movlt	r4, #0
 800f45c:	f1ba 0f00 	cmp.w	sl, #0
 800f460:	bfb5      	itete	lt
 800f462:	9a05      	ldrlt	r2, [sp, #20]
 800f464:	9e05      	ldrge	r6, [sp, #20]
 800f466:	eba2 060a 	sublt.w	r6, r2, sl
 800f46a:	4652      	movge	r2, sl
 800f46c:	bfb8      	it	lt
 800f46e:	2200      	movlt	r2, #0
 800f470:	e727      	b.n	800f2c2 <_dtoa_r+0x63a>
 800f472:	9e05      	ldr	r6, [sp, #20]
 800f474:	9d08      	ldr	r5, [sp, #32]
 800f476:	461c      	mov	r4, r3
 800f478:	e730      	b.n	800f2dc <_dtoa_r+0x654>
 800f47a:	461a      	mov	r2, r3
 800f47c:	e758      	b.n	800f330 <_dtoa_r+0x6a8>
 800f47e:	2300      	movs	r3, #0
 800f480:	e786      	b.n	800f390 <_dtoa_r+0x708>
 800f482:	9b02      	ldr	r3, [sp, #8]
 800f484:	e784      	b.n	800f390 <_dtoa_r+0x708>
 800f486:	920b      	str	r2, [sp, #44]	@ 0x2c
 800f488:	e783      	b.n	800f392 <_dtoa_r+0x70a>
 800f48a:	2300      	movs	r3, #0
 800f48c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f48e:	e784      	b.n	800f39a <_dtoa_r+0x712>
 800f490:	d09d      	beq.n	800f3ce <_dtoa_r+0x746>
 800f492:	9b05      	ldr	r3, [sp, #20]
 800f494:	321c      	adds	r2, #28
 800f496:	4413      	add	r3, r2
 800f498:	9305      	str	r3, [sp, #20]
 800f49a:	9b06      	ldr	r3, [sp, #24]
 800f49c:	4416      	add	r6, r2
 800f49e:	4413      	add	r3, r2
 800f4a0:	e794      	b.n	800f3cc <_dtoa_r+0x744>
 800f4a2:	4602      	mov	r2, r0
 800f4a4:	e7f5      	b.n	800f492 <_dtoa_r+0x80a>
 800f4a6:	f1ba 0f00 	cmp.w	sl, #0
 800f4aa:	f8cd 8010 	str.w	r8, [sp, #16]
 800f4ae:	46d3      	mov	fp, sl
 800f4b0:	dc21      	bgt.n	800f4f6 <_dtoa_r+0x86e>
 800f4b2:	9b07      	ldr	r3, [sp, #28]
 800f4b4:	2b02      	cmp	r3, #2
 800f4b6:	dd1e      	ble.n	800f4f6 <_dtoa_r+0x86e>
 800f4b8:	f1bb 0f00 	cmp.w	fp, #0
 800f4bc:	f47f aeb7 	bne.w	800f22e <_dtoa_r+0x5a6>
 800f4c0:	4621      	mov	r1, r4
 800f4c2:	465b      	mov	r3, fp
 800f4c4:	2205      	movs	r2, #5
 800f4c6:	4648      	mov	r0, r9
 800f4c8:	f000 fa96 	bl	800f9f8 <__multadd>
 800f4cc:	4601      	mov	r1, r0
 800f4ce:	4604      	mov	r4, r0
 800f4d0:	9801      	ldr	r0, [sp, #4]
 800f4d2:	f000 fcf3 	bl	800febc <__mcmp>
 800f4d6:	2800      	cmp	r0, #0
 800f4d8:	f77f aea9 	ble.w	800f22e <_dtoa_r+0x5a6>
 800f4dc:	463e      	mov	r6, r7
 800f4de:	2331      	movs	r3, #49	@ 0x31
 800f4e0:	f806 3b01 	strb.w	r3, [r6], #1
 800f4e4:	9b04      	ldr	r3, [sp, #16]
 800f4e6:	3301      	adds	r3, #1
 800f4e8:	9304      	str	r3, [sp, #16]
 800f4ea:	e6a4      	b.n	800f236 <_dtoa_r+0x5ae>
 800f4ec:	f8cd 8010 	str.w	r8, [sp, #16]
 800f4f0:	4654      	mov	r4, sl
 800f4f2:	4625      	mov	r5, r4
 800f4f4:	e7f2      	b.n	800f4dc <_dtoa_r+0x854>
 800f4f6:	9b08      	ldr	r3, [sp, #32]
 800f4f8:	2b00      	cmp	r3, #0
 800f4fa:	f000 8103 	beq.w	800f704 <_dtoa_r+0xa7c>
 800f4fe:	2e00      	cmp	r6, #0
 800f500:	dd05      	ble.n	800f50e <_dtoa_r+0x886>
 800f502:	4629      	mov	r1, r5
 800f504:	4632      	mov	r2, r6
 800f506:	4648      	mov	r0, r9
 800f508:	f000 fc6c 	bl	800fde4 <__lshift>
 800f50c:	4605      	mov	r5, r0
 800f50e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f510:	2b00      	cmp	r3, #0
 800f512:	d058      	beq.n	800f5c6 <_dtoa_r+0x93e>
 800f514:	6869      	ldr	r1, [r5, #4]
 800f516:	4648      	mov	r0, r9
 800f518:	f000 fa0c 	bl	800f934 <_Balloc>
 800f51c:	4606      	mov	r6, r0
 800f51e:	b928      	cbnz	r0, 800f52c <_dtoa_r+0x8a4>
 800f520:	4b82      	ldr	r3, [pc, #520]	@ (800f72c <_dtoa_r+0xaa4>)
 800f522:	4602      	mov	r2, r0
 800f524:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800f528:	f7ff bbc7 	b.w	800ecba <_dtoa_r+0x32>
 800f52c:	692a      	ldr	r2, [r5, #16]
 800f52e:	3202      	adds	r2, #2
 800f530:	0092      	lsls	r2, r2, #2
 800f532:	f105 010c 	add.w	r1, r5, #12
 800f536:	300c      	adds	r0, #12
 800f538:	f001 ff1e 	bl	8011378 <memcpy>
 800f53c:	2201      	movs	r2, #1
 800f53e:	4631      	mov	r1, r6
 800f540:	4648      	mov	r0, r9
 800f542:	f000 fc4f 	bl	800fde4 <__lshift>
 800f546:	1c7b      	adds	r3, r7, #1
 800f548:	9305      	str	r3, [sp, #20]
 800f54a:	eb07 030b 	add.w	r3, r7, fp
 800f54e:	9309      	str	r3, [sp, #36]	@ 0x24
 800f550:	9b02      	ldr	r3, [sp, #8]
 800f552:	f003 0301 	and.w	r3, r3, #1
 800f556:	46a8      	mov	r8, r5
 800f558:	9308      	str	r3, [sp, #32]
 800f55a:	4605      	mov	r5, r0
 800f55c:	9b05      	ldr	r3, [sp, #20]
 800f55e:	9801      	ldr	r0, [sp, #4]
 800f560:	4621      	mov	r1, r4
 800f562:	f103 3bff 	add.w	fp, r3, #4294967295
 800f566:	f7ff fb07 	bl	800eb78 <quorem>
 800f56a:	4641      	mov	r1, r8
 800f56c:	9002      	str	r0, [sp, #8]
 800f56e:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800f572:	9801      	ldr	r0, [sp, #4]
 800f574:	f000 fca2 	bl	800febc <__mcmp>
 800f578:	462a      	mov	r2, r5
 800f57a:	9006      	str	r0, [sp, #24]
 800f57c:	4621      	mov	r1, r4
 800f57e:	4648      	mov	r0, r9
 800f580:	f000 fcb8 	bl	800fef4 <__mdiff>
 800f584:	68c2      	ldr	r2, [r0, #12]
 800f586:	4606      	mov	r6, r0
 800f588:	b9fa      	cbnz	r2, 800f5ca <_dtoa_r+0x942>
 800f58a:	4601      	mov	r1, r0
 800f58c:	9801      	ldr	r0, [sp, #4]
 800f58e:	f000 fc95 	bl	800febc <__mcmp>
 800f592:	4602      	mov	r2, r0
 800f594:	4631      	mov	r1, r6
 800f596:	4648      	mov	r0, r9
 800f598:	920a      	str	r2, [sp, #40]	@ 0x28
 800f59a:	f000 fa0b 	bl	800f9b4 <_Bfree>
 800f59e:	9b07      	ldr	r3, [sp, #28]
 800f5a0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f5a2:	9e05      	ldr	r6, [sp, #20]
 800f5a4:	ea43 0102 	orr.w	r1, r3, r2
 800f5a8:	9b08      	ldr	r3, [sp, #32]
 800f5aa:	4319      	orrs	r1, r3
 800f5ac:	d10f      	bne.n	800f5ce <_dtoa_r+0x946>
 800f5ae:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800f5b2:	d028      	beq.n	800f606 <_dtoa_r+0x97e>
 800f5b4:	9b06      	ldr	r3, [sp, #24]
 800f5b6:	2b00      	cmp	r3, #0
 800f5b8:	dd02      	ble.n	800f5c0 <_dtoa_r+0x938>
 800f5ba:	9b02      	ldr	r3, [sp, #8]
 800f5bc:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 800f5c0:	f88b a000 	strb.w	sl, [fp]
 800f5c4:	e639      	b.n	800f23a <_dtoa_r+0x5b2>
 800f5c6:	4628      	mov	r0, r5
 800f5c8:	e7bd      	b.n	800f546 <_dtoa_r+0x8be>
 800f5ca:	2201      	movs	r2, #1
 800f5cc:	e7e2      	b.n	800f594 <_dtoa_r+0x90c>
 800f5ce:	9b06      	ldr	r3, [sp, #24]
 800f5d0:	2b00      	cmp	r3, #0
 800f5d2:	db04      	blt.n	800f5de <_dtoa_r+0x956>
 800f5d4:	9907      	ldr	r1, [sp, #28]
 800f5d6:	430b      	orrs	r3, r1
 800f5d8:	9908      	ldr	r1, [sp, #32]
 800f5da:	430b      	orrs	r3, r1
 800f5dc:	d120      	bne.n	800f620 <_dtoa_r+0x998>
 800f5de:	2a00      	cmp	r2, #0
 800f5e0:	ddee      	ble.n	800f5c0 <_dtoa_r+0x938>
 800f5e2:	9901      	ldr	r1, [sp, #4]
 800f5e4:	2201      	movs	r2, #1
 800f5e6:	4648      	mov	r0, r9
 800f5e8:	f000 fbfc 	bl	800fde4 <__lshift>
 800f5ec:	4621      	mov	r1, r4
 800f5ee:	9001      	str	r0, [sp, #4]
 800f5f0:	f000 fc64 	bl	800febc <__mcmp>
 800f5f4:	2800      	cmp	r0, #0
 800f5f6:	dc03      	bgt.n	800f600 <_dtoa_r+0x978>
 800f5f8:	d1e2      	bne.n	800f5c0 <_dtoa_r+0x938>
 800f5fa:	f01a 0f01 	tst.w	sl, #1
 800f5fe:	d0df      	beq.n	800f5c0 <_dtoa_r+0x938>
 800f600:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800f604:	d1d9      	bne.n	800f5ba <_dtoa_r+0x932>
 800f606:	2339      	movs	r3, #57	@ 0x39
 800f608:	f88b 3000 	strb.w	r3, [fp]
 800f60c:	4633      	mov	r3, r6
 800f60e:	461e      	mov	r6, r3
 800f610:	3b01      	subs	r3, #1
 800f612:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800f616:	2a39      	cmp	r2, #57	@ 0x39
 800f618:	d053      	beq.n	800f6c2 <_dtoa_r+0xa3a>
 800f61a:	3201      	adds	r2, #1
 800f61c:	701a      	strb	r2, [r3, #0]
 800f61e:	e60c      	b.n	800f23a <_dtoa_r+0x5b2>
 800f620:	2a00      	cmp	r2, #0
 800f622:	dd07      	ble.n	800f634 <_dtoa_r+0x9ac>
 800f624:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800f628:	d0ed      	beq.n	800f606 <_dtoa_r+0x97e>
 800f62a:	f10a 0301 	add.w	r3, sl, #1
 800f62e:	f88b 3000 	strb.w	r3, [fp]
 800f632:	e602      	b.n	800f23a <_dtoa_r+0x5b2>
 800f634:	9b05      	ldr	r3, [sp, #20]
 800f636:	9a05      	ldr	r2, [sp, #20]
 800f638:	f803 ac01 	strb.w	sl, [r3, #-1]
 800f63c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f63e:	4293      	cmp	r3, r2
 800f640:	d029      	beq.n	800f696 <_dtoa_r+0xa0e>
 800f642:	9901      	ldr	r1, [sp, #4]
 800f644:	2300      	movs	r3, #0
 800f646:	220a      	movs	r2, #10
 800f648:	4648      	mov	r0, r9
 800f64a:	f000 f9d5 	bl	800f9f8 <__multadd>
 800f64e:	45a8      	cmp	r8, r5
 800f650:	9001      	str	r0, [sp, #4]
 800f652:	f04f 0300 	mov.w	r3, #0
 800f656:	f04f 020a 	mov.w	r2, #10
 800f65a:	4641      	mov	r1, r8
 800f65c:	4648      	mov	r0, r9
 800f65e:	d107      	bne.n	800f670 <_dtoa_r+0x9e8>
 800f660:	f000 f9ca 	bl	800f9f8 <__multadd>
 800f664:	4680      	mov	r8, r0
 800f666:	4605      	mov	r5, r0
 800f668:	9b05      	ldr	r3, [sp, #20]
 800f66a:	3301      	adds	r3, #1
 800f66c:	9305      	str	r3, [sp, #20]
 800f66e:	e775      	b.n	800f55c <_dtoa_r+0x8d4>
 800f670:	f000 f9c2 	bl	800f9f8 <__multadd>
 800f674:	4629      	mov	r1, r5
 800f676:	4680      	mov	r8, r0
 800f678:	2300      	movs	r3, #0
 800f67a:	220a      	movs	r2, #10
 800f67c:	4648      	mov	r0, r9
 800f67e:	f000 f9bb 	bl	800f9f8 <__multadd>
 800f682:	4605      	mov	r5, r0
 800f684:	e7f0      	b.n	800f668 <_dtoa_r+0x9e0>
 800f686:	f1bb 0f00 	cmp.w	fp, #0
 800f68a:	bfcc      	ite	gt
 800f68c:	465e      	movgt	r6, fp
 800f68e:	2601      	movle	r6, #1
 800f690:	443e      	add	r6, r7
 800f692:	f04f 0800 	mov.w	r8, #0
 800f696:	9901      	ldr	r1, [sp, #4]
 800f698:	2201      	movs	r2, #1
 800f69a:	4648      	mov	r0, r9
 800f69c:	f000 fba2 	bl	800fde4 <__lshift>
 800f6a0:	4621      	mov	r1, r4
 800f6a2:	9001      	str	r0, [sp, #4]
 800f6a4:	f000 fc0a 	bl	800febc <__mcmp>
 800f6a8:	2800      	cmp	r0, #0
 800f6aa:	dcaf      	bgt.n	800f60c <_dtoa_r+0x984>
 800f6ac:	d102      	bne.n	800f6b4 <_dtoa_r+0xa2c>
 800f6ae:	f01a 0f01 	tst.w	sl, #1
 800f6b2:	d1ab      	bne.n	800f60c <_dtoa_r+0x984>
 800f6b4:	4633      	mov	r3, r6
 800f6b6:	461e      	mov	r6, r3
 800f6b8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f6bc:	2a30      	cmp	r2, #48	@ 0x30
 800f6be:	d0fa      	beq.n	800f6b6 <_dtoa_r+0xa2e>
 800f6c0:	e5bb      	b.n	800f23a <_dtoa_r+0x5b2>
 800f6c2:	429f      	cmp	r7, r3
 800f6c4:	d1a3      	bne.n	800f60e <_dtoa_r+0x986>
 800f6c6:	9b04      	ldr	r3, [sp, #16]
 800f6c8:	3301      	adds	r3, #1
 800f6ca:	9304      	str	r3, [sp, #16]
 800f6cc:	2331      	movs	r3, #49	@ 0x31
 800f6ce:	703b      	strb	r3, [r7, #0]
 800f6d0:	e5b3      	b.n	800f23a <_dtoa_r+0x5b2>
 800f6d2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800f6d4:	4f16      	ldr	r7, [pc, #88]	@ (800f730 <_dtoa_r+0xaa8>)
 800f6d6:	b11b      	cbz	r3, 800f6e0 <_dtoa_r+0xa58>
 800f6d8:	f107 0308 	add.w	r3, r7, #8
 800f6dc:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800f6de:	6013      	str	r3, [r2, #0]
 800f6e0:	4638      	mov	r0, r7
 800f6e2:	b011      	add	sp, #68	@ 0x44
 800f6e4:	ecbd 8b02 	vpop	{d8}
 800f6e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f6ec:	9b07      	ldr	r3, [sp, #28]
 800f6ee:	2b01      	cmp	r3, #1
 800f6f0:	f77f ae36 	ble.w	800f360 <_dtoa_r+0x6d8>
 800f6f4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f6f6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f6f8:	2001      	movs	r0, #1
 800f6fa:	e656      	b.n	800f3aa <_dtoa_r+0x722>
 800f6fc:	f1bb 0f00 	cmp.w	fp, #0
 800f700:	f77f aed7 	ble.w	800f4b2 <_dtoa_r+0x82a>
 800f704:	463e      	mov	r6, r7
 800f706:	9801      	ldr	r0, [sp, #4]
 800f708:	4621      	mov	r1, r4
 800f70a:	f7ff fa35 	bl	800eb78 <quorem>
 800f70e:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800f712:	f806 ab01 	strb.w	sl, [r6], #1
 800f716:	1bf2      	subs	r2, r6, r7
 800f718:	4593      	cmp	fp, r2
 800f71a:	ddb4      	ble.n	800f686 <_dtoa_r+0x9fe>
 800f71c:	9901      	ldr	r1, [sp, #4]
 800f71e:	2300      	movs	r3, #0
 800f720:	220a      	movs	r2, #10
 800f722:	4648      	mov	r0, r9
 800f724:	f000 f968 	bl	800f9f8 <__multadd>
 800f728:	9001      	str	r0, [sp, #4]
 800f72a:	e7ec      	b.n	800f706 <_dtoa_r+0xa7e>
 800f72c:	080127a5 	.word	0x080127a5
 800f730:	08012729 	.word	0x08012729

0800f734 <_free_r>:
 800f734:	b538      	push	{r3, r4, r5, lr}
 800f736:	4605      	mov	r5, r0
 800f738:	2900      	cmp	r1, #0
 800f73a:	d041      	beq.n	800f7c0 <_free_r+0x8c>
 800f73c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f740:	1f0c      	subs	r4, r1, #4
 800f742:	2b00      	cmp	r3, #0
 800f744:	bfb8      	it	lt
 800f746:	18e4      	addlt	r4, r4, r3
 800f748:	f000 f8e8 	bl	800f91c <__malloc_lock>
 800f74c:	4a1d      	ldr	r2, [pc, #116]	@ (800f7c4 <_free_r+0x90>)
 800f74e:	6813      	ldr	r3, [r2, #0]
 800f750:	b933      	cbnz	r3, 800f760 <_free_r+0x2c>
 800f752:	6063      	str	r3, [r4, #4]
 800f754:	6014      	str	r4, [r2, #0]
 800f756:	4628      	mov	r0, r5
 800f758:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f75c:	f000 b8e4 	b.w	800f928 <__malloc_unlock>
 800f760:	42a3      	cmp	r3, r4
 800f762:	d908      	bls.n	800f776 <_free_r+0x42>
 800f764:	6820      	ldr	r0, [r4, #0]
 800f766:	1821      	adds	r1, r4, r0
 800f768:	428b      	cmp	r3, r1
 800f76a:	bf01      	itttt	eq
 800f76c:	6819      	ldreq	r1, [r3, #0]
 800f76e:	685b      	ldreq	r3, [r3, #4]
 800f770:	1809      	addeq	r1, r1, r0
 800f772:	6021      	streq	r1, [r4, #0]
 800f774:	e7ed      	b.n	800f752 <_free_r+0x1e>
 800f776:	461a      	mov	r2, r3
 800f778:	685b      	ldr	r3, [r3, #4]
 800f77a:	b10b      	cbz	r3, 800f780 <_free_r+0x4c>
 800f77c:	42a3      	cmp	r3, r4
 800f77e:	d9fa      	bls.n	800f776 <_free_r+0x42>
 800f780:	6811      	ldr	r1, [r2, #0]
 800f782:	1850      	adds	r0, r2, r1
 800f784:	42a0      	cmp	r0, r4
 800f786:	d10b      	bne.n	800f7a0 <_free_r+0x6c>
 800f788:	6820      	ldr	r0, [r4, #0]
 800f78a:	4401      	add	r1, r0
 800f78c:	1850      	adds	r0, r2, r1
 800f78e:	4283      	cmp	r3, r0
 800f790:	6011      	str	r1, [r2, #0]
 800f792:	d1e0      	bne.n	800f756 <_free_r+0x22>
 800f794:	6818      	ldr	r0, [r3, #0]
 800f796:	685b      	ldr	r3, [r3, #4]
 800f798:	6053      	str	r3, [r2, #4]
 800f79a:	4408      	add	r0, r1
 800f79c:	6010      	str	r0, [r2, #0]
 800f79e:	e7da      	b.n	800f756 <_free_r+0x22>
 800f7a0:	d902      	bls.n	800f7a8 <_free_r+0x74>
 800f7a2:	230c      	movs	r3, #12
 800f7a4:	602b      	str	r3, [r5, #0]
 800f7a6:	e7d6      	b.n	800f756 <_free_r+0x22>
 800f7a8:	6820      	ldr	r0, [r4, #0]
 800f7aa:	1821      	adds	r1, r4, r0
 800f7ac:	428b      	cmp	r3, r1
 800f7ae:	bf04      	itt	eq
 800f7b0:	6819      	ldreq	r1, [r3, #0]
 800f7b2:	685b      	ldreq	r3, [r3, #4]
 800f7b4:	6063      	str	r3, [r4, #4]
 800f7b6:	bf04      	itt	eq
 800f7b8:	1809      	addeq	r1, r1, r0
 800f7ba:	6021      	streq	r1, [r4, #0]
 800f7bc:	6054      	str	r4, [r2, #4]
 800f7be:	e7ca      	b.n	800f756 <_free_r+0x22>
 800f7c0:	bd38      	pop	{r3, r4, r5, pc}
 800f7c2:	bf00      	nop
 800f7c4:	2400057c 	.word	0x2400057c

0800f7c8 <malloc>:
 800f7c8:	4b02      	ldr	r3, [pc, #8]	@ (800f7d4 <malloc+0xc>)
 800f7ca:	4601      	mov	r1, r0
 800f7cc:	6818      	ldr	r0, [r3, #0]
 800f7ce:	f000 b825 	b.w	800f81c <_malloc_r>
 800f7d2:	bf00      	nop
 800f7d4:	2400001c 	.word	0x2400001c

0800f7d8 <sbrk_aligned>:
 800f7d8:	b570      	push	{r4, r5, r6, lr}
 800f7da:	4e0f      	ldr	r6, [pc, #60]	@ (800f818 <sbrk_aligned+0x40>)
 800f7dc:	460c      	mov	r4, r1
 800f7de:	6831      	ldr	r1, [r6, #0]
 800f7e0:	4605      	mov	r5, r0
 800f7e2:	b911      	cbnz	r1, 800f7ea <sbrk_aligned+0x12>
 800f7e4:	f001 fdb8 	bl	8011358 <_sbrk_r>
 800f7e8:	6030      	str	r0, [r6, #0]
 800f7ea:	4621      	mov	r1, r4
 800f7ec:	4628      	mov	r0, r5
 800f7ee:	f001 fdb3 	bl	8011358 <_sbrk_r>
 800f7f2:	1c43      	adds	r3, r0, #1
 800f7f4:	d103      	bne.n	800f7fe <sbrk_aligned+0x26>
 800f7f6:	f04f 34ff 	mov.w	r4, #4294967295
 800f7fa:	4620      	mov	r0, r4
 800f7fc:	bd70      	pop	{r4, r5, r6, pc}
 800f7fe:	1cc4      	adds	r4, r0, #3
 800f800:	f024 0403 	bic.w	r4, r4, #3
 800f804:	42a0      	cmp	r0, r4
 800f806:	d0f8      	beq.n	800f7fa <sbrk_aligned+0x22>
 800f808:	1a21      	subs	r1, r4, r0
 800f80a:	4628      	mov	r0, r5
 800f80c:	f001 fda4 	bl	8011358 <_sbrk_r>
 800f810:	3001      	adds	r0, #1
 800f812:	d1f2      	bne.n	800f7fa <sbrk_aligned+0x22>
 800f814:	e7ef      	b.n	800f7f6 <sbrk_aligned+0x1e>
 800f816:	bf00      	nop
 800f818:	24000578 	.word	0x24000578

0800f81c <_malloc_r>:
 800f81c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f820:	1ccd      	adds	r5, r1, #3
 800f822:	f025 0503 	bic.w	r5, r5, #3
 800f826:	3508      	adds	r5, #8
 800f828:	2d0c      	cmp	r5, #12
 800f82a:	bf38      	it	cc
 800f82c:	250c      	movcc	r5, #12
 800f82e:	2d00      	cmp	r5, #0
 800f830:	4606      	mov	r6, r0
 800f832:	db01      	blt.n	800f838 <_malloc_r+0x1c>
 800f834:	42a9      	cmp	r1, r5
 800f836:	d904      	bls.n	800f842 <_malloc_r+0x26>
 800f838:	230c      	movs	r3, #12
 800f83a:	6033      	str	r3, [r6, #0]
 800f83c:	2000      	movs	r0, #0
 800f83e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f842:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800f918 <_malloc_r+0xfc>
 800f846:	f000 f869 	bl	800f91c <__malloc_lock>
 800f84a:	f8d8 3000 	ldr.w	r3, [r8]
 800f84e:	461c      	mov	r4, r3
 800f850:	bb44      	cbnz	r4, 800f8a4 <_malloc_r+0x88>
 800f852:	4629      	mov	r1, r5
 800f854:	4630      	mov	r0, r6
 800f856:	f7ff ffbf 	bl	800f7d8 <sbrk_aligned>
 800f85a:	1c43      	adds	r3, r0, #1
 800f85c:	4604      	mov	r4, r0
 800f85e:	d158      	bne.n	800f912 <_malloc_r+0xf6>
 800f860:	f8d8 4000 	ldr.w	r4, [r8]
 800f864:	4627      	mov	r7, r4
 800f866:	2f00      	cmp	r7, #0
 800f868:	d143      	bne.n	800f8f2 <_malloc_r+0xd6>
 800f86a:	2c00      	cmp	r4, #0
 800f86c:	d04b      	beq.n	800f906 <_malloc_r+0xea>
 800f86e:	6823      	ldr	r3, [r4, #0]
 800f870:	4639      	mov	r1, r7
 800f872:	4630      	mov	r0, r6
 800f874:	eb04 0903 	add.w	r9, r4, r3
 800f878:	f001 fd6e 	bl	8011358 <_sbrk_r>
 800f87c:	4581      	cmp	r9, r0
 800f87e:	d142      	bne.n	800f906 <_malloc_r+0xea>
 800f880:	6821      	ldr	r1, [r4, #0]
 800f882:	1a6d      	subs	r5, r5, r1
 800f884:	4629      	mov	r1, r5
 800f886:	4630      	mov	r0, r6
 800f888:	f7ff ffa6 	bl	800f7d8 <sbrk_aligned>
 800f88c:	3001      	adds	r0, #1
 800f88e:	d03a      	beq.n	800f906 <_malloc_r+0xea>
 800f890:	6823      	ldr	r3, [r4, #0]
 800f892:	442b      	add	r3, r5
 800f894:	6023      	str	r3, [r4, #0]
 800f896:	f8d8 3000 	ldr.w	r3, [r8]
 800f89a:	685a      	ldr	r2, [r3, #4]
 800f89c:	bb62      	cbnz	r2, 800f8f8 <_malloc_r+0xdc>
 800f89e:	f8c8 7000 	str.w	r7, [r8]
 800f8a2:	e00f      	b.n	800f8c4 <_malloc_r+0xa8>
 800f8a4:	6822      	ldr	r2, [r4, #0]
 800f8a6:	1b52      	subs	r2, r2, r5
 800f8a8:	d420      	bmi.n	800f8ec <_malloc_r+0xd0>
 800f8aa:	2a0b      	cmp	r2, #11
 800f8ac:	d917      	bls.n	800f8de <_malloc_r+0xc2>
 800f8ae:	1961      	adds	r1, r4, r5
 800f8b0:	42a3      	cmp	r3, r4
 800f8b2:	6025      	str	r5, [r4, #0]
 800f8b4:	bf18      	it	ne
 800f8b6:	6059      	strne	r1, [r3, #4]
 800f8b8:	6863      	ldr	r3, [r4, #4]
 800f8ba:	bf08      	it	eq
 800f8bc:	f8c8 1000 	streq.w	r1, [r8]
 800f8c0:	5162      	str	r2, [r4, r5]
 800f8c2:	604b      	str	r3, [r1, #4]
 800f8c4:	4630      	mov	r0, r6
 800f8c6:	f000 f82f 	bl	800f928 <__malloc_unlock>
 800f8ca:	f104 000b 	add.w	r0, r4, #11
 800f8ce:	1d23      	adds	r3, r4, #4
 800f8d0:	f020 0007 	bic.w	r0, r0, #7
 800f8d4:	1ac2      	subs	r2, r0, r3
 800f8d6:	bf1c      	itt	ne
 800f8d8:	1a1b      	subne	r3, r3, r0
 800f8da:	50a3      	strne	r3, [r4, r2]
 800f8dc:	e7af      	b.n	800f83e <_malloc_r+0x22>
 800f8de:	6862      	ldr	r2, [r4, #4]
 800f8e0:	42a3      	cmp	r3, r4
 800f8e2:	bf0c      	ite	eq
 800f8e4:	f8c8 2000 	streq.w	r2, [r8]
 800f8e8:	605a      	strne	r2, [r3, #4]
 800f8ea:	e7eb      	b.n	800f8c4 <_malloc_r+0xa8>
 800f8ec:	4623      	mov	r3, r4
 800f8ee:	6864      	ldr	r4, [r4, #4]
 800f8f0:	e7ae      	b.n	800f850 <_malloc_r+0x34>
 800f8f2:	463c      	mov	r4, r7
 800f8f4:	687f      	ldr	r7, [r7, #4]
 800f8f6:	e7b6      	b.n	800f866 <_malloc_r+0x4a>
 800f8f8:	461a      	mov	r2, r3
 800f8fa:	685b      	ldr	r3, [r3, #4]
 800f8fc:	42a3      	cmp	r3, r4
 800f8fe:	d1fb      	bne.n	800f8f8 <_malloc_r+0xdc>
 800f900:	2300      	movs	r3, #0
 800f902:	6053      	str	r3, [r2, #4]
 800f904:	e7de      	b.n	800f8c4 <_malloc_r+0xa8>
 800f906:	230c      	movs	r3, #12
 800f908:	6033      	str	r3, [r6, #0]
 800f90a:	4630      	mov	r0, r6
 800f90c:	f000 f80c 	bl	800f928 <__malloc_unlock>
 800f910:	e794      	b.n	800f83c <_malloc_r+0x20>
 800f912:	6005      	str	r5, [r0, #0]
 800f914:	e7d6      	b.n	800f8c4 <_malloc_r+0xa8>
 800f916:	bf00      	nop
 800f918:	2400057c 	.word	0x2400057c

0800f91c <__malloc_lock>:
 800f91c:	4801      	ldr	r0, [pc, #4]	@ (800f924 <__malloc_lock+0x8>)
 800f91e:	f7ff b922 	b.w	800eb66 <__retarget_lock_acquire_recursive>
 800f922:	bf00      	nop
 800f924:	24000574 	.word	0x24000574

0800f928 <__malloc_unlock>:
 800f928:	4801      	ldr	r0, [pc, #4]	@ (800f930 <__malloc_unlock+0x8>)
 800f92a:	f7ff b91d 	b.w	800eb68 <__retarget_lock_release_recursive>
 800f92e:	bf00      	nop
 800f930:	24000574 	.word	0x24000574

0800f934 <_Balloc>:
 800f934:	b570      	push	{r4, r5, r6, lr}
 800f936:	69c6      	ldr	r6, [r0, #28]
 800f938:	4604      	mov	r4, r0
 800f93a:	460d      	mov	r5, r1
 800f93c:	b976      	cbnz	r6, 800f95c <_Balloc+0x28>
 800f93e:	2010      	movs	r0, #16
 800f940:	f7ff ff42 	bl	800f7c8 <malloc>
 800f944:	4602      	mov	r2, r0
 800f946:	61e0      	str	r0, [r4, #28]
 800f948:	b920      	cbnz	r0, 800f954 <_Balloc+0x20>
 800f94a:	4b18      	ldr	r3, [pc, #96]	@ (800f9ac <_Balloc+0x78>)
 800f94c:	4818      	ldr	r0, [pc, #96]	@ (800f9b0 <_Balloc+0x7c>)
 800f94e:	216b      	movs	r1, #107	@ 0x6b
 800f950:	f001 fd2a 	bl	80113a8 <__assert_func>
 800f954:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f958:	6006      	str	r6, [r0, #0]
 800f95a:	60c6      	str	r6, [r0, #12]
 800f95c:	69e6      	ldr	r6, [r4, #28]
 800f95e:	68f3      	ldr	r3, [r6, #12]
 800f960:	b183      	cbz	r3, 800f984 <_Balloc+0x50>
 800f962:	69e3      	ldr	r3, [r4, #28]
 800f964:	68db      	ldr	r3, [r3, #12]
 800f966:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f96a:	b9b8      	cbnz	r0, 800f99c <_Balloc+0x68>
 800f96c:	2101      	movs	r1, #1
 800f96e:	fa01 f605 	lsl.w	r6, r1, r5
 800f972:	1d72      	adds	r2, r6, #5
 800f974:	0092      	lsls	r2, r2, #2
 800f976:	4620      	mov	r0, r4
 800f978:	f001 fd34 	bl	80113e4 <_calloc_r>
 800f97c:	b160      	cbz	r0, 800f998 <_Balloc+0x64>
 800f97e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800f982:	e00e      	b.n	800f9a2 <_Balloc+0x6e>
 800f984:	2221      	movs	r2, #33	@ 0x21
 800f986:	2104      	movs	r1, #4
 800f988:	4620      	mov	r0, r4
 800f98a:	f001 fd2b 	bl	80113e4 <_calloc_r>
 800f98e:	69e3      	ldr	r3, [r4, #28]
 800f990:	60f0      	str	r0, [r6, #12]
 800f992:	68db      	ldr	r3, [r3, #12]
 800f994:	2b00      	cmp	r3, #0
 800f996:	d1e4      	bne.n	800f962 <_Balloc+0x2e>
 800f998:	2000      	movs	r0, #0
 800f99a:	bd70      	pop	{r4, r5, r6, pc}
 800f99c:	6802      	ldr	r2, [r0, #0]
 800f99e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f9a2:	2300      	movs	r3, #0
 800f9a4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f9a8:	e7f7      	b.n	800f99a <_Balloc+0x66>
 800f9aa:	bf00      	nop
 800f9ac:	08012736 	.word	0x08012736
 800f9b0:	080127b6 	.word	0x080127b6

0800f9b4 <_Bfree>:
 800f9b4:	b570      	push	{r4, r5, r6, lr}
 800f9b6:	69c6      	ldr	r6, [r0, #28]
 800f9b8:	4605      	mov	r5, r0
 800f9ba:	460c      	mov	r4, r1
 800f9bc:	b976      	cbnz	r6, 800f9dc <_Bfree+0x28>
 800f9be:	2010      	movs	r0, #16
 800f9c0:	f7ff ff02 	bl	800f7c8 <malloc>
 800f9c4:	4602      	mov	r2, r0
 800f9c6:	61e8      	str	r0, [r5, #28]
 800f9c8:	b920      	cbnz	r0, 800f9d4 <_Bfree+0x20>
 800f9ca:	4b09      	ldr	r3, [pc, #36]	@ (800f9f0 <_Bfree+0x3c>)
 800f9cc:	4809      	ldr	r0, [pc, #36]	@ (800f9f4 <_Bfree+0x40>)
 800f9ce:	218f      	movs	r1, #143	@ 0x8f
 800f9d0:	f001 fcea 	bl	80113a8 <__assert_func>
 800f9d4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f9d8:	6006      	str	r6, [r0, #0]
 800f9da:	60c6      	str	r6, [r0, #12]
 800f9dc:	b13c      	cbz	r4, 800f9ee <_Bfree+0x3a>
 800f9de:	69eb      	ldr	r3, [r5, #28]
 800f9e0:	6862      	ldr	r2, [r4, #4]
 800f9e2:	68db      	ldr	r3, [r3, #12]
 800f9e4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f9e8:	6021      	str	r1, [r4, #0]
 800f9ea:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f9ee:	bd70      	pop	{r4, r5, r6, pc}
 800f9f0:	08012736 	.word	0x08012736
 800f9f4:	080127b6 	.word	0x080127b6

0800f9f8 <__multadd>:
 800f9f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f9fc:	690d      	ldr	r5, [r1, #16]
 800f9fe:	4607      	mov	r7, r0
 800fa00:	460c      	mov	r4, r1
 800fa02:	461e      	mov	r6, r3
 800fa04:	f101 0c14 	add.w	ip, r1, #20
 800fa08:	2000      	movs	r0, #0
 800fa0a:	f8dc 3000 	ldr.w	r3, [ip]
 800fa0e:	b299      	uxth	r1, r3
 800fa10:	fb02 6101 	mla	r1, r2, r1, r6
 800fa14:	0c1e      	lsrs	r6, r3, #16
 800fa16:	0c0b      	lsrs	r3, r1, #16
 800fa18:	fb02 3306 	mla	r3, r2, r6, r3
 800fa1c:	b289      	uxth	r1, r1
 800fa1e:	3001      	adds	r0, #1
 800fa20:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800fa24:	4285      	cmp	r5, r0
 800fa26:	f84c 1b04 	str.w	r1, [ip], #4
 800fa2a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800fa2e:	dcec      	bgt.n	800fa0a <__multadd+0x12>
 800fa30:	b30e      	cbz	r6, 800fa76 <__multadd+0x7e>
 800fa32:	68a3      	ldr	r3, [r4, #8]
 800fa34:	42ab      	cmp	r3, r5
 800fa36:	dc19      	bgt.n	800fa6c <__multadd+0x74>
 800fa38:	6861      	ldr	r1, [r4, #4]
 800fa3a:	4638      	mov	r0, r7
 800fa3c:	3101      	adds	r1, #1
 800fa3e:	f7ff ff79 	bl	800f934 <_Balloc>
 800fa42:	4680      	mov	r8, r0
 800fa44:	b928      	cbnz	r0, 800fa52 <__multadd+0x5a>
 800fa46:	4602      	mov	r2, r0
 800fa48:	4b0c      	ldr	r3, [pc, #48]	@ (800fa7c <__multadd+0x84>)
 800fa4a:	480d      	ldr	r0, [pc, #52]	@ (800fa80 <__multadd+0x88>)
 800fa4c:	21ba      	movs	r1, #186	@ 0xba
 800fa4e:	f001 fcab 	bl	80113a8 <__assert_func>
 800fa52:	6922      	ldr	r2, [r4, #16]
 800fa54:	3202      	adds	r2, #2
 800fa56:	f104 010c 	add.w	r1, r4, #12
 800fa5a:	0092      	lsls	r2, r2, #2
 800fa5c:	300c      	adds	r0, #12
 800fa5e:	f001 fc8b 	bl	8011378 <memcpy>
 800fa62:	4621      	mov	r1, r4
 800fa64:	4638      	mov	r0, r7
 800fa66:	f7ff ffa5 	bl	800f9b4 <_Bfree>
 800fa6a:	4644      	mov	r4, r8
 800fa6c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800fa70:	3501      	adds	r5, #1
 800fa72:	615e      	str	r6, [r3, #20]
 800fa74:	6125      	str	r5, [r4, #16]
 800fa76:	4620      	mov	r0, r4
 800fa78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fa7c:	080127a5 	.word	0x080127a5
 800fa80:	080127b6 	.word	0x080127b6

0800fa84 <__s2b>:
 800fa84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fa88:	460c      	mov	r4, r1
 800fa8a:	4615      	mov	r5, r2
 800fa8c:	461f      	mov	r7, r3
 800fa8e:	2209      	movs	r2, #9
 800fa90:	3308      	adds	r3, #8
 800fa92:	4606      	mov	r6, r0
 800fa94:	fb93 f3f2 	sdiv	r3, r3, r2
 800fa98:	2100      	movs	r1, #0
 800fa9a:	2201      	movs	r2, #1
 800fa9c:	429a      	cmp	r2, r3
 800fa9e:	db09      	blt.n	800fab4 <__s2b+0x30>
 800faa0:	4630      	mov	r0, r6
 800faa2:	f7ff ff47 	bl	800f934 <_Balloc>
 800faa6:	b940      	cbnz	r0, 800faba <__s2b+0x36>
 800faa8:	4602      	mov	r2, r0
 800faaa:	4b19      	ldr	r3, [pc, #100]	@ (800fb10 <__s2b+0x8c>)
 800faac:	4819      	ldr	r0, [pc, #100]	@ (800fb14 <__s2b+0x90>)
 800faae:	21d3      	movs	r1, #211	@ 0xd3
 800fab0:	f001 fc7a 	bl	80113a8 <__assert_func>
 800fab4:	0052      	lsls	r2, r2, #1
 800fab6:	3101      	adds	r1, #1
 800fab8:	e7f0      	b.n	800fa9c <__s2b+0x18>
 800faba:	9b08      	ldr	r3, [sp, #32]
 800fabc:	6143      	str	r3, [r0, #20]
 800fabe:	2d09      	cmp	r5, #9
 800fac0:	f04f 0301 	mov.w	r3, #1
 800fac4:	6103      	str	r3, [r0, #16]
 800fac6:	dd16      	ble.n	800faf6 <__s2b+0x72>
 800fac8:	f104 0909 	add.w	r9, r4, #9
 800facc:	46c8      	mov	r8, r9
 800face:	442c      	add	r4, r5
 800fad0:	f818 3b01 	ldrb.w	r3, [r8], #1
 800fad4:	4601      	mov	r1, r0
 800fad6:	3b30      	subs	r3, #48	@ 0x30
 800fad8:	220a      	movs	r2, #10
 800fada:	4630      	mov	r0, r6
 800fadc:	f7ff ff8c 	bl	800f9f8 <__multadd>
 800fae0:	45a0      	cmp	r8, r4
 800fae2:	d1f5      	bne.n	800fad0 <__s2b+0x4c>
 800fae4:	f1a5 0408 	sub.w	r4, r5, #8
 800fae8:	444c      	add	r4, r9
 800faea:	1b2d      	subs	r5, r5, r4
 800faec:	1963      	adds	r3, r4, r5
 800faee:	42bb      	cmp	r3, r7
 800faf0:	db04      	blt.n	800fafc <__s2b+0x78>
 800faf2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800faf6:	340a      	adds	r4, #10
 800faf8:	2509      	movs	r5, #9
 800fafa:	e7f6      	b.n	800faea <__s2b+0x66>
 800fafc:	f814 3b01 	ldrb.w	r3, [r4], #1
 800fb00:	4601      	mov	r1, r0
 800fb02:	3b30      	subs	r3, #48	@ 0x30
 800fb04:	220a      	movs	r2, #10
 800fb06:	4630      	mov	r0, r6
 800fb08:	f7ff ff76 	bl	800f9f8 <__multadd>
 800fb0c:	e7ee      	b.n	800faec <__s2b+0x68>
 800fb0e:	bf00      	nop
 800fb10:	080127a5 	.word	0x080127a5
 800fb14:	080127b6 	.word	0x080127b6

0800fb18 <__hi0bits>:
 800fb18:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800fb1c:	4603      	mov	r3, r0
 800fb1e:	bf36      	itet	cc
 800fb20:	0403      	lslcc	r3, r0, #16
 800fb22:	2000      	movcs	r0, #0
 800fb24:	2010      	movcc	r0, #16
 800fb26:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800fb2a:	bf3c      	itt	cc
 800fb2c:	021b      	lslcc	r3, r3, #8
 800fb2e:	3008      	addcc	r0, #8
 800fb30:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800fb34:	bf3c      	itt	cc
 800fb36:	011b      	lslcc	r3, r3, #4
 800fb38:	3004      	addcc	r0, #4
 800fb3a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800fb3e:	bf3c      	itt	cc
 800fb40:	009b      	lslcc	r3, r3, #2
 800fb42:	3002      	addcc	r0, #2
 800fb44:	2b00      	cmp	r3, #0
 800fb46:	db05      	blt.n	800fb54 <__hi0bits+0x3c>
 800fb48:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800fb4c:	f100 0001 	add.w	r0, r0, #1
 800fb50:	bf08      	it	eq
 800fb52:	2020      	moveq	r0, #32
 800fb54:	4770      	bx	lr

0800fb56 <__lo0bits>:
 800fb56:	6803      	ldr	r3, [r0, #0]
 800fb58:	4602      	mov	r2, r0
 800fb5a:	f013 0007 	ands.w	r0, r3, #7
 800fb5e:	d00b      	beq.n	800fb78 <__lo0bits+0x22>
 800fb60:	07d9      	lsls	r1, r3, #31
 800fb62:	d421      	bmi.n	800fba8 <__lo0bits+0x52>
 800fb64:	0798      	lsls	r0, r3, #30
 800fb66:	bf49      	itett	mi
 800fb68:	085b      	lsrmi	r3, r3, #1
 800fb6a:	089b      	lsrpl	r3, r3, #2
 800fb6c:	2001      	movmi	r0, #1
 800fb6e:	6013      	strmi	r3, [r2, #0]
 800fb70:	bf5c      	itt	pl
 800fb72:	6013      	strpl	r3, [r2, #0]
 800fb74:	2002      	movpl	r0, #2
 800fb76:	4770      	bx	lr
 800fb78:	b299      	uxth	r1, r3
 800fb7a:	b909      	cbnz	r1, 800fb80 <__lo0bits+0x2a>
 800fb7c:	0c1b      	lsrs	r3, r3, #16
 800fb7e:	2010      	movs	r0, #16
 800fb80:	b2d9      	uxtb	r1, r3
 800fb82:	b909      	cbnz	r1, 800fb88 <__lo0bits+0x32>
 800fb84:	3008      	adds	r0, #8
 800fb86:	0a1b      	lsrs	r3, r3, #8
 800fb88:	0719      	lsls	r1, r3, #28
 800fb8a:	bf04      	itt	eq
 800fb8c:	091b      	lsreq	r3, r3, #4
 800fb8e:	3004      	addeq	r0, #4
 800fb90:	0799      	lsls	r1, r3, #30
 800fb92:	bf04      	itt	eq
 800fb94:	089b      	lsreq	r3, r3, #2
 800fb96:	3002      	addeq	r0, #2
 800fb98:	07d9      	lsls	r1, r3, #31
 800fb9a:	d403      	bmi.n	800fba4 <__lo0bits+0x4e>
 800fb9c:	085b      	lsrs	r3, r3, #1
 800fb9e:	f100 0001 	add.w	r0, r0, #1
 800fba2:	d003      	beq.n	800fbac <__lo0bits+0x56>
 800fba4:	6013      	str	r3, [r2, #0]
 800fba6:	4770      	bx	lr
 800fba8:	2000      	movs	r0, #0
 800fbaa:	4770      	bx	lr
 800fbac:	2020      	movs	r0, #32
 800fbae:	4770      	bx	lr

0800fbb0 <__i2b>:
 800fbb0:	b510      	push	{r4, lr}
 800fbb2:	460c      	mov	r4, r1
 800fbb4:	2101      	movs	r1, #1
 800fbb6:	f7ff febd 	bl	800f934 <_Balloc>
 800fbba:	4602      	mov	r2, r0
 800fbbc:	b928      	cbnz	r0, 800fbca <__i2b+0x1a>
 800fbbe:	4b05      	ldr	r3, [pc, #20]	@ (800fbd4 <__i2b+0x24>)
 800fbc0:	4805      	ldr	r0, [pc, #20]	@ (800fbd8 <__i2b+0x28>)
 800fbc2:	f240 1145 	movw	r1, #325	@ 0x145
 800fbc6:	f001 fbef 	bl	80113a8 <__assert_func>
 800fbca:	2301      	movs	r3, #1
 800fbcc:	6144      	str	r4, [r0, #20]
 800fbce:	6103      	str	r3, [r0, #16]
 800fbd0:	bd10      	pop	{r4, pc}
 800fbd2:	bf00      	nop
 800fbd4:	080127a5 	.word	0x080127a5
 800fbd8:	080127b6 	.word	0x080127b6

0800fbdc <__multiply>:
 800fbdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fbe0:	4614      	mov	r4, r2
 800fbe2:	690a      	ldr	r2, [r1, #16]
 800fbe4:	6923      	ldr	r3, [r4, #16]
 800fbe6:	429a      	cmp	r2, r3
 800fbe8:	bfa8      	it	ge
 800fbea:	4623      	movge	r3, r4
 800fbec:	460f      	mov	r7, r1
 800fbee:	bfa4      	itt	ge
 800fbf0:	460c      	movge	r4, r1
 800fbf2:	461f      	movge	r7, r3
 800fbf4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800fbf8:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800fbfc:	68a3      	ldr	r3, [r4, #8]
 800fbfe:	6861      	ldr	r1, [r4, #4]
 800fc00:	eb0a 0609 	add.w	r6, sl, r9
 800fc04:	42b3      	cmp	r3, r6
 800fc06:	b085      	sub	sp, #20
 800fc08:	bfb8      	it	lt
 800fc0a:	3101      	addlt	r1, #1
 800fc0c:	f7ff fe92 	bl	800f934 <_Balloc>
 800fc10:	b930      	cbnz	r0, 800fc20 <__multiply+0x44>
 800fc12:	4602      	mov	r2, r0
 800fc14:	4b44      	ldr	r3, [pc, #272]	@ (800fd28 <__multiply+0x14c>)
 800fc16:	4845      	ldr	r0, [pc, #276]	@ (800fd2c <__multiply+0x150>)
 800fc18:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800fc1c:	f001 fbc4 	bl	80113a8 <__assert_func>
 800fc20:	f100 0514 	add.w	r5, r0, #20
 800fc24:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800fc28:	462b      	mov	r3, r5
 800fc2a:	2200      	movs	r2, #0
 800fc2c:	4543      	cmp	r3, r8
 800fc2e:	d321      	bcc.n	800fc74 <__multiply+0x98>
 800fc30:	f107 0114 	add.w	r1, r7, #20
 800fc34:	f104 0214 	add.w	r2, r4, #20
 800fc38:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800fc3c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800fc40:	9302      	str	r3, [sp, #8]
 800fc42:	1b13      	subs	r3, r2, r4
 800fc44:	3b15      	subs	r3, #21
 800fc46:	f023 0303 	bic.w	r3, r3, #3
 800fc4a:	3304      	adds	r3, #4
 800fc4c:	f104 0715 	add.w	r7, r4, #21
 800fc50:	42ba      	cmp	r2, r7
 800fc52:	bf38      	it	cc
 800fc54:	2304      	movcc	r3, #4
 800fc56:	9301      	str	r3, [sp, #4]
 800fc58:	9b02      	ldr	r3, [sp, #8]
 800fc5a:	9103      	str	r1, [sp, #12]
 800fc5c:	428b      	cmp	r3, r1
 800fc5e:	d80c      	bhi.n	800fc7a <__multiply+0x9e>
 800fc60:	2e00      	cmp	r6, #0
 800fc62:	dd03      	ble.n	800fc6c <__multiply+0x90>
 800fc64:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800fc68:	2b00      	cmp	r3, #0
 800fc6a:	d05b      	beq.n	800fd24 <__multiply+0x148>
 800fc6c:	6106      	str	r6, [r0, #16]
 800fc6e:	b005      	add	sp, #20
 800fc70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fc74:	f843 2b04 	str.w	r2, [r3], #4
 800fc78:	e7d8      	b.n	800fc2c <__multiply+0x50>
 800fc7a:	f8b1 a000 	ldrh.w	sl, [r1]
 800fc7e:	f1ba 0f00 	cmp.w	sl, #0
 800fc82:	d024      	beq.n	800fcce <__multiply+0xf2>
 800fc84:	f104 0e14 	add.w	lr, r4, #20
 800fc88:	46a9      	mov	r9, r5
 800fc8a:	f04f 0c00 	mov.w	ip, #0
 800fc8e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800fc92:	f8d9 3000 	ldr.w	r3, [r9]
 800fc96:	fa1f fb87 	uxth.w	fp, r7
 800fc9a:	b29b      	uxth	r3, r3
 800fc9c:	fb0a 330b 	mla	r3, sl, fp, r3
 800fca0:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800fca4:	f8d9 7000 	ldr.w	r7, [r9]
 800fca8:	4463      	add	r3, ip
 800fcaa:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800fcae:	fb0a c70b 	mla	r7, sl, fp, ip
 800fcb2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800fcb6:	b29b      	uxth	r3, r3
 800fcb8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800fcbc:	4572      	cmp	r2, lr
 800fcbe:	f849 3b04 	str.w	r3, [r9], #4
 800fcc2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800fcc6:	d8e2      	bhi.n	800fc8e <__multiply+0xb2>
 800fcc8:	9b01      	ldr	r3, [sp, #4]
 800fcca:	f845 c003 	str.w	ip, [r5, r3]
 800fcce:	9b03      	ldr	r3, [sp, #12]
 800fcd0:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800fcd4:	3104      	adds	r1, #4
 800fcd6:	f1b9 0f00 	cmp.w	r9, #0
 800fcda:	d021      	beq.n	800fd20 <__multiply+0x144>
 800fcdc:	682b      	ldr	r3, [r5, #0]
 800fcde:	f104 0c14 	add.w	ip, r4, #20
 800fce2:	46ae      	mov	lr, r5
 800fce4:	f04f 0a00 	mov.w	sl, #0
 800fce8:	f8bc b000 	ldrh.w	fp, [ip]
 800fcec:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800fcf0:	fb09 770b 	mla	r7, r9, fp, r7
 800fcf4:	4457      	add	r7, sl
 800fcf6:	b29b      	uxth	r3, r3
 800fcf8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800fcfc:	f84e 3b04 	str.w	r3, [lr], #4
 800fd00:	f85c 3b04 	ldr.w	r3, [ip], #4
 800fd04:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800fd08:	f8be 3000 	ldrh.w	r3, [lr]
 800fd0c:	fb09 330a 	mla	r3, r9, sl, r3
 800fd10:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800fd14:	4562      	cmp	r2, ip
 800fd16:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800fd1a:	d8e5      	bhi.n	800fce8 <__multiply+0x10c>
 800fd1c:	9f01      	ldr	r7, [sp, #4]
 800fd1e:	51eb      	str	r3, [r5, r7]
 800fd20:	3504      	adds	r5, #4
 800fd22:	e799      	b.n	800fc58 <__multiply+0x7c>
 800fd24:	3e01      	subs	r6, #1
 800fd26:	e79b      	b.n	800fc60 <__multiply+0x84>
 800fd28:	080127a5 	.word	0x080127a5
 800fd2c:	080127b6 	.word	0x080127b6

0800fd30 <__pow5mult>:
 800fd30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fd34:	4615      	mov	r5, r2
 800fd36:	f012 0203 	ands.w	r2, r2, #3
 800fd3a:	4607      	mov	r7, r0
 800fd3c:	460e      	mov	r6, r1
 800fd3e:	d007      	beq.n	800fd50 <__pow5mult+0x20>
 800fd40:	4c25      	ldr	r4, [pc, #148]	@ (800fdd8 <__pow5mult+0xa8>)
 800fd42:	3a01      	subs	r2, #1
 800fd44:	2300      	movs	r3, #0
 800fd46:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800fd4a:	f7ff fe55 	bl	800f9f8 <__multadd>
 800fd4e:	4606      	mov	r6, r0
 800fd50:	10ad      	asrs	r5, r5, #2
 800fd52:	d03d      	beq.n	800fdd0 <__pow5mult+0xa0>
 800fd54:	69fc      	ldr	r4, [r7, #28]
 800fd56:	b97c      	cbnz	r4, 800fd78 <__pow5mult+0x48>
 800fd58:	2010      	movs	r0, #16
 800fd5a:	f7ff fd35 	bl	800f7c8 <malloc>
 800fd5e:	4602      	mov	r2, r0
 800fd60:	61f8      	str	r0, [r7, #28]
 800fd62:	b928      	cbnz	r0, 800fd70 <__pow5mult+0x40>
 800fd64:	4b1d      	ldr	r3, [pc, #116]	@ (800fddc <__pow5mult+0xac>)
 800fd66:	481e      	ldr	r0, [pc, #120]	@ (800fde0 <__pow5mult+0xb0>)
 800fd68:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800fd6c:	f001 fb1c 	bl	80113a8 <__assert_func>
 800fd70:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800fd74:	6004      	str	r4, [r0, #0]
 800fd76:	60c4      	str	r4, [r0, #12]
 800fd78:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800fd7c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800fd80:	b94c      	cbnz	r4, 800fd96 <__pow5mult+0x66>
 800fd82:	f240 2171 	movw	r1, #625	@ 0x271
 800fd86:	4638      	mov	r0, r7
 800fd88:	f7ff ff12 	bl	800fbb0 <__i2b>
 800fd8c:	2300      	movs	r3, #0
 800fd8e:	f8c8 0008 	str.w	r0, [r8, #8]
 800fd92:	4604      	mov	r4, r0
 800fd94:	6003      	str	r3, [r0, #0]
 800fd96:	f04f 0900 	mov.w	r9, #0
 800fd9a:	07eb      	lsls	r3, r5, #31
 800fd9c:	d50a      	bpl.n	800fdb4 <__pow5mult+0x84>
 800fd9e:	4631      	mov	r1, r6
 800fda0:	4622      	mov	r2, r4
 800fda2:	4638      	mov	r0, r7
 800fda4:	f7ff ff1a 	bl	800fbdc <__multiply>
 800fda8:	4631      	mov	r1, r6
 800fdaa:	4680      	mov	r8, r0
 800fdac:	4638      	mov	r0, r7
 800fdae:	f7ff fe01 	bl	800f9b4 <_Bfree>
 800fdb2:	4646      	mov	r6, r8
 800fdb4:	106d      	asrs	r5, r5, #1
 800fdb6:	d00b      	beq.n	800fdd0 <__pow5mult+0xa0>
 800fdb8:	6820      	ldr	r0, [r4, #0]
 800fdba:	b938      	cbnz	r0, 800fdcc <__pow5mult+0x9c>
 800fdbc:	4622      	mov	r2, r4
 800fdbe:	4621      	mov	r1, r4
 800fdc0:	4638      	mov	r0, r7
 800fdc2:	f7ff ff0b 	bl	800fbdc <__multiply>
 800fdc6:	6020      	str	r0, [r4, #0]
 800fdc8:	f8c0 9000 	str.w	r9, [r0]
 800fdcc:	4604      	mov	r4, r0
 800fdce:	e7e4      	b.n	800fd9a <__pow5mult+0x6a>
 800fdd0:	4630      	mov	r0, r6
 800fdd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fdd6:	bf00      	nop
 800fdd8:	08012810 	.word	0x08012810
 800fddc:	08012736 	.word	0x08012736
 800fde0:	080127b6 	.word	0x080127b6

0800fde4 <__lshift>:
 800fde4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fde8:	460c      	mov	r4, r1
 800fdea:	6849      	ldr	r1, [r1, #4]
 800fdec:	6923      	ldr	r3, [r4, #16]
 800fdee:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800fdf2:	68a3      	ldr	r3, [r4, #8]
 800fdf4:	4607      	mov	r7, r0
 800fdf6:	4691      	mov	r9, r2
 800fdf8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800fdfc:	f108 0601 	add.w	r6, r8, #1
 800fe00:	42b3      	cmp	r3, r6
 800fe02:	db0b      	blt.n	800fe1c <__lshift+0x38>
 800fe04:	4638      	mov	r0, r7
 800fe06:	f7ff fd95 	bl	800f934 <_Balloc>
 800fe0a:	4605      	mov	r5, r0
 800fe0c:	b948      	cbnz	r0, 800fe22 <__lshift+0x3e>
 800fe0e:	4602      	mov	r2, r0
 800fe10:	4b28      	ldr	r3, [pc, #160]	@ (800feb4 <__lshift+0xd0>)
 800fe12:	4829      	ldr	r0, [pc, #164]	@ (800feb8 <__lshift+0xd4>)
 800fe14:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800fe18:	f001 fac6 	bl	80113a8 <__assert_func>
 800fe1c:	3101      	adds	r1, #1
 800fe1e:	005b      	lsls	r3, r3, #1
 800fe20:	e7ee      	b.n	800fe00 <__lshift+0x1c>
 800fe22:	2300      	movs	r3, #0
 800fe24:	f100 0114 	add.w	r1, r0, #20
 800fe28:	f100 0210 	add.w	r2, r0, #16
 800fe2c:	4618      	mov	r0, r3
 800fe2e:	4553      	cmp	r3, sl
 800fe30:	db33      	blt.n	800fe9a <__lshift+0xb6>
 800fe32:	6920      	ldr	r0, [r4, #16]
 800fe34:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800fe38:	f104 0314 	add.w	r3, r4, #20
 800fe3c:	f019 091f 	ands.w	r9, r9, #31
 800fe40:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800fe44:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800fe48:	d02b      	beq.n	800fea2 <__lshift+0xbe>
 800fe4a:	f1c9 0e20 	rsb	lr, r9, #32
 800fe4e:	468a      	mov	sl, r1
 800fe50:	2200      	movs	r2, #0
 800fe52:	6818      	ldr	r0, [r3, #0]
 800fe54:	fa00 f009 	lsl.w	r0, r0, r9
 800fe58:	4310      	orrs	r0, r2
 800fe5a:	f84a 0b04 	str.w	r0, [sl], #4
 800fe5e:	f853 2b04 	ldr.w	r2, [r3], #4
 800fe62:	459c      	cmp	ip, r3
 800fe64:	fa22 f20e 	lsr.w	r2, r2, lr
 800fe68:	d8f3      	bhi.n	800fe52 <__lshift+0x6e>
 800fe6a:	ebac 0304 	sub.w	r3, ip, r4
 800fe6e:	3b15      	subs	r3, #21
 800fe70:	f023 0303 	bic.w	r3, r3, #3
 800fe74:	3304      	adds	r3, #4
 800fe76:	f104 0015 	add.w	r0, r4, #21
 800fe7a:	4584      	cmp	ip, r0
 800fe7c:	bf38      	it	cc
 800fe7e:	2304      	movcc	r3, #4
 800fe80:	50ca      	str	r2, [r1, r3]
 800fe82:	b10a      	cbz	r2, 800fe88 <__lshift+0xa4>
 800fe84:	f108 0602 	add.w	r6, r8, #2
 800fe88:	3e01      	subs	r6, #1
 800fe8a:	4638      	mov	r0, r7
 800fe8c:	612e      	str	r6, [r5, #16]
 800fe8e:	4621      	mov	r1, r4
 800fe90:	f7ff fd90 	bl	800f9b4 <_Bfree>
 800fe94:	4628      	mov	r0, r5
 800fe96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fe9a:	f842 0f04 	str.w	r0, [r2, #4]!
 800fe9e:	3301      	adds	r3, #1
 800fea0:	e7c5      	b.n	800fe2e <__lshift+0x4a>
 800fea2:	3904      	subs	r1, #4
 800fea4:	f853 2b04 	ldr.w	r2, [r3], #4
 800fea8:	f841 2f04 	str.w	r2, [r1, #4]!
 800feac:	459c      	cmp	ip, r3
 800feae:	d8f9      	bhi.n	800fea4 <__lshift+0xc0>
 800feb0:	e7ea      	b.n	800fe88 <__lshift+0xa4>
 800feb2:	bf00      	nop
 800feb4:	080127a5 	.word	0x080127a5
 800feb8:	080127b6 	.word	0x080127b6

0800febc <__mcmp>:
 800febc:	690a      	ldr	r2, [r1, #16]
 800febe:	4603      	mov	r3, r0
 800fec0:	6900      	ldr	r0, [r0, #16]
 800fec2:	1a80      	subs	r0, r0, r2
 800fec4:	b530      	push	{r4, r5, lr}
 800fec6:	d10e      	bne.n	800fee6 <__mcmp+0x2a>
 800fec8:	3314      	adds	r3, #20
 800feca:	3114      	adds	r1, #20
 800fecc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800fed0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800fed4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800fed8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800fedc:	4295      	cmp	r5, r2
 800fede:	d003      	beq.n	800fee8 <__mcmp+0x2c>
 800fee0:	d205      	bcs.n	800feee <__mcmp+0x32>
 800fee2:	f04f 30ff 	mov.w	r0, #4294967295
 800fee6:	bd30      	pop	{r4, r5, pc}
 800fee8:	42a3      	cmp	r3, r4
 800feea:	d3f3      	bcc.n	800fed4 <__mcmp+0x18>
 800feec:	e7fb      	b.n	800fee6 <__mcmp+0x2a>
 800feee:	2001      	movs	r0, #1
 800fef0:	e7f9      	b.n	800fee6 <__mcmp+0x2a>
	...

0800fef4 <__mdiff>:
 800fef4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fef8:	4689      	mov	r9, r1
 800fefa:	4606      	mov	r6, r0
 800fefc:	4611      	mov	r1, r2
 800fefe:	4648      	mov	r0, r9
 800ff00:	4614      	mov	r4, r2
 800ff02:	f7ff ffdb 	bl	800febc <__mcmp>
 800ff06:	1e05      	subs	r5, r0, #0
 800ff08:	d112      	bne.n	800ff30 <__mdiff+0x3c>
 800ff0a:	4629      	mov	r1, r5
 800ff0c:	4630      	mov	r0, r6
 800ff0e:	f7ff fd11 	bl	800f934 <_Balloc>
 800ff12:	4602      	mov	r2, r0
 800ff14:	b928      	cbnz	r0, 800ff22 <__mdiff+0x2e>
 800ff16:	4b3f      	ldr	r3, [pc, #252]	@ (8010014 <__mdiff+0x120>)
 800ff18:	f240 2137 	movw	r1, #567	@ 0x237
 800ff1c:	483e      	ldr	r0, [pc, #248]	@ (8010018 <__mdiff+0x124>)
 800ff1e:	f001 fa43 	bl	80113a8 <__assert_func>
 800ff22:	2301      	movs	r3, #1
 800ff24:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ff28:	4610      	mov	r0, r2
 800ff2a:	b003      	add	sp, #12
 800ff2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ff30:	bfbc      	itt	lt
 800ff32:	464b      	movlt	r3, r9
 800ff34:	46a1      	movlt	r9, r4
 800ff36:	4630      	mov	r0, r6
 800ff38:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800ff3c:	bfba      	itte	lt
 800ff3e:	461c      	movlt	r4, r3
 800ff40:	2501      	movlt	r5, #1
 800ff42:	2500      	movge	r5, #0
 800ff44:	f7ff fcf6 	bl	800f934 <_Balloc>
 800ff48:	4602      	mov	r2, r0
 800ff4a:	b918      	cbnz	r0, 800ff54 <__mdiff+0x60>
 800ff4c:	4b31      	ldr	r3, [pc, #196]	@ (8010014 <__mdiff+0x120>)
 800ff4e:	f240 2145 	movw	r1, #581	@ 0x245
 800ff52:	e7e3      	b.n	800ff1c <__mdiff+0x28>
 800ff54:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800ff58:	6926      	ldr	r6, [r4, #16]
 800ff5a:	60c5      	str	r5, [r0, #12]
 800ff5c:	f109 0310 	add.w	r3, r9, #16
 800ff60:	f109 0514 	add.w	r5, r9, #20
 800ff64:	f104 0e14 	add.w	lr, r4, #20
 800ff68:	f100 0b14 	add.w	fp, r0, #20
 800ff6c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800ff70:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800ff74:	9301      	str	r3, [sp, #4]
 800ff76:	46d9      	mov	r9, fp
 800ff78:	f04f 0c00 	mov.w	ip, #0
 800ff7c:	9b01      	ldr	r3, [sp, #4]
 800ff7e:	f85e 0b04 	ldr.w	r0, [lr], #4
 800ff82:	f853 af04 	ldr.w	sl, [r3, #4]!
 800ff86:	9301      	str	r3, [sp, #4]
 800ff88:	fa1f f38a 	uxth.w	r3, sl
 800ff8c:	4619      	mov	r1, r3
 800ff8e:	b283      	uxth	r3, r0
 800ff90:	1acb      	subs	r3, r1, r3
 800ff92:	0c00      	lsrs	r0, r0, #16
 800ff94:	4463      	add	r3, ip
 800ff96:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800ff9a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800ff9e:	b29b      	uxth	r3, r3
 800ffa0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800ffa4:	4576      	cmp	r6, lr
 800ffa6:	f849 3b04 	str.w	r3, [r9], #4
 800ffaa:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ffae:	d8e5      	bhi.n	800ff7c <__mdiff+0x88>
 800ffb0:	1b33      	subs	r3, r6, r4
 800ffb2:	3b15      	subs	r3, #21
 800ffb4:	f023 0303 	bic.w	r3, r3, #3
 800ffb8:	3415      	adds	r4, #21
 800ffba:	3304      	adds	r3, #4
 800ffbc:	42a6      	cmp	r6, r4
 800ffbe:	bf38      	it	cc
 800ffc0:	2304      	movcc	r3, #4
 800ffc2:	441d      	add	r5, r3
 800ffc4:	445b      	add	r3, fp
 800ffc6:	461e      	mov	r6, r3
 800ffc8:	462c      	mov	r4, r5
 800ffca:	4544      	cmp	r4, r8
 800ffcc:	d30e      	bcc.n	800ffec <__mdiff+0xf8>
 800ffce:	f108 0103 	add.w	r1, r8, #3
 800ffd2:	1b49      	subs	r1, r1, r5
 800ffd4:	f021 0103 	bic.w	r1, r1, #3
 800ffd8:	3d03      	subs	r5, #3
 800ffda:	45a8      	cmp	r8, r5
 800ffdc:	bf38      	it	cc
 800ffde:	2100      	movcc	r1, #0
 800ffe0:	440b      	add	r3, r1
 800ffe2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ffe6:	b191      	cbz	r1, 801000e <__mdiff+0x11a>
 800ffe8:	6117      	str	r7, [r2, #16]
 800ffea:	e79d      	b.n	800ff28 <__mdiff+0x34>
 800ffec:	f854 1b04 	ldr.w	r1, [r4], #4
 800fff0:	46e6      	mov	lr, ip
 800fff2:	0c08      	lsrs	r0, r1, #16
 800fff4:	fa1c fc81 	uxtah	ip, ip, r1
 800fff8:	4471      	add	r1, lr
 800fffa:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800fffe:	b289      	uxth	r1, r1
 8010000:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8010004:	f846 1b04 	str.w	r1, [r6], #4
 8010008:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801000c:	e7dd      	b.n	800ffca <__mdiff+0xd6>
 801000e:	3f01      	subs	r7, #1
 8010010:	e7e7      	b.n	800ffe2 <__mdiff+0xee>
 8010012:	bf00      	nop
 8010014:	080127a5 	.word	0x080127a5
 8010018:	080127b6 	.word	0x080127b6

0801001c <__ulp>:
 801001c:	b082      	sub	sp, #8
 801001e:	ed8d 0b00 	vstr	d0, [sp]
 8010022:	9a01      	ldr	r2, [sp, #4]
 8010024:	4b0f      	ldr	r3, [pc, #60]	@ (8010064 <__ulp+0x48>)
 8010026:	4013      	ands	r3, r2
 8010028:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 801002c:	2b00      	cmp	r3, #0
 801002e:	dc08      	bgt.n	8010042 <__ulp+0x26>
 8010030:	425b      	negs	r3, r3
 8010032:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8010036:	ea4f 5223 	mov.w	r2, r3, asr #20
 801003a:	da04      	bge.n	8010046 <__ulp+0x2a>
 801003c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8010040:	4113      	asrs	r3, r2
 8010042:	2200      	movs	r2, #0
 8010044:	e008      	b.n	8010058 <__ulp+0x3c>
 8010046:	f1a2 0314 	sub.w	r3, r2, #20
 801004a:	2b1e      	cmp	r3, #30
 801004c:	bfda      	itte	le
 801004e:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8010052:	40da      	lsrle	r2, r3
 8010054:	2201      	movgt	r2, #1
 8010056:	2300      	movs	r3, #0
 8010058:	4619      	mov	r1, r3
 801005a:	4610      	mov	r0, r2
 801005c:	ec41 0b10 	vmov	d0, r0, r1
 8010060:	b002      	add	sp, #8
 8010062:	4770      	bx	lr
 8010064:	7ff00000 	.word	0x7ff00000

08010068 <__b2d>:
 8010068:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801006c:	6906      	ldr	r6, [r0, #16]
 801006e:	f100 0814 	add.w	r8, r0, #20
 8010072:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8010076:	1f37      	subs	r7, r6, #4
 8010078:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801007c:	4610      	mov	r0, r2
 801007e:	f7ff fd4b 	bl	800fb18 <__hi0bits>
 8010082:	f1c0 0320 	rsb	r3, r0, #32
 8010086:	280a      	cmp	r0, #10
 8010088:	600b      	str	r3, [r1, #0]
 801008a:	491b      	ldr	r1, [pc, #108]	@ (80100f8 <__b2d+0x90>)
 801008c:	dc15      	bgt.n	80100ba <__b2d+0x52>
 801008e:	f1c0 0c0b 	rsb	ip, r0, #11
 8010092:	fa22 f30c 	lsr.w	r3, r2, ip
 8010096:	45b8      	cmp	r8, r7
 8010098:	ea43 0501 	orr.w	r5, r3, r1
 801009c:	bf34      	ite	cc
 801009e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80100a2:	2300      	movcs	r3, #0
 80100a4:	3015      	adds	r0, #21
 80100a6:	fa02 f000 	lsl.w	r0, r2, r0
 80100aa:	fa23 f30c 	lsr.w	r3, r3, ip
 80100ae:	4303      	orrs	r3, r0
 80100b0:	461c      	mov	r4, r3
 80100b2:	ec45 4b10 	vmov	d0, r4, r5
 80100b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80100ba:	45b8      	cmp	r8, r7
 80100bc:	bf3a      	itte	cc
 80100be:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80100c2:	f1a6 0708 	subcc.w	r7, r6, #8
 80100c6:	2300      	movcs	r3, #0
 80100c8:	380b      	subs	r0, #11
 80100ca:	d012      	beq.n	80100f2 <__b2d+0x8a>
 80100cc:	f1c0 0120 	rsb	r1, r0, #32
 80100d0:	fa23 f401 	lsr.w	r4, r3, r1
 80100d4:	4082      	lsls	r2, r0
 80100d6:	4322      	orrs	r2, r4
 80100d8:	4547      	cmp	r7, r8
 80100da:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 80100de:	bf8c      	ite	hi
 80100e0:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 80100e4:	2200      	movls	r2, #0
 80100e6:	4083      	lsls	r3, r0
 80100e8:	40ca      	lsrs	r2, r1
 80100ea:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80100ee:	4313      	orrs	r3, r2
 80100f0:	e7de      	b.n	80100b0 <__b2d+0x48>
 80100f2:	ea42 0501 	orr.w	r5, r2, r1
 80100f6:	e7db      	b.n	80100b0 <__b2d+0x48>
 80100f8:	3ff00000 	.word	0x3ff00000

080100fc <__d2b>:
 80100fc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010100:	460f      	mov	r7, r1
 8010102:	2101      	movs	r1, #1
 8010104:	ec59 8b10 	vmov	r8, r9, d0
 8010108:	4616      	mov	r6, r2
 801010a:	f7ff fc13 	bl	800f934 <_Balloc>
 801010e:	4604      	mov	r4, r0
 8010110:	b930      	cbnz	r0, 8010120 <__d2b+0x24>
 8010112:	4602      	mov	r2, r0
 8010114:	4b23      	ldr	r3, [pc, #140]	@ (80101a4 <__d2b+0xa8>)
 8010116:	4824      	ldr	r0, [pc, #144]	@ (80101a8 <__d2b+0xac>)
 8010118:	f240 310f 	movw	r1, #783	@ 0x30f
 801011c:	f001 f944 	bl	80113a8 <__assert_func>
 8010120:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8010124:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010128:	b10d      	cbz	r5, 801012e <__d2b+0x32>
 801012a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801012e:	9301      	str	r3, [sp, #4]
 8010130:	f1b8 0300 	subs.w	r3, r8, #0
 8010134:	d023      	beq.n	801017e <__d2b+0x82>
 8010136:	4668      	mov	r0, sp
 8010138:	9300      	str	r3, [sp, #0]
 801013a:	f7ff fd0c 	bl	800fb56 <__lo0bits>
 801013e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8010142:	b1d0      	cbz	r0, 801017a <__d2b+0x7e>
 8010144:	f1c0 0320 	rsb	r3, r0, #32
 8010148:	fa02 f303 	lsl.w	r3, r2, r3
 801014c:	430b      	orrs	r3, r1
 801014e:	40c2      	lsrs	r2, r0
 8010150:	6163      	str	r3, [r4, #20]
 8010152:	9201      	str	r2, [sp, #4]
 8010154:	9b01      	ldr	r3, [sp, #4]
 8010156:	61a3      	str	r3, [r4, #24]
 8010158:	2b00      	cmp	r3, #0
 801015a:	bf0c      	ite	eq
 801015c:	2201      	moveq	r2, #1
 801015e:	2202      	movne	r2, #2
 8010160:	6122      	str	r2, [r4, #16]
 8010162:	b1a5      	cbz	r5, 801018e <__d2b+0x92>
 8010164:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8010168:	4405      	add	r5, r0
 801016a:	603d      	str	r5, [r7, #0]
 801016c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8010170:	6030      	str	r0, [r6, #0]
 8010172:	4620      	mov	r0, r4
 8010174:	b003      	add	sp, #12
 8010176:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801017a:	6161      	str	r1, [r4, #20]
 801017c:	e7ea      	b.n	8010154 <__d2b+0x58>
 801017e:	a801      	add	r0, sp, #4
 8010180:	f7ff fce9 	bl	800fb56 <__lo0bits>
 8010184:	9b01      	ldr	r3, [sp, #4]
 8010186:	6163      	str	r3, [r4, #20]
 8010188:	3020      	adds	r0, #32
 801018a:	2201      	movs	r2, #1
 801018c:	e7e8      	b.n	8010160 <__d2b+0x64>
 801018e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8010192:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8010196:	6038      	str	r0, [r7, #0]
 8010198:	6918      	ldr	r0, [r3, #16]
 801019a:	f7ff fcbd 	bl	800fb18 <__hi0bits>
 801019e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80101a2:	e7e5      	b.n	8010170 <__d2b+0x74>
 80101a4:	080127a5 	.word	0x080127a5
 80101a8:	080127b6 	.word	0x080127b6

080101ac <__ratio>:
 80101ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80101b0:	4688      	mov	r8, r1
 80101b2:	4669      	mov	r1, sp
 80101b4:	4681      	mov	r9, r0
 80101b6:	f7ff ff57 	bl	8010068 <__b2d>
 80101ba:	a901      	add	r1, sp, #4
 80101bc:	4640      	mov	r0, r8
 80101be:	ec55 4b10 	vmov	r4, r5, d0
 80101c2:	f7ff ff51 	bl	8010068 <__b2d>
 80101c6:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80101ca:	f8d9 2010 	ldr.w	r2, [r9, #16]
 80101ce:	1ad2      	subs	r2, r2, r3
 80101d0:	e9dd 3100 	ldrd	r3, r1, [sp]
 80101d4:	1a5b      	subs	r3, r3, r1
 80101d6:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 80101da:	ec57 6b10 	vmov	r6, r7, d0
 80101de:	2b00      	cmp	r3, #0
 80101e0:	bfd6      	itet	le
 80101e2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80101e6:	462a      	movgt	r2, r5
 80101e8:	463a      	movle	r2, r7
 80101ea:	46ab      	mov	fp, r5
 80101ec:	46a2      	mov	sl, r4
 80101ee:	bfce      	itee	gt
 80101f0:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 80101f4:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 80101f8:	ee00 3a90 	vmovle	s1, r3
 80101fc:	ec4b ab17 	vmov	d7, sl, fp
 8010200:	ee87 0b00 	vdiv.f64	d0, d7, d0
 8010204:	b003      	add	sp, #12
 8010206:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801020a <__copybits>:
 801020a:	3901      	subs	r1, #1
 801020c:	b570      	push	{r4, r5, r6, lr}
 801020e:	1149      	asrs	r1, r1, #5
 8010210:	6914      	ldr	r4, [r2, #16]
 8010212:	3101      	adds	r1, #1
 8010214:	f102 0314 	add.w	r3, r2, #20
 8010218:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801021c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8010220:	1f05      	subs	r5, r0, #4
 8010222:	42a3      	cmp	r3, r4
 8010224:	d30c      	bcc.n	8010240 <__copybits+0x36>
 8010226:	1aa3      	subs	r3, r4, r2
 8010228:	3b11      	subs	r3, #17
 801022a:	f023 0303 	bic.w	r3, r3, #3
 801022e:	3211      	adds	r2, #17
 8010230:	42a2      	cmp	r2, r4
 8010232:	bf88      	it	hi
 8010234:	2300      	movhi	r3, #0
 8010236:	4418      	add	r0, r3
 8010238:	2300      	movs	r3, #0
 801023a:	4288      	cmp	r0, r1
 801023c:	d305      	bcc.n	801024a <__copybits+0x40>
 801023e:	bd70      	pop	{r4, r5, r6, pc}
 8010240:	f853 6b04 	ldr.w	r6, [r3], #4
 8010244:	f845 6f04 	str.w	r6, [r5, #4]!
 8010248:	e7eb      	b.n	8010222 <__copybits+0x18>
 801024a:	f840 3b04 	str.w	r3, [r0], #4
 801024e:	e7f4      	b.n	801023a <__copybits+0x30>

08010250 <__any_on>:
 8010250:	f100 0214 	add.w	r2, r0, #20
 8010254:	6900      	ldr	r0, [r0, #16]
 8010256:	114b      	asrs	r3, r1, #5
 8010258:	4298      	cmp	r0, r3
 801025a:	b510      	push	{r4, lr}
 801025c:	db11      	blt.n	8010282 <__any_on+0x32>
 801025e:	dd0a      	ble.n	8010276 <__any_on+0x26>
 8010260:	f011 011f 	ands.w	r1, r1, #31
 8010264:	d007      	beq.n	8010276 <__any_on+0x26>
 8010266:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801026a:	fa24 f001 	lsr.w	r0, r4, r1
 801026e:	fa00 f101 	lsl.w	r1, r0, r1
 8010272:	428c      	cmp	r4, r1
 8010274:	d10b      	bne.n	801028e <__any_on+0x3e>
 8010276:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801027a:	4293      	cmp	r3, r2
 801027c:	d803      	bhi.n	8010286 <__any_on+0x36>
 801027e:	2000      	movs	r0, #0
 8010280:	bd10      	pop	{r4, pc}
 8010282:	4603      	mov	r3, r0
 8010284:	e7f7      	b.n	8010276 <__any_on+0x26>
 8010286:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801028a:	2900      	cmp	r1, #0
 801028c:	d0f5      	beq.n	801027a <__any_on+0x2a>
 801028e:	2001      	movs	r0, #1
 8010290:	e7f6      	b.n	8010280 <__any_on+0x30>

08010292 <sulp>:
 8010292:	b570      	push	{r4, r5, r6, lr}
 8010294:	4604      	mov	r4, r0
 8010296:	460d      	mov	r5, r1
 8010298:	4616      	mov	r6, r2
 801029a:	ec45 4b10 	vmov	d0, r4, r5
 801029e:	f7ff febd 	bl	801001c <__ulp>
 80102a2:	b17e      	cbz	r6, 80102c4 <sulp+0x32>
 80102a4:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80102a8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80102ac:	2b00      	cmp	r3, #0
 80102ae:	dd09      	ble.n	80102c4 <sulp+0x32>
 80102b0:	051b      	lsls	r3, r3, #20
 80102b2:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 80102b6:	2000      	movs	r0, #0
 80102b8:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 80102bc:	ec41 0b17 	vmov	d7, r0, r1
 80102c0:	ee20 0b07 	vmul.f64	d0, d0, d7
 80102c4:	bd70      	pop	{r4, r5, r6, pc}
	...

080102c8 <_strtod_l>:
 80102c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80102cc:	ed2d 8b0a 	vpush	{d8-d12}
 80102d0:	b097      	sub	sp, #92	@ 0x5c
 80102d2:	4688      	mov	r8, r1
 80102d4:	920e      	str	r2, [sp, #56]	@ 0x38
 80102d6:	2200      	movs	r2, #0
 80102d8:	9212      	str	r2, [sp, #72]	@ 0x48
 80102da:	9005      	str	r0, [sp, #20]
 80102dc:	f04f 0a00 	mov.w	sl, #0
 80102e0:	f04f 0b00 	mov.w	fp, #0
 80102e4:	460a      	mov	r2, r1
 80102e6:	9211      	str	r2, [sp, #68]	@ 0x44
 80102e8:	7811      	ldrb	r1, [r2, #0]
 80102ea:	292b      	cmp	r1, #43	@ 0x2b
 80102ec:	d04c      	beq.n	8010388 <_strtod_l+0xc0>
 80102ee:	d839      	bhi.n	8010364 <_strtod_l+0x9c>
 80102f0:	290d      	cmp	r1, #13
 80102f2:	d833      	bhi.n	801035c <_strtod_l+0x94>
 80102f4:	2908      	cmp	r1, #8
 80102f6:	d833      	bhi.n	8010360 <_strtod_l+0x98>
 80102f8:	2900      	cmp	r1, #0
 80102fa:	d03c      	beq.n	8010376 <_strtod_l+0xae>
 80102fc:	2200      	movs	r2, #0
 80102fe:	9208      	str	r2, [sp, #32]
 8010300:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8010302:	782a      	ldrb	r2, [r5, #0]
 8010304:	2a30      	cmp	r2, #48	@ 0x30
 8010306:	f040 80b5 	bne.w	8010474 <_strtod_l+0x1ac>
 801030a:	786a      	ldrb	r2, [r5, #1]
 801030c:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8010310:	2a58      	cmp	r2, #88	@ 0x58
 8010312:	d170      	bne.n	80103f6 <_strtod_l+0x12e>
 8010314:	9302      	str	r3, [sp, #8]
 8010316:	9b08      	ldr	r3, [sp, #32]
 8010318:	9301      	str	r3, [sp, #4]
 801031a:	ab12      	add	r3, sp, #72	@ 0x48
 801031c:	9300      	str	r3, [sp, #0]
 801031e:	4a8b      	ldr	r2, [pc, #556]	@ (801054c <_strtod_l+0x284>)
 8010320:	9805      	ldr	r0, [sp, #20]
 8010322:	ab13      	add	r3, sp, #76	@ 0x4c
 8010324:	a911      	add	r1, sp, #68	@ 0x44
 8010326:	f001 f8d9 	bl	80114dc <__gethex>
 801032a:	f010 060f 	ands.w	r6, r0, #15
 801032e:	4604      	mov	r4, r0
 8010330:	d005      	beq.n	801033e <_strtod_l+0x76>
 8010332:	2e06      	cmp	r6, #6
 8010334:	d12a      	bne.n	801038c <_strtod_l+0xc4>
 8010336:	3501      	adds	r5, #1
 8010338:	2300      	movs	r3, #0
 801033a:	9511      	str	r5, [sp, #68]	@ 0x44
 801033c:	9308      	str	r3, [sp, #32]
 801033e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010340:	2b00      	cmp	r3, #0
 8010342:	f040 852f 	bne.w	8010da4 <_strtod_l+0xadc>
 8010346:	9b08      	ldr	r3, [sp, #32]
 8010348:	ec4b ab10 	vmov	d0, sl, fp
 801034c:	b1cb      	cbz	r3, 8010382 <_strtod_l+0xba>
 801034e:	eeb1 0b40 	vneg.f64	d0, d0
 8010352:	b017      	add	sp, #92	@ 0x5c
 8010354:	ecbd 8b0a 	vpop	{d8-d12}
 8010358:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801035c:	2920      	cmp	r1, #32
 801035e:	d1cd      	bne.n	80102fc <_strtod_l+0x34>
 8010360:	3201      	adds	r2, #1
 8010362:	e7c0      	b.n	80102e6 <_strtod_l+0x1e>
 8010364:	292d      	cmp	r1, #45	@ 0x2d
 8010366:	d1c9      	bne.n	80102fc <_strtod_l+0x34>
 8010368:	2101      	movs	r1, #1
 801036a:	9108      	str	r1, [sp, #32]
 801036c:	1c51      	adds	r1, r2, #1
 801036e:	9111      	str	r1, [sp, #68]	@ 0x44
 8010370:	7852      	ldrb	r2, [r2, #1]
 8010372:	2a00      	cmp	r2, #0
 8010374:	d1c4      	bne.n	8010300 <_strtod_l+0x38>
 8010376:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010378:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 801037c:	2b00      	cmp	r3, #0
 801037e:	f040 850f 	bne.w	8010da0 <_strtod_l+0xad8>
 8010382:	ec4b ab10 	vmov	d0, sl, fp
 8010386:	e7e4      	b.n	8010352 <_strtod_l+0x8a>
 8010388:	2100      	movs	r1, #0
 801038a:	e7ee      	b.n	801036a <_strtod_l+0xa2>
 801038c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801038e:	b13a      	cbz	r2, 80103a0 <_strtod_l+0xd8>
 8010390:	2135      	movs	r1, #53	@ 0x35
 8010392:	a814      	add	r0, sp, #80	@ 0x50
 8010394:	f7ff ff39 	bl	801020a <__copybits>
 8010398:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801039a:	9805      	ldr	r0, [sp, #20]
 801039c:	f7ff fb0a 	bl	800f9b4 <_Bfree>
 80103a0:	1e73      	subs	r3, r6, #1
 80103a2:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80103a4:	2b04      	cmp	r3, #4
 80103a6:	d806      	bhi.n	80103b6 <_strtod_l+0xee>
 80103a8:	e8df f003 	tbb	[pc, r3]
 80103ac:	201d0314 	.word	0x201d0314
 80103b0:	14          	.byte	0x14
 80103b1:	00          	.byte	0x00
 80103b2:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	@ 0x50
 80103b6:	05e3      	lsls	r3, r4, #23
 80103b8:	bf48      	it	mi
 80103ba:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80103be:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80103c2:	0d1b      	lsrs	r3, r3, #20
 80103c4:	051b      	lsls	r3, r3, #20
 80103c6:	2b00      	cmp	r3, #0
 80103c8:	d1b9      	bne.n	801033e <_strtod_l+0x76>
 80103ca:	f7fe fba1 	bl	800eb10 <__errno>
 80103ce:	2322      	movs	r3, #34	@ 0x22
 80103d0:	6003      	str	r3, [r0, #0]
 80103d2:	e7b4      	b.n	801033e <_strtod_l+0x76>
 80103d4:	e9dd a314 	ldrd	sl, r3, [sp, #80]	@ 0x50
 80103d8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80103dc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80103e0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80103e4:	e7e7      	b.n	80103b6 <_strtod_l+0xee>
 80103e6:	f8df b16c 	ldr.w	fp, [pc, #364]	@ 8010554 <_strtod_l+0x28c>
 80103ea:	e7e4      	b.n	80103b6 <_strtod_l+0xee>
 80103ec:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80103f0:	f04f 3aff 	mov.w	sl, #4294967295
 80103f4:	e7df      	b.n	80103b6 <_strtod_l+0xee>
 80103f6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80103f8:	1c5a      	adds	r2, r3, #1
 80103fa:	9211      	str	r2, [sp, #68]	@ 0x44
 80103fc:	785b      	ldrb	r3, [r3, #1]
 80103fe:	2b30      	cmp	r3, #48	@ 0x30
 8010400:	d0f9      	beq.n	80103f6 <_strtod_l+0x12e>
 8010402:	2b00      	cmp	r3, #0
 8010404:	d09b      	beq.n	801033e <_strtod_l+0x76>
 8010406:	2301      	movs	r3, #1
 8010408:	2600      	movs	r6, #0
 801040a:	9307      	str	r3, [sp, #28]
 801040c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801040e:	930a      	str	r3, [sp, #40]	@ 0x28
 8010410:	46b1      	mov	r9, r6
 8010412:	4635      	mov	r5, r6
 8010414:	220a      	movs	r2, #10
 8010416:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8010418:	7804      	ldrb	r4, [r0, #0]
 801041a:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 801041e:	b2d9      	uxtb	r1, r3
 8010420:	2909      	cmp	r1, #9
 8010422:	d929      	bls.n	8010478 <_strtod_l+0x1b0>
 8010424:	494a      	ldr	r1, [pc, #296]	@ (8010550 <_strtod_l+0x288>)
 8010426:	2201      	movs	r2, #1
 8010428:	f000 ff84 	bl	8011334 <strncmp>
 801042c:	b378      	cbz	r0, 801048e <_strtod_l+0x1c6>
 801042e:	2000      	movs	r0, #0
 8010430:	4622      	mov	r2, r4
 8010432:	462b      	mov	r3, r5
 8010434:	4607      	mov	r7, r0
 8010436:	9006      	str	r0, [sp, #24]
 8010438:	2a65      	cmp	r2, #101	@ 0x65
 801043a:	d001      	beq.n	8010440 <_strtod_l+0x178>
 801043c:	2a45      	cmp	r2, #69	@ 0x45
 801043e:	d117      	bne.n	8010470 <_strtod_l+0x1a8>
 8010440:	b91b      	cbnz	r3, 801044a <_strtod_l+0x182>
 8010442:	9b07      	ldr	r3, [sp, #28]
 8010444:	4303      	orrs	r3, r0
 8010446:	d096      	beq.n	8010376 <_strtod_l+0xae>
 8010448:	2300      	movs	r3, #0
 801044a:	f8dd 8044 	ldr.w	r8, [sp, #68]	@ 0x44
 801044e:	f108 0201 	add.w	r2, r8, #1
 8010452:	9211      	str	r2, [sp, #68]	@ 0x44
 8010454:	f898 2001 	ldrb.w	r2, [r8, #1]
 8010458:	2a2b      	cmp	r2, #43	@ 0x2b
 801045a:	d06b      	beq.n	8010534 <_strtod_l+0x26c>
 801045c:	2a2d      	cmp	r2, #45	@ 0x2d
 801045e:	d071      	beq.n	8010544 <_strtod_l+0x27c>
 8010460:	f04f 0e00 	mov.w	lr, #0
 8010464:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 8010468:	2c09      	cmp	r4, #9
 801046a:	d979      	bls.n	8010560 <_strtod_l+0x298>
 801046c:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 8010470:	2400      	movs	r4, #0
 8010472:	e094      	b.n	801059e <_strtod_l+0x2d6>
 8010474:	2300      	movs	r3, #0
 8010476:	e7c7      	b.n	8010408 <_strtod_l+0x140>
 8010478:	2d08      	cmp	r5, #8
 801047a:	f100 0001 	add.w	r0, r0, #1
 801047e:	bfd4      	ite	le
 8010480:	fb02 3909 	mlale	r9, r2, r9, r3
 8010484:	fb02 3606 	mlagt	r6, r2, r6, r3
 8010488:	3501      	adds	r5, #1
 801048a:	9011      	str	r0, [sp, #68]	@ 0x44
 801048c:	e7c3      	b.n	8010416 <_strtod_l+0x14e>
 801048e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8010490:	1c5a      	adds	r2, r3, #1
 8010492:	9211      	str	r2, [sp, #68]	@ 0x44
 8010494:	785a      	ldrb	r2, [r3, #1]
 8010496:	b375      	cbz	r5, 80104f6 <_strtod_l+0x22e>
 8010498:	4607      	mov	r7, r0
 801049a:	462b      	mov	r3, r5
 801049c:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80104a0:	2909      	cmp	r1, #9
 80104a2:	d913      	bls.n	80104cc <_strtod_l+0x204>
 80104a4:	2101      	movs	r1, #1
 80104a6:	9106      	str	r1, [sp, #24]
 80104a8:	e7c6      	b.n	8010438 <_strtod_l+0x170>
 80104aa:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80104ac:	1c5a      	adds	r2, r3, #1
 80104ae:	9211      	str	r2, [sp, #68]	@ 0x44
 80104b0:	785a      	ldrb	r2, [r3, #1]
 80104b2:	3001      	adds	r0, #1
 80104b4:	2a30      	cmp	r2, #48	@ 0x30
 80104b6:	d0f8      	beq.n	80104aa <_strtod_l+0x1e2>
 80104b8:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 80104bc:	2b08      	cmp	r3, #8
 80104be:	f200 8476 	bhi.w	8010dae <_strtod_l+0xae6>
 80104c2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80104c4:	930a      	str	r3, [sp, #40]	@ 0x28
 80104c6:	4607      	mov	r7, r0
 80104c8:	2000      	movs	r0, #0
 80104ca:	4603      	mov	r3, r0
 80104cc:	3a30      	subs	r2, #48	@ 0x30
 80104ce:	f100 0101 	add.w	r1, r0, #1
 80104d2:	d023      	beq.n	801051c <_strtod_l+0x254>
 80104d4:	440f      	add	r7, r1
 80104d6:	eb00 0c03 	add.w	ip, r0, r3
 80104da:	4619      	mov	r1, r3
 80104dc:	240a      	movs	r4, #10
 80104de:	4561      	cmp	r1, ip
 80104e0:	d10b      	bne.n	80104fa <_strtod_l+0x232>
 80104e2:	1c5c      	adds	r4, r3, #1
 80104e4:	4403      	add	r3, r0
 80104e6:	2b08      	cmp	r3, #8
 80104e8:	4404      	add	r4, r0
 80104ea:	dc11      	bgt.n	8010510 <_strtod_l+0x248>
 80104ec:	230a      	movs	r3, #10
 80104ee:	fb03 2909 	mla	r9, r3, r9, r2
 80104f2:	2100      	movs	r1, #0
 80104f4:	e013      	b.n	801051e <_strtod_l+0x256>
 80104f6:	4628      	mov	r0, r5
 80104f8:	e7dc      	b.n	80104b4 <_strtod_l+0x1ec>
 80104fa:	2908      	cmp	r1, #8
 80104fc:	f101 0101 	add.w	r1, r1, #1
 8010500:	dc02      	bgt.n	8010508 <_strtod_l+0x240>
 8010502:	fb04 f909 	mul.w	r9, r4, r9
 8010506:	e7ea      	b.n	80104de <_strtod_l+0x216>
 8010508:	2910      	cmp	r1, #16
 801050a:	bfd8      	it	le
 801050c:	4366      	mulle	r6, r4
 801050e:	e7e6      	b.n	80104de <_strtod_l+0x216>
 8010510:	2b0f      	cmp	r3, #15
 8010512:	dcee      	bgt.n	80104f2 <_strtod_l+0x22a>
 8010514:	230a      	movs	r3, #10
 8010516:	fb03 2606 	mla	r6, r3, r6, r2
 801051a:	e7ea      	b.n	80104f2 <_strtod_l+0x22a>
 801051c:	461c      	mov	r4, r3
 801051e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8010520:	1c5a      	adds	r2, r3, #1
 8010522:	9211      	str	r2, [sp, #68]	@ 0x44
 8010524:	785a      	ldrb	r2, [r3, #1]
 8010526:	4608      	mov	r0, r1
 8010528:	4623      	mov	r3, r4
 801052a:	e7b7      	b.n	801049c <_strtod_l+0x1d4>
 801052c:	2301      	movs	r3, #1
 801052e:	2700      	movs	r7, #0
 8010530:	9306      	str	r3, [sp, #24]
 8010532:	e786      	b.n	8010442 <_strtod_l+0x17a>
 8010534:	f04f 0e00 	mov.w	lr, #0
 8010538:	f108 0202 	add.w	r2, r8, #2
 801053c:	9211      	str	r2, [sp, #68]	@ 0x44
 801053e:	f898 2002 	ldrb.w	r2, [r8, #2]
 8010542:	e78f      	b.n	8010464 <_strtod_l+0x19c>
 8010544:	f04f 0e01 	mov.w	lr, #1
 8010548:	e7f6      	b.n	8010538 <_strtod_l+0x270>
 801054a:	bf00      	nop
 801054c:	08012928 	.word	0x08012928
 8010550:	08012910 	.word	0x08012910
 8010554:	7ff00000 	.word	0x7ff00000
 8010558:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801055a:	1c54      	adds	r4, r2, #1
 801055c:	9411      	str	r4, [sp, #68]	@ 0x44
 801055e:	7852      	ldrb	r2, [r2, #1]
 8010560:	2a30      	cmp	r2, #48	@ 0x30
 8010562:	d0f9      	beq.n	8010558 <_strtod_l+0x290>
 8010564:	f1a2 0431 	sub.w	r4, r2, #49	@ 0x31
 8010568:	2c08      	cmp	r4, #8
 801056a:	d881      	bhi.n	8010470 <_strtod_l+0x1a8>
 801056c:	f1a2 0c30 	sub.w	ip, r2, #48	@ 0x30
 8010570:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8010572:	9209      	str	r2, [sp, #36]	@ 0x24
 8010574:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8010576:	1c51      	adds	r1, r2, #1
 8010578:	9111      	str	r1, [sp, #68]	@ 0x44
 801057a:	7852      	ldrb	r2, [r2, #1]
 801057c:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 8010580:	2c09      	cmp	r4, #9
 8010582:	d938      	bls.n	80105f6 <_strtod_l+0x32e>
 8010584:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8010586:	1b0c      	subs	r4, r1, r4
 8010588:	2c08      	cmp	r4, #8
 801058a:	f644 641f 	movw	r4, #19999	@ 0x4e1f
 801058e:	dc02      	bgt.n	8010596 <_strtod_l+0x2ce>
 8010590:	4564      	cmp	r4, ip
 8010592:	bfa8      	it	ge
 8010594:	4664      	movge	r4, ip
 8010596:	f1be 0f00 	cmp.w	lr, #0
 801059a:	d000      	beq.n	801059e <_strtod_l+0x2d6>
 801059c:	4264      	negs	r4, r4
 801059e:	2b00      	cmp	r3, #0
 80105a0:	d14e      	bne.n	8010640 <_strtod_l+0x378>
 80105a2:	9b07      	ldr	r3, [sp, #28]
 80105a4:	4318      	orrs	r0, r3
 80105a6:	f47f aeca 	bne.w	801033e <_strtod_l+0x76>
 80105aa:	9b06      	ldr	r3, [sp, #24]
 80105ac:	2b00      	cmp	r3, #0
 80105ae:	f47f aee2 	bne.w	8010376 <_strtod_l+0xae>
 80105b2:	2a69      	cmp	r2, #105	@ 0x69
 80105b4:	d027      	beq.n	8010606 <_strtod_l+0x33e>
 80105b6:	dc24      	bgt.n	8010602 <_strtod_l+0x33a>
 80105b8:	2a49      	cmp	r2, #73	@ 0x49
 80105ba:	d024      	beq.n	8010606 <_strtod_l+0x33e>
 80105bc:	2a4e      	cmp	r2, #78	@ 0x4e
 80105be:	f47f aeda 	bne.w	8010376 <_strtod_l+0xae>
 80105c2:	4997      	ldr	r1, [pc, #604]	@ (8010820 <_strtod_l+0x558>)
 80105c4:	a811      	add	r0, sp, #68	@ 0x44
 80105c6:	f001 f9ab 	bl	8011920 <__match>
 80105ca:	2800      	cmp	r0, #0
 80105cc:	f43f aed3 	beq.w	8010376 <_strtod_l+0xae>
 80105d0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80105d2:	781b      	ldrb	r3, [r3, #0]
 80105d4:	2b28      	cmp	r3, #40	@ 0x28
 80105d6:	d12d      	bne.n	8010634 <_strtod_l+0x36c>
 80105d8:	4992      	ldr	r1, [pc, #584]	@ (8010824 <_strtod_l+0x55c>)
 80105da:	aa14      	add	r2, sp, #80	@ 0x50
 80105dc:	a811      	add	r0, sp, #68	@ 0x44
 80105de:	f001 f9b3 	bl	8011948 <__hexnan>
 80105e2:	2805      	cmp	r0, #5
 80105e4:	d126      	bne.n	8010634 <_strtod_l+0x36c>
 80105e6:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80105e8:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
 80105ec:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 80105f0:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 80105f4:	e6a3      	b.n	801033e <_strtod_l+0x76>
 80105f6:	240a      	movs	r4, #10
 80105f8:	fb04 2c0c 	mla	ip, r4, ip, r2
 80105fc:	f1ac 0c30 	sub.w	ip, ip, #48	@ 0x30
 8010600:	e7b8      	b.n	8010574 <_strtod_l+0x2ac>
 8010602:	2a6e      	cmp	r2, #110	@ 0x6e
 8010604:	e7db      	b.n	80105be <_strtod_l+0x2f6>
 8010606:	4988      	ldr	r1, [pc, #544]	@ (8010828 <_strtod_l+0x560>)
 8010608:	a811      	add	r0, sp, #68	@ 0x44
 801060a:	f001 f989 	bl	8011920 <__match>
 801060e:	2800      	cmp	r0, #0
 8010610:	f43f aeb1 	beq.w	8010376 <_strtod_l+0xae>
 8010614:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8010616:	4985      	ldr	r1, [pc, #532]	@ (801082c <_strtod_l+0x564>)
 8010618:	3b01      	subs	r3, #1
 801061a:	a811      	add	r0, sp, #68	@ 0x44
 801061c:	9311      	str	r3, [sp, #68]	@ 0x44
 801061e:	f001 f97f 	bl	8011920 <__match>
 8010622:	b910      	cbnz	r0, 801062a <_strtod_l+0x362>
 8010624:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8010626:	3301      	adds	r3, #1
 8010628:	9311      	str	r3, [sp, #68]	@ 0x44
 801062a:	f8df b214 	ldr.w	fp, [pc, #532]	@ 8010840 <_strtod_l+0x578>
 801062e:	f04f 0a00 	mov.w	sl, #0
 8010632:	e684      	b.n	801033e <_strtod_l+0x76>
 8010634:	487e      	ldr	r0, [pc, #504]	@ (8010830 <_strtod_l+0x568>)
 8010636:	f000 feaf 	bl	8011398 <nan>
 801063a:	ec5b ab10 	vmov	sl, fp, d0
 801063e:	e67e      	b.n	801033e <_strtod_l+0x76>
 8010640:	ee07 9a90 	vmov	s15, r9
 8010644:	1be2      	subs	r2, r4, r7
 8010646:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 801064a:	2d00      	cmp	r5, #0
 801064c:	bf08      	it	eq
 801064e:	461d      	moveq	r5, r3
 8010650:	2b10      	cmp	r3, #16
 8010652:	9209      	str	r2, [sp, #36]	@ 0x24
 8010654:	461a      	mov	r2, r3
 8010656:	bfa8      	it	ge
 8010658:	2210      	movge	r2, #16
 801065a:	2b09      	cmp	r3, #9
 801065c:	ec5b ab17 	vmov	sl, fp, d7
 8010660:	dc15      	bgt.n	801068e <_strtod_l+0x3c6>
 8010662:	1be1      	subs	r1, r4, r7
 8010664:	2900      	cmp	r1, #0
 8010666:	f43f ae6a 	beq.w	801033e <_strtod_l+0x76>
 801066a:	eba4 0107 	sub.w	r1, r4, r7
 801066e:	dd72      	ble.n	8010756 <_strtod_l+0x48e>
 8010670:	2916      	cmp	r1, #22
 8010672:	dc59      	bgt.n	8010728 <_strtod_l+0x460>
 8010674:	4b6f      	ldr	r3, [pc, #444]	@ (8010834 <_strtod_l+0x56c>)
 8010676:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010678:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801067c:	ed93 7b00 	vldr	d7, [r3]
 8010680:	ec4b ab16 	vmov	d6, sl, fp
 8010684:	ee27 7b06 	vmul.f64	d7, d7, d6
 8010688:	ec5b ab17 	vmov	sl, fp, d7
 801068c:	e657      	b.n	801033e <_strtod_l+0x76>
 801068e:	4969      	ldr	r1, [pc, #420]	@ (8010834 <_strtod_l+0x56c>)
 8010690:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8010694:	ed11 5b12 	vldr	d5, [r1, #-72]	@ 0xffffffb8
 8010698:	ee06 6a90 	vmov	s13, r6
 801069c:	2b0f      	cmp	r3, #15
 801069e:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 80106a2:	eea7 6b05 	vfma.f64	d6, d7, d5
 80106a6:	ec5b ab16 	vmov	sl, fp, d6
 80106aa:	ddda      	ble.n	8010662 <_strtod_l+0x39a>
 80106ac:	1a9a      	subs	r2, r3, r2
 80106ae:	1be1      	subs	r1, r4, r7
 80106b0:	440a      	add	r2, r1
 80106b2:	2a00      	cmp	r2, #0
 80106b4:	f340 8094 	ble.w	80107e0 <_strtod_l+0x518>
 80106b8:	f012 000f 	ands.w	r0, r2, #15
 80106bc:	d00a      	beq.n	80106d4 <_strtod_l+0x40c>
 80106be:	495d      	ldr	r1, [pc, #372]	@ (8010834 <_strtod_l+0x56c>)
 80106c0:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 80106c4:	ed91 7b00 	vldr	d7, [r1]
 80106c8:	ec4b ab16 	vmov	d6, sl, fp
 80106cc:	ee27 7b06 	vmul.f64	d7, d7, d6
 80106d0:	ec5b ab17 	vmov	sl, fp, d7
 80106d4:	f032 020f 	bics.w	r2, r2, #15
 80106d8:	d073      	beq.n	80107c2 <_strtod_l+0x4fa>
 80106da:	f5b2 7f9a 	cmp.w	r2, #308	@ 0x134
 80106de:	dd47      	ble.n	8010770 <_strtod_l+0x4a8>
 80106e0:	2400      	movs	r4, #0
 80106e2:	4625      	mov	r5, r4
 80106e4:	9407      	str	r4, [sp, #28]
 80106e6:	4626      	mov	r6, r4
 80106e8:	9a05      	ldr	r2, [sp, #20]
 80106ea:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8010840 <_strtod_l+0x578>
 80106ee:	2322      	movs	r3, #34	@ 0x22
 80106f0:	6013      	str	r3, [r2, #0]
 80106f2:	f04f 0a00 	mov.w	sl, #0
 80106f6:	9b07      	ldr	r3, [sp, #28]
 80106f8:	2b00      	cmp	r3, #0
 80106fa:	f43f ae20 	beq.w	801033e <_strtod_l+0x76>
 80106fe:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8010700:	9805      	ldr	r0, [sp, #20]
 8010702:	f7ff f957 	bl	800f9b4 <_Bfree>
 8010706:	9805      	ldr	r0, [sp, #20]
 8010708:	4631      	mov	r1, r6
 801070a:	f7ff f953 	bl	800f9b4 <_Bfree>
 801070e:	9805      	ldr	r0, [sp, #20]
 8010710:	4629      	mov	r1, r5
 8010712:	f7ff f94f 	bl	800f9b4 <_Bfree>
 8010716:	9907      	ldr	r1, [sp, #28]
 8010718:	9805      	ldr	r0, [sp, #20]
 801071a:	f7ff f94b 	bl	800f9b4 <_Bfree>
 801071e:	9805      	ldr	r0, [sp, #20]
 8010720:	4621      	mov	r1, r4
 8010722:	f7ff f947 	bl	800f9b4 <_Bfree>
 8010726:	e60a      	b.n	801033e <_strtod_l+0x76>
 8010728:	f1c3 0125 	rsb	r1, r3, #37	@ 0x25
 801072c:	1be0      	subs	r0, r4, r7
 801072e:	4281      	cmp	r1, r0
 8010730:	dbbc      	blt.n	80106ac <_strtod_l+0x3e4>
 8010732:	4a40      	ldr	r2, [pc, #256]	@ (8010834 <_strtod_l+0x56c>)
 8010734:	f1c3 030f 	rsb	r3, r3, #15
 8010738:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 801073c:	ed91 7b00 	vldr	d7, [r1]
 8010740:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8010742:	ec4b ab16 	vmov	d6, sl, fp
 8010746:	1acb      	subs	r3, r1, r3
 8010748:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 801074c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8010750:	ed92 6b00 	vldr	d6, [r2]
 8010754:	e796      	b.n	8010684 <_strtod_l+0x3bc>
 8010756:	3116      	adds	r1, #22
 8010758:	dba8      	blt.n	80106ac <_strtod_l+0x3e4>
 801075a:	4b36      	ldr	r3, [pc, #216]	@ (8010834 <_strtod_l+0x56c>)
 801075c:	1b3c      	subs	r4, r7, r4
 801075e:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8010762:	ed94 7b00 	vldr	d7, [r4]
 8010766:	ec4b ab16 	vmov	d6, sl, fp
 801076a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801076e:	e78b      	b.n	8010688 <_strtod_l+0x3c0>
 8010770:	2000      	movs	r0, #0
 8010772:	ec4b ab17 	vmov	d7, sl, fp
 8010776:	4e30      	ldr	r6, [pc, #192]	@ (8010838 <_strtod_l+0x570>)
 8010778:	1112      	asrs	r2, r2, #4
 801077a:	4601      	mov	r1, r0
 801077c:	2a01      	cmp	r2, #1
 801077e:	dc23      	bgt.n	80107c8 <_strtod_l+0x500>
 8010780:	b108      	cbz	r0, 8010786 <_strtod_l+0x4be>
 8010782:	ec5b ab17 	vmov	sl, fp, d7
 8010786:	4a2c      	ldr	r2, [pc, #176]	@ (8010838 <_strtod_l+0x570>)
 8010788:	482c      	ldr	r0, [pc, #176]	@ (801083c <_strtod_l+0x574>)
 801078a:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 801078e:	ed92 7b00 	vldr	d7, [r2]
 8010792:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8010796:	ec4b ab16 	vmov	d6, sl, fp
 801079a:	4a29      	ldr	r2, [pc, #164]	@ (8010840 <_strtod_l+0x578>)
 801079c:	ee27 7b06 	vmul.f64	d7, d7, d6
 80107a0:	ee17 1a90 	vmov	r1, s15
 80107a4:	400a      	ands	r2, r1
 80107a6:	4282      	cmp	r2, r0
 80107a8:	ec5b ab17 	vmov	sl, fp, d7
 80107ac:	d898      	bhi.n	80106e0 <_strtod_l+0x418>
 80107ae:	f5a0 1080 	sub.w	r0, r0, #1048576	@ 0x100000
 80107b2:	4282      	cmp	r2, r0
 80107b4:	bf86      	itte	hi
 80107b6:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 8010844 <_strtod_l+0x57c>
 80107ba:	f04f 3aff 	movhi.w	sl, #4294967295
 80107be:	f101 7b54 	addls.w	fp, r1, #55574528	@ 0x3500000
 80107c2:	2200      	movs	r2, #0
 80107c4:	9206      	str	r2, [sp, #24]
 80107c6:	e076      	b.n	80108b6 <_strtod_l+0x5ee>
 80107c8:	f012 0f01 	tst.w	r2, #1
 80107cc:	d004      	beq.n	80107d8 <_strtod_l+0x510>
 80107ce:	ed96 6b00 	vldr	d6, [r6]
 80107d2:	2001      	movs	r0, #1
 80107d4:	ee27 7b06 	vmul.f64	d7, d7, d6
 80107d8:	3101      	adds	r1, #1
 80107da:	1052      	asrs	r2, r2, #1
 80107dc:	3608      	adds	r6, #8
 80107de:	e7cd      	b.n	801077c <_strtod_l+0x4b4>
 80107e0:	d0ef      	beq.n	80107c2 <_strtod_l+0x4fa>
 80107e2:	4252      	negs	r2, r2
 80107e4:	f012 000f 	ands.w	r0, r2, #15
 80107e8:	d00a      	beq.n	8010800 <_strtod_l+0x538>
 80107ea:	4912      	ldr	r1, [pc, #72]	@ (8010834 <_strtod_l+0x56c>)
 80107ec:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 80107f0:	ed91 7b00 	vldr	d7, [r1]
 80107f4:	ec4b ab16 	vmov	d6, sl, fp
 80107f8:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80107fc:	ec5b ab17 	vmov	sl, fp, d7
 8010800:	1112      	asrs	r2, r2, #4
 8010802:	d0de      	beq.n	80107c2 <_strtod_l+0x4fa>
 8010804:	2a1f      	cmp	r2, #31
 8010806:	dd1f      	ble.n	8010848 <_strtod_l+0x580>
 8010808:	2400      	movs	r4, #0
 801080a:	4625      	mov	r5, r4
 801080c:	9407      	str	r4, [sp, #28]
 801080e:	4626      	mov	r6, r4
 8010810:	9a05      	ldr	r2, [sp, #20]
 8010812:	2322      	movs	r3, #34	@ 0x22
 8010814:	f04f 0a00 	mov.w	sl, #0
 8010818:	f04f 0b00 	mov.w	fp, #0
 801081c:	6013      	str	r3, [r2, #0]
 801081e:	e76a      	b.n	80106f6 <_strtod_l+0x42e>
 8010820:	080126fd 	.word	0x080126fd
 8010824:	08012914 	.word	0x08012914
 8010828:	080126f5 	.word	0x080126f5
 801082c:	0801272c 	.word	0x0801272c
 8010830:	08012abd 	.word	0x08012abd
 8010834:	08012848 	.word	0x08012848
 8010838:	08012820 	.word	0x08012820
 801083c:	7ca00000 	.word	0x7ca00000
 8010840:	7ff00000 	.word	0x7ff00000
 8010844:	7fefffff 	.word	0x7fefffff
 8010848:	f012 0110 	ands.w	r1, r2, #16
 801084c:	bf18      	it	ne
 801084e:	216a      	movne	r1, #106	@ 0x6a
 8010850:	9106      	str	r1, [sp, #24]
 8010852:	ec4b ab17 	vmov	d7, sl, fp
 8010856:	49b0      	ldr	r1, [pc, #704]	@ (8010b18 <_strtod_l+0x850>)
 8010858:	2000      	movs	r0, #0
 801085a:	07d6      	lsls	r6, r2, #31
 801085c:	d504      	bpl.n	8010868 <_strtod_l+0x5a0>
 801085e:	ed91 6b00 	vldr	d6, [r1]
 8010862:	2001      	movs	r0, #1
 8010864:	ee27 7b06 	vmul.f64	d7, d7, d6
 8010868:	1052      	asrs	r2, r2, #1
 801086a:	f101 0108 	add.w	r1, r1, #8
 801086e:	d1f4      	bne.n	801085a <_strtod_l+0x592>
 8010870:	b108      	cbz	r0, 8010876 <_strtod_l+0x5ae>
 8010872:	ec5b ab17 	vmov	sl, fp, d7
 8010876:	9a06      	ldr	r2, [sp, #24]
 8010878:	b1b2      	cbz	r2, 80108a8 <_strtod_l+0x5e0>
 801087a:	f3cb 510a 	ubfx	r1, fp, #20, #11
 801087e:	f1c1 026b 	rsb	r2, r1, #107	@ 0x6b
 8010882:	2a00      	cmp	r2, #0
 8010884:	4658      	mov	r0, fp
 8010886:	dd0f      	ble.n	80108a8 <_strtod_l+0x5e0>
 8010888:	2a1f      	cmp	r2, #31
 801088a:	dd55      	ble.n	8010938 <_strtod_l+0x670>
 801088c:	2a34      	cmp	r2, #52	@ 0x34
 801088e:	bfde      	ittt	le
 8010890:	f04f 32ff 	movle.w	r2, #4294967295
 8010894:	f1c1 014b 	rsble	r1, r1, #75	@ 0x4b
 8010898:	408a      	lslle	r2, r1
 801089a:	f04f 0a00 	mov.w	sl, #0
 801089e:	bfcc      	ite	gt
 80108a0:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80108a4:	ea02 0b00 	andle.w	fp, r2, r0
 80108a8:	ec4b ab17 	vmov	d7, sl, fp
 80108ac:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80108b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80108b4:	d0a8      	beq.n	8010808 <_strtod_l+0x540>
 80108b6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80108b8:	9805      	ldr	r0, [sp, #20]
 80108ba:	f8cd 9000 	str.w	r9, [sp]
 80108be:	462a      	mov	r2, r5
 80108c0:	f7ff f8e0 	bl	800fa84 <__s2b>
 80108c4:	9007      	str	r0, [sp, #28]
 80108c6:	2800      	cmp	r0, #0
 80108c8:	f43f af0a 	beq.w	80106e0 <_strtod_l+0x418>
 80108cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80108ce:	1b3f      	subs	r7, r7, r4
 80108d0:	2b00      	cmp	r3, #0
 80108d2:	bfb4      	ite	lt
 80108d4:	463b      	movlt	r3, r7
 80108d6:	2300      	movge	r3, #0
 80108d8:	930a      	str	r3, [sp, #40]	@ 0x28
 80108da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80108dc:	ed9f bb8a 	vldr	d11, [pc, #552]	@ 8010b08 <_strtod_l+0x840>
 80108e0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80108e4:	2400      	movs	r4, #0
 80108e6:	930d      	str	r3, [sp, #52]	@ 0x34
 80108e8:	4625      	mov	r5, r4
 80108ea:	9b07      	ldr	r3, [sp, #28]
 80108ec:	9805      	ldr	r0, [sp, #20]
 80108ee:	6859      	ldr	r1, [r3, #4]
 80108f0:	f7ff f820 	bl	800f934 <_Balloc>
 80108f4:	4606      	mov	r6, r0
 80108f6:	2800      	cmp	r0, #0
 80108f8:	f43f aef6 	beq.w	80106e8 <_strtod_l+0x420>
 80108fc:	9b07      	ldr	r3, [sp, #28]
 80108fe:	691a      	ldr	r2, [r3, #16]
 8010900:	ec4b ab19 	vmov	d9, sl, fp
 8010904:	3202      	adds	r2, #2
 8010906:	f103 010c 	add.w	r1, r3, #12
 801090a:	0092      	lsls	r2, r2, #2
 801090c:	300c      	adds	r0, #12
 801090e:	f000 fd33 	bl	8011378 <memcpy>
 8010912:	eeb0 0b49 	vmov.f64	d0, d9
 8010916:	9805      	ldr	r0, [sp, #20]
 8010918:	aa14      	add	r2, sp, #80	@ 0x50
 801091a:	a913      	add	r1, sp, #76	@ 0x4c
 801091c:	f7ff fbee 	bl	80100fc <__d2b>
 8010920:	9012      	str	r0, [sp, #72]	@ 0x48
 8010922:	2800      	cmp	r0, #0
 8010924:	f43f aee0 	beq.w	80106e8 <_strtod_l+0x420>
 8010928:	9805      	ldr	r0, [sp, #20]
 801092a:	2101      	movs	r1, #1
 801092c:	f7ff f940 	bl	800fbb0 <__i2b>
 8010930:	4605      	mov	r5, r0
 8010932:	b940      	cbnz	r0, 8010946 <_strtod_l+0x67e>
 8010934:	2500      	movs	r5, #0
 8010936:	e6d7      	b.n	80106e8 <_strtod_l+0x420>
 8010938:	f04f 31ff 	mov.w	r1, #4294967295
 801093c:	fa01 f202 	lsl.w	r2, r1, r2
 8010940:	ea02 0a0a 	and.w	sl, r2, sl
 8010944:	e7b0      	b.n	80108a8 <_strtod_l+0x5e0>
 8010946:	9f13      	ldr	r7, [sp, #76]	@ 0x4c
 8010948:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801094a:	2f00      	cmp	r7, #0
 801094c:	bfab      	itete	ge
 801094e:	9b0a      	ldrge	r3, [sp, #40]	@ 0x28
 8010950:	9b0d      	ldrlt	r3, [sp, #52]	@ 0x34
 8010952:	f8dd 8034 	ldrge.w	r8, [sp, #52]	@ 0x34
 8010956:	f8dd 9028 	ldrlt.w	r9, [sp, #40]	@ 0x28
 801095a:	bfac      	ite	ge
 801095c:	eb07 0903 	addge.w	r9, r7, r3
 8010960:	eba3 0807 	sublt.w	r8, r3, r7
 8010964:	9b06      	ldr	r3, [sp, #24]
 8010966:	1aff      	subs	r7, r7, r3
 8010968:	4417      	add	r7, r2
 801096a:	f1c2 0336 	rsb	r3, r2, #54	@ 0x36
 801096e:	4a6b      	ldr	r2, [pc, #428]	@ (8010b1c <_strtod_l+0x854>)
 8010970:	3f01      	subs	r7, #1
 8010972:	4297      	cmp	r7, r2
 8010974:	da51      	bge.n	8010a1a <_strtod_l+0x752>
 8010976:	1bd1      	subs	r1, r2, r7
 8010978:	291f      	cmp	r1, #31
 801097a:	eba3 0301 	sub.w	r3, r3, r1
 801097e:	f04f 0201 	mov.w	r2, #1
 8010982:	dc3e      	bgt.n	8010a02 <_strtod_l+0x73a>
 8010984:	408a      	lsls	r2, r1
 8010986:	920c      	str	r2, [sp, #48]	@ 0x30
 8010988:	2200      	movs	r2, #0
 801098a:	920b      	str	r2, [sp, #44]	@ 0x2c
 801098c:	eb09 0703 	add.w	r7, r9, r3
 8010990:	4498      	add	r8, r3
 8010992:	9b06      	ldr	r3, [sp, #24]
 8010994:	45b9      	cmp	r9, r7
 8010996:	4498      	add	r8, r3
 8010998:	464b      	mov	r3, r9
 801099a:	bfa8      	it	ge
 801099c:	463b      	movge	r3, r7
 801099e:	4543      	cmp	r3, r8
 80109a0:	bfa8      	it	ge
 80109a2:	4643      	movge	r3, r8
 80109a4:	2b00      	cmp	r3, #0
 80109a6:	bfc2      	ittt	gt
 80109a8:	1aff      	subgt	r7, r7, r3
 80109aa:	eba8 0803 	subgt.w	r8, r8, r3
 80109ae:	eba9 0903 	subgt.w	r9, r9, r3
 80109b2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80109b4:	2b00      	cmp	r3, #0
 80109b6:	dd16      	ble.n	80109e6 <_strtod_l+0x71e>
 80109b8:	4629      	mov	r1, r5
 80109ba:	9805      	ldr	r0, [sp, #20]
 80109bc:	461a      	mov	r2, r3
 80109be:	f7ff f9b7 	bl	800fd30 <__pow5mult>
 80109c2:	4605      	mov	r5, r0
 80109c4:	2800      	cmp	r0, #0
 80109c6:	d0b5      	beq.n	8010934 <_strtod_l+0x66c>
 80109c8:	4601      	mov	r1, r0
 80109ca:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80109cc:	9805      	ldr	r0, [sp, #20]
 80109ce:	f7ff f905 	bl	800fbdc <__multiply>
 80109d2:	900f      	str	r0, [sp, #60]	@ 0x3c
 80109d4:	2800      	cmp	r0, #0
 80109d6:	f43f ae87 	beq.w	80106e8 <_strtod_l+0x420>
 80109da:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80109dc:	9805      	ldr	r0, [sp, #20]
 80109de:	f7fe ffe9 	bl	800f9b4 <_Bfree>
 80109e2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80109e4:	9312      	str	r3, [sp, #72]	@ 0x48
 80109e6:	2f00      	cmp	r7, #0
 80109e8:	dc1b      	bgt.n	8010a22 <_strtod_l+0x75a>
 80109ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80109ec:	2b00      	cmp	r3, #0
 80109ee:	dd21      	ble.n	8010a34 <_strtod_l+0x76c>
 80109f0:	4631      	mov	r1, r6
 80109f2:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80109f4:	9805      	ldr	r0, [sp, #20]
 80109f6:	f7ff f99b 	bl	800fd30 <__pow5mult>
 80109fa:	4606      	mov	r6, r0
 80109fc:	b9d0      	cbnz	r0, 8010a34 <_strtod_l+0x76c>
 80109fe:	2600      	movs	r6, #0
 8010a00:	e672      	b.n	80106e8 <_strtod_l+0x420>
 8010a02:	f1c7 477f 	rsb	r7, r7, #4278190080	@ 0xff000000
 8010a06:	f507 077f 	add.w	r7, r7, #16711680	@ 0xff0000
 8010a0a:	f507 477b 	add.w	r7, r7, #64256	@ 0xfb00
 8010a0e:	37e2      	adds	r7, #226	@ 0xe2
 8010a10:	fa02 f107 	lsl.w	r1, r2, r7
 8010a14:	910b      	str	r1, [sp, #44]	@ 0x2c
 8010a16:	920c      	str	r2, [sp, #48]	@ 0x30
 8010a18:	e7b8      	b.n	801098c <_strtod_l+0x6c4>
 8010a1a:	2200      	movs	r2, #0
 8010a1c:	920b      	str	r2, [sp, #44]	@ 0x2c
 8010a1e:	2201      	movs	r2, #1
 8010a20:	e7f9      	b.n	8010a16 <_strtod_l+0x74e>
 8010a22:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8010a24:	9805      	ldr	r0, [sp, #20]
 8010a26:	463a      	mov	r2, r7
 8010a28:	f7ff f9dc 	bl	800fde4 <__lshift>
 8010a2c:	9012      	str	r0, [sp, #72]	@ 0x48
 8010a2e:	2800      	cmp	r0, #0
 8010a30:	d1db      	bne.n	80109ea <_strtod_l+0x722>
 8010a32:	e659      	b.n	80106e8 <_strtod_l+0x420>
 8010a34:	f1b8 0f00 	cmp.w	r8, #0
 8010a38:	dd07      	ble.n	8010a4a <_strtod_l+0x782>
 8010a3a:	4631      	mov	r1, r6
 8010a3c:	9805      	ldr	r0, [sp, #20]
 8010a3e:	4642      	mov	r2, r8
 8010a40:	f7ff f9d0 	bl	800fde4 <__lshift>
 8010a44:	4606      	mov	r6, r0
 8010a46:	2800      	cmp	r0, #0
 8010a48:	d0d9      	beq.n	80109fe <_strtod_l+0x736>
 8010a4a:	f1b9 0f00 	cmp.w	r9, #0
 8010a4e:	dd08      	ble.n	8010a62 <_strtod_l+0x79a>
 8010a50:	4629      	mov	r1, r5
 8010a52:	9805      	ldr	r0, [sp, #20]
 8010a54:	464a      	mov	r2, r9
 8010a56:	f7ff f9c5 	bl	800fde4 <__lshift>
 8010a5a:	4605      	mov	r5, r0
 8010a5c:	2800      	cmp	r0, #0
 8010a5e:	f43f ae43 	beq.w	80106e8 <_strtod_l+0x420>
 8010a62:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8010a64:	9805      	ldr	r0, [sp, #20]
 8010a66:	4632      	mov	r2, r6
 8010a68:	f7ff fa44 	bl	800fef4 <__mdiff>
 8010a6c:	4604      	mov	r4, r0
 8010a6e:	2800      	cmp	r0, #0
 8010a70:	f43f ae3a 	beq.w	80106e8 <_strtod_l+0x420>
 8010a74:	2300      	movs	r3, #0
 8010a76:	f8d0 800c 	ldr.w	r8, [r0, #12]
 8010a7a:	60c3      	str	r3, [r0, #12]
 8010a7c:	4629      	mov	r1, r5
 8010a7e:	f7ff fa1d 	bl	800febc <__mcmp>
 8010a82:	2800      	cmp	r0, #0
 8010a84:	da4e      	bge.n	8010b24 <_strtod_l+0x85c>
 8010a86:	ea58 080a 	orrs.w	r8, r8, sl
 8010a8a:	d174      	bne.n	8010b76 <_strtod_l+0x8ae>
 8010a8c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010a90:	2b00      	cmp	r3, #0
 8010a92:	d170      	bne.n	8010b76 <_strtod_l+0x8ae>
 8010a94:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8010a98:	0d1b      	lsrs	r3, r3, #20
 8010a9a:	051b      	lsls	r3, r3, #20
 8010a9c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8010aa0:	d969      	bls.n	8010b76 <_strtod_l+0x8ae>
 8010aa2:	6963      	ldr	r3, [r4, #20]
 8010aa4:	b913      	cbnz	r3, 8010aac <_strtod_l+0x7e4>
 8010aa6:	6923      	ldr	r3, [r4, #16]
 8010aa8:	2b01      	cmp	r3, #1
 8010aaa:	dd64      	ble.n	8010b76 <_strtod_l+0x8ae>
 8010aac:	4621      	mov	r1, r4
 8010aae:	2201      	movs	r2, #1
 8010ab0:	9805      	ldr	r0, [sp, #20]
 8010ab2:	f7ff f997 	bl	800fde4 <__lshift>
 8010ab6:	4629      	mov	r1, r5
 8010ab8:	4604      	mov	r4, r0
 8010aba:	f7ff f9ff 	bl	800febc <__mcmp>
 8010abe:	2800      	cmp	r0, #0
 8010ac0:	dd59      	ble.n	8010b76 <_strtod_l+0x8ae>
 8010ac2:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8010ac6:	9a06      	ldr	r2, [sp, #24]
 8010ac8:	0d1b      	lsrs	r3, r3, #20
 8010aca:	051b      	lsls	r3, r3, #20
 8010acc:	2a00      	cmp	r2, #0
 8010ace:	d070      	beq.n	8010bb2 <_strtod_l+0x8ea>
 8010ad0:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8010ad4:	d86d      	bhi.n	8010bb2 <_strtod_l+0x8ea>
 8010ad6:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8010ada:	f67f ae99 	bls.w	8010810 <_strtod_l+0x548>
 8010ade:	ed9f 7b0c 	vldr	d7, [pc, #48]	@ 8010b10 <_strtod_l+0x848>
 8010ae2:	ec4b ab16 	vmov	d6, sl, fp
 8010ae6:	4b0e      	ldr	r3, [pc, #56]	@ (8010b20 <_strtod_l+0x858>)
 8010ae8:	ee26 7b07 	vmul.f64	d7, d6, d7
 8010aec:	ee17 2a90 	vmov	r2, s15
 8010af0:	4013      	ands	r3, r2
 8010af2:	ec5b ab17 	vmov	sl, fp, d7
 8010af6:	2b00      	cmp	r3, #0
 8010af8:	f47f ae01 	bne.w	80106fe <_strtod_l+0x436>
 8010afc:	9a05      	ldr	r2, [sp, #20]
 8010afe:	2322      	movs	r3, #34	@ 0x22
 8010b00:	6013      	str	r3, [r2, #0]
 8010b02:	e5fc      	b.n	80106fe <_strtod_l+0x436>
 8010b04:	f3af 8000 	nop.w
 8010b08:	ffc00000 	.word	0xffc00000
 8010b0c:	41dfffff 	.word	0x41dfffff
 8010b10:	00000000 	.word	0x00000000
 8010b14:	39500000 	.word	0x39500000
 8010b18:	08012940 	.word	0x08012940
 8010b1c:	fffffc02 	.word	0xfffffc02
 8010b20:	7ff00000 	.word	0x7ff00000
 8010b24:	46d9      	mov	r9, fp
 8010b26:	d15d      	bne.n	8010be4 <_strtod_l+0x91c>
 8010b28:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010b2c:	f1b8 0f00 	cmp.w	r8, #0
 8010b30:	d02a      	beq.n	8010b88 <_strtod_l+0x8c0>
 8010b32:	4aab      	ldr	r2, [pc, #684]	@ (8010de0 <_strtod_l+0xb18>)
 8010b34:	4293      	cmp	r3, r2
 8010b36:	d12a      	bne.n	8010b8e <_strtod_l+0x8c6>
 8010b38:	9b06      	ldr	r3, [sp, #24]
 8010b3a:	4652      	mov	r2, sl
 8010b3c:	b1fb      	cbz	r3, 8010b7e <_strtod_l+0x8b6>
 8010b3e:	4ba9      	ldr	r3, [pc, #676]	@ (8010de4 <_strtod_l+0xb1c>)
 8010b40:	ea0b 0303 	and.w	r3, fp, r3
 8010b44:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8010b48:	f04f 31ff 	mov.w	r1, #4294967295
 8010b4c:	d81a      	bhi.n	8010b84 <_strtod_l+0x8bc>
 8010b4e:	0d1b      	lsrs	r3, r3, #20
 8010b50:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8010b54:	fa01 f303 	lsl.w	r3, r1, r3
 8010b58:	429a      	cmp	r2, r3
 8010b5a:	d118      	bne.n	8010b8e <_strtod_l+0x8c6>
 8010b5c:	4ba2      	ldr	r3, [pc, #648]	@ (8010de8 <_strtod_l+0xb20>)
 8010b5e:	4599      	cmp	r9, r3
 8010b60:	d102      	bne.n	8010b68 <_strtod_l+0x8a0>
 8010b62:	3201      	adds	r2, #1
 8010b64:	f43f adc0 	beq.w	80106e8 <_strtod_l+0x420>
 8010b68:	4b9e      	ldr	r3, [pc, #632]	@ (8010de4 <_strtod_l+0xb1c>)
 8010b6a:	ea09 0303 	and.w	r3, r9, r3
 8010b6e:	f503 1b80 	add.w	fp, r3, #1048576	@ 0x100000
 8010b72:	f04f 0a00 	mov.w	sl, #0
 8010b76:	9b06      	ldr	r3, [sp, #24]
 8010b78:	2b00      	cmp	r3, #0
 8010b7a:	d1b0      	bne.n	8010ade <_strtod_l+0x816>
 8010b7c:	e5bf      	b.n	80106fe <_strtod_l+0x436>
 8010b7e:	f04f 33ff 	mov.w	r3, #4294967295
 8010b82:	e7e9      	b.n	8010b58 <_strtod_l+0x890>
 8010b84:	460b      	mov	r3, r1
 8010b86:	e7e7      	b.n	8010b58 <_strtod_l+0x890>
 8010b88:	ea53 030a 	orrs.w	r3, r3, sl
 8010b8c:	d099      	beq.n	8010ac2 <_strtod_l+0x7fa>
 8010b8e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010b90:	b1c3      	cbz	r3, 8010bc4 <_strtod_l+0x8fc>
 8010b92:	ea13 0f09 	tst.w	r3, r9
 8010b96:	d0ee      	beq.n	8010b76 <_strtod_l+0x8ae>
 8010b98:	9a06      	ldr	r2, [sp, #24]
 8010b9a:	4650      	mov	r0, sl
 8010b9c:	4659      	mov	r1, fp
 8010b9e:	f1b8 0f00 	cmp.w	r8, #0
 8010ba2:	d013      	beq.n	8010bcc <_strtod_l+0x904>
 8010ba4:	f7ff fb75 	bl	8010292 <sulp>
 8010ba8:	ee39 7b00 	vadd.f64	d7, d9, d0
 8010bac:	ec5b ab17 	vmov	sl, fp, d7
 8010bb0:	e7e1      	b.n	8010b76 <_strtod_l+0x8ae>
 8010bb2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8010bb6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8010bba:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8010bbe:	f04f 3aff 	mov.w	sl, #4294967295
 8010bc2:	e7d8      	b.n	8010b76 <_strtod_l+0x8ae>
 8010bc4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010bc6:	ea13 0f0a 	tst.w	r3, sl
 8010bca:	e7e4      	b.n	8010b96 <_strtod_l+0x8ce>
 8010bcc:	f7ff fb61 	bl	8010292 <sulp>
 8010bd0:	ee39 0b40 	vsub.f64	d0, d9, d0
 8010bd4:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8010bd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010bdc:	ec5b ab10 	vmov	sl, fp, d0
 8010be0:	d1c9      	bne.n	8010b76 <_strtod_l+0x8ae>
 8010be2:	e615      	b.n	8010810 <_strtod_l+0x548>
 8010be4:	4629      	mov	r1, r5
 8010be6:	4620      	mov	r0, r4
 8010be8:	f7ff fae0 	bl	80101ac <__ratio>
 8010bec:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 8010bf0:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8010bf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010bf8:	d85d      	bhi.n	8010cb6 <_strtod_l+0x9ee>
 8010bfa:	f1b8 0f00 	cmp.w	r8, #0
 8010bfe:	d164      	bne.n	8010cca <_strtod_l+0xa02>
 8010c00:	f1ba 0f00 	cmp.w	sl, #0
 8010c04:	d14b      	bne.n	8010c9e <_strtod_l+0x9d6>
 8010c06:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010c0a:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 8010c0e:	2b00      	cmp	r3, #0
 8010c10:	d160      	bne.n	8010cd4 <_strtod_l+0xa0c>
 8010c12:	eeb4 0bc8 	vcmpe.f64	d0, d8
 8010c16:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 8010c1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c1e:	d401      	bmi.n	8010c24 <_strtod_l+0x95c>
 8010c20:	ee20 8b08 	vmul.f64	d8, d0, d8
 8010c24:	eeb1 ab48 	vneg.f64	d10, d8
 8010c28:	486e      	ldr	r0, [pc, #440]	@ (8010de4 <_strtod_l+0xb1c>)
 8010c2a:	4970      	ldr	r1, [pc, #448]	@ (8010dec <_strtod_l+0xb24>)
 8010c2c:	ea09 0700 	and.w	r7, r9, r0
 8010c30:	428f      	cmp	r7, r1
 8010c32:	ec53 2b1a 	vmov	r2, r3, d10
 8010c36:	d17d      	bne.n	8010d34 <_strtod_l+0xa6c>
 8010c38:	f1a9 7b54 	sub.w	fp, r9, #55574528	@ 0x3500000
 8010c3c:	ec4b ab1c 	vmov	d12, sl, fp
 8010c40:	eeb0 0b4c 	vmov.f64	d0, d12
 8010c44:	f7ff f9ea 	bl	801001c <__ulp>
 8010c48:	4866      	ldr	r0, [pc, #408]	@ (8010de4 <_strtod_l+0xb1c>)
 8010c4a:	eea0 cb0a 	vfma.f64	d12, d0, d10
 8010c4e:	ee1c 3a90 	vmov	r3, s25
 8010c52:	4a67      	ldr	r2, [pc, #412]	@ (8010df0 <_strtod_l+0xb28>)
 8010c54:	ea03 0100 	and.w	r1, r3, r0
 8010c58:	4291      	cmp	r1, r2
 8010c5a:	ec5b ab1c 	vmov	sl, fp, d12
 8010c5e:	d93c      	bls.n	8010cda <_strtod_l+0xa12>
 8010c60:	ee19 2a90 	vmov	r2, s19
 8010c64:	4b60      	ldr	r3, [pc, #384]	@ (8010de8 <_strtod_l+0xb20>)
 8010c66:	429a      	cmp	r2, r3
 8010c68:	d104      	bne.n	8010c74 <_strtod_l+0x9ac>
 8010c6a:	ee19 3a10 	vmov	r3, s18
 8010c6e:	3301      	adds	r3, #1
 8010c70:	f43f ad3a 	beq.w	80106e8 <_strtod_l+0x420>
 8010c74:	f8df b170 	ldr.w	fp, [pc, #368]	@ 8010de8 <_strtod_l+0xb20>
 8010c78:	f04f 3aff 	mov.w	sl, #4294967295
 8010c7c:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8010c7e:	9805      	ldr	r0, [sp, #20]
 8010c80:	f7fe fe98 	bl	800f9b4 <_Bfree>
 8010c84:	9805      	ldr	r0, [sp, #20]
 8010c86:	4631      	mov	r1, r6
 8010c88:	f7fe fe94 	bl	800f9b4 <_Bfree>
 8010c8c:	9805      	ldr	r0, [sp, #20]
 8010c8e:	4629      	mov	r1, r5
 8010c90:	f7fe fe90 	bl	800f9b4 <_Bfree>
 8010c94:	9805      	ldr	r0, [sp, #20]
 8010c96:	4621      	mov	r1, r4
 8010c98:	f7fe fe8c 	bl	800f9b4 <_Bfree>
 8010c9c:	e625      	b.n	80108ea <_strtod_l+0x622>
 8010c9e:	f1ba 0f01 	cmp.w	sl, #1
 8010ca2:	d103      	bne.n	8010cac <_strtod_l+0x9e4>
 8010ca4:	f1bb 0f00 	cmp.w	fp, #0
 8010ca8:	f43f adb2 	beq.w	8010810 <_strtod_l+0x548>
 8010cac:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 8010cb0:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 8010cb4:	e7b8      	b.n	8010c28 <_strtod_l+0x960>
 8010cb6:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 8010cba:	ee20 8b08 	vmul.f64	d8, d0, d8
 8010cbe:	f1b8 0f00 	cmp.w	r8, #0
 8010cc2:	d0af      	beq.n	8010c24 <_strtod_l+0x95c>
 8010cc4:	eeb0 ab48 	vmov.f64	d10, d8
 8010cc8:	e7ae      	b.n	8010c28 <_strtod_l+0x960>
 8010cca:	eeb7 ab00 	vmov.f64	d10, #112	@ 0x3f800000  1.0
 8010cce:	eeb0 8b4a 	vmov.f64	d8, d10
 8010cd2:	e7a9      	b.n	8010c28 <_strtod_l+0x960>
 8010cd4:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 8010cd8:	e7a6      	b.n	8010c28 <_strtod_l+0x960>
 8010cda:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8010cde:	9b06      	ldr	r3, [sp, #24]
 8010ce0:	46d9      	mov	r9, fp
 8010ce2:	2b00      	cmp	r3, #0
 8010ce4:	d1ca      	bne.n	8010c7c <_strtod_l+0x9b4>
 8010ce6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8010cea:	0d1b      	lsrs	r3, r3, #20
 8010cec:	051b      	lsls	r3, r3, #20
 8010cee:	429f      	cmp	r7, r3
 8010cf0:	d1c4      	bne.n	8010c7c <_strtod_l+0x9b4>
 8010cf2:	ec51 0b18 	vmov	r0, r1, d8
 8010cf6:	f7ef fd1f 	bl	8000738 <__aeabi_d2lz>
 8010cfa:	f7ef fcd7 	bl	80006ac <__aeabi_l2d>
 8010cfe:	f3cb 0913 	ubfx	r9, fp, #0, #20
 8010d02:	ec41 0b17 	vmov	d7, r0, r1
 8010d06:	ea49 090a 	orr.w	r9, r9, sl
 8010d0a:	ea59 0908 	orrs.w	r9, r9, r8
 8010d0e:	ee38 8b47 	vsub.f64	d8, d8, d7
 8010d12:	d03c      	beq.n	8010d8e <_strtod_l+0xac6>
 8010d14:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 8010dc8 <_strtod_l+0xb00>
 8010d18:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8010d1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d20:	f53f aced 	bmi.w	80106fe <_strtod_l+0x436>
 8010d24:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 8010dd0 <_strtod_l+0xb08>
 8010d28:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8010d2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d30:	dda4      	ble.n	8010c7c <_strtod_l+0x9b4>
 8010d32:	e4e4      	b.n	80106fe <_strtod_l+0x436>
 8010d34:	9906      	ldr	r1, [sp, #24]
 8010d36:	b1e1      	cbz	r1, 8010d72 <_strtod_l+0xaaa>
 8010d38:	f1b7 6fd4 	cmp.w	r7, #111149056	@ 0x6a00000
 8010d3c:	d819      	bhi.n	8010d72 <_strtod_l+0xaaa>
 8010d3e:	eeb4 8bcb 	vcmpe.f64	d8, d11
 8010d42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d46:	d811      	bhi.n	8010d6c <_strtod_l+0xaa4>
 8010d48:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 8010d4c:	ee18 3a10 	vmov	r3, s16
 8010d50:	2b01      	cmp	r3, #1
 8010d52:	bf38      	it	cc
 8010d54:	2301      	movcc	r3, #1
 8010d56:	ee08 3a10 	vmov	s16, r3
 8010d5a:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 8010d5e:	f1b8 0f00 	cmp.w	r8, #0
 8010d62:	d111      	bne.n	8010d88 <_strtod_l+0xac0>
 8010d64:	eeb1 7b48 	vneg.f64	d7, d8
 8010d68:	ec53 2b17 	vmov	r2, r3, d7
 8010d6c:	f103 61d6 	add.w	r1, r3, #112197632	@ 0x6b00000
 8010d70:	1bcb      	subs	r3, r1, r7
 8010d72:	eeb0 0b49 	vmov.f64	d0, d9
 8010d76:	ec43 2b1a 	vmov	d10, r2, r3
 8010d7a:	f7ff f94f 	bl	801001c <__ulp>
 8010d7e:	eeaa 9b00 	vfma.f64	d9, d10, d0
 8010d82:	ec5b ab19 	vmov	sl, fp, d9
 8010d86:	e7aa      	b.n	8010cde <_strtod_l+0xa16>
 8010d88:	eeb0 7b48 	vmov.f64	d7, d8
 8010d8c:	e7ec      	b.n	8010d68 <_strtod_l+0xaa0>
 8010d8e:	ed9f 7b12 	vldr	d7, [pc, #72]	@ 8010dd8 <_strtod_l+0xb10>
 8010d92:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8010d96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d9a:	f57f af6f 	bpl.w	8010c7c <_strtod_l+0x9b4>
 8010d9e:	e4ae      	b.n	80106fe <_strtod_l+0x436>
 8010da0:	2300      	movs	r3, #0
 8010da2:	9308      	str	r3, [sp, #32]
 8010da4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010da6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8010da8:	6013      	str	r3, [r2, #0]
 8010daa:	f7ff bacc 	b.w	8010346 <_strtod_l+0x7e>
 8010dae:	2a65      	cmp	r2, #101	@ 0x65
 8010db0:	f43f abbc 	beq.w	801052c <_strtod_l+0x264>
 8010db4:	2a45      	cmp	r2, #69	@ 0x45
 8010db6:	f43f abb9 	beq.w	801052c <_strtod_l+0x264>
 8010dba:	2301      	movs	r3, #1
 8010dbc:	9306      	str	r3, [sp, #24]
 8010dbe:	f7ff bbf0 	b.w	80105a2 <_strtod_l+0x2da>
 8010dc2:	bf00      	nop
 8010dc4:	f3af 8000 	nop.w
 8010dc8:	94a03595 	.word	0x94a03595
 8010dcc:	3fdfffff 	.word	0x3fdfffff
 8010dd0:	35afe535 	.word	0x35afe535
 8010dd4:	3fe00000 	.word	0x3fe00000
 8010dd8:	94a03595 	.word	0x94a03595
 8010ddc:	3fcfffff 	.word	0x3fcfffff
 8010de0:	000fffff 	.word	0x000fffff
 8010de4:	7ff00000 	.word	0x7ff00000
 8010de8:	7fefffff 	.word	0x7fefffff
 8010dec:	7fe00000 	.word	0x7fe00000
 8010df0:	7c9fffff 	.word	0x7c9fffff

08010df4 <_strtod_r>:
 8010df4:	4b01      	ldr	r3, [pc, #4]	@ (8010dfc <_strtod_r+0x8>)
 8010df6:	f7ff ba67 	b.w	80102c8 <_strtod_l>
 8010dfa:	bf00      	nop
 8010dfc:	2400006c 	.word	0x2400006c

08010e00 <_strtol_l.constprop.0>:
 8010e00:	2b24      	cmp	r3, #36	@ 0x24
 8010e02:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010e06:	4686      	mov	lr, r0
 8010e08:	4690      	mov	r8, r2
 8010e0a:	d801      	bhi.n	8010e10 <_strtol_l.constprop.0+0x10>
 8010e0c:	2b01      	cmp	r3, #1
 8010e0e:	d106      	bne.n	8010e1e <_strtol_l.constprop.0+0x1e>
 8010e10:	f7fd fe7e 	bl	800eb10 <__errno>
 8010e14:	2316      	movs	r3, #22
 8010e16:	6003      	str	r3, [r0, #0]
 8010e18:	2000      	movs	r0, #0
 8010e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010e1e:	4834      	ldr	r0, [pc, #208]	@ (8010ef0 <_strtol_l.constprop.0+0xf0>)
 8010e20:	460d      	mov	r5, r1
 8010e22:	462a      	mov	r2, r5
 8010e24:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010e28:	5d06      	ldrb	r6, [r0, r4]
 8010e2a:	f016 0608 	ands.w	r6, r6, #8
 8010e2e:	d1f8      	bne.n	8010e22 <_strtol_l.constprop.0+0x22>
 8010e30:	2c2d      	cmp	r4, #45	@ 0x2d
 8010e32:	d12d      	bne.n	8010e90 <_strtol_l.constprop.0+0x90>
 8010e34:	782c      	ldrb	r4, [r5, #0]
 8010e36:	2601      	movs	r6, #1
 8010e38:	1c95      	adds	r5, r2, #2
 8010e3a:	f033 0210 	bics.w	r2, r3, #16
 8010e3e:	d109      	bne.n	8010e54 <_strtol_l.constprop.0+0x54>
 8010e40:	2c30      	cmp	r4, #48	@ 0x30
 8010e42:	d12a      	bne.n	8010e9a <_strtol_l.constprop.0+0x9a>
 8010e44:	782a      	ldrb	r2, [r5, #0]
 8010e46:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8010e4a:	2a58      	cmp	r2, #88	@ 0x58
 8010e4c:	d125      	bne.n	8010e9a <_strtol_l.constprop.0+0x9a>
 8010e4e:	786c      	ldrb	r4, [r5, #1]
 8010e50:	2310      	movs	r3, #16
 8010e52:	3502      	adds	r5, #2
 8010e54:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8010e58:	f10c 3cff 	add.w	ip, ip, #4294967295
 8010e5c:	2200      	movs	r2, #0
 8010e5e:	fbbc f9f3 	udiv	r9, ip, r3
 8010e62:	4610      	mov	r0, r2
 8010e64:	fb03 ca19 	mls	sl, r3, r9, ip
 8010e68:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8010e6c:	2f09      	cmp	r7, #9
 8010e6e:	d81b      	bhi.n	8010ea8 <_strtol_l.constprop.0+0xa8>
 8010e70:	463c      	mov	r4, r7
 8010e72:	42a3      	cmp	r3, r4
 8010e74:	dd27      	ble.n	8010ec6 <_strtol_l.constprop.0+0xc6>
 8010e76:	1c57      	adds	r7, r2, #1
 8010e78:	d007      	beq.n	8010e8a <_strtol_l.constprop.0+0x8a>
 8010e7a:	4581      	cmp	r9, r0
 8010e7c:	d320      	bcc.n	8010ec0 <_strtol_l.constprop.0+0xc0>
 8010e7e:	d101      	bne.n	8010e84 <_strtol_l.constprop.0+0x84>
 8010e80:	45a2      	cmp	sl, r4
 8010e82:	db1d      	blt.n	8010ec0 <_strtol_l.constprop.0+0xc0>
 8010e84:	fb00 4003 	mla	r0, r0, r3, r4
 8010e88:	2201      	movs	r2, #1
 8010e8a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010e8e:	e7eb      	b.n	8010e68 <_strtol_l.constprop.0+0x68>
 8010e90:	2c2b      	cmp	r4, #43	@ 0x2b
 8010e92:	bf04      	itt	eq
 8010e94:	782c      	ldrbeq	r4, [r5, #0]
 8010e96:	1c95      	addeq	r5, r2, #2
 8010e98:	e7cf      	b.n	8010e3a <_strtol_l.constprop.0+0x3a>
 8010e9a:	2b00      	cmp	r3, #0
 8010e9c:	d1da      	bne.n	8010e54 <_strtol_l.constprop.0+0x54>
 8010e9e:	2c30      	cmp	r4, #48	@ 0x30
 8010ea0:	bf0c      	ite	eq
 8010ea2:	2308      	moveq	r3, #8
 8010ea4:	230a      	movne	r3, #10
 8010ea6:	e7d5      	b.n	8010e54 <_strtol_l.constprop.0+0x54>
 8010ea8:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8010eac:	2f19      	cmp	r7, #25
 8010eae:	d801      	bhi.n	8010eb4 <_strtol_l.constprop.0+0xb4>
 8010eb0:	3c37      	subs	r4, #55	@ 0x37
 8010eb2:	e7de      	b.n	8010e72 <_strtol_l.constprop.0+0x72>
 8010eb4:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8010eb8:	2f19      	cmp	r7, #25
 8010eba:	d804      	bhi.n	8010ec6 <_strtol_l.constprop.0+0xc6>
 8010ebc:	3c57      	subs	r4, #87	@ 0x57
 8010ebe:	e7d8      	b.n	8010e72 <_strtol_l.constprop.0+0x72>
 8010ec0:	f04f 32ff 	mov.w	r2, #4294967295
 8010ec4:	e7e1      	b.n	8010e8a <_strtol_l.constprop.0+0x8a>
 8010ec6:	1c53      	adds	r3, r2, #1
 8010ec8:	d108      	bne.n	8010edc <_strtol_l.constprop.0+0xdc>
 8010eca:	2322      	movs	r3, #34	@ 0x22
 8010ecc:	f8ce 3000 	str.w	r3, [lr]
 8010ed0:	4660      	mov	r0, ip
 8010ed2:	f1b8 0f00 	cmp.w	r8, #0
 8010ed6:	d0a0      	beq.n	8010e1a <_strtol_l.constprop.0+0x1a>
 8010ed8:	1e69      	subs	r1, r5, #1
 8010eda:	e006      	b.n	8010eea <_strtol_l.constprop.0+0xea>
 8010edc:	b106      	cbz	r6, 8010ee0 <_strtol_l.constprop.0+0xe0>
 8010ede:	4240      	negs	r0, r0
 8010ee0:	f1b8 0f00 	cmp.w	r8, #0
 8010ee4:	d099      	beq.n	8010e1a <_strtol_l.constprop.0+0x1a>
 8010ee6:	2a00      	cmp	r2, #0
 8010ee8:	d1f6      	bne.n	8010ed8 <_strtol_l.constprop.0+0xd8>
 8010eea:	f8c8 1000 	str.w	r1, [r8]
 8010eee:	e794      	b.n	8010e1a <_strtol_l.constprop.0+0x1a>
 8010ef0:	08012969 	.word	0x08012969

08010ef4 <_strtol_r>:
 8010ef4:	f7ff bf84 	b.w	8010e00 <_strtol_l.constprop.0>

08010ef8 <__ssputs_r>:
 8010ef8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010efc:	688e      	ldr	r6, [r1, #8]
 8010efe:	461f      	mov	r7, r3
 8010f00:	42be      	cmp	r6, r7
 8010f02:	680b      	ldr	r3, [r1, #0]
 8010f04:	4682      	mov	sl, r0
 8010f06:	460c      	mov	r4, r1
 8010f08:	4690      	mov	r8, r2
 8010f0a:	d82d      	bhi.n	8010f68 <__ssputs_r+0x70>
 8010f0c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8010f10:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8010f14:	d026      	beq.n	8010f64 <__ssputs_r+0x6c>
 8010f16:	6965      	ldr	r5, [r4, #20]
 8010f18:	6909      	ldr	r1, [r1, #16]
 8010f1a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010f1e:	eba3 0901 	sub.w	r9, r3, r1
 8010f22:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010f26:	1c7b      	adds	r3, r7, #1
 8010f28:	444b      	add	r3, r9
 8010f2a:	106d      	asrs	r5, r5, #1
 8010f2c:	429d      	cmp	r5, r3
 8010f2e:	bf38      	it	cc
 8010f30:	461d      	movcc	r5, r3
 8010f32:	0553      	lsls	r3, r2, #21
 8010f34:	d527      	bpl.n	8010f86 <__ssputs_r+0x8e>
 8010f36:	4629      	mov	r1, r5
 8010f38:	f7fe fc70 	bl	800f81c <_malloc_r>
 8010f3c:	4606      	mov	r6, r0
 8010f3e:	b360      	cbz	r0, 8010f9a <__ssputs_r+0xa2>
 8010f40:	6921      	ldr	r1, [r4, #16]
 8010f42:	464a      	mov	r2, r9
 8010f44:	f000 fa18 	bl	8011378 <memcpy>
 8010f48:	89a3      	ldrh	r3, [r4, #12]
 8010f4a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8010f4e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010f52:	81a3      	strh	r3, [r4, #12]
 8010f54:	6126      	str	r6, [r4, #16]
 8010f56:	6165      	str	r5, [r4, #20]
 8010f58:	444e      	add	r6, r9
 8010f5a:	eba5 0509 	sub.w	r5, r5, r9
 8010f5e:	6026      	str	r6, [r4, #0]
 8010f60:	60a5      	str	r5, [r4, #8]
 8010f62:	463e      	mov	r6, r7
 8010f64:	42be      	cmp	r6, r7
 8010f66:	d900      	bls.n	8010f6a <__ssputs_r+0x72>
 8010f68:	463e      	mov	r6, r7
 8010f6a:	6820      	ldr	r0, [r4, #0]
 8010f6c:	4632      	mov	r2, r6
 8010f6e:	4641      	mov	r1, r8
 8010f70:	f000 f9c6 	bl	8011300 <memmove>
 8010f74:	68a3      	ldr	r3, [r4, #8]
 8010f76:	1b9b      	subs	r3, r3, r6
 8010f78:	60a3      	str	r3, [r4, #8]
 8010f7a:	6823      	ldr	r3, [r4, #0]
 8010f7c:	4433      	add	r3, r6
 8010f7e:	6023      	str	r3, [r4, #0]
 8010f80:	2000      	movs	r0, #0
 8010f82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010f86:	462a      	mov	r2, r5
 8010f88:	f000 fd8b 	bl	8011aa2 <_realloc_r>
 8010f8c:	4606      	mov	r6, r0
 8010f8e:	2800      	cmp	r0, #0
 8010f90:	d1e0      	bne.n	8010f54 <__ssputs_r+0x5c>
 8010f92:	6921      	ldr	r1, [r4, #16]
 8010f94:	4650      	mov	r0, sl
 8010f96:	f7fe fbcd 	bl	800f734 <_free_r>
 8010f9a:	230c      	movs	r3, #12
 8010f9c:	f8ca 3000 	str.w	r3, [sl]
 8010fa0:	89a3      	ldrh	r3, [r4, #12]
 8010fa2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010fa6:	81a3      	strh	r3, [r4, #12]
 8010fa8:	f04f 30ff 	mov.w	r0, #4294967295
 8010fac:	e7e9      	b.n	8010f82 <__ssputs_r+0x8a>
	...

08010fb0 <_svfiprintf_r>:
 8010fb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010fb4:	4698      	mov	r8, r3
 8010fb6:	898b      	ldrh	r3, [r1, #12]
 8010fb8:	061b      	lsls	r3, r3, #24
 8010fba:	b09d      	sub	sp, #116	@ 0x74
 8010fbc:	4607      	mov	r7, r0
 8010fbe:	460d      	mov	r5, r1
 8010fc0:	4614      	mov	r4, r2
 8010fc2:	d510      	bpl.n	8010fe6 <_svfiprintf_r+0x36>
 8010fc4:	690b      	ldr	r3, [r1, #16]
 8010fc6:	b973      	cbnz	r3, 8010fe6 <_svfiprintf_r+0x36>
 8010fc8:	2140      	movs	r1, #64	@ 0x40
 8010fca:	f7fe fc27 	bl	800f81c <_malloc_r>
 8010fce:	6028      	str	r0, [r5, #0]
 8010fd0:	6128      	str	r0, [r5, #16]
 8010fd2:	b930      	cbnz	r0, 8010fe2 <_svfiprintf_r+0x32>
 8010fd4:	230c      	movs	r3, #12
 8010fd6:	603b      	str	r3, [r7, #0]
 8010fd8:	f04f 30ff 	mov.w	r0, #4294967295
 8010fdc:	b01d      	add	sp, #116	@ 0x74
 8010fde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010fe2:	2340      	movs	r3, #64	@ 0x40
 8010fe4:	616b      	str	r3, [r5, #20]
 8010fe6:	2300      	movs	r3, #0
 8010fe8:	9309      	str	r3, [sp, #36]	@ 0x24
 8010fea:	2320      	movs	r3, #32
 8010fec:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8010ff0:	f8cd 800c 	str.w	r8, [sp, #12]
 8010ff4:	2330      	movs	r3, #48	@ 0x30
 8010ff6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8011194 <_svfiprintf_r+0x1e4>
 8010ffa:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8010ffe:	f04f 0901 	mov.w	r9, #1
 8011002:	4623      	mov	r3, r4
 8011004:	469a      	mov	sl, r3
 8011006:	f813 2b01 	ldrb.w	r2, [r3], #1
 801100a:	b10a      	cbz	r2, 8011010 <_svfiprintf_r+0x60>
 801100c:	2a25      	cmp	r2, #37	@ 0x25
 801100e:	d1f9      	bne.n	8011004 <_svfiprintf_r+0x54>
 8011010:	ebba 0b04 	subs.w	fp, sl, r4
 8011014:	d00b      	beq.n	801102e <_svfiprintf_r+0x7e>
 8011016:	465b      	mov	r3, fp
 8011018:	4622      	mov	r2, r4
 801101a:	4629      	mov	r1, r5
 801101c:	4638      	mov	r0, r7
 801101e:	f7ff ff6b 	bl	8010ef8 <__ssputs_r>
 8011022:	3001      	adds	r0, #1
 8011024:	f000 80a7 	beq.w	8011176 <_svfiprintf_r+0x1c6>
 8011028:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801102a:	445a      	add	r2, fp
 801102c:	9209      	str	r2, [sp, #36]	@ 0x24
 801102e:	f89a 3000 	ldrb.w	r3, [sl]
 8011032:	2b00      	cmp	r3, #0
 8011034:	f000 809f 	beq.w	8011176 <_svfiprintf_r+0x1c6>
 8011038:	2300      	movs	r3, #0
 801103a:	f04f 32ff 	mov.w	r2, #4294967295
 801103e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011042:	f10a 0a01 	add.w	sl, sl, #1
 8011046:	9304      	str	r3, [sp, #16]
 8011048:	9307      	str	r3, [sp, #28]
 801104a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801104e:	931a      	str	r3, [sp, #104]	@ 0x68
 8011050:	4654      	mov	r4, sl
 8011052:	2205      	movs	r2, #5
 8011054:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011058:	484e      	ldr	r0, [pc, #312]	@ (8011194 <_svfiprintf_r+0x1e4>)
 801105a:	f7ef f941 	bl	80002e0 <memchr>
 801105e:	9a04      	ldr	r2, [sp, #16]
 8011060:	b9d8      	cbnz	r0, 801109a <_svfiprintf_r+0xea>
 8011062:	06d0      	lsls	r0, r2, #27
 8011064:	bf44      	itt	mi
 8011066:	2320      	movmi	r3, #32
 8011068:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801106c:	0711      	lsls	r1, r2, #28
 801106e:	bf44      	itt	mi
 8011070:	232b      	movmi	r3, #43	@ 0x2b
 8011072:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011076:	f89a 3000 	ldrb.w	r3, [sl]
 801107a:	2b2a      	cmp	r3, #42	@ 0x2a
 801107c:	d015      	beq.n	80110aa <_svfiprintf_r+0xfa>
 801107e:	9a07      	ldr	r2, [sp, #28]
 8011080:	4654      	mov	r4, sl
 8011082:	2000      	movs	r0, #0
 8011084:	f04f 0c0a 	mov.w	ip, #10
 8011088:	4621      	mov	r1, r4
 801108a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801108e:	3b30      	subs	r3, #48	@ 0x30
 8011090:	2b09      	cmp	r3, #9
 8011092:	d94b      	bls.n	801112c <_svfiprintf_r+0x17c>
 8011094:	b1b0      	cbz	r0, 80110c4 <_svfiprintf_r+0x114>
 8011096:	9207      	str	r2, [sp, #28]
 8011098:	e014      	b.n	80110c4 <_svfiprintf_r+0x114>
 801109a:	eba0 0308 	sub.w	r3, r0, r8
 801109e:	fa09 f303 	lsl.w	r3, r9, r3
 80110a2:	4313      	orrs	r3, r2
 80110a4:	9304      	str	r3, [sp, #16]
 80110a6:	46a2      	mov	sl, r4
 80110a8:	e7d2      	b.n	8011050 <_svfiprintf_r+0xa0>
 80110aa:	9b03      	ldr	r3, [sp, #12]
 80110ac:	1d19      	adds	r1, r3, #4
 80110ae:	681b      	ldr	r3, [r3, #0]
 80110b0:	9103      	str	r1, [sp, #12]
 80110b2:	2b00      	cmp	r3, #0
 80110b4:	bfbb      	ittet	lt
 80110b6:	425b      	neglt	r3, r3
 80110b8:	f042 0202 	orrlt.w	r2, r2, #2
 80110bc:	9307      	strge	r3, [sp, #28]
 80110be:	9307      	strlt	r3, [sp, #28]
 80110c0:	bfb8      	it	lt
 80110c2:	9204      	strlt	r2, [sp, #16]
 80110c4:	7823      	ldrb	r3, [r4, #0]
 80110c6:	2b2e      	cmp	r3, #46	@ 0x2e
 80110c8:	d10a      	bne.n	80110e0 <_svfiprintf_r+0x130>
 80110ca:	7863      	ldrb	r3, [r4, #1]
 80110cc:	2b2a      	cmp	r3, #42	@ 0x2a
 80110ce:	d132      	bne.n	8011136 <_svfiprintf_r+0x186>
 80110d0:	9b03      	ldr	r3, [sp, #12]
 80110d2:	1d1a      	adds	r2, r3, #4
 80110d4:	681b      	ldr	r3, [r3, #0]
 80110d6:	9203      	str	r2, [sp, #12]
 80110d8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80110dc:	3402      	adds	r4, #2
 80110de:	9305      	str	r3, [sp, #20]
 80110e0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80111a4 <_svfiprintf_r+0x1f4>
 80110e4:	7821      	ldrb	r1, [r4, #0]
 80110e6:	2203      	movs	r2, #3
 80110e8:	4650      	mov	r0, sl
 80110ea:	f7ef f8f9 	bl	80002e0 <memchr>
 80110ee:	b138      	cbz	r0, 8011100 <_svfiprintf_r+0x150>
 80110f0:	9b04      	ldr	r3, [sp, #16]
 80110f2:	eba0 000a 	sub.w	r0, r0, sl
 80110f6:	2240      	movs	r2, #64	@ 0x40
 80110f8:	4082      	lsls	r2, r0
 80110fa:	4313      	orrs	r3, r2
 80110fc:	3401      	adds	r4, #1
 80110fe:	9304      	str	r3, [sp, #16]
 8011100:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011104:	4824      	ldr	r0, [pc, #144]	@ (8011198 <_svfiprintf_r+0x1e8>)
 8011106:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801110a:	2206      	movs	r2, #6
 801110c:	f7ef f8e8 	bl	80002e0 <memchr>
 8011110:	2800      	cmp	r0, #0
 8011112:	d036      	beq.n	8011182 <_svfiprintf_r+0x1d2>
 8011114:	4b21      	ldr	r3, [pc, #132]	@ (801119c <_svfiprintf_r+0x1ec>)
 8011116:	bb1b      	cbnz	r3, 8011160 <_svfiprintf_r+0x1b0>
 8011118:	9b03      	ldr	r3, [sp, #12]
 801111a:	3307      	adds	r3, #7
 801111c:	f023 0307 	bic.w	r3, r3, #7
 8011120:	3308      	adds	r3, #8
 8011122:	9303      	str	r3, [sp, #12]
 8011124:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011126:	4433      	add	r3, r6
 8011128:	9309      	str	r3, [sp, #36]	@ 0x24
 801112a:	e76a      	b.n	8011002 <_svfiprintf_r+0x52>
 801112c:	fb0c 3202 	mla	r2, ip, r2, r3
 8011130:	460c      	mov	r4, r1
 8011132:	2001      	movs	r0, #1
 8011134:	e7a8      	b.n	8011088 <_svfiprintf_r+0xd8>
 8011136:	2300      	movs	r3, #0
 8011138:	3401      	adds	r4, #1
 801113a:	9305      	str	r3, [sp, #20]
 801113c:	4619      	mov	r1, r3
 801113e:	f04f 0c0a 	mov.w	ip, #10
 8011142:	4620      	mov	r0, r4
 8011144:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011148:	3a30      	subs	r2, #48	@ 0x30
 801114a:	2a09      	cmp	r2, #9
 801114c:	d903      	bls.n	8011156 <_svfiprintf_r+0x1a6>
 801114e:	2b00      	cmp	r3, #0
 8011150:	d0c6      	beq.n	80110e0 <_svfiprintf_r+0x130>
 8011152:	9105      	str	r1, [sp, #20]
 8011154:	e7c4      	b.n	80110e0 <_svfiprintf_r+0x130>
 8011156:	fb0c 2101 	mla	r1, ip, r1, r2
 801115a:	4604      	mov	r4, r0
 801115c:	2301      	movs	r3, #1
 801115e:	e7f0      	b.n	8011142 <_svfiprintf_r+0x192>
 8011160:	ab03      	add	r3, sp, #12
 8011162:	9300      	str	r3, [sp, #0]
 8011164:	462a      	mov	r2, r5
 8011166:	4b0e      	ldr	r3, [pc, #56]	@ (80111a0 <_svfiprintf_r+0x1f0>)
 8011168:	a904      	add	r1, sp, #16
 801116a:	4638      	mov	r0, r7
 801116c:	f7fc fda4 	bl	800dcb8 <_printf_float>
 8011170:	1c42      	adds	r2, r0, #1
 8011172:	4606      	mov	r6, r0
 8011174:	d1d6      	bne.n	8011124 <_svfiprintf_r+0x174>
 8011176:	89ab      	ldrh	r3, [r5, #12]
 8011178:	065b      	lsls	r3, r3, #25
 801117a:	f53f af2d 	bmi.w	8010fd8 <_svfiprintf_r+0x28>
 801117e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011180:	e72c      	b.n	8010fdc <_svfiprintf_r+0x2c>
 8011182:	ab03      	add	r3, sp, #12
 8011184:	9300      	str	r3, [sp, #0]
 8011186:	462a      	mov	r2, r5
 8011188:	4b05      	ldr	r3, [pc, #20]	@ (80111a0 <_svfiprintf_r+0x1f0>)
 801118a:	a904      	add	r1, sp, #16
 801118c:	4638      	mov	r0, r7
 801118e:	f7fd f81b 	bl	800e1c8 <_printf_i>
 8011192:	e7ed      	b.n	8011170 <_svfiprintf_r+0x1c0>
 8011194:	08012a69 	.word	0x08012a69
 8011198:	08012a73 	.word	0x08012a73
 801119c:	0800dcb9 	.word	0x0800dcb9
 80111a0:	08010ef9 	.word	0x08010ef9
 80111a4:	08012a6f 	.word	0x08012a6f

080111a8 <__sflush_r>:
 80111a8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80111ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80111b0:	0716      	lsls	r6, r2, #28
 80111b2:	4605      	mov	r5, r0
 80111b4:	460c      	mov	r4, r1
 80111b6:	d454      	bmi.n	8011262 <__sflush_r+0xba>
 80111b8:	684b      	ldr	r3, [r1, #4]
 80111ba:	2b00      	cmp	r3, #0
 80111bc:	dc02      	bgt.n	80111c4 <__sflush_r+0x1c>
 80111be:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80111c0:	2b00      	cmp	r3, #0
 80111c2:	dd48      	ble.n	8011256 <__sflush_r+0xae>
 80111c4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80111c6:	2e00      	cmp	r6, #0
 80111c8:	d045      	beq.n	8011256 <__sflush_r+0xae>
 80111ca:	2300      	movs	r3, #0
 80111cc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80111d0:	682f      	ldr	r7, [r5, #0]
 80111d2:	6a21      	ldr	r1, [r4, #32]
 80111d4:	602b      	str	r3, [r5, #0]
 80111d6:	d030      	beq.n	801123a <__sflush_r+0x92>
 80111d8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80111da:	89a3      	ldrh	r3, [r4, #12]
 80111dc:	0759      	lsls	r1, r3, #29
 80111de:	d505      	bpl.n	80111ec <__sflush_r+0x44>
 80111e0:	6863      	ldr	r3, [r4, #4]
 80111e2:	1ad2      	subs	r2, r2, r3
 80111e4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80111e6:	b10b      	cbz	r3, 80111ec <__sflush_r+0x44>
 80111e8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80111ea:	1ad2      	subs	r2, r2, r3
 80111ec:	2300      	movs	r3, #0
 80111ee:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80111f0:	6a21      	ldr	r1, [r4, #32]
 80111f2:	4628      	mov	r0, r5
 80111f4:	47b0      	blx	r6
 80111f6:	1c43      	adds	r3, r0, #1
 80111f8:	89a3      	ldrh	r3, [r4, #12]
 80111fa:	d106      	bne.n	801120a <__sflush_r+0x62>
 80111fc:	6829      	ldr	r1, [r5, #0]
 80111fe:	291d      	cmp	r1, #29
 8011200:	d82b      	bhi.n	801125a <__sflush_r+0xb2>
 8011202:	4a2a      	ldr	r2, [pc, #168]	@ (80112ac <__sflush_r+0x104>)
 8011204:	410a      	asrs	r2, r1
 8011206:	07d6      	lsls	r6, r2, #31
 8011208:	d427      	bmi.n	801125a <__sflush_r+0xb2>
 801120a:	2200      	movs	r2, #0
 801120c:	6062      	str	r2, [r4, #4]
 801120e:	04d9      	lsls	r1, r3, #19
 8011210:	6922      	ldr	r2, [r4, #16]
 8011212:	6022      	str	r2, [r4, #0]
 8011214:	d504      	bpl.n	8011220 <__sflush_r+0x78>
 8011216:	1c42      	adds	r2, r0, #1
 8011218:	d101      	bne.n	801121e <__sflush_r+0x76>
 801121a:	682b      	ldr	r3, [r5, #0]
 801121c:	b903      	cbnz	r3, 8011220 <__sflush_r+0x78>
 801121e:	6560      	str	r0, [r4, #84]	@ 0x54
 8011220:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011222:	602f      	str	r7, [r5, #0]
 8011224:	b1b9      	cbz	r1, 8011256 <__sflush_r+0xae>
 8011226:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801122a:	4299      	cmp	r1, r3
 801122c:	d002      	beq.n	8011234 <__sflush_r+0x8c>
 801122e:	4628      	mov	r0, r5
 8011230:	f7fe fa80 	bl	800f734 <_free_r>
 8011234:	2300      	movs	r3, #0
 8011236:	6363      	str	r3, [r4, #52]	@ 0x34
 8011238:	e00d      	b.n	8011256 <__sflush_r+0xae>
 801123a:	2301      	movs	r3, #1
 801123c:	4628      	mov	r0, r5
 801123e:	47b0      	blx	r6
 8011240:	4602      	mov	r2, r0
 8011242:	1c50      	adds	r0, r2, #1
 8011244:	d1c9      	bne.n	80111da <__sflush_r+0x32>
 8011246:	682b      	ldr	r3, [r5, #0]
 8011248:	2b00      	cmp	r3, #0
 801124a:	d0c6      	beq.n	80111da <__sflush_r+0x32>
 801124c:	2b1d      	cmp	r3, #29
 801124e:	d001      	beq.n	8011254 <__sflush_r+0xac>
 8011250:	2b16      	cmp	r3, #22
 8011252:	d11e      	bne.n	8011292 <__sflush_r+0xea>
 8011254:	602f      	str	r7, [r5, #0]
 8011256:	2000      	movs	r0, #0
 8011258:	e022      	b.n	80112a0 <__sflush_r+0xf8>
 801125a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801125e:	b21b      	sxth	r3, r3
 8011260:	e01b      	b.n	801129a <__sflush_r+0xf2>
 8011262:	690f      	ldr	r7, [r1, #16]
 8011264:	2f00      	cmp	r7, #0
 8011266:	d0f6      	beq.n	8011256 <__sflush_r+0xae>
 8011268:	0793      	lsls	r3, r2, #30
 801126a:	680e      	ldr	r6, [r1, #0]
 801126c:	bf08      	it	eq
 801126e:	694b      	ldreq	r3, [r1, #20]
 8011270:	600f      	str	r7, [r1, #0]
 8011272:	bf18      	it	ne
 8011274:	2300      	movne	r3, #0
 8011276:	eba6 0807 	sub.w	r8, r6, r7
 801127a:	608b      	str	r3, [r1, #8]
 801127c:	f1b8 0f00 	cmp.w	r8, #0
 8011280:	dde9      	ble.n	8011256 <__sflush_r+0xae>
 8011282:	6a21      	ldr	r1, [r4, #32]
 8011284:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8011286:	4643      	mov	r3, r8
 8011288:	463a      	mov	r2, r7
 801128a:	4628      	mov	r0, r5
 801128c:	47b0      	blx	r6
 801128e:	2800      	cmp	r0, #0
 8011290:	dc08      	bgt.n	80112a4 <__sflush_r+0xfc>
 8011292:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011296:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801129a:	81a3      	strh	r3, [r4, #12]
 801129c:	f04f 30ff 	mov.w	r0, #4294967295
 80112a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80112a4:	4407      	add	r7, r0
 80112a6:	eba8 0800 	sub.w	r8, r8, r0
 80112aa:	e7e7      	b.n	801127c <__sflush_r+0xd4>
 80112ac:	dfbffffe 	.word	0xdfbffffe

080112b0 <_fflush_r>:
 80112b0:	b538      	push	{r3, r4, r5, lr}
 80112b2:	690b      	ldr	r3, [r1, #16]
 80112b4:	4605      	mov	r5, r0
 80112b6:	460c      	mov	r4, r1
 80112b8:	b913      	cbnz	r3, 80112c0 <_fflush_r+0x10>
 80112ba:	2500      	movs	r5, #0
 80112bc:	4628      	mov	r0, r5
 80112be:	bd38      	pop	{r3, r4, r5, pc}
 80112c0:	b118      	cbz	r0, 80112ca <_fflush_r+0x1a>
 80112c2:	6a03      	ldr	r3, [r0, #32]
 80112c4:	b90b      	cbnz	r3, 80112ca <_fflush_r+0x1a>
 80112c6:	f7fd fb37 	bl	800e938 <__sinit>
 80112ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80112ce:	2b00      	cmp	r3, #0
 80112d0:	d0f3      	beq.n	80112ba <_fflush_r+0xa>
 80112d2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80112d4:	07d0      	lsls	r0, r2, #31
 80112d6:	d404      	bmi.n	80112e2 <_fflush_r+0x32>
 80112d8:	0599      	lsls	r1, r3, #22
 80112da:	d402      	bmi.n	80112e2 <_fflush_r+0x32>
 80112dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80112de:	f7fd fc42 	bl	800eb66 <__retarget_lock_acquire_recursive>
 80112e2:	4628      	mov	r0, r5
 80112e4:	4621      	mov	r1, r4
 80112e6:	f7ff ff5f 	bl	80111a8 <__sflush_r>
 80112ea:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80112ec:	07da      	lsls	r2, r3, #31
 80112ee:	4605      	mov	r5, r0
 80112f0:	d4e4      	bmi.n	80112bc <_fflush_r+0xc>
 80112f2:	89a3      	ldrh	r3, [r4, #12]
 80112f4:	059b      	lsls	r3, r3, #22
 80112f6:	d4e1      	bmi.n	80112bc <_fflush_r+0xc>
 80112f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80112fa:	f7fd fc35 	bl	800eb68 <__retarget_lock_release_recursive>
 80112fe:	e7dd      	b.n	80112bc <_fflush_r+0xc>

08011300 <memmove>:
 8011300:	4288      	cmp	r0, r1
 8011302:	b510      	push	{r4, lr}
 8011304:	eb01 0402 	add.w	r4, r1, r2
 8011308:	d902      	bls.n	8011310 <memmove+0x10>
 801130a:	4284      	cmp	r4, r0
 801130c:	4623      	mov	r3, r4
 801130e:	d807      	bhi.n	8011320 <memmove+0x20>
 8011310:	1e43      	subs	r3, r0, #1
 8011312:	42a1      	cmp	r1, r4
 8011314:	d008      	beq.n	8011328 <memmove+0x28>
 8011316:	f811 2b01 	ldrb.w	r2, [r1], #1
 801131a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801131e:	e7f8      	b.n	8011312 <memmove+0x12>
 8011320:	4402      	add	r2, r0
 8011322:	4601      	mov	r1, r0
 8011324:	428a      	cmp	r2, r1
 8011326:	d100      	bne.n	801132a <memmove+0x2a>
 8011328:	bd10      	pop	{r4, pc}
 801132a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801132e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011332:	e7f7      	b.n	8011324 <memmove+0x24>

08011334 <strncmp>:
 8011334:	b510      	push	{r4, lr}
 8011336:	b16a      	cbz	r2, 8011354 <strncmp+0x20>
 8011338:	3901      	subs	r1, #1
 801133a:	1884      	adds	r4, r0, r2
 801133c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011340:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8011344:	429a      	cmp	r2, r3
 8011346:	d103      	bne.n	8011350 <strncmp+0x1c>
 8011348:	42a0      	cmp	r0, r4
 801134a:	d001      	beq.n	8011350 <strncmp+0x1c>
 801134c:	2a00      	cmp	r2, #0
 801134e:	d1f5      	bne.n	801133c <strncmp+0x8>
 8011350:	1ad0      	subs	r0, r2, r3
 8011352:	bd10      	pop	{r4, pc}
 8011354:	4610      	mov	r0, r2
 8011356:	e7fc      	b.n	8011352 <strncmp+0x1e>

08011358 <_sbrk_r>:
 8011358:	b538      	push	{r3, r4, r5, lr}
 801135a:	4d06      	ldr	r5, [pc, #24]	@ (8011374 <_sbrk_r+0x1c>)
 801135c:	2300      	movs	r3, #0
 801135e:	4604      	mov	r4, r0
 8011360:	4608      	mov	r0, r1
 8011362:	602b      	str	r3, [r5, #0]
 8011364:	f7f0 fa52 	bl	800180c <_sbrk>
 8011368:	1c43      	adds	r3, r0, #1
 801136a:	d102      	bne.n	8011372 <_sbrk_r+0x1a>
 801136c:	682b      	ldr	r3, [r5, #0]
 801136e:	b103      	cbz	r3, 8011372 <_sbrk_r+0x1a>
 8011370:	6023      	str	r3, [r4, #0]
 8011372:	bd38      	pop	{r3, r4, r5, pc}
 8011374:	24000570 	.word	0x24000570

08011378 <memcpy>:
 8011378:	440a      	add	r2, r1
 801137a:	4291      	cmp	r1, r2
 801137c:	f100 33ff 	add.w	r3, r0, #4294967295
 8011380:	d100      	bne.n	8011384 <memcpy+0xc>
 8011382:	4770      	bx	lr
 8011384:	b510      	push	{r4, lr}
 8011386:	f811 4b01 	ldrb.w	r4, [r1], #1
 801138a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801138e:	4291      	cmp	r1, r2
 8011390:	d1f9      	bne.n	8011386 <memcpy+0xe>
 8011392:	bd10      	pop	{r4, pc}
 8011394:	0000      	movs	r0, r0
	...

08011398 <nan>:
 8011398:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80113a0 <nan+0x8>
 801139c:	4770      	bx	lr
 801139e:	bf00      	nop
 80113a0:	00000000 	.word	0x00000000
 80113a4:	7ff80000 	.word	0x7ff80000

080113a8 <__assert_func>:
 80113a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80113aa:	4614      	mov	r4, r2
 80113ac:	461a      	mov	r2, r3
 80113ae:	4b09      	ldr	r3, [pc, #36]	@ (80113d4 <__assert_func+0x2c>)
 80113b0:	681b      	ldr	r3, [r3, #0]
 80113b2:	4605      	mov	r5, r0
 80113b4:	68d8      	ldr	r0, [r3, #12]
 80113b6:	b954      	cbnz	r4, 80113ce <__assert_func+0x26>
 80113b8:	4b07      	ldr	r3, [pc, #28]	@ (80113d8 <__assert_func+0x30>)
 80113ba:	461c      	mov	r4, r3
 80113bc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80113c0:	9100      	str	r1, [sp, #0]
 80113c2:	462b      	mov	r3, r5
 80113c4:	4905      	ldr	r1, [pc, #20]	@ (80113dc <__assert_func+0x34>)
 80113c6:	f000 fba7 	bl	8011b18 <fiprintf>
 80113ca:	f000 fbb7 	bl	8011b3c <abort>
 80113ce:	4b04      	ldr	r3, [pc, #16]	@ (80113e0 <__assert_func+0x38>)
 80113d0:	e7f4      	b.n	80113bc <__assert_func+0x14>
 80113d2:	bf00      	nop
 80113d4:	2400001c 	.word	0x2400001c
 80113d8:	08012abd 	.word	0x08012abd
 80113dc:	08012a8f 	.word	0x08012a8f
 80113e0:	08012a82 	.word	0x08012a82

080113e4 <_calloc_r>:
 80113e4:	b570      	push	{r4, r5, r6, lr}
 80113e6:	fba1 5402 	umull	r5, r4, r1, r2
 80113ea:	b93c      	cbnz	r4, 80113fc <_calloc_r+0x18>
 80113ec:	4629      	mov	r1, r5
 80113ee:	f7fe fa15 	bl	800f81c <_malloc_r>
 80113f2:	4606      	mov	r6, r0
 80113f4:	b928      	cbnz	r0, 8011402 <_calloc_r+0x1e>
 80113f6:	2600      	movs	r6, #0
 80113f8:	4630      	mov	r0, r6
 80113fa:	bd70      	pop	{r4, r5, r6, pc}
 80113fc:	220c      	movs	r2, #12
 80113fe:	6002      	str	r2, [r0, #0]
 8011400:	e7f9      	b.n	80113f6 <_calloc_r+0x12>
 8011402:	462a      	mov	r2, r5
 8011404:	4621      	mov	r1, r4
 8011406:	f7fd fb30 	bl	800ea6a <memset>
 801140a:	e7f5      	b.n	80113f8 <_calloc_r+0x14>

0801140c <rshift>:
 801140c:	6903      	ldr	r3, [r0, #16]
 801140e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8011412:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011416:	ea4f 1261 	mov.w	r2, r1, asr #5
 801141a:	f100 0414 	add.w	r4, r0, #20
 801141e:	dd45      	ble.n	80114ac <rshift+0xa0>
 8011420:	f011 011f 	ands.w	r1, r1, #31
 8011424:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8011428:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801142c:	d10c      	bne.n	8011448 <rshift+0x3c>
 801142e:	f100 0710 	add.w	r7, r0, #16
 8011432:	4629      	mov	r1, r5
 8011434:	42b1      	cmp	r1, r6
 8011436:	d334      	bcc.n	80114a2 <rshift+0x96>
 8011438:	1a9b      	subs	r3, r3, r2
 801143a:	009b      	lsls	r3, r3, #2
 801143c:	1eea      	subs	r2, r5, #3
 801143e:	4296      	cmp	r6, r2
 8011440:	bf38      	it	cc
 8011442:	2300      	movcc	r3, #0
 8011444:	4423      	add	r3, r4
 8011446:	e015      	b.n	8011474 <rshift+0x68>
 8011448:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801144c:	f1c1 0820 	rsb	r8, r1, #32
 8011450:	40cf      	lsrs	r7, r1
 8011452:	f105 0e04 	add.w	lr, r5, #4
 8011456:	46a1      	mov	r9, r4
 8011458:	4576      	cmp	r6, lr
 801145a:	46f4      	mov	ip, lr
 801145c:	d815      	bhi.n	801148a <rshift+0x7e>
 801145e:	1a9a      	subs	r2, r3, r2
 8011460:	0092      	lsls	r2, r2, #2
 8011462:	3a04      	subs	r2, #4
 8011464:	3501      	adds	r5, #1
 8011466:	42ae      	cmp	r6, r5
 8011468:	bf38      	it	cc
 801146a:	2200      	movcc	r2, #0
 801146c:	18a3      	adds	r3, r4, r2
 801146e:	50a7      	str	r7, [r4, r2]
 8011470:	b107      	cbz	r7, 8011474 <rshift+0x68>
 8011472:	3304      	adds	r3, #4
 8011474:	1b1a      	subs	r2, r3, r4
 8011476:	42a3      	cmp	r3, r4
 8011478:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801147c:	bf08      	it	eq
 801147e:	2300      	moveq	r3, #0
 8011480:	6102      	str	r2, [r0, #16]
 8011482:	bf08      	it	eq
 8011484:	6143      	streq	r3, [r0, #20]
 8011486:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801148a:	f8dc c000 	ldr.w	ip, [ip]
 801148e:	fa0c fc08 	lsl.w	ip, ip, r8
 8011492:	ea4c 0707 	orr.w	r7, ip, r7
 8011496:	f849 7b04 	str.w	r7, [r9], #4
 801149a:	f85e 7b04 	ldr.w	r7, [lr], #4
 801149e:	40cf      	lsrs	r7, r1
 80114a0:	e7da      	b.n	8011458 <rshift+0x4c>
 80114a2:	f851 cb04 	ldr.w	ip, [r1], #4
 80114a6:	f847 cf04 	str.w	ip, [r7, #4]!
 80114aa:	e7c3      	b.n	8011434 <rshift+0x28>
 80114ac:	4623      	mov	r3, r4
 80114ae:	e7e1      	b.n	8011474 <rshift+0x68>

080114b0 <__hexdig_fun>:
 80114b0:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 80114b4:	2b09      	cmp	r3, #9
 80114b6:	d802      	bhi.n	80114be <__hexdig_fun+0xe>
 80114b8:	3820      	subs	r0, #32
 80114ba:	b2c0      	uxtb	r0, r0
 80114bc:	4770      	bx	lr
 80114be:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 80114c2:	2b05      	cmp	r3, #5
 80114c4:	d801      	bhi.n	80114ca <__hexdig_fun+0x1a>
 80114c6:	3847      	subs	r0, #71	@ 0x47
 80114c8:	e7f7      	b.n	80114ba <__hexdig_fun+0xa>
 80114ca:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 80114ce:	2b05      	cmp	r3, #5
 80114d0:	d801      	bhi.n	80114d6 <__hexdig_fun+0x26>
 80114d2:	3827      	subs	r0, #39	@ 0x27
 80114d4:	e7f1      	b.n	80114ba <__hexdig_fun+0xa>
 80114d6:	2000      	movs	r0, #0
 80114d8:	4770      	bx	lr
	...

080114dc <__gethex>:
 80114dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80114e0:	b085      	sub	sp, #20
 80114e2:	468a      	mov	sl, r1
 80114e4:	9302      	str	r3, [sp, #8]
 80114e6:	680b      	ldr	r3, [r1, #0]
 80114e8:	9001      	str	r0, [sp, #4]
 80114ea:	4690      	mov	r8, r2
 80114ec:	1c9c      	adds	r4, r3, #2
 80114ee:	46a1      	mov	r9, r4
 80114f0:	f814 0b01 	ldrb.w	r0, [r4], #1
 80114f4:	2830      	cmp	r0, #48	@ 0x30
 80114f6:	d0fa      	beq.n	80114ee <__gethex+0x12>
 80114f8:	eba9 0303 	sub.w	r3, r9, r3
 80114fc:	f1a3 0b02 	sub.w	fp, r3, #2
 8011500:	f7ff ffd6 	bl	80114b0 <__hexdig_fun>
 8011504:	4605      	mov	r5, r0
 8011506:	2800      	cmp	r0, #0
 8011508:	d168      	bne.n	80115dc <__gethex+0x100>
 801150a:	49a0      	ldr	r1, [pc, #640]	@ (801178c <__gethex+0x2b0>)
 801150c:	2201      	movs	r2, #1
 801150e:	4648      	mov	r0, r9
 8011510:	f7ff ff10 	bl	8011334 <strncmp>
 8011514:	4607      	mov	r7, r0
 8011516:	2800      	cmp	r0, #0
 8011518:	d167      	bne.n	80115ea <__gethex+0x10e>
 801151a:	f899 0001 	ldrb.w	r0, [r9, #1]
 801151e:	4626      	mov	r6, r4
 8011520:	f7ff ffc6 	bl	80114b0 <__hexdig_fun>
 8011524:	2800      	cmp	r0, #0
 8011526:	d062      	beq.n	80115ee <__gethex+0x112>
 8011528:	4623      	mov	r3, r4
 801152a:	7818      	ldrb	r0, [r3, #0]
 801152c:	2830      	cmp	r0, #48	@ 0x30
 801152e:	4699      	mov	r9, r3
 8011530:	f103 0301 	add.w	r3, r3, #1
 8011534:	d0f9      	beq.n	801152a <__gethex+0x4e>
 8011536:	f7ff ffbb 	bl	80114b0 <__hexdig_fun>
 801153a:	fab0 f580 	clz	r5, r0
 801153e:	096d      	lsrs	r5, r5, #5
 8011540:	f04f 0b01 	mov.w	fp, #1
 8011544:	464a      	mov	r2, r9
 8011546:	4616      	mov	r6, r2
 8011548:	3201      	adds	r2, #1
 801154a:	7830      	ldrb	r0, [r6, #0]
 801154c:	f7ff ffb0 	bl	80114b0 <__hexdig_fun>
 8011550:	2800      	cmp	r0, #0
 8011552:	d1f8      	bne.n	8011546 <__gethex+0x6a>
 8011554:	498d      	ldr	r1, [pc, #564]	@ (801178c <__gethex+0x2b0>)
 8011556:	2201      	movs	r2, #1
 8011558:	4630      	mov	r0, r6
 801155a:	f7ff feeb 	bl	8011334 <strncmp>
 801155e:	2800      	cmp	r0, #0
 8011560:	d13f      	bne.n	80115e2 <__gethex+0x106>
 8011562:	b944      	cbnz	r4, 8011576 <__gethex+0x9a>
 8011564:	1c74      	adds	r4, r6, #1
 8011566:	4622      	mov	r2, r4
 8011568:	4616      	mov	r6, r2
 801156a:	3201      	adds	r2, #1
 801156c:	7830      	ldrb	r0, [r6, #0]
 801156e:	f7ff ff9f 	bl	80114b0 <__hexdig_fun>
 8011572:	2800      	cmp	r0, #0
 8011574:	d1f8      	bne.n	8011568 <__gethex+0x8c>
 8011576:	1ba4      	subs	r4, r4, r6
 8011578:	00a7      	lsls	r7, r4, #2
 801157a:	7833      	ldrb	r3, [r6, #0]
 801157c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8011580:	2b50      	cmp	r3, #80	@ 0x50
 8011582:	d13e      	bne.n	8011602 <__gethex+0x126>
 8011584:	7873      	ldrb	r3, [r6, #1]
 8011586:	2b2b      	cmp	r3, #43	@ 0x2b
 8011588:	d033      	beq.n	80115f2 <__gethex+0x116>
 801158a:	2b2d      	cmp	r3, #45	@ 0x2d
 801158c:	d034      	beq.n	80115f8 <__gethex+0x11c>
 801158e:	1c71      	adds	r1, r6, #1
 8011590:	2400      	movs	r4, #0
 8011592:	7808      	ldrb	r0, [r1, #0]
 8011594:	f7ff ff8c 	bl	80114b0 <__hexdig_fun>
 8011598:	1e43      	subs	r3, r0, #1
 801159a:	b2db      	uxtb	r3, r3
 801159c:	2b18      	cmp	r3, #24
 801159e:	d830      	bhi.n	8011602 <__gethex+0x126>
 80115a0:	f1a0 0210 	sub.w	r2, r0, #16
 80115a4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80115a8:	f7ff ff82 	bl	80114b0 <__hexdig_fun>
 80115ac:	f100 3cff 	add.w	ip, r0, #4294967295
 80115b0:	fa5f fc8c 	uxtb.w	ip, ip
 80115b4:	f1bc 0f18 	cmp.w	ip, #24
 80115b8:	f04f 030a 	mov.w	r3, #10
 80115bc:	d91e      	bls.n	80115fc <__gethex+0x120>
 80115be:	b104      	cbz	r4, 80115c2 <__gethex+0xe6>
 80115c0:	4252      	negs	r2, r2
 80115c2:	4417      	add	r7, r2
 80115c4:	f8ca 1000 	str.w	r1, [sl]
 80115c8:	b1ed      	cbz	r5, 8011606 <__gethex+0x12a>
 80115ca:	f1bb 0f00 	cmp.w	fp, #0
 80115ce:	bf0c      	ite	eq
 80115d0:	2506      	moveq	r5, #6
 80115d2:	2500      	movne	r5, #0
 80115d4:	4628      	mov	r0, r5
 80115d6:	b005      	add	sp, #20
 80115d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80115dc:	2500      	movs	r5, #0
 80115de:	462c      	mov	r4, r5
 80115e0:	e7b0      	b.n	8011544 <__gethex+0x68>
 80115e2:	2c00      	cmp	r4, #0
 80115e4:	d1c7      	bne.n	8011576 <__gethex+0x9a>
 80115e6:	4627      	mov	r7, r4
 80115e8:	e7c7      	b.n	801157a <__gethex+0x9e>
 80115ea:	464e      	mov	r6, r9
 80115ec:	462f      	mov	r7, r5
 80115ee:	2501      	movs	r5, #1
 80115f0:	e7c3      	b.n	801157a <__gethex+0x9e>
 80115f2:	2400      	movs	r4, #0
 80115f4:	1cb1      	adds	r1, r6, #2
 80115f6:	e7cc      	b.n	8011592 <__gethex+0xb6>
 80115f8:	2401      	movs	r4, #1
 80115fa:	e7fb      	b.n	80115f4 <__gethex+0x118>
 80115fc:	fb03 0002 	mla	r0, r3, r2, r0
 8011600:	e7ce      	b.n	80115a0 <__gethex+0xc4>
 8011602:	4631      	mov	r1, r6
 8011604:	e7de      	b.n	80115c4 <__gethex+0xe8>
 8011606:	eba6 0309 	sub.w	r3, r6, r9
 801160a:	3b01      	subs	r3, #1
 801160c:	4629      	mov	r1, r5
 801160e:	2b07      	cmp	r3, #7
 8011610:	dc0a      	bgt.n	8011628 <__gethex+0x14c>
 8011612:	9801      	ldr	r0, [sp, #4]
 8011614:	f7fe f98e 	bl	800f934 <_Balloc>
 8011618:	4604      	mov	r4, r0
 801161a:	b940      	cbnz	r0, 801162e <__gethex+0x152>
 801161c:	4b5c      	ldr	r3, [pc, #368]	@ (8011790 <__gethex+0x2b4>)
 801161e:	4602      	mov	r2, r0
 8011620:	21e4      	movs	r1, #228	@ 0xe4
 8011622:	485c      	ldr	r0, [pc, #368]	@ (8011794 <__gethex+0x2b8>)
 8011624:	f7ff fec0 	bl	80113a8 <__assert_func>
 8011628:	3101      	adds	r1, #1
 801162a:	105b      	asrs	r3, r3, #1
 801162c:	e7ef      	b.n	801160e <__gethex+0x132>
 801162e:	f100 0a14 	add.w	sl, r0, #20
 8011632:	2300      	movs	r3, #0
 8011634:	4655      	mov	r5, sl
 8011636:	469b      	mov	fp, r3
 8011638:	45b1      	cmp	r9, r6
 801163a:	d337      	bcc.n	80116ac <__gethex+0x1d0>
 801163c:	f845 bb04 	str.w	fp, [r5], #4
 8011640:	eba5 050a 	sub.w	r5, r5, sl
 8011644:	10ad      	asrs	r5, r5, #2
 8011646:	6125      	str	r5, [r4, #16]
 8011648:	4658      	mov	r0, fp
 801164a:	f7fe fa65 	bl	800fb18 <__hi0bits>
 801164e:	016d      	lsls	r5, r5, #5
 8011650:	f8d8 6000 	ldr.w	r6, [r8]
 8011654:	1a2d      	subs	r5, r5, r0
 8011656:	42b5      	cmp	r5, r6
 8011658:	dd54      	ble.n	8011704 <__gethex+0x228>
 801165a:	1bad      	subs	r5, r5, r6
 801165c:	4629      	mov	r1, r5
 801165e:	4620      	mov	r0, r4
 8011660:	f7fe fdf6 	bl	8010250 <__any_on>
 8011664:	4681      	mov	r9, r0
 8011666:	b178      	cbz	r0, 8011688 <__gethex+0x1ac>
 8011668:	1e6b      	subs	r3, r5, #1
 801166a:	1159      	asrs	r1, r3, #5
 801166c:	f003 021f 	and.w	r2, r3, #31
 8011670:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8011674:	f04f 0901 	mov.w	r9, #1
 8011678:	fa09 f202 	lsl.w	r2, r9, r2
 801167c:	420a      	tst	r2, r1
 801167e:	d003      	beq.n	8011688 <__gethex+0x1ac>
 8011680:	454b      	cmp	r3, r9
 8011682:	dc36      	bgt.n	80116f2 <__gethex+0x216>
 8011684:	f04f 0902 	mov.w	r9, #2
 8011688:	4629      	mov	r1, r5
 801168a:	4620      	mov	r0, r4
 801168c:	f7ff febe 	bl	801140c <rshift>
 8011690:	442f      	add	r7, r5
 8011692:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8011696:	42bb      	cmp	r3, r7
 8011698:	da42      	bge.n	8011720 <__gethex+0x244>
 801169a:	9801      	ldr	r0, [sp, #4]
 801169c:	4621      	mov	r1, r4
 801169e:	f7fe f989 	bl	800f9b4 <_Bfree>
 80116a2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80116a4:	2300      	movs	r3, #0
 80116a6:	6013      	str	r3, [r2, #0]
 80116a8:	25a3      	movs	r5, #163	@ 0xa3
 80116aa:	e793      	b.n	80115d4 <__gethex+0xf8>
 80116ac:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 80116b0:	2a2e      	cmp	r2, #46	@ 0x2e
 80116b2:	d012      	beq.n	80116da <__gethex+0x1fe>
 80116b4:	2b20      	cmp	r3, #32
 80116b6:	d104      	bne.n	80116c2 <__gethex+0x1e6>
 80116b8:	f845 bb04 	str.w	fp, [r5], #4
 80116bc:	f04f 0b00 	mov.w	fp, #0
 80116c0:	465b      	mov	r3, fp
 80116c2:	7830      	ldrb	r0, [r6, #0]
 80116c4:	9303      	str	r3, [sp, #12]
 80116c6:	f7ff fef3 	bl	80114b0 <__hexdig_fun>
 80116ca:	9b03      	ldr	r3, [sp, #12]
 80116cc:	f000 000f 	and.w	r0, r0, #15
 80116d0:	4098      	lsls	r0, r3
 80116d2:	ea4b 0b00 	orr.w	fp, fp, r0
 80116d6:	3304      	adds	r3, #4
 80116d8:	e7ae      	b.n	8011638 <__gethex+0x15c>
 80116da:	45b1      	cmp	r9, r6
 80116dc:	d8ea      	bhi.n	80116b4 <__gethex+0x1d8>
 80116de:	492b      	ldr	r1, [pc, #172]	@ (801178c <__gethex+0x2b0>)
 80116e0:	9303      	str	r3, [sp, #12]
 80116e2:	2201      	movs	r2, #1
 80116e4:	4630      	mov	r0, r6
 80116e6:	f7ff fe25 	bl	8011334 <strncmp>
 80116ea:	9b03      	ldr	r3, [sp, #12]
 80116ec:	2800      	cmp	r0, #0
 80116ee:	d1e1      	bne.n	80116b4 <__gethex+0x1d8>
 80116f0:	e7a2      	b.n	8011638 <__gethex+0x15c>
 80116f2:	1ea9      	subs	r1, r5, #2
 80116f4:	4620      	mov	r0, r4
 80116f6:	f7fe fdab 	bl	8010250 <__any_on>
 80116fa:	2800      	cmp	r0, #0
 80116fc:	d0c2      	beq.n	8011684 <__gethex+0x1a8>
 80116fe:	f04f 0903 	mov.w	r9, #3
 8011702:	e7c1      	b.n	8011688 <__gethex+0x1ac>
 8011704:	da09      	bge.n	801171a <__gethex+0x23e>
 8011706:	1b75      	subs	r5, r6, r5
 8011708:	4621      	mov	r1, r4
 801170a:	9801      	ldr	r0, [sp, #4]
 801170c:	462a      	mov	r2, r5
 801170e:	f7fe fb69 	bl	800fde4 <__lshift>
 8011712:	1b7f      	subs	r7, r7, r5
 8011714:	4604      	mov	r4, r0
 8011716:	f100 0a14 	add.w	sl, r0, #20
 801171a:	f04f 0900 	mov.w	r9, #0
 801171e:	e7b8      	b.n	8011692 <__gethex+0x1b6>
 8011720:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8011724:	42bd      	cmp	r5, r7
 8011726:	dd6f      	ble.n	8011808 <__gethex+0x32c>
 8011728:	1bed      	subs	r5, r5, r7
 801172a:	42ae      	cmp	r6, r5
 801172c:	dc34      	bgt.n	8011798 <__gethex+0x2bc>
 801172e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8011732:	2b02      	cmp	r3, #2
 8011734:	d022      	beq.n	801177c <__gethex+0x2a0>
 8011736:	2b03      	cmp	r3, #3
 8011738:	d024      	beq.n	8011784 <__gethex+0x2a8>
 801173a:	2b01      	cmp	r3, #1
 801173c:	d115      	bne.n	801176a <__gethex+0x28e>
 801173e:	42ae      	cmp	r6, r5
 8011740:	d113      	bne.n	801176a <__gethex+0x28e>
 8011742:	2e01      	cmp	r6, #1
 8011744:	d10b      	bne.n	801175e <__gethex+0x282>
 8011746:	9a02      	ldr	r2, [sp, #8]
 8011748:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801174c:	6013      	str	r3, [r2, #0]
 801174e:	2301      	movs	r3, #1
 8011750:	6123      	str	r3, [r4, #16]
 8011752:	f8ca 3000 	str.w	r3, [sl]
 8011756:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011758:	2562      	movs	r5, #98	@ 0x62
 801175a:	601c      	str	r4, [r3, #0]
 801175c:	e73a      	b.n	80115d4 <__gethex+0xf8>
 801175e:	1e71      	subs	r1, r6, #1
 8011760:	4620      	mov	r0, r4
 8011762:	f7fe fd75 	bl	8010250 <__any_on>
 8011766:	2800      	cmp	r0, #0
 8011768:	d1ed      	bne.n	8011746 <__gethex+0x26a>
 801176a:	9801      	ldr	r0, [sp, #4]
 801176c:	4621      	mov	r1, r4
 801176e:	f7fe f921 	bl	800f9b4 <_Bfree>
 8011772:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011774:	2300      	movs	r3, #0
 8011776:	6013      	str	r3, [r2, #0]
 8011778:	2550      	movs	r5, #80	@ 0x50
 801177a:	e72b      	b.n	80115d4 <__gethex+0xf8>
 801177c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801177e:	2b00      	cmp	r3, #0
 8011780:	d1f3      	bne.n	801176a <__gethex+0x28e>
 8011782:	e7e0      	b.n	8011746 <__gethex+0x26a>
 8011784:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011786:	2b00      	cmp	r3, #0
 8011788:	d1dd      	bne.n	8011746 <__gethex+0x26a>
 801178a:	e7ee      	b.n	801176a <__gethex+0x28e>
 801178c:	08012910 	.word	0x08012910
 8011790:	080127a5 	.word	0x080127a5
 8011794:	08012abe 	.word	0x08012abe
 8011798:	1e6f      	subs	r7, r5, #1
 801179a:	f1b9 0f00 	cmp.w	r9, #0
 801179e:	d130      	bne.n	8011802 <__gethex+0x326>
 80117a0:	b127      	cbz	r7, 80117ac <__gethex+0x2d0>
 80117a2:	4639      	mov	r1, r7
 80117a4:	4620      	mov	r0, r4
 80117a6:	f7fe fd53 	bl	8010250 <__any_on>
 80117aa:	4681      	mov	r9, r0
 80117ac:	117a      	asrs	r2, r7, #5
 80117ae:	2301      	movs	r3, #1
 80117b0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80117b4:	f007 071f 	and.w	r7, r7, #31
 80117b8:	40bb      	lsls	r3, r7
 80117ba:	4213      	tst	r3, r2
 80117bc:	4629      	mov	r1, r5
 80117be:	4620      	mov	r0, r4
 80117c0:	bf18      	it	ne
 80117c2:	f049 0902 	orrne.w	r9, r9, #2
 80117c6:	f7ff fe21 	bl	801140c <rshift>
 80117ca:	f8d8 7004 	ldr.w	r7, [r8, #4]
 80117ce:	1b76      	subs	r6, r6, r5
 80117d0:	2502      	movs	r5, #2
 80117d2:	f1b9 0f00 	cmp.w	r9, #0
 80117d6:	d047      	beq.n	8011868 <__gethex+0x38c>
 80117d8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80117dc:	2b02      	cmp	r3, #2
 80117de:	d015      	beq.n	801180c <__gethex+0x330>
 80117e0:	2b03      	cmp	r3, #3
 80117e2:	d017      	beq.n	8011814 <__gethex+0x338>
 80117e4:	2b01      	cmp	r3, #1
 80117e6:	d109      	bne.n	80117fc <__gethex+0x320>
 80117e8:	f019 0f02 	tst.w	r9, #2
 80117ec:	d006      	beq.n	80117fc <__gethex+0x320>
 80117ee:	f8da 3000 	ldr.w	r3, [sl]
 80117f2:	ea49 0903 	orr.w	r9, r9, r3
 80117f6:	f019 0f01 	tst.w	r9, #1
 80117fa:	d10e      	bne.n	801181a <__gethex+0x33e>
 80117fc:	f045 0510 	orr.w	r5, r5, #16
 8011800:	e032      	b.n	8011868 <__gethex+0x38c>
 8011802:	f04f 0901 	mov.w	r9, #1
 8011806:	e7d1      	b.n	80117ac <__gethex+0x2d0>
 8011808:	2501      	movs	r5, #1
 801180a:	e7e2      	b.n	80117d2 <__gethex+0x2f6>
 801180c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801180e:	f1c3 0301 	rsb	r3, r3, #1
 8011812:	930f      	str	r3, [sp, #60]	@ 0x3c
 8011814:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011816:	2b00      	cmp	r3, #0
 8011818:	d0f0      	beq.n	80117fc <__gethex+0x320>
 801181a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801181e:	f104 0314 	add.w	r3, r4, #20
 8011822:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8011826:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801182a:	f04f 0c00 	mov.w	ip, #0
 801182e:	4618      	mov	r0, r3
 8011830:	f853 2b04 	ldr.w	r2, [r3], #4
 8011834:	f1b2 3fff 	cmp.w	r2, #4294967295
 8011838:	d01b      	beq.n	8011872 <__gethex+0x396>
 801183a:	3201      	adds	r2, #1
 801183c:	6002      	str	r2, [r0, #0]
 801183e:	2d02      	cmp	r5, #2
 8011840:	f104 0314 	add.w	r3, r4, #20
 8011844:	d13c      	bne.n	80118c0 <__gethex+0x3e4>
 8011846:	f8d8 2000 	ldr.w	r2, [r8]
 801184a:	3a01      	subs	r2, #1
 801184c:	42b2      	cmp	r2, r6
 801184e:	d109      	bne.n	8011864 <__gethex+0x388>
 8011850:	1171      	asrs	r1, r6, #5
 8011852:	2201      	movs	r2, #1
 8011854:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8011858:	f006 061f 	and.w	r6, r6, #31
 801185c:	fa02 f606 	lsl.w	r6, r2, r6
 8011860:	421e      	tst	r6, r3
 8011862:	d13a      	bne.n	80118da <__gethex+0x3fe>
 8011864:	f045 0520 	orr.w	r5, r5, #32
 8011868:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801186a:	601c      	str	r4, [r3, #0]
 801186c:	9b02      	ldr	r3, [sp, #8]
 801186e:	601f      	str	r7, [r3, #0]
 8011870:	e6b0      	b.n	80115d4 <__gethex+0xf8>
 8011872:	4299      	cmp	r1, r3
 8011874:	f843 cc04 	str.w	ip, [r3, #-4]
 8011878:	d8d9      	bhi.n	801182e <__gethex+0x352>
 801187a:	68a3      	ldr	r3, [r4, #8]
 801187c:	459b      	cmp	fp, r3
 801187e:	db17      	blt.n	80118b0 <__gethex+0x3d4>
 8011880:	6861      	ldr	r1, [r4, #4]
 8011882:	9801      	ldr	r0, [sp, #4]
 8011884:	3101      	adds	r1, #1
 8011886:	f7fe f855 	bl	800f934 <_Balloc>
 801188a:	4681      	mov	r9, r0
 801188c:	b918      	cbnz	r0, 8011896 <__gethex+0x3ba>
 801188e:	4b1a      	ldr	r3, [pc, #104]	@ (80118f8 <__gethex+0x41c>)
 8011890:	4602      	mov	r2, r0
 8011892:	2184      	movs	r1, #132	@ 0x84
 8011894:	e6c5      	b.n	8011622 <__gethex+0x146>
 8011896:	6922      	ldr	r2, [r4, #16]
 8011898:	3202      	adds	r2, #2
 801189a:	f104 010c 	add.w	r1, r4, #12
 801189e:	0092      	lsls	r2, r2, #2
 80118a0:	300c      	adds	r0, #12
 80118a2:	f7ff fd69 	bl	8011378 <memcpy>
 80118a6:	4621      	mov	r1, r4
 80118a8:	9801      	ldr	r0, [sp, #4]
 80118aa:	f7fe f883 	bl	800f9b4 <_Bfree>
 80118ae:	464c      	mov	r4, r9
 80118b0:	6923      	ldr	r3, [r4, #16]
 80118b2:	1c5a      	adds	r2, r3, #1
 80118b4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80118b8:	6122      	str	r2, [r4, #16]
 80118ba:	2201      	movs	r2, #1
 80118bc:	615a      	str	r2, [r3, #20]
 80118be:	e7be      	b.n	801183e <__gethex+0x362>
 80118c0:	6922      	ldr	r2, [r4, #16]
 80118c2:	455a      	cmp	r2, fp
 80118c4:	dd0b      	ble.n	80118de <__gethex+0x402>
 80118c6:	2101      	movs	r1, #1
 80118c8:	4620      	mov	r0, r4
 80118ca:	f7ff fd9f 	bl	801140c <rshift>
 80118ce:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80118d2:	3701      	adds	r7, #1
 80118d4:	42bb      	cmp	r3, r7
 80118d6:	f6ff aee0 	blt.w	801169a <__gethex+0x1be>
 80118da:	2501      	movs	r5, #1
 80118dc:	e7c2      	b.n	8011864 <__gethex+0x388>
 80118de:	f016 061f 	ands.w	r6, r6, #31
 80118e2:	d0fa      	beq.n	80118da <__gethex+0x3fe>
 80118e4:	4453      	add	r3, sl
 80118e6:	f1c6 0620 	rsb	r6, r6, #32
 80118ea:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80118ee:	f7fe f913 	bl	800fb18 <__hi0bits>
 80118f2:	42b0      	cmp	r0, r6
 80118f4:	dbe7      	blt.n	80118c6 <__gethex+0x3ea>
 80118f6:	e7f0      	b.n	80118da <__gethex+0x3fe>
 80118f8:	080127a5 	.word	0x080127a5

080118fc <L_shift>:
 80118fc:	f1c2 0208 	rsb	r2, r2, #8
 8011900:	0092      	lsls	r2, r2, #2
 8011902:	b570      	push	{r4, r5, r6, lr}
 8011904:	f1c2 0620 	rsb	r6, r2, #32
 8011908:	6843      	ldr	r3, [r0, #4]
 801190a:	6804      	ldr	r4, [r0, #0]
 801190c:	fa03 f506 	lsl.w	r5, r3, r6
 8011910:	432c      	orrs	r4, r5
 8011912:	40d3      	lsrs	r3, r2
 8011914:	6004      	str	r4, [r0, #0]
 8011916:	f840 3f04 	str.w	r3, [r0, #4]!
 801191a:	4288      	cmp	r0, r1
 801191c:	d3f4      	bcc.n	8011908 <L_shift+0xc>
 801191e:	bd70      	pop	{r4, r5, r6, pc}

08011920 <__match>:
 8011920:	b530      	push	{r4, r5, lr}
 8011922:	6803      	ldr	r3, [r0, #0]
 8011924:	3301      	adds	r3, #1
 8011926:	f811 4b01 	ldrb.w	r4, [r1], #1
 801192a:	b914      	cbnz	r4, 8011932 <__match+0x12>
 801192c:	6003      	str	r3, [r0, #0]
 801192e:	2001      	movs	r0, #1
 8011930:	bd30      	pop	{r4, r5, pc}
 8011932:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011936:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 801193a:	2d19      	cmp	r5, #25
 801193c:	bf98      	it	ls
 801193e:	3220      	addls	r2, #32
 8011940:	42a2      	cmp	r2, r4
 8011942:	d0f0      	beq.n	8011926 <__match+0x6>
 8011944:	2000      	movs	r0, #0
 8011946:	e7f3      	b.n	8011930 <__match+0x10>

08011948 <__hexnan>:
 8011948:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801194c:	680b      	ldr	r3, [r1, #0]
 801194e:	6801      	ldr	r1, [r0, #0]
 8011950:	115e      	asrs	r6, r3, #5
 8011952:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8011956:	f013 031f 	ands.w	r3, r3, #31
 801195a:	b087      	sub	sp, #28
 801195c:	bf18      	it	ne
 801195e:	3604      	addne	r6, #4
 8011960:	2500      	movs	r5, #0
 8011962:	1f37      	subs	r7, r6, #4
 8011964:	4682      	mov	sl, r0
 8011966:	4690      	mov	r8, r2
 8011968:	9301      	str	r3, [sp, #4]
 801196a:	f846 5c04 	str.w	r5, [r6, #-4]
 801196e:	46b9      	mov	r9, r7
 8011970:	463c      	mov	r4, r7
 8011972:	9502      	str	r5, [sp, #8]
 8011974:	46ab      	mov	fp, r5
 8011976:	784a      	ldrb	r2, [r1, #1]
 8011978:	1c4b      	adds	r3, r1, #1
 801197a:	9303      	str	r3, [sp, #12]
 801197c:	b342      	cbz	r2, 80119d0 <__hexnan+0x88>
 801197e:	4610      	mov	r0, r2
 8011980:	9105      	str	r1, [sp, #20]
 8011982:	9204      	str	r2, [sp, #16]
 8011984:	f7ff fd94 	bl	80114b0 <__hexdig_fun>
 8011988:	2800      	cmp	r0, #0
 801198a:	d151      	bne.n	8011a30 <__hexnan+0xe8>
 801198c:	9a04      	ldr	r2, [sp, #16]
 801198e:	9905      	ldr	r1, [sp, #20]
 8011990:	2a20      	cmp	r2, #32
 8011992:	d818      	bhi.n	80119c6 <__hexnan+0x7e>
 8011994:	9b02      	ldr	r3, [sp, #8]
 8011996:	459b      	cmp	fp, r3
 8011998:	dd13      	ble.n	80119c2 <__hexnan+0x7a>
 801199a:	454c      	cmp	r4, r9
 801199c:	d206      	bcs.n	80119ac <__hexnan+0x64>
 801199e:	2d07      	cmp	r5, #7
 80119a0:	dc04      	bgt.n	80119ac <__hexnan+0x64>
 80119a2:	462a      	mov	r2, r5
 80119a4:	4649      	mov	r1, r9
 80119a6:	4620      	mov	r0, r4
 80119a8:	f7ff ffa8 	bl	80118fc <L_shift>
 80119ac:	4544      	cmp	r4, r8
 80119ae:	d952      	bls.n	8011a56 <__hexnan+0x10e>
 80119b0:	2300      	movs	r3, #0
 80119b2:	f1a4 0904 	sub.w	r9, r4, #4
 80119b6:	f844 3c04 	str.w	r3, [r4, #-4]
 80119ba:	f8cd b008 	str.w	fp, [sp, #8]
 80119be:	464c      	mov	r4, r9
 80119c0:	461d      	mov	r5, r3
 80119c2:	9903      	ldr	r1, [sp, #12]
 80119c4:	e7d7      	b.n	8011976 <__hexnan+0x2e>
 80119c6:	2a29      	cmp	r2, #41	@ 0x29
 80119c8:	d157      	bne.n	8011a7a <__hexnan+0x132>
 80119ca:	3102      	adds	r1, #2
 80119cc:	f8ca 1000 	str.w	r1, [sl]
 80119d0:	f1bb 0f00 	cmp.w	fp, #0
 80119d4:	d051      	beq.n	8011a7a <__hexnan+0x132>
 80119d6:	454c      	cmp	r4, r9
 80119d8:	d206      	bcs.n	80119e8 <__hexnan+0xa0>
 80119da:	2d07      	cmp	r5, #7
 80119dc:	dc04      	bgt.n	80119e8 <__hexnan+0xa0>
 80119de:	462a      	mov	r2, r5
 80119e0:	4649      	mov	r1, r9
 80119e2:	4620      	mov	r0, r4
 80119e4:	f7ff ff8a 	bl	80118fc <L_shift>
 80119e8:	4544      	cmp	r4, r8
 80119ea:	d936      	bls.n	8011a5a <__hexnan+0x112>
 80119ec:	f1a8 0204 	sub.w	r2, r8, #4
 80119f0:	4623      	mov	r3, r4
 80119f2:	f853 1b04 	ldr.w	r1, [r3], #4
 80119f6:	f842 1f04 	str.w	r1, [r2, #4]!
 80119fa:	429f      	cmp	r7, r3
 80119fc:	d2f9      	bcs.n	80119f2 <__hexnan+0xaa>
 80119fe:	1b3b      	subs	r3, r7, r4
 8011a00:	f023 0303 	bic.w	r3, r3, #3
 8011a04:	3304      	adds	r3, #4
 8011a06:	3401      	adds	r4, #1
 8011a08:	3e03      	subs	r6, #3
 8011a0a:	42b4      	cmp	r4, r6
 8011a0c:	bf88      	it	hi
 8011a0e:	2304      	movhi	r3, #4
 8011a10:	4443      	add	r3, r8
 8011a12:	2200      	movs	r2, #0
 8011a14:	f843 2b04 	str.w	r2, [r3], #4
 8011a18:	429f      	cmp	r7, r3
 8011a1a:	d2fb      	bcs.n	8011a14 <__hexnan+0xcc>
 8011a1c:	683b      	ldr	r3, [r7, #0]
 8011a1e:	b91b      	cbnz	r3, 8011a28 <__hexnan+0xe0>
 8011a20:	4547      	cmp	r7, r8
 8011a22:	d128      	bne.n	8011a76 <__hexnan+0x12e>
 8011a24:	2301      	movs	r3, #1
 8011a26:	603b      	str	r3, [r7, #0]
 8011a28:	2005      	movs	r0, #5
 8011a2a:	b007      	add	sp, #28
 8011a2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011a30:	3501      	adds	r5, #1
 8011a32:	2d08      	cmp	r5, #8
 8011a34:	f10b 0b01 	add.w	fp, fp, #1
 8011a38:	dd06      	ble.n	8011a48 <__hexnan+0x100>
 8011a3a:	4544      	cmp	r4, r8
 8011a3c:	d9c1      	bls.n	80119c2 <__hexnan+0x7a>
 8011a3e:	2300      	movs	r3, #0
 8011a40:	f844 3c04 	str.w	r3, [r4, #-4]
 8011a44:	2501      	movs	r5, #1
 8011a46:	3c04      	subs	r4, #4
 8011a48:	6822      	ldr	r2, [r4, #0]
 8011a4a:	f000 000f 	and.w	r0, r0, #15
 8011a4e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8011a52:	6020      	str	r0, [r4, #0]
 8011a54:	e7b5      	b.n	80119c2 <__hexnan+0x7a>
 8011a56:	2508      	movs	r5, #8
 8011a58:	e7b3      	b.n	80119c2 <__hexnan+0x7a>
 8011a5a:	9b01      	ldr	r3, [sp, #4]
 8011a5c:	2b00      	cmp	r3, #0
 8011a5e:	d0dd      	beq.n	8011a1c <__hexnan+0xd4>
 8011a60:	f1c3 0320 	rsb	r3, r3, #32
 8011a64:	f04f 32ff 	mov.w	r2, #4294967295
 8011a68:	40da      	lsrs	r2, r3
 8011a6a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8011a6e:	4013      	ands	r3, r2
 8011a70:	f846 3c04 	str.w	r3, [r6, #-4]
 8011a74:	e7d2      	b.n	8011a1c <__hexnan+0xd4>
 8011a76:	3f04      	subs	r7, #4
 8011a78:	e7d0      	b.n	8011a1c <__hexnan+0xd4>
 8011a7a:	2004      	movs	r0, #4
 8011a7c:	e7d5      	b.n	8011a2a <__hexnan+0xe2>

08011a7e <__ascii_mbtowc>:
 8011a7e:	b082      	sub	sp, #8
 8011a80:	b901      	cbnz	r1, 8011a84 <__ascii_mbtowc+0x6>
 8011a82:	a901      	add	r1, sp, #4
 8011a84:	b142      	cbz	r2, 8011a98 <__ascii_mbtowc+0x1a>
 8011a86:	b14b      	cbz	r3, 8011a9c <__ascii_mbtowc+0x1e>
 8011a88:	7813      	ldrb	r3, [r2, #0]
 8011a8a:	600b      	str	r3, [r1, #0]
 8011a8c:	7812      	ldrb	r2, [r2, #0]
 8011a8e:	1e10      	subs	r0, r2, #0
 8011a90:	bf18      	it	ne
 8011a92:	2001      	movne	r0, #1
 8011a94:	b002      	add	sp, #8
 8011a96:	4770      	bx	lr
 8011a98:	4610      	mov	r0, r2
 8011a9a:	e7fb      	b.n	8011a94 <__ascii_mbtowc+0x16>
 8011a9c:	f06f 0001 	mvn.w	r0, #1
 8011aa0:	e7f8      	b.n	8011a94 <__ascii_mbtowc+0x16>

08011aa2 <_realloc_r>:
 8011aa2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011aa6:	4680      	mov	r8, r0
 8011aa8:	4615      	mov	r5, r2
 8011aaa:	460c      	mov	r4, r1
 8011aac:	b921      	cbnz	r1, 8011ab8 <_realloc_r+0x16>
 8011aae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011ab2:	4611      	mov	r1, r2
 8011ab4:	f7fd beb2 	b.w	800f81c <_malloc_r>
 8011ab8:	b92a      	cbnz	r2, 8011ac6 <_realloc_r+0x24>
 8011aba:	f7fd fe3b 	bl	800f734 <_free_r>
 8011abe:	2400      	movs	r4, #0
 8011ac0:	4620      	mov	r0, r4
 8011ac2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011ac6:	f000 f840 	bl	8011b4a <_malloc_usable_size_r>
 8011aca:	4285      	cmp	r5, r0
 8011acc:	4606      	mov	r6, r0
 8011ace:	d802      	bhi.n	8011ad6 <_realloc_r+0x34>
 8011ad0:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8011ad4:	d8f4      	bhi.n	8011ac0 <_realloc_r+0x1e>
 8011ad6:	4629      	mov	r1, r5
 8011ad8:	4640      	mov	r0, r8
 8011ada:	f7fd fe9f 	bl	800f81c <_malloc_r>
 8011ade:	4607      	mov	r7, r0
 8011ae0:	2800      	cmp	r0, #0
 8011ae2:	d0ec      	beq.n	8011abe <_realloc_r+0x1c>
 8011ae4:	42b5      	cmp	r5, r6
 8011ae6:	462a      	mov	r2, r5
 8011ae8:	4621      	mov	r1, r4
 8011aea:	bf28      	it	cs
 8011aec:	4632      	movcs	r2, r6
 8011aee:	f7ff fc43 	bl	8011378 <memcpy>
 8011af2:	4621      	mov	r1, r4
 8011af4:	4640      	mov	r0, r8
 8011af6:	f7fd fe1d 	bl	800f734 <_free_r>
 8011afa:	463c      	mov	r4, r7
 8011afc:	e7e0      	b.n	8011ac0 <_realloc_r+0x1e>

08011afe <__ascii_wctomb>:
 8011afe:	4603      	mov	r3, r0
 8011b00:	4608      	mov	r0, r1
 8011b02:	b141      	cbz	r1, 8011b16 <__ascii_wctomb+0x18>
 8011b04:	2aff      	cmp	r2, #255	@ 0xff
 8011b06:	d904      	bls.n	8011b12 <__ascii_wctomb+0x14>
 8011b08:	228a      	movs	r2, #138	@ 0x8a
 8011b0a:	601a      	str	r2, [r3, #0]
 8011b0c:	f04f 30ff 	mov.w	r0, #4294967295
 8011b10:	4770      	bx	lr
 8011b12:	700a      	strb	r2, [r1, #0]
 8011b14:	2001      	movs	r0, #1
 8011b16:	4770      	bx	lr

08011b18 <fiprintf>:
 8011b18:	b40e      	push	{r1, r2, r3}
 8011b1a:	b503      	push	{r0, r1, lr}
 8011b1c:	4601      	mov	r1, r0
 8011b1e:	ab03      	add	r3, sp, #12
 8011b20:	4805      	ldr	r0, [pc, #20]	@ (8011b38 <fiprintf+0x20>)
 8011b22:	f853 2b04 	ldr.w	r2, [r3], #4
 8011b26:	6800      	ldr	r0, [r0, #0]
 8011b28:	9301      	str	r3, [sp, #4]
 8011b2a:	f000 f83f 	bl	8011bac <_vfiprintf_r>
 8011b2e:	b002      	add	sp, #8
 8011b30:	f85d eb04 	ldr.w	lr, [sp], #4
 8011b34:	b003      	add	sp, #12
 8011b36:	4770      	bx	lr
 8011b38:	2400001c 	.word	0x2400001c

08011b3c <abort>:
 8011b3c:	b508      	push	{r3, lr}
 8011b3e:	2006      	movs	r0, #6
 8011b40:	f000 fa08 	bl	8011f54 <raise>
 8011b44:	2001      	movs	r0, #1
 8011b46:	f7ef fde9 	bl	800171c <_exit>

08011b4a <_malloc_usable_size_r>:
 8011b4a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011b4e:	1f18      	subs	r0, r3, #4
 8011b50:	2b00      	cmp	r3, #0
 8011b52:	bfbc      	itt	lt
 8011b54:	580b      	ldrlt	r3, [r1, r0]
 8011b56:	18c0      	addlt	r0, r0, r3
 8011b58:	4770      	bx	lr

08011b5a <__sfputc_r>:
 8011b5a:	6893      	ldr	r3, [r2, #8]
 8011b5c:	3b01      	subs	r3, #1
 8011b5e:	2b00      	cmp	r3, #0
 8011b60:	b410      	push	{r4}
 8011b62:	6093      	str	r3, [r2, #8]
 8011b64:	da08      	bge.n	8011b78 <__sfputc_r+0x1e>
 8011b66:	6994      	ldr	r4, [r2, #24]
 8011b68:	42a3      	cmp	r3, r4
 8011b6a:	db01      	blt.n	8011b70 <__sfputc_r+0x16>
 8011b6c:	290a      	cmp	r1, #10
 8011b6e:	d103      	bne.n	8011b78 <__sfputc_r+0x1e>
 8011b70:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011b74:	f000 b932 	b.w	8011ddc <__swbuf_r>
 8011b78:	6813      	ldr	r3, [r2, #0]
 8011b7a:	1c58      	adds	r0, r3, #1
 8011b7c:	6010      	str	r0, [r2, #0]
 8011b7e:	7019      	strb	r1, [r3, #0]
 8011b80:	4608      	mov	r0, r1
 8011b82:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011b86:	4770      	bx	lr

08011b88 <__sfputs_r>:
 8011b88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011b8a:	4606      	mov	r6, r0
 8011b8c:	460f      	mov	r7, r1
 8011b8e:	4614      	mov	r4, r2
 8011b90:	18d5      	adds	r5, r2, r3
 8011b92:	42ac      	cmp	r4, r5
 8011b94:	d101      	bne.n	8011b9a <__sfputs_r+0x12>
 8011b96:	2000      	movs	r0, #0
 8011b98:	e007      	b.n	8011baa <__sfputs_r+0x22>
 8011b9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011b9e:	463a      	mov	r2, r7
 8011ba0:	4630      	mov	r0, r6
 8011ba2:	f7ff ffda 	bl	8011b5a <__sfputc_r>
 8011ba6:	1c43      	adds	r3, r0, #1
 8011ba8:	d1f3      	bne.n	8011b92 <__sfputs_r+0xa>
 8011baa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08011bac <_vfiprintf_r>:
 8011bac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011bb0:	460d      	mov	r5, r1
 8011bb2:	b09d      	sub	sp, #116	@ 0x74
 8011bb4:	4614      	mov	r4, r2
 8011bb6:	4698      	mov	r8, r3
 8011bb8:	4606      	mov	r6, r0
 8011bba:	b118      	cbz	r0, 8011bc4 <_vfiprintf_r+0x18>
 8011bbc:	6a03      	ldr	r3, [r0, #32]
 8011bbe:	b90b      	cbnz	r3, 8011bc4 <_vfiprintf_r+0x18>
 8011bc0:	f7fc feba 	bl	800e938 <__sinit>
 8011bc4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011bc6:	07d9      	lsls	r1, r3, #31
 8011bc8:	d405      	bmi.n	8011bd6 <_vfiprintf_r+0x2a>
 8011bca:	89ab      	ldrh	r3, [r5, #12]
 8011bcc:	059a      	lsls	r2, r3, #22
 8011bce:	d402      	bmi.n	8011bd6 <_vfiprintf_r+0x2a>
 8011bd0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011bd2:	f7fc ffc8 	bl	800eb66 <__retarget_lock_acquire_recursive>
 8011bd6:	89ab      	ldrh	r3, [r5, #12]
 8011bd8:	071b      	lsls	r3, r3, #28
 8011bda:	d501      	bpl.n	8011be0 <_vfiprintf_r+0x34>
 8011bdc:	692b      	ldr	r3, [r5, #16]
 8011bde:	b99b      	cbnz	r3, 8011c08 <_vfiprintf_r+0x5c>
 8011be0:	4629      	mov	r1, r5
 8011be2:	4630      	mov	r0, r6
 8011be4:	f000 f938 	bl	8011e58 <__swsetup_r>
 8011be8:	b170      	cbz	r0, 8011c08 <_vfiprintf_r+0x5c>
 8011bea:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011bec:	07dc      	lsls	r4, r3, #31
 8011bee:	d504      	bpl.n	8011bfa <_vfiprintf_r+0x4e>
 8011bf0:	f04f 30ff 	mov.w	r0, #4294967295
 8011bf4:	b01d      	add	sp, #116	@ 0x74
 8011bf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011bfa:	89ab      	ldrh	r3, [r5, #12]
 8011bfc:	0598      	lsls	r0, r3, #22
 8011bfe:	d4f7      	bmi.n	8011bf0 <_vfiprintf_r+0x44>
 8011c00:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011c02:	f7fc ffb1 	bl	800eb68 <__retarget_lock_release_recursive>
 8011c06:	e7f3      	b.n	8011bf0 <_vfiprintf_r+0x44>
 8011c08:	2300      	movs	r3, #0
 8011c0a:	9309      	str	r3, [sp, #36]	@ 0x24
 8011c0c:	2320      	movs	r3, #32
 8011c0e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8011c12:	f8cd 800c 	str.w	r8, [sp, #12]
 8011c16:	2330      	movs	r3, #48	@ 0x30
 8011c18:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8011dc8 <_vfiprintf_r+0x21c>
 8011c1c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011c20:	f04f 0901 	mov.w	r9, #1
 8011c24:	4623      	mov	r3, r4
 8011c26:	469a      	mov	sl, r3
 8011c28:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011c2c:	b10a      	cbz	r2, 8011c32 <_vfiprintf_r+0x86>
 8011c2e:	2a25      	cmp	r2, #37	@ 0x25
 8011c30:	d1f9      	bne.n	8011c26 <_vfiprintf_r+0x7a>
 8011c32:	ebba 0b04 	subs.w	fp, sl, r4
 8011c36:	d00b      	beq.n	8011c50 <_vfiprintf_r+0xa4>
 8011c38:	465b      	mov	r3, fp
 8011c3a:	4622      	mov	r2, r4
 8011c3c:	4629      	mov	r1, r5
 8011c3e:	4630      	mov	r0, r6
 8011c40:	f7ff ffa2 	bl	8011b88 <__sfputs_r>
 8011c44:	3001      	adds	r0, #1
 8011c46:	f000 80a7 	beq.w	8011d98 <_vfiprintf_r+0x1ec>
 8011c4a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011c4c:	445a      	add	r2, fp
 8011c4e:	9209      	str	r2, [sp, #36]	@ 0x24
 8011c50:	f89a 3000 	ldrb.w	r3, [sl]
 8011c54:	2b00      	cmp	r3, #0
 8011c56:	f000 809f 	beq.w	8011d98 <_vfiprintf_r+0x1ec>
 8011c5a:	2300      	movs	r3, #0
 8011c5c:	f04f 32ff 	mov.w	r2, #4294967295
 8011c60:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011c64:	f10a 0a01 	add.w	sl, sl, #1
 8011c68:	9304      	str	r3, [sp, #16]
 8011c6a:	9307      	str	r3, [sp, #28]
 8011c6c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8011c70:	931a      	str	r3, [sp, #104]	@ 0x68
 8011c72:	4654      	mov	r4, sl
 8011c74:	2205      	movs	r2, #5
 8011c76:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011c7a:	4853      	ldr	r0, [pc, #332]	@ (8011dc8 <_vfiprintf_r+0x21c>)
 8011c7c:	f7ee fb30 	bl	80002e0 <memchr>
 8011c80:	9a04      	ldr	r2, [sp, #16]
 8011c82:	b9d8      	cbnz	r0, 8011cbc <_vfiprintf_r+0x110>
 8011c84:	06d1      	lsls	r1, r2, #27
 8011c86:	bf44      	itt	mi
 8011c88:	2320      	movmi	r3, #32
 8011c8a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011c8e:	0713      	lsls	r3, r2, #28
 8011c90:	bf44      	itt	mi
 8011c92:	232b      	movmi	r3, #43	@ 0x2b
 8011c94:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011c98:	f89a 3000 	ldrb.w	r3, [sl]
 8011c9c:	2b2a      	cmp	r3, #42	@ 0x2a
 8011c9e:	d015      	beq.n	8011ccc <_vfiprintf_r+0x120>
 8011ca0:	9a07      	ldr	r2, [sp, #28]
 8011ca2:	4654      	mov	r4, sl
 8011ca4:	2000      	movs	r0, #0
 8011ca6:	f04f 0c0a 	mov.w	ip, #10
 8011caa:	4621      	mov	r1, r4
 8011cac:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011cb0:	3b30      	subs	r3, #48	@ 0x30
 8011cb2:	2b09      	cmp	r3, #9
 8011cb4:	d94b      	bls.n	8011d4e <_vfiprintf_r+0x1a2>
 8011cb6:	b1b0      	cbz	r0, 8011ce6 <_vfiprintf_r+0x13a>
 8011cb8:	9207      	str	r2, [sp, #28]
 8011cba:	e014      	b.n	8011ce6 <_vfiprintf_r+0x13a>
 8011cbc:	eba0 0308 	sub.w	r3, r0, r8
 8011cc0:	fa09 f303 	lsl.w	r3, r9, r3
 8011cc4:	4313      	orrs	r3, r2
 8011cc6:	9304      	str	r3, [sp, #16]
 8011cc8:	46a2      	mov	sl, r4
 8011cca:	e7d2      	b.n	8011c72 <_vfiprintf_r+0xc6>
 8011ccc:	9b03      	ldr	r3, [sp, #12]
 8011cce:	1d19      	adds	r1, r3, #4
 8011cd0:	681b      	ldr	r3, [r3, #0]
 8011cd2:	9103      	str	r1, [sp, #12]
 8011cd4:	2b00      	cmp	r3, #0
 8011cd6:	bfbb      	ittet	lt
 8011cd8:	425b      	neglt	r3, r3
 8011cda:	f042 0202 	orrlt.w	r2, r2, #2
 8011cde:	9307      	strge	r3, [sp, #28]
 8011ce0:	9307      	strlt	r3, [sp, #28]
 8011ce2:	bfb8      	it	lt
 8011ce4:	9204      	strlt	r2, [sp, #16]
 8011ce6:	7823      	ldrb	r3, [r4, #0]
 8011ce8:	2b2e      	cmp	r3, #46	@ 0x2e
 8011cea:	d10a      	bne.n	8011d02 <_vfiprintf_r+0x156>
 8011cec:	7863      	ldrb	r3, [r4, #1]
 8011cee:	2b2a      	cmp	r3, #42	@ 0x2a
 8011cf0:	d132      	bne.n	8011d58 <_vfiprintf_r+0x1ac>
 8011cf2:	9b03      	ldr	r3, [sp, #12]
 8011cf4:	1d1a      	adds	r2, r3, #4
 8011cf6:	681b      	ldr	r3, [r3, #0]
 8011cf8:	9203      	str	r2, [sp, #12]
 8011cfa:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011cfe:	3402      	adds	r4, #2
 8011d00:	9305      	str	r3, [sp, #20]
 8011d02:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8011dd8 <_vfiprintf_r+0x22c>
 8011d06:	7821      	ldrb	r1, [r4, #0]
 8011d08:	2203      	movs	r2, #3
 8011d0a:	4650      	mov	r0, sl
 8011d0c:	f7ee fae8 	bl	80002e0 <memchr>
 8011d10:	b138      	cbz	r0, 8011d22 <_vfiprintf_r+0x176>
 8011d12:	9b04      	ldr	r3, [sp, #16]
 8011d14:	eba0 000a 	sub.w	r0, r0, sl
 8011d18:	2240      	movs	r2, #64	@ 0x40
 8011d1a:	4082      	lsls	r2, r0
 8011d1c:	4313      	orrs	r3, r2
 8011d1e:	3401      	adds	r4, #1
 8011d20:	9304      	str	r3, [sp, #16]
 8011d22:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011d26:	4829      	ldr	r0, [pc, #164]	@ (8011dcc <_vfiprintf_r+0x220>)
 8011d28:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8011d2c:	2206      	movs	r2, #6
 8011d2e:	f7ee fad7 	bl	80002e0 <memchr>
 8011d32:	2800      	cmp	r0, #0
 8011d34:	d03f      	beq.n	8011db6 <_vfiprintf_r+0x20a>
 8011d36:	4b26      	ldr	r3, [pc, #152]	@ (8011dd0 <_vfiprintf_r+0x224>)
 8011d38:	bb1b      	cbnz	r3, 8011d82 <_vfiprintf_r+0x1d6>
 8011d3a:	9b03      	ldr	r3, [sp, #12]
 8011d3c:	3307      	adds	r3, #7
 8011d3e:	f023 0307 	bic.w	r3, r3, #7
 8011d42:	3308      	adds	r3, #8
 8011d44:	9303      	str	r3, [sp, #12]
 8011d46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011d48:	443b      	add	r3, r7
 8011d4a:	9309      	str	r3, [sp, #36]	@ 0x24
 8011d4c:	e76a      	b.n	8011c24 <_vfiprintf_r+0x78>
 8011d4e:	fb0c 3202 	mla	r2, ip, r2, r3
 8011d52:	460c      	mov	r4, r1
 8011d54:	2001      	movs	r0, #1
 8011d56:	e7a8      	b.n	8011caa <_vfiprintf_r+0xfe>
 8011d58:	2300      	movs	r3, #0
 8011d5a:	3401      	adds	r4, #1
 8011d5c:	9305      	str	r3, [sp, #20]
 8011d5e:	4619      	mov	r1, r3
 8011d60:	f04f 0c0a 	mov.w	ip, #10
 8011d64:	4620      	mov	r0, r4
 8011d66:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011d6a:	3a30      	subs	r2, #48	@ 0x30
 8011d6c:	2a09      	cmp	r2, #9
 8011d6e:	d903      	bls.n	8011d78 <_vfiprintf_r+0x1cc>
 8011d70:	2b00      	cmp	r3, #0
 8011d72:	d0c6      	beq.n	8011d02 <_vfiprintf_r+0x156>
 8011d74:	9105      	str	r1, [sp, #20]
 8011d76:	e7c4      	b.n	8011d02 <_vfiprintf_r+0x156>
 8011d78:	fb0c 2101 	mla	r1, ip, r1, r2
 8011d7c:	4604      	mov	r4, r0
 8011d7e:	2301      	movs	r3, #1
 8011d80:	e7f0      	b.n	8011d64 <_vfiprintf_r+0x1b8>
 8011d82:	ab03      	add	r3, sp, #12
 8011d84:	9300      	str	r3, [sp, #0]
 8011d86:	462a      	mov	r2, r5
 8011d88:	4b12      	ldr	r3, [pc, #72]	@ (8011dd4 <_vfiprintf_r+0x228>)
 8011d8a:	a904      	add	r1, sp, #16
 8011d8c:	4630      	mov	r0, r6
 8011d8e:	f7fb ff93 	bl	800dcb8 <_printf_float>
 8011d92:	4607      	mov	r7, r0
 8011d94:	1c78      	adds	r0, r7, #1
 8011d96:	d1d6      	bne.n	8011d46 <_vfiprintf_r+0x19a>
 8011d98:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011d9a:	07d9      	lsls	r1, r3, #31
 8011d9c:	d405      	bmi.n	8011daa <_vfiprintf_r+0x1fe>
 8011d9e:	89ab      	ldrh	r3, [r5, #12]
 8011da0:	059a      	lsls	r2, r3, #22
 8011da2:	d402      	bmi.n	8011daa <_vfiprintf_r+0x1fe>
 8011da4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011da6:	f7fc fedf 	bl	800eb68 <__retarget_lock_release_recursive>
 8011daa:	89ab      	ldrh	r3, [r5, #12]
 8011dac:	065b      	lsls	r3, r3, #25
 8011dae:	f53f af1f 	bmi.w	8011bf0 <_vfiprintf_r+0x44>
 8011db2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011db4:	e71e      	b.n	8011bf4 <_vfiprintf_r+0x48>
 8011db6:	ab03      	add	r3, sp, #12
 8011db8:	9300      	str	r3, [sp, #0]
 8011dba:	462a      	mov	r2, r5
 8011dbc:	4b05      	ldr	r3, [pc, #20]	@ (8011dd4 <_vfiprintf_r+0x228>)
 8011dbe:	a904      	add	r1, sp, #16
 8011dc0:	4630      	mov	r0, r6
 8011dc2:	f7fc fa01 	bl	800e1c8 <_printf_i>
 8011dc6:	e7e4      	b.n	8011d92 <_vfiprintf_r+0x1e6>
 8011dc8:	08012a69 	.word	0x08012a69
 8011dcc:	08012a73 	.word	0x08012a73
 8011dd0:	0800dcb9 	.word	0x0800dcb9
 8011dd4:	08011b89 	.word	0x08011b89
 8011dd8:	08012a6f 	.word	0x08012a6f

08011ddc <__swbuf_r>:
 8011ddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011dde:	460e      	mov	r6, r1
 8011de0:	4614      	mov	r4, r2
 8011de2:	4605      	mov	r5, r0
 8011de4:	b118      	cbz	r0, 8011dee <__swbuf_r+0x12>
 8011de6:	6a03      	ldr	r3, [r0, #32]
 8011de8:	b90b      	cbnz	r3, 8011dee <__swbuf_r+0x12>
 8011dea:	f7fc fda5 	bl	800e938 <__sinit>
 8011dee:	69a3      	ldr	r3, [r4, #24]
 8011df0:	60a3      	str	r3, [r4, #8]
 8011df2:	89a3      	ldrh	r3, [r4, #12]
 8011df4:	071a      	lsls	r2, r3, #28
 8011df6:	d501      	bpl.n	8011dfc <__swbuf_r+0x20>
 8011df8:	6923      	ldr	r3, [r4, #16]
 8011dfa:	b943      	cbnz	r3, 8011e0e <__swbuf_r+0x32>
 8011dfc:	4621      	mov	r1, r4
 8011dfe:	4628      	mov	r0, r5
 8011e00:	f000 f82a 	bl	8011e58 <__swsetup_r>
 8011e04:	b118      	cbz	r0, 8011e0e <__swbuf_r+0x32>
 8011e06:	f04f 37ff 	mov.w	r7, #4294967295
 8011e0a:	4638      	mov	r0, r7
 8011e0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011e0e:	6823      	ldr	r3, [r4, #0]
 8011e10:	6922      	ldr	r2, [r4, #16]
 8011e12:	1a98      	subs	r0, r3, r2
 8011e14:	6963      	ldr	r3, [r4, #20]
 8011e16:	b2f6      	uxtb	r6, r6
 8011e18:	4283      	cmp	r3, r0
 8011e1a:	4637      	mov	r7, r6
 8011e1c:	dc05      	bgt.n	8011e2a <__swbuf_r+0x4e>
 8011e1e:	4621      	mov	r1, r4
 8011e20:	4628      	mov	r0, r5
 8011e22:	f7ff fa45 	bl	80112b0 <_fflush_r>
 8011e26:	2800      	cmp	r0, #0
 8011e28:	d1ed      	bne.n	8011e06 <__swbuf_r+0x2a>
 8011e2a:	68a3      	ldr	r3, [r4, #8]
 8011e2c:	3b01      	subs	r3, #1
 8011e2e:	60a3      	str	r3, [r4, #8]
 8011e30:	6823      	ldr	r3, [r4, #0]
 8011e32:	1c5a      	adds	r2, r3, #1
 8011e34:	6022      	str	r2, [r4, #0]
 8011e36:	701e      	strb	r6, [r3, #0]
 8011e38:	6962      	ldr	r2, [r4, #20]
 8011e3a:	1c43      	adds	r3, r0, #1
 8011e3c:	429a      	cmp	r2, r3
 8011e3e:	d004      	beq.n	8011e4a <__swbuf_r+0x6e>
 8011e40:	89a3      	ldrh	r3, [r4, #12]
 8011e42:	07db      	lsls	r3, r3, #31
 8011e44:	d5e1      	bpl.n	8011e0a <__swbuf_r+0x2e>
 8011e46:	2e0a      	cmp	r6, #10
 8011e48:	d1df      	bne.n	8011e0a <__swbuf_r+0x2e>
 8011e4a:	4621      	mov	r1, r4
 8011e4c:	4628      	mov	r0, r5
 8011e4e:	f7ff fa2f 	bl	80112b0 <_fflush_r>
 8011e52:	2800      	cmp	r0, #0
 8011e54:	d0d9      	beq.n	8011e0a <__swbuf_r+0x2e>
 8011e56:	e7d6      	b.n	8011e06 <__swbuf_r+0x2a>

08011e58 <__swsetup_r>:
 8011e58:	b538      	push	{r3, r4, r5, lr}
 8011e5a:	4b29      	ldr	r3, [pc, #164]	@ (8011f00 <__swsetup_r+0xa8>)
 8011e5c:	4605      	mov	r5, r0
 8011e5e:	6818      	ldr	r0, [r3, #0]
 8011e60:	460c      	mov	r4, r1
 8011e62:	b118      	cbz	r0, 8011e6c <__swsetup_r+0x14>
 8011e64:	6a03      	ldr	r3, [r0, #32]
 8011e66:	b90b      	cbnz	r3, 8011e6c <__swsetup_r+0x14>
 8011e68:	f7fc fd66 	bl	800e938 <__sinit>
 8011e6c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011e70:	0719      	lsls	r1, r3, #28
 8011e72:	d422      	bmi.n	8011eba <__swsetup_r+0x62>
 8011e74:	06da      	lsls	r2, r3, #27
 8011e76:	d407      	bmi.n	8011e88 <__swsetup_r+0x30>
 8011e78:	2209      	movs	r2, #9
 8011e7a:	602a      	str	r2, [r5, #0]
 8011e7c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011e80:	81a3      	strh	r3, [r4, #12]
 8011e82:	f04f 30ff 	mov.w	r0, #4294967295
 8011e86:	e033      	b.n	8011ef0 <__swsetup_r+0x98>
 8011e88:	0758      	lsls	r0, r3, #29
 8011e8a:	d512      	bpl.n	8011eb2 <__swsetup_r+0x5a>
 8011e8c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011e8e:	b141      	cbz	r1, 8011ea2 <__swsetup_r+0x4a>
 8011e90:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011e94:	4299      	cmp	r1, r3
 8011e96:	d002      	beq.n	8011e9e <__swsetup_r+0x46>
 8011e98:	4628      	mov	r0, r5
 8011e9a:	f7fd fc4b 	bl	800f734 <_free_r>
 8011e9e:	2300      	movs	r3, #0
 8011ea0:	6363      	str	r3, [r4, #52]	@ 0x34
 8011ea2:	89a3      	ldrh	r3, [r4, #12]
 8011ea4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8011ea8:	81a3      	strh	r3, [r4, #12]
 8011eaa:	2300      	movs	r3, #0
 8011eac:	6063      	str	r3, [r4, #4]
 8011eae:	6923      	ldr	r3, [r4, #16]
 8011eb0:	6023      	str	r3, [r4, #0]
 8011eb2:	89a3      	ldrh	r3, [r4, #12]
 8011eb4:	f043 0308 	orr.w	r3, r3, #8
 8011eb8:	81a3      	strh	r3, [r4, #12]
 8011eba:	6923      	ldr	r3, [r4, #16]
 8011ebc:	b94b      	cbnz	r3, 8011ed2 <__swsetup_r+0x7a>
 8011ebe:	89a3      	ldrh	r3, [r4, #12]
 8011ec0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8011ec4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011ec8:	d003      	beq.n	8011ed2 <__swsetup_r+0x7a>
 8011eca:	4621      	mov	r1, r4
 8011ecc:	4628      	mov	r0, r5
 8011ece:	f000 f883 	bl	8011fd8 <__smakebuf_r>
 8011ed2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011ed6:	f013 0201 	ands.w	r2, r3, #1
 8011eda:	d00a      	beq.n	8011ef2 <__swsetup_r+0x9a>
 8011edc:	2200      	movs	r2, #0
 8011ede:	60a2      	str	r2, [r4, #8]
 8011ee0:	6962      	ldr	r2, [r4, #20]
 8011ee2:	4252      	negs	r2, r2
 8011ee4:	61a2      	str	r2, [r4, #24]
 8011ee6:	6922      	ldr	r2, [r4, #16]
 8011ee8:	b942      	cbnz	r2, 8011efc <__swsetup_r+0xa4>
 8011eea:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8011eee:	d1c5      	bne.n	8011e7c <__swsetup_r+0x24>
 8011ef0:	bd38      	pop	{r3, r4, r5, pc}
 8011ef2:	0799      	lsls	r1, r3, #30
 8011ef4:	bf58      	it	pl
 8011ef6:	6962      	ldrpl	r2, [r4, #20]
 8011ef8:	60a2      	str	r2, [r4, #8]
 8011efa:	e7f4      	b.n	8011ee6 <__swsetup_r+0x8e>
 8011efc:	2000      	movs	r0, #0
 8011efe:	e7f7      	b.n	8011ef0 <__swsetup_r+0x98>
 8011f00:	2400001c 	.word	0x2400001c

08011f04 <_raise_r>:
 8011f04:	291f      	cmp	r1, #31
 8011f06:	b538      	push	{r3, r4, r5, lr}
 8011f08:	4605      	mov	r5, r0
 8011f0a:	460c      	mov	r4, r1
 8011f0c:	d904      	bls.n	8011f18 <_raise_r+0x14>
 8011f0e:	2316      	movs	r3, #22
 8011f10:	6003      	str	r3, [r0, #0]
 8011f12:	f04f 30ff 	mov.w	r0, #4294967295
 8011f16:	bd38      	pop	{r3, r4, r5, pc}
 8011f18:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8011f1a:	b112      	cbz	r2, 8011f22 <_raise_r+0x1e>
 8011f1c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011f20:	b94b      	cbnz	r3, 8011f36 <_raise_r+0x32>
 8011f22:	4628      	mov	r0, r5
 8011f24:	f000 f830 	bl	8011f88 <_getpid_r>
 8011f28:	4622      	mov	r2, r4
 8011f2a:	4601      	mov	r1, r0
 8011f2c:	4628      	mov	r0, r5
 8011f2e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011f32:	f000 b817 	b.w	8011f64 <_kill_r>
 8011f36:	2b01      	cmp	r3, #1
 8011f38:	d00a      	beq.n	8011f50 <_raise_r+0x4c>
 8011f3a:	1c59      	adds	r1, r3, #1
 8011f3c:	d103      	bne.n	8011f46 <_raise_r+0x42>
 8011f3e:	2316      	movs	r3, #22
 8011f40:	6003      	str	r3, [r0, #0]
 8011f42:	2001      	movs	r0, #1
 8011f44:	e7e7      	b.n	8011f16 <_raise_r+0x12>
 8011f46:	2100      	movs	r1, #0
 8011f48:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8011f4c:	4620      	mov	r0, r4
 8011f4e:	4798      	blx	r3
 8011f50:	2000      	movs	r0, #0
 8011f52:	e7e0      	b.n	8011f16 <_raise_r+0x12>

08011f54 <raise>:
 8011f54:	4b02      	ldr	r3, [pc, #8]	@ (8011f60 <raise+0xc>)
 8011f56:	4601      	mov	r1, r0
 8011f58:	6818      	ldr	r0, [r3, #0]
 8011f5a:	f7ff bfd3 	b.w	8011f04 <_raise_r>
 8011f5e:	bf00      	nop
 8011f60:	2400001c 	.word	0x2400001c

08011f64 <_kill_r>:
 8011f64:	b538      	push	{r3, r4, r5, lr}
 8011f66:	4d07      	ldr	r5, [pc, #28]	@ (8011f84 <_kill_r+0x20>)
 8011f68:	2300      	movs	r3, #0
 8011f6a:	4604      	mov	r4, r0
 8011f6c:	4608      	mov	r0, r1
 8011f6e:	4611      	mov	r1, r2
 8011f70:	602b      	str	r3, [r5, #0]
 8011f72:	f7ef fbc3 	bl	80016fc <_kill>
 8011f76:	1c43      	adds	r3, r0, #1
 8011f78:	d102      	bne.n	8011f80 <_kill_r+0x1c>
 8011f7a:	682b      	ldr	r3, [r5, #0]
 8011f7c:	b103      	cbz	r3, 8011f80 <_kill_r+0x1c>
 8011f7e:	6023      	str	r3, [r4, #0]
 8011f80:	bd38      	pop	{r3, r4, r5, pc}
 8011f82:	bf00      	nop
 8011f84:	24000570 	.word	0x24000570

08011f88 <_getpid_r>:
 8011f88:	f7ef bbb0 	b.w	80016ec <_getpid>

08011f8c <__swhatbuf_r>:
 8011f8c:	b570      	push	{r4, r5, r6, lr}
 8011f8e:	460c      	mov	r4, r1
 8011f90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011f94:	2900      	cmp	r1, #0
 8011f96:	b096      	sub	sp, #88	@ 0x58
 8011f98:	4615      	mov	r5, r2
 8011f9a:	461e      	mov	r6, r3
 8011f9c:	da0d      	bge.n	8011fba <__swhatbuf_r+0x2e>
 8011f9e:	89a3      	ldrh	r3, [r4, #12]
 8011fa0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8011fa4:	f04f 0100 	mov.w	r1, #0
 8011fa8:	bf14      	ite	ne
 8011faa:	2340      	movne	r3, #64	@ 0x40
 8011fac:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8011fb0:	2000      	movs	r0, #0
 8011fb2:	6031      	str	r1, [r6, #0]
 8011fb4:	602b      	str	r3, [r5, #0]
 8011fb6:	b016      	add	sp, #88	@ 0x58
 8011fb8:	bd70      	pop	{r4, r5, r6, pc}
 8011fba:	466a      	mov	r2, sp
 8011fbc:	f000 f848 	bl	8012050 <_fstat_r>
 8011fc0:	2800      	cmp	r0, #0
 8011fc2:	dbec      	blt.n	8011f9e <__swhatbuf_r+0x12>
 8011fc4:	9901      	ldr	r1, [sp, #4]
 8011fc6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8011fca:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8011fce:	4259      	negs	r1, r3
 8011fd0:	4159      	adcs	r1, r3
 8011fd2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8011fd6:	e7eb      	b.n	8011fb0 <__swhatbuf_r+0x24>

08011fd8 <__smakebuf_r>:
 8011fd8:	898b      	ldrh	r3, [r1, #12]
 8011fda:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011fdc:	079d      	lsls	r5, r3, #30
 8011fde:	4606      	mov	r6, r0
 8011fe0:	460c      	mov	r4, r1
 8011fe2:	d507      	bpl.n	8011ff4 <__smakebuf_r+0x1c>
 8011fe4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8011fe8:	6023      	str	r3, [r4, #0]
 8011fea:	6123      	str	r3, [r4, #16]
 8011fec:	2301      	movs	r3, #1
 8011fee:	6163      	str	r3, [r4, #20]
 8011ff0:	b003      	add	sp, #12
 8011ff2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011ff4:	ab01      	add	r3, sp, #4
 8011ff6:	466a      	mov	r2, sp
 8011ff8:	f7ff ffc8 	bl	8011f8c <__swhatbuf_r>
 8011ffc:	9f00      	ldr	r7, [sp, #0]
 8011ffe:	4605      	mov	r5, r0
 8012000:	4639      	mov	r1, r7
 8012002:	4630      	mov	r0, r6
 8012004:	f7fd fc0a 	bl	800f81c <_malloc_r>
 8012008:	b948      	cbnz	r0, 801201e <__smakebuf_r+0x46>
 801200a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801200e:	059a      	lsls	r2, r3, #22
 8012010:	d4ee      	bmi.n	8011ff0 <__smakebuf_r+0x18>
 8012012:	f023 0303 	bic.w	r3, r3, #3
 8012016:	f043 0302 	orr.w	r3, r3, #2
 801201a:	81a3      	strh	r3, [r4, #12]
 801201c:	e7e2      	b.n	8011fe4 <__smakebuf_r+0xc>
 801201e:	89a3      	ldrh	r3, [r4, #12]
 8012020:	6020      	str	r0, [r4, #0]
 8012022:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012026:	81a3      	strh	r3, [r4, #12]
 8012028:	9b01      	ldr	r3, [sp, #4]
 801202a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801202e:	b15b      	cbz	r3, 8012048 <__smakebuf_r+0x70>
 8012030:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012034:	4630      	mov	r0, r6
 8012036:	f000 f81d 	bl	8012074 <_isatty_r>
 801203a:	b128      	cbz	r0, 8012048 <__smakebuf_r+0x70>
 801203c:	89a3      	ldrh	r3, [r4, #12]
 801203e:	f023 0303 	bic.w	r3, r3, #3
 8012042:	f043 0301 	orr.w	r3, r3, #1
 8012046:	81a3      	strh	r3, [r4, #12]
 8012048:	89a3      	ldrh	r3, [r4, #12]
 801204a:	431d      	orrs	r5, r3
 801204c:	81a5      	strh	r5, [r4, #12]
 801204e:	e7cf      	b.n	8011ff0 <__smakebuf_r+0x18>

08012050 <_fstat_r>:
 8012050:	b538      	push	{r3, r4, r5, lr}
 8012052:	4d07      	ldr	r5, [pc, #28]	@ (8012070 <_fstat_r+0x20>)
 8012054:	2300      	movs	r3, #0
 8012056:	4604      	mov	r4, r0
 8012058:	4608      	mov	r0, r1
 801205a:	4611      	mov	r1, r2
 801205c:	602b      	str	r3, [r5, #0]
 801205e:	f7ef fbad 	bl	80017bc <_fstat>
 8012062:	1c43      	adds	r3, r0, #1
 8012064:	d102      	bne.n	801206c <_fstat_r+0x1c>
 8012066:	682b      	ldr	r3, [r5, #0]
 8012068:	b103      	cbz	r3, 801206c <_fstat_r+0x1c>
 801206a:	6023      	str	r3, [r4, #0]
 801206c:	bd38      	pop	{r3, r4, r5, pc}
 801206e:	bf00      	nop
 8012070:	24000570 	.word	0x24000570

08012074 <_isatty_r>:
 8012074:	b538      	push	{r3, r4, r5, lr}
 8012076:	4d06      	ldr	r5, [pc, #24]	@ (8012090 <_isatty_r+0x1c>)
 8012078:	2300      	movs	r3, #0
 801207a:	4604      	mov	r4, r0
 801207c:	4608      	mov	r0, r1
 801207e:	602b      	str	r3, [r5, #0]
 8012080:	f7ef fbac 	bl	80017dc <_isatty>
 8012084:	1c43      	adds	r3, r0, #1
 8012086:	d102      	bne.n	801208e <_isatty_r+0x1a>
 8012088:	682b      	ldr	r3, [r5, #0]
 801208a:	b103      	cbz	r3, 801208e <_isatty_r+0x1a>
 801208c:	6023      	str	r3, [r4, #0]
 801208e:	bd38      	pop	{r3, r4, r5, pc}
 8012090:	24000570 	.word	0x24000570

08012094 <checkint>:
 8012094:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8012098:	f240 33fe 	movw	r3, #1022	@ 0x3fe
 801209c:	429a      	cmp	r2, r3
 801209e:	b570      	push	{r4, r5, r6, lr}
 80120a0:	dd2a      	ble.n	80120f8 <checkint+0x64>
 80120a2:	f240 4333 	movw	r3, #1075	@ 0x433
 80120a6:	429a      	cmp	r2, r3
 80120a8:	dc24      	bgt.n	80120f4 <checkint+0x60>
 80120aa:	1a9b      	subs	r3, r3, r2
 80120ac:	f1a3 0620 	sub.w	r6, r3, #32
 80120b0:	f04f 32ff 	mov.w	r2, #4294967295
 80120b4:	fa02 f403 	lsl.w	r4, r2, r3
 80120b8:	fa02 f606 	lsl.w	r6, r2, r6
 80120bc:	f1c3 0520 	rsb	r5, r3, #32
 80120c0:	fa22 f505 	lsr.w	r5, r2, r5
 80120c4:	4334      	orrs	r4, r6
 80120c6:	432c      	orrs	r4, r5
 80120c8:	409a      	lsls	r2, r3
 80120ca:	ea20 0202 	bic.w	r2, r0, r2
 80120ce:	ea21 0404 	bic.w	r4, r1, r4
 80120d2:	4322      	orrs	r2, r4
 80120d4:	f1a3 0420 	sub.w	r4, r3, #32
 80120d8:	f1c3 0220 	rsb	r2, r3, #32
 80120dc:	d10c      	bne.n	80120f8 <checkint+0x64>
 80120de:	40d8      	lsrs	r0, r3
 80120e0:	fa01 f302 	lsl.w	r3, r1, r2
 80120e4:	4318      	orrs	r0, r3
 80120e6:	40e1      	lsrs	r1, r4
 80120e8:	4308      	orrs	r0, r1
 80120ea:	f000 0001 	and.w	r0, r0, #1
 80120ee:	f1d0 0002 	rsbs	r0, r0, #2
 80120f2:	bd70      	pop	{r4, r5, r6, pc}
 80120f4:	2002      	movs	r0, #2
 80120f6:	e7fc      	b.n	80120f2 <checkint+0x5e>
 80120f8:	2000      	movs	r0, #0
 80120fa:	e7fa      	b.n	80120f2 <checkint+0x5e>
 80120fc:	0000      	movs	r0, r0
	...

08012100 <pow>:
 8012100:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012104:	ee10 4a90 	vmov	r4, s1
 8012108:	ed2d 8b0a 	vpush	{d8-d12}
 801210c:	ea4f 5814 	mov.w	r8, r4, lsr #20
 8012110:	ee11 aa90 	vmov	sl, s3
 8012114:	f108 32ff 	add.w	r2, r8, #4294967295
 8012118:	f240 73fd 	movw	r3, #2045	@ 0x7fd
 801211c:	429a      	cmp	r2, r3
 801211e:	ee10 5a10 	vmov	r5, s0
 8012122:	ee11 0a10 	vmov	r0, s2
 8012126:	b087      	sub	sp, #28
 8012128:	46c4      	mov	ip, r8
 801212a:	ea4f 561a 	mov.w	r6, sl, lsr #20
 801212e:	d806      	bhi.n	801213e <pow+0x3e>
 8012130:	f3c6 030a 	ubfx	r3, r6, #0, #11
 8012134:	f2a3 33be 	subw	r3, r3, #958	@ 0x3be
 8012138:	2b7f      	cmp	r3, #127	@ 0x7f
 801213a:	f240 8157 	bls.w	80123ec <pow+0x2ec>
 801213e:	1802      	adds	r2, r0, r0
 8012140:	eb4a 010a 	adc.w	r1, sl, sl
 8012144:	f06f 0b01 	mvn.w	fp, #1
 8012148:	1e57      	subs	r7, r2, #1
 801214a:	f141 33ff 	adc.w	r3, r1, #4294967295
 801214e:	f46f 1e00 	mvn.w	lr, #2097152	@ 0x200000
 8012152:	45bb      	cmp	fp, r7
 8012154:	eb7e 0303 	sbcs.w	r3, lr, r3
 8012158:	d242      	bcs.n	80121e0 <pow+0xe0>
 801215a:	ea52 0301 	orrs.w	r3, r2, r1
 801215e:	f04f 0300 	mov.w	r3, #0
 8012162:	d10c      	bne.n	801217e <pow+0x7e>
 8012164:	196d      	adds	r5, r5, r5
 8012166:	f484 2400 	eor.w	r4, r4, #524288	@ 0x80000
 801216a:	4164      	adcs	r4, r4
 801216c:	42ab      	cmp	r3, r5
 801216e:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8012172:	41a3      	sbcs	r3, r4
 8012174:	f0c0 808f 	bcc.w	8012296 <pow+0x196>
 8012178:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 801217c:	e02b      	b.n	80121d6 <pow+0xd6>
 801217e:	4ed4      	ldr	r6, [pc, #848]	@ (80124d0 <pow+0x3d0>)
 8012180:	42b4      	cmp	r4, r6
 8012182:	bf08      	it	eq
 8012184:	429d      	cmpeq	r5, r3
 8012186:	d109      	bne.n	801219c <pow+0x9c>
 8012188:	1800      	adds	r0, r0, r0
 801218a:	f48a 2a00 	eor.w	sl, sl, #524288	@ 0x80000
 801218e:	eb4a 0a0a 	adc.w	sl, sl, sl
 8012192:	4283      	cmp	r3, r0
 8012194:	4bcf      	ldr	r3, [pc, #828]	@ (80124d4 <pow+0x3d4>)
 8012196:	eb73 030a 	sbcs.w	r3, r3, sl
 801219a:	e7eb      	b.n	8012174 <pow+0x74>
 801219c:	196d      	adds	r5, r5, r5
 801219e:	48ce      	ldr	r0, [pc, #824]	@ (80124d8 <pow+0x3d8>)
 80121a0:	4164      	adcs	r4, r4
 80121a2:	42ab      	cmp	r3, r5
 80121a4:	eb70 0604 	sbcs.w	r6, r0, r4
 80121a8:	d375      	bcc.n	8012296 <pow+0x196>
 80121aa:	4281      	cmp	r1, r0
 80121ac:	bf08      	it	eq
 80121ae:	429a      	cmpeq	r2, r3
 80121b0:	d171      	bne.n	8012296 <pow+0x196>
 80121b2:	4aca      	ldr	r2, [pc, #808]	@ (80124dc <pow+0x3dc>)
 80121b4:	4294      	cmp	r4, r2
 80121b6:	bf08      	it	eq
 80121b8:	429d      	cmpeq	r5, r3
 80121ba:	d0dd      	beq.n	8012178 <pow+0x78>
 80121bc:	4294      	cmp	r4, r2
 80121be:	ea6f 0a0a 	mvn.w	sl, sl
 80121c2:	bf34      	ite	cc
 80121c4:	2400      	movcc	r4, #0
 80121c6:	2401      	movcs	r4, #1
 80121c8:	ea4f 7ada 	mov.w	sl, sl, lsr #31
 80121cc:	4554      	cmp	r4, sl
 80121ce:	f040 81dc 	bne.w	801258a <pow+0x48a>
 80121d2:	ee21 0b01 	vmul.f64	d0, d1, d1
 80121d6:	b007      	add	sp, #28
 80121d8:	ecbd 8b0a 	vpop	{d8-d12}
 80121dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80121e0:	196f      	adds	r7, r5, r5
 80121e2:	eb44 0904 	adc.w	r9, r4, r4
 80121e6:	1e7a      	subs	r2, r7, #1
 80121e8:	f169 0300 	sbc.w	r3, r9, #0
 80121ec:	4593      	cmp	fp, r2
 80121ee:	eb7e 0303 	sbcs.w	r3, lr, r3
 80121f2:	d225      	bcs.n	8012240 <pow+0x140>
 80121f4:	ee20 0b00 	vmul.f64	d0, d0, d0
 80121f8:	2c00      	cmp	r4, #0
 80121fa:	da13      	bge.n	8012224 <pow+0x124>
 80121fc:	4651      	mov	r1, sl
 80121fe:	f7ff ff49 	bl	8012094 <checkint>
 8012202:	2801      	cmp	r0, #1
 8012204:	d10e      	bne.n	8012224 <pow+0x124>
 8012206:	eeb1 0b40 	vneg.f64	d0, d0
 801220a:	ea57 0909 	orrs.w	r9, r7, r9
 801220e:	d10b      	bne.n	8012228 <pow+0x128>
 8012210:	f1ba 0f00 	cmp.w	sl, #0
 8012214:	dadf      	bge.n	80121d6 <pow+0xd6>
 8012216:	b007      	add	sp, #28
 8012218:	ecbd 8b0a 	vpop	{d8-d12}
 801221c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012220:	f000 b9ee 	b.w	8012600 <__math_divzero>
 8012224:	2000      	movs	r0, #0
 8012226:	e7f0      	b.n	801220a <pow+0x10a>
 8012228:	f1ba 0f00 	cmp.w	sl, #0
 801222c:	dad3      	bge.n	80121d6 <pow+0xd6>
 801222e:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8012232:	ee86 7b00 	vdiv.f64	d7, d6, d0
 8012236:	ed8d 7b00 	vstr	d7, [sp]
 801223a:	ed9d 0b00 	vldr	d0, [sp]
 801223e:	e7ca      	b.n	80121d6 <pow+0xd6>
 8012240:	2c00      	cmp	r4, #0
 8012242:	da2b      	bge.n	801229c <pow+0x19c>
 8012244:	4651      	mov	r1, sl
 8012246:	f7ff ff25 	bl	8012094 <checkint>
 801224a:	b930      	cbnz	r0, 801225a <pow+0x15a>
 801224c:	b007      	add	sp, #28
 801224e:	ecbd 8b0a 	vpop	{d8-d12}
 8012252:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012256:	f000 b9eb 	b.w	8012630 <__math_invalid>
 801225a:	1e41      	subs	r1, r0, #1
 801225c:	4248      	negs	r0, r1
 801225e:	4148      	adcs	r0, r1
 8012260:	0480      	lsls	r0, r0, #18
 8012262:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8012266:	f3c8 0c0a 	ubfx	ip, r8, #0, #11
 801226a:	f3c6 020a 	ubfx	r2, r6, #0, #11
 801226e:	f2a2 33be 	subw	r3, r2, #958	@ 0x3be
 8012272:	2b7f      	cmp	r3, #127	@ 0x7f
 8012274:	d92d      	bls.n	80122d2 <pow+0x1d2>
 8012276:	4b96      	ldr	r3, [pc, #600]	@ (80124d0 <pow+0x3d0>)
 8012278:	2000      	movs	r0, #0
 801227a:	429c      	cmp	r4, r3
 801227c:	bf08      	it	eq
 801227e:	4285      	cmpeq	r5, r0
 8012280:	f43f af7a 	beq.w	8012178 <pow+0x78>
 8012284:	f240 31bd 	movw	r1, #957	@ 0x3bd
 8012288:	428a      	cmp	r2, r1
 801228a:	d80c      	bhi.n	80122a6 <pow+0x1a6>
 801228c:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 8012290:	42a8      	cmp	r0, r5
 8012292:	41a3      	sbcs	r3, r4
 8012294:	d204      	bcs.n	80122a0 <pow+0x1a0>
 8012296:	ee31 0b00 	vadd.f64	d0, d1, d0
 801229a:	e79c      	b.n	80121d6 <pow+0xd6>
 801229c:	2000      	movs	r0, #0
 801229e:	e7e4      	b.n	801226a <pow+0x16a>
 80122a0:	ee30 0b41 	vsub.f64	d0, d0, d1
 80122a4:	e797      	b.n	80121d6 <pow+0xd6>
 80122a6:	2d01      	cmp	r5, #1
 80122a8:	eb74 0303 	sbcs.w	r3, r4, r3
 80122ac:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 80122b0:	bf34      	ite	cc
 80122b2:	2301      	movcc	r3, #1
 80122b4:	2300      	movcs	r3, #0
 80122b6:	4296      	cmp	r6, r2
 80122b8:	bf8c      	ite	hi
 80122ba:	2600      	movhi	r6, #0
 80122bc:	2601      	movls	r6, #1
 80122be:	42b3      	cmp	r3, r6
 80122c0:	f000 809c 	beq.w	80123fc <pow+0x2fc>
 80122c4:	b007      	add	sp, #28
 80122c6:	ecbd 8b0a 	vpop	{d8-d12}
 80122ca:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80122ce:	f000 b98f 	b.w	80125f0 <__math_oflow>
 80122d2:	f1bc 0f00 	cmp.w	ip, #0
 80122d6:	d10a      	bne.n	80122ee <pow+0x1ee>
 80122d8:	ed9f 7b79 	vldr	d7, [pc, #484]	@ 80124c0 <pow+0x3c0>
 80122dc:	ee20 7b07 	vmul.f64	d7, d0, d7
 80122e0:	ec53 2b17 	vmov	r2, r3, d7
 80122e4:	f023 4400 	bic.w	r4, r3, #2147483648	@ 0x80000000
 80122e8:	4615      	mov	r5, r2
 80122ea:	f1a4 7450 	sub.w	r4, r4, #54525952	@ 0x3400000
 80122ee:	4a7c      	ldr	r2, [pc, #496]	@ (80124e0 <pow+0x3e0>)
 80122f0:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 80122f4:	4422      	add	r2, r4
 80122f6:	1513      	asrs	r3, r2, #20
 80122f8:	f3c2 3146 	ubfx	r1, r2, #13, #7
 80122fc:	ee03 3a10 	vmov	s6, r3
 8012300:	0d12      	lsrs	r2, r2, #20
 8012302:	4b78      	ldr	r3, [pc, #480]	@ (80124e4 <pow+0x3e4>)
 8012304:	0512      	lsls	r2, r2, #20
 8012306:	eb03 1641 	add.w	r6, r3, r1, lsl #5
 801230a:	1aa7      	subs	r7, r4, r2
 801230c:	eb03 1241 	add.w	r2, r3, r1, lsl #5
 8012310:	ed92 5b12 	vldr	d5, [r2, #72]	@ 0x48
 8012314:	ed96 7b18 	vldr	d7, [r6, #96]	@ 0x60
 8012318:	1e2e      	subs	r6, r5, #0
 801231a:	ec47 6b14 	vmov	d4, r6, r7
 801231e:	ed92 2b16 	vldr	d2, [r2, #88]	@ 0x58
 8012322:	eea4 6b05 	vfma.f64	d6, d4, d5
 8012326:	ed93 5b00 	vldr	d5, [r3]
 801232a:	eeb8 3bc3 	vcvt.f64.s32	d3, s6
 801232e:	eea3 2b05 	vfma.f64	d2, d3, d5
 8012332:	ed93 5b02 	vldr	d5, [r3, #8]
 8012336:	ee36 4b02 	vadd.f64	d4, d6, d2
 801233a:	ee32 2b44 	vsub.f64	d2, d2, d4
 801233e:	eea3 7b05 	vfma.f64	d7, d3, d5
 8012342:	ed93 5b04 	vldr	d5, [r3, #16]
 8012346:	ee32 2b06 	vadd.f64	d2, d2, d6
 801234a:	ee37 7b02 	vadd.f64	d7, d7, d2
 801234e:	ee26 5b05 	vmul.f64	d5, d6, d5
 8012352:	ee26 0b05 	vmul.f64	d0, d6, d5
 8012356:	ee34 8b00 	vadd.f64	d8, d4, d0
 801235a:	eeb0 9b40 	vmov.f64	d9, d0
 801235e:	ee34 4b48 	vsub.f64	d4, d4, d8
 8012362:	ee96 9b05 	vfnms.f64	d9, d6, d5
 8012366:	ee34 ab00 	vadd.f64	d10, d4, d0
 801236a:	ed93 5b06 	vldr	d5, [r3, #24]
 801236e:	ee26 bb00 	vmul.f64	d11, d6, d0
 8012372:	ee37 7b09 	vadd.f64	d7, d7, d9
 8012376:	ed93 4b08 	vldr	d4, [r3, #32]
 801237a:	ee37 7b0a 	vadd.f64	d7, d7, d10
 801237e:	ed93 3b0c 	vldr	d3, [r3, #48]	@ 0x30
 8012382:	eea6 5b04 	vfma.f64	d5, d6, d4
 8012386:	ed93 4b0a 	vldr	d4, [r3, #40]	@ 0x28
 801238a:	ed93 cb10 	vldr	d12, [r3, #64]	@ 0x40
 801238e:	eea6 4b03 	vfma.f64	d4, d6, d3
 8012392:	ed93 3b0e 	vldr	d3, [r3, #56]	@ 0x38
 8012396:	eea6 3b0c 	vfma.f64	d3, d6, d12
 801239a:	eea0 4b03 	vfma.f64	d4, d0, d3
 801239e:	eea0 5b04 	vfma.f64	d5, d0, d4
 80123a2:	eeab 7b05 	vfma.f64	d7, d11, d5
 80123a6:	ee38 4b07 	vadd.f64	d4, d8, d7
 80123aa:	ee21 6b04 	vmul.f64	d6, d1, d4
 80123ae:	ee16 3a90 	vmov	r3, s13
 80123b2:	eeb0 5b46 	vmov.f64	d5, d6
 80123b6:	f3c3 560a 	ubfx	r6, r3, #20, #11
 80123ba:	f46f 7272 	mvn.w	r2, #968	@ 0x3c8
 80123be:	18b2      	adds	r2, r6, r2
 80123c0:	2a3e      	cmp	r2, #62	@ 0x3e
 80123c2:	ee91 5b04 	vfnms.f64	d5, d1, d4
 80123c6:	ee38 8b44 	vsub.f64	d8, d8, d4
 80123ca:	ee38 8b07 	vadd.f64	d8, d8, d7
 80123ce:	eea1 5b08 	vfma.f64	d5, d1, d8
 80123d2:	d91b      	bls.n	801240c <pow+0x30c>
 80123d4:	2a00      	cmp	r2, #0
 80123d6:	da0b      	bge.n	80123f0 <pow+0x2f0>
 80123d8:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 80123dc:	ee36 0b00 	vadd.f64	d0, d6, d0
 80123e0:	2800      	cmp	r0, #0
 80123e2:	f43f aef8 	beq.w	80121d6 <pow+0xd6>
 80123e6:	eeb1 0b40 	vneg.f64	d0, d0
 80123ea:	e6f4      	b.n	80121d6 <pow+0xd6>
 80123ec:	2000      	movs	r0, #0
 80123ee:	e77e      	b.n	80122ee <pow+0x1ee>
 80123f0:	f5b6 6f81 	cmp.w	r6, #1032	@ 0x408
 80123f4:	d909      	bls.n	801240a <pow+0x30a>
 80123f6:	2b00      	cmp	r3, #0
 80123f8:	f6bf af64 	bge.w	80122c4 <pow+0x1c4>
 80123fc:	b007      	add	sp, #28
 80123fe:	ecbd 8b0a 	vpop	{d8-d12}
 8012402:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012406:	f000 b8eb 	b.w	80125e0 <__math_uflow>
 801240a:	2600      	movs	r6, #0
 801240c:	4936      	ldr	r1, [pc, #216]	@ (80124e8 <pow+0x3e8>)
 801240e:	ed91 4b02 	vldr	d4, [r1, #8]
 8012412:	ed91 3b00 	vldr	d3, [r1]
 8012416:	eeb0 7b44 	vmov.f64	d7, d4
 801241a:	eea6 7b03 	vfma.f64	d7, d6, d3
 801241e:	ee17 5a10 	vmov	r5, s14
 8012422:	ee37 7b44 	vsub.f64	d7, d7, d4
 8012426:	ed91 4b04 	vldr	d4, [r1, #16]
 801242a:	f005 037f 	and.w	r3, r5, #127	@ 0x7f
 801242e:	eea7 6b04 	vfma.f64	d6, d7, d4
 8012432:	ed91 4b06 	vldr	d4, [r1, #24]
 8012436:	18dc      	adds	r4, r3, r3
 8012438:	f104 030f 	add.w	r3, r4, #15
 801243c:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 8012440:	eea7 6b04 	vfma.f64	d6, d7, d4
 8012444:	ed91 3b0a 	vldr	d3, [r1, #40]	@ 0x28
 8012448:	ee35 5b06 	vadd.f64	d5, d5, d6
 801244c:	ee25 6b05 	vmul.f64	d6, d5, d5
 8012450:	ed94 7b1c 	vldr	d7, [r4, #112]	@ 0x70
 8012454:	ed91 4b08 	vldr	d4, [r1, #32]
 8012458:	ee35 7b07 	vadd.f64	d7, d5, d7
 801245c:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 8012460:	eea5 4b03 	vfma.f64	d4, d5, d3
 8012464:	ed91 3b0e 	vldr	d3, [r1, #56]	@ 0x38
 8012468:	eea6 7b04 	vfma.f64	d7, d6, d4
 801246c:	ee26 6b06 	vmul.f64	d6, d6, d6
 8012470:	ed91 4b0c 	vldr	d4, [r1, #48]	@ 0x30
 8012474:	f851 c033 	ldr.w	ip, [r1, r3, lsl #3]
 8012478:	f8d2 e004 	ldr.w	lr, [r2, #4]
 801247c:	eea5 4b03 	vfma.f64	d4, d5, d3
 8012480:	1940      	adds	r0, r0, r5
 8012482:	2700      	movs	r7, #0
 8012484:	eb17 020c 	adds.w	r2, r7, ip
 8012488:	eb0e 3340 	add.w	r3, lr, r0, lsl #13
 801248c:	eea6 7b04 	vfma.f64	d7, d6, d4
 8012490:	2e00      	cmp	r6, #0
 8012492:	d175      	bne.n	8012580 <pow+0x480>
 8012494:	42bd      	cmp	r5, r7
 8012496:	db29      	blt.n	80124ec <pow+0x3ec>
 8012498:	f103 4140 	add.w	r1, r3, #3221225472	@ 0xc0000000
 801249c:	f501 0170 	add.w	r1, r1, #15728640	@ 0xf00000
 80124a0:	4610      	mov	r0, r2
 80124a2:	ec41 0b10 	vmov	d0, r0, r1
 80124a6:	eea7 0b00 	vfma.f64	d0, d7, d0
 80124aa:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 80124c8 <pow+0x3c8>
 80124ae:	ee20 0b07 	vmul.f64	d0, d0, d7
 80124b2:	b007      	add	sp, #28
 80124b4:	ecbd 8b0a 	vpop	{d8-d12}
 80124b8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80124bc:	f000 b8d0 	b.w	8012660 <__math_check_oflow>
 80124c0:	00000000 	.word	0x00000000
 80124c4:	43300000 	.word	0x43300000
 80124c8:	00000000 	.word	0x00000000
 80124cc:	7f000000 	.word	0x7f000000
 80124d0:	3ff00000 	.word	0x3ff00000
 80124d4:	fff00000 	.word	0xfff00000
 80124d8:	ffe00000 	.word	0xffe00000
 80124dc:	7fe00000 	.word	0x7fe00000
 80124e0:	c0196aab 	.word	0xc0196aab
 80124e4:	08012b20 	.word	0x08012b20
 80124e8:	08013b68 	.word	0x08013b68
 80124ec:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 80124f0:	f501 1100 	add.w	r1, r1, #2097152	@ 0x200000
 80124f4:	4610      	mov	r0, r2
 80124f6:	ec41 0b15 	vmov	d5, r0, r1
 80124fa:	eeb7 3b00 	vmov.f64	d3, #112	@ 0x3f800000  1.0
 80124fe:	ee27 6b05 	vmul.f64	d6, d7, d5
 8012502:	ee35 7b06 	vadd.f64	d7, d5, d6
 8012506:	eeb0 4bc7 	vabs.f64	d4, d7
 801250a:	eeb4 4bc3 	vcmpe.f64	d4, d3
 801250e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012512:	ed9f 0b1f 	vldr	d0, [pc, #124]	@ 8012590 <pow+0x490>
 8012516:	d52a      	bpl.n	801256e <pow+0x46e>
 8012518:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 801251c:	ee35 5b47 	vsub.f64	d5, d5, d7
 8012520:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012524:	ee35 5b06 	vadd.f64	d5, d5, d6
 8012528:	eebf 4b00 	vmov.f64	d4, #240	@ 0xbf800000 -1.0
 801252c:	bf58      	it	pl
 801252e:	eeb0 4b43 	vmovpl.f64	d4, d3
 8012532:	ee37 3b04 	vadd.f64	d3, d7, d4
 8012536:	ee34 6b43 	vsub.f64	d6, d4, d3
 801253a:	ee36 6b07 	vadd.f64	d6, d6, d7
 801253e:	ee36 6b05 	vadd.f64	d6, d6, d5
 8012542:	ee36 6b03 	vadd.f64	d6, d6, d3
 8012546:	ee36 7b44 	vsub.f64	d7, d6, d4
 801254a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801254e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012552:	d104      	bne.n	801255e <pow+0x45e>
 8012554:	4632      	mov	r2, r6
 8012556:	f001 4300 	and.w	r3, r1, #2147483648	@ 0x80000000
 801255a:	ec43 2b17 	vmov	d7, r2, r3
 801255e:	ed8d 0b02 	vstr	d0, [sp, #8]
 8012562:	ed9d 6b02 	vldr	d6, [sp, #8]
 8012566:	ee26 6b00 	vmul.f64	d6, d6, d0
 801256a:	ed8d 6b04 	vstr	d6, [sp, #16]
 801256e:	ee27 0b00 	vmul.f64	d0, d7, d0
 8012572:	b007      	add	sp, #28
 8012574:	ecbd 8b0a 	vpop	{d8-d12}
 8012578:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801257c:	f000 b867 	b.w	801264e <__math_check_uflow>
 8012580:	ec43 2b10 	vmov	d0, r2, r3
 8012584:	eea7 0b00 	vfma.f64	d0, d7, d0
 8012588:	e625      	b.n	80121d6 <pow+0xd6>
 801258a:	ed9f 0b03 	vldr	d0, [pc, #12]	@ 8012598 <pow+0x498>
 801258e:	e622      	b.n	80121d6 <pow+0xd6>
 8012590:	00000000 	.word	0x00000000
 8012594:	00100000 	.word	0x00100000
	...

080125a0 <with_errno>:
 80125a0:	b510      	push	{r4, lr}
 80125a2:	ed2d 8b02 	vpush	{d8}
 80125a6:	eeb0 8b40 	vmov.f64	d8, d0
 80125aa:	4604      	mov	r4, r0
 80125ac:	f7fc fab0 	bl	800eb10 <__errno>
 80125b0:	eeb0 0b48 	vmov.f64	d0, d8
 80125b4:	ecbd 8b02 	vpop	{d8}
 80125b8:	6004      	str	r4, [r0, #0]
 80125ba:	bd10      	pop	{r4, pc}

080125bc <xflow>:
 80125bc:	b082      	sub	sp, #8
 80125be:	b158      	cbz	r0, 80125d8 <xflow+0x1c>
 80125c0:	eeb1 7b40 	vneg.f64	d7, d0
 80125c4:	ed8d 7b00 	vstr	d7, [sp]
 80125c8:	ed9d 7b00 	vldr	d7, [sp]
 80125cc:	2022      	movs	r0, #34	@ 0x22
 80125ce:	ee20 0b07 	vmul.f64	d0, d0, d7
 80125d2:	b002      	add	sp, #8
 80125d4:	f7ff bfe4 	b.w	80125a0 <with_errno>
 80125d8:	eeb0 7b40 	vmov.f64	d7, d0
 80125dc:	e7f2      	b.n	80125c4 <xflow+0x8>
	...

080125e0 <__math_uflow>:
 80125e0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80125e8 <__math_uflow+0x8>
 80125e4:	f7ff bfea 	b.w	80125bc <xflow>
 80125e8:	00000000 	.word	0x00000000
 80125ec:	10000000 	.word	0x10000000

080125f0 <__math_oflow>:
 80125f0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80125f8 <__math_oflow+0x8>
 80125f4:	f7ff bfe2 	b.w	80125bc <xflow>
 80125f8:	00000000 	.word	0x00000000
 80125fc:	70000000 	.word	0x70000000

08012600 <__math_divzero>:
 8012600:	b082      	sub	sp, #8
 8012602:	2800      	cmp	r0, #0
 8012604:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 8012608:	eeb7 7b00 	vmov.f64	d7, #112	@ 0x3f800000  1.0
 801260c:	fe07 7b06 	vseleq.f64	d7, d7, d6
 8012610:	ed8d 7b00 	vstr	d7, [sp]
 8012614:	ed9d 0b00 	vldr	d0, [sp]
 8012618:	ed9f 7b03 	vldr	d7, [pc, #12]	@ 8012628 <__math_divzero+0x28>
 801261c:	2022      	movs	r0, #34	@ 0x22
 801261e:	ee80 0b07 	vdiv.f64	d0, d0, d7
 8012622:	b002      	add	sp, #8
 8012624:	f7ff bfbc 	b.w	80125a0 <with_errno>
	...

08012630 <__math_invalid>:
 8012630:	eeb0 7b40 	vmov.f64	d7, d0
 8012634:	eeb4 7b47 	vcmp.f64	d7, d7
 8012638:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801263c:	ee30 6b40 	vsub.f64	d6, d0, d0
 8012640:	ee86 0b06 	vdiv.f64	d0, d6, d6
 8012644:	d602      	bvs.n	801264c <__math_invalid+0x1c>
 8012646:	2021      	movs	r0, #33	@ 0x21
 8012648:	f7ff bfaa 	b.w	80125a0 <with_errno>
 801264c:	4770      	bx	lr

0801264e <__math_check_uflow>:
 801264e:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8012652:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012656:	d102      	bne.n	801265e <__math_check_uflow+0x10>
 8012658:	2022      	movs	r0, #34	@ 0x22
 801265a:	f7ff bfa1 	b.w	80125a0 <with_errno>
 801265e:	4770      	bx	lr

08012660 <__math_check_oflow>:
 8012660:	ed9f 6b07 	vldr	d6, [pc, #28]	@ 8012680 <__math_check_oflow+0x20>
 8012664:	eeb0 7bc0 	vabs.f64	d7, d0
 8012668:	eeb4 7b46 	vcmp.f64	d7, d6
 801266c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012670:	dd02      	ble.n	8012678 <__math_check_oflow+0x18>
 8012672:	2022      	movs	r0, #34	@ 0x22
 8012674:	f7ff bf94 	b.w	80125a0 <with_errno>
 8012678:	4770      	bx	lr
 801267a:	bf00      	nop
 801267c:	f3af 8000 	nop.w
 8012680:	ffffffff 	.word	0xffffffff
 8012684:	7fefffff 	.word	0x7fefffff

08012688 <_init>:
 8012688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801268a:	bf00      	nop
 801268c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801268e:	bc08      	pop	{r3}
 8012690:	469e      	mov	lr, r3
 8012692:	4770      	bx	lr

08012694 <_fini>:
 8012694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012696:	bf00      	nop
 8012698:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801269a:	bc08      	pop	{r3}
 801269c:	469e      	mov	lr, r3
 801269e:	4770      	bx	lr
