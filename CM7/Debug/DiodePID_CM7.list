
DiodePID_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013650  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001ef8  080138f0  080138f0  000148f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080157e8  080157e8  000171e8  2**0
                  CONTENTS
  4 .ARM          00000008  080157e8  080157e8  000167e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080157f0  080157f0  000171e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080157f0  080157f0  000167f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080157f4  080157f4  000167f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e8  24000000  080157f8  00017000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003e8  240001e8  080159e0  000171e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  240005d0  080159e0  000175d0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000171e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00023b4d  00000000  00000000  00017216  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000438c  00000000  00000000  0003ad63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ab8  00000000  00000000  0003f0f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000014c6  00000000  00000000  00040ba8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003f983  00000000  00000000  0004206e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00027303  00000000  00000000  000819f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0019eecf  00000000  00000000  000a8cf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00247bc3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008810  00000000  00000000  00247c08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004c  00000000  00000000  00250418  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001e8 	.word	0x240001e8
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080138d8 	.word	0x080138d8

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001ec 	.word	0x240001ec
 80002dc:	080138d8 	.word	0x080138d8

080002e0 <strcmp>:
 80002e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002e8:	2a01      	cmp	r2, #1
 80002ea:	bf28      	it	cs
 80002ec:	429a      	cmpcs	r2, r3
 80002ee:	d0f7      	beq.n	80002e0 <strcmp>
 80002f0:	1ad0      	subs	r0, r2, r3
 80002f2:	4770      	bx	lr
	...

08000300 <memchr>:
 8000300:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000304:	2a10      	cmp	r2, #16
 8000306:	db2b      	blt.n	8000360 <memchr+0x60>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	d008      	beq.n	8000320 <memchr+0x20>
 800030e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000312:	3a01      	subs	r2, #1
 8000314:	428b      	cmp	r3, r1
 8000316:	d02d      	beq.n	8000374 <memchr+0x74>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	b342      	cbz	r2, 8000370 <memchr+0x70>
 800031e:	d1f6      	bne.n	800030e <memchr+0xe>
 8000320:	b4f0      	push	{r4, r5, r6, r7}
 8000322:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000326:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800032a:	f022 0407 	bic.w	r4, r2, #7
 800032e:	f07f 0700 	mvns.w	r7, #0
 8000332:	2300      	movs	r3, #0
 8000334:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000338:	3c08      	subs	r4, #8
 800033a:	ea85 0501 	eor.w	r5, r5, r1
 800033e:	ea86 0601 	eor.w	r6, r6, r1
 8000342:	fa85 f547 	uadd8	r5, r5, r7
 8000346:	faa3 f587 	sel	r5, r3, r7
 800034a:	fa86 f647 	uadd8	r6, r6, r7
 800034e:	faa5 f687 	sel	r6, r5, r7
 8000352:	b98e      	cbnz	r6, 8000378 <memchr+0x78>
 8000354:	d1ee      	bne.n	8000334 <memchr+0x34>
 8000356:	bcf0      	pop	{r4, r5, r6, r7}
 8000358:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800035c:	f002 0207 	and.w	r2, r2, #7
 8000360:	b132      	cbz	r2, 8000370 <memchr+0x70>
 8000362:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000366:	3a01      	subs	r2, #1
 8000368:	ea83 0301 	eor.w	r3, r3, r1
 800036c:	b113      	cbz	r3, 8000374 <memchr+0x74>
 800036e:	d1f8      	bne.n	8000362 <memchr+0x62>
 8000370:	2000      	movs	r0, #0
 8000372:	4770      	bx	lr
 8000374:	3801      	subs	r0, #1
 8000376:	4770      	bx	lr
 8000378:	2d00      	cmp	r5, #0
 800037a:	bf06      	itte	eq
 800037c:	4635      	moveq	r5, r6
 800037e:	3803      	subeq	r0, #3
 8000380:	3807      	subne	r0, #7
 8000382:	f015 0f01 	tst.w	r5, #1
 8000386:	d107      	bne.n	8000398 <memchr+0x98>
 8000388:	3001      	adds	r0, #1
 800038a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800038e:	bf02      	ittt	eq
 8000390:	3001      	addeq	r0, #1
 8000392:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000396:	3001      	addeq	r0, #1
 8000398:	bcf0      	pop	{r4, r5, r6, r7}
 800039a:	3801      	subs	r0, #1
 800039c:	4770      	bx	lr
 800039e:	bf00      	nop

080003a0 <strlen>:
 80003a0:	4603      	mov	r3, r0
 80003a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80003a6:	2a00      	cmp	r2, #0
 80003a8:	d1fb      	bne.n	80003a2 <strlen+0x2>
 80003aa:	1a18      	subs	r0, r3, r0
 80003ac:	3801      	subs	r0, #1
 80003ae:	4770      	bx	lr

080003b0 <__aeabi_drsub>:
 80003b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80003b4:	e002      	b.n	80003bc <__adddf3>
 80003b6:	bf00      	nop

080003b8 <__aeabi_dsub>:
 80003b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080003bc <__adddf3>:
 80003bc:	b530      	push	{r4, r5, lr}
 80003be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003c6:	ea94 0f05 	teq	r4, r5
 80003ca:	bf08      	it	eq
 80003cc:	ea90 0f02 	teqeq	r0, r2
 80003d0:	bf1f      	itttt	ne
 80003d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e2:	f000 80e2 	beq.w	80005aa <__adddf3+0x1ee>
 80003e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ee:	bfb8      	it	lt
 80003f0:	426d      	neglt	r5, r5
 80003f2:	dd0c      	ble.n	800040e <__adddf3+0x52>
 80003f4:	442c      	add	r4, r5
 80003f6:	ea80 0202 	eor.w	r2, r0, r2
 80003fa:	ea81 0303 	eor.w	r3, r1, r3
 80003fe:	ea82 0000 	eor.w	r0, r2, r0
 8000402:	ea83 0101 	eor.w	r1, r3, r1
 8000406:	ea80 0202 	eor.w	r2, r0, r2
 800040a:	ea81 0303 	eor.w	r3, r1, r3
 800040e:	2d36      	cmp	r5, #54	@ 0x36
 8000410:	bf88      	it	hi
 8000412:	bd30      	pophi	{r4, r5, pc}
 8000414:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000418:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800041c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000420:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000424:	d002      	beq.n	800042c <__adddf3+0x70>
 8000426:	4240      	negs	r0, r0
 8000428:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800042c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000430:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000434:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000438:	d002      	beq.n	8000440 <__adddf3+0x84>
 800043a:	4252      	negs	r2, r2
 800043c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000440:	ea94 0f05 	teq	r4, r5
 8000444:	f000 80a7 	beq.w	8000596 <__adddf3+0x1da>
 8000448:	f1a4 0401 	sub.w	r4, r4, #1
 800044c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000450:	db0d      	blt.n	800046e <__adddf3+0xb2>
 8000452:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000456:	fa22 f205 	lsr.w	r2, r2, r5
 800045a:	1880      	adds	r0, r0, r2
 800045c:	f141 0100 	adc.w	r1, r1, #0
 8000460:	fa03 f20e 	lsl.w	r2, r3, lr
 8000464:	1880      	adds	r0, r0, r2
 8000466:	fa43 f305 	asr.w	r3, r3, r5
 800046a:	4159      	adcs	r1, r3
 800046c:	e00e      	b.n	800048c <__adddf3+0xd0>
 800046e:	f1a5 0520 	sub.w	r5, r5, #32
 8000472:	f10e 0e20 	add.w	lr, lr, #32
 8000476:	2a01      	cmp	r2, #1
 8000478:	fa03 fc0e 	lsl.w	ip, r3, lr
 800047c:	bf28      	it	cs
 800047e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000482:	fa43 f305 	asr.w	r3, r3, r5
 8000486:	18c0      	adds	r0, r0, r3
 8000488:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800048c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000490:	d507      	bpl.n	80004a2 <__adddf3+0xe6>
 8000492:	f04f 0e00 	mov.w	lr, #0
 8000496:	f1dc 0c00 	rsbs	ip, ip, #0
 800049a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800049e:	eb6e 0101 	sbc.w	r1, lr, r1
 80004a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80004a6:	d31b      	bcc.n	80004e0 <__adddf3+0x124>
 80004a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80004ac:	d30c      	bcc.n	80004c8 <__adddf3+0x10c>
 80004ae:	0849      	lsrs	r1, r1, #1
 80004b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004b8:	f104 0401 	add.w	r4, r4, #1
 80004bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004c4:	f080 809a 	bcs.w	80005fc <__adddf3+0x240>
 80004c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004cc:	bf08      	it	eq
 80004ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004d2:	f150 0000 	adcs.w	r0, r0, #0
 80004d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004da:	ea41 0105 	orr.w	r1, r1, r5
 80004de:	bd30      	pop	{r4, r5, pc}
 80004e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004e4:	4140      	adcs	r0, r0
 80004e6:	eb41 0101 	adc.w	r1, r1, r1
 80004ea:	3c01      	subs	r4, #1
 80004ec:	bf28      	it	cs
 80004ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004f2:	d2e9      	bcs.n	80004c8 <__adddf3+0x10c>
 80004f4:	f091 0f00 	teq	r1, #0
 80004f8:	bf04      	itt	eq
 80004fa:	4601      	moveq	r1, r0
 80004fc:	2000      	moveq	r0, #0
 80004fe:	fab1 f381 	clz	r3, r1
 8000502:	bf08      	it	eq
 8000504:	3320      	addeq	r3, #32
 8000506:	f1a3 030b 	sub.w	r3, r3, #11
 800050a:	f1b3 0220 	subs.w	r2, r3, #32
 800050e:	da0c      	bge.n	800052a <__adddf3+0x16e>
 8000510:	320c      	adds	r2, #12
 8000512:	dd08      	ble.n	8000526 <__adddf3+0x16a>
 8000514:	f102 0c14 	add.w	ip, r2, #20
 8000518:	f1c2 020c 	rsb	r2, r2, #12
 800051c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000520:	fa21 f102 	lsr.w	r1, r1, r2
 8000524:	e00c      	b.n	8000540 <__adddf3+0x184>
 8000526:	f102 0214 	add.w	r2, r2, #20
 800052a:	bfd8      	it	le
 800052c:	f1c2 0c20 	rsble	ip, r2, #32
 8000530:	fa01 f102 	lsl.w	r1, r1, r2
 8000534:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000538:	bfdc      	itt	le
 800053a:	ea41 010c 	orrle.w	r1, r1, ip
 800053e:	4090      	lslle	r0, r2
 8000540:	1ae4      	subs	r4, r4, r3
 8000542:	bfa2      	ittt	ge
 8000544:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000548:	4329      	orrge	r1, r5
 800054a:	bd30      	popge	{r4, r5, pc}
 800054c:	ea6f 0404 	mvn.w	r4, r4
 8000550:	3c1f      	subs	r4, #31
 8000552:	da1c      	bge.n	800058e <__adddf3+0x1d2>
 8000554:	340c      	adds	r4, #12
 8000556:	dc0e      	bgt.n	8000576 <__adddf3+0x1ba>
 8000558:	f104 0414 	add.w	r4, r4, #20
 800055c:	f1c4 0220 	rsb	r2, r4, #32
 8000560:	fa20 f004 	lsr.w	r0, r0, r4
 8000564:	fa01 f302 	lsl.w	r3, r1, r2
 8000568:	ea40 0003 	orr.w	r0, r0, r3
 800056c:	fa21 f304 	lsr.w	r3, r1, r4
 8000570:	ea45 0103 	orr.w	r1, r5, r3
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f1c4 040c 	rsb	r4, r4, #12
 800057a:	f1c4 0220 	rsb	r2, r4, #32
 800057e:	fa20 f002 	lsr.w	r0, r0, r2
 8000582:	fa01 f304 	lsl.w	r3, r1, r4
 8000586:	ea40 0003 	orr.w	r0, r0, r3
 800058a:	4629      	mov	r1, r5
 800058c:	bd30      	pop	{r4, r5, pc}
 800058e:	fa21 f004 	lsr.w	r0, r1, r4
 8000592:	4629      	mov	r1, r5
 8000594:	bd30      	pop	{r4, r5, pc}
 8000596:	f094 0f00 	teq	r4, #0
 800059a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800059e:	bf06      	itte	eq
 80005a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80005a4:	3401      	addeq	r4, #1
 80005a6:	3d01      	subne	r5, #1
 80005a8:	e74e      	b.n	8000448 <__adddf3+0x8c>
 80005aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ae:	bf18      	it	ne
 80005b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005b4:	d029      	beq.n	800060a <__adddf3+0x24e>
 80005b6:	ea94 0f05 	teq	r4, r5
 80005ba:	bf08      	it	eq
 80005bc:	ea90 0f02 	teqeq	r0, r2
 80005c0:	d005      	beq.n	80005ce <__adddf3+0x212>
 80005c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005c6:	bf04      	itt	eq
 80005c8:	4619      	moveq	r1, r3
 80005ca:	4610      	moveq	r0, r2
 80005cc:	bd30      	pop	{r4, r5, pc}
 80005ce:	ea91 0f03 	teq	r1, r3
 80005d2:	bf1e      	ittt	ne
 80005d4:	2100      	movne	r1, #0
 80005d6:	2000      	movne	r0, #0
 80005d8:	bd30      	popne	{r4, r5, pc}
 80005da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005de:	d105      	bne.n	80005ec <__adddf3+0x230>
 80005e0:	0040      	lsls	r0, r0, #1
 80005e2:	4149      	adcs	r1, r1
 80005e4:	bf28      	it	cs
 80005e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005ea:	bd30      	pop	{r4, r5, pc}
 80005ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005f0:	bf3c      	itt	cc
 80005f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005f6:	bd30      	popcc	{r4, r5, pc}
 80005f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000600:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000604:	f04f 0000 	mov.w	r0, #0
 8000608:	bd30      	pop	{r4, r5, pc}
 800060a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800060e:	bf1a      	itte	ne
 8000610:	4619      	movne	r1, r3
 8000612:	4610      	movne	r0, r2
 8000614:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000618:	bf1c      	itt	ne
 800061a:	460b      	movne	r3, r1
 800061c:	4602      	movne	r2, r0
 800061e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000622:	bf06      	itte	eq
 8000624:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000628:	ea91 0f03 	teqeq	r1, r3
 800062c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000630:	bd30      	pop	{r4, r5, pc}
 8000632:	bf00      	nop

08000634 <__aeabi_ui2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000648:	f04f 0500 	mov.w	r5, #0
 800064c:	f04f 0100 	mov.w	r1, #0
 8000650:	e750      	b.n	80004f4 <__adddf3+0x138>
 8000652:	bf00      	nop

08000654 <__aeabi_i2d>:
 8000654:	f090 0f00 	teq	r0, #0
 8000658:	bf04      	itt	eq
 800065a:	2100      	moveq	r1, #0
 800065c:	4770      	bxeq	lr
 800065e:	b530      	push	{r4, r5, lr}
 8000660:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000664:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000668:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800066c:	bf48      	it	mi
 800066e:	4240      	negmi	r0, r0
 8000670:	f04f 0100 	mov.w	r1, #0
 8000674:	e73e      	b.n	80004f4 <__adddf3+0x138>
 8000676:	bf00      	nop

08000678 <__aeabi_f2d>:
 8000678:	0042      	lsls	r2, r0, #1
 800067a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800067e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000682:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000686:	bf1f      	itttt	ne
 8000688:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800068c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000690:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000694:	4770      	bxne	lr
 8000696:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800069a:	bf08      	it	eq
 800069c:	4770      	bxeq	lr
 800069e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80006a2:	bf04      	itt	eq
 80006a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80006a8:	4770      	bxeq	lr
 80006aa:	b530      	push	{r4, r5, lr}
 80006ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80006b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006b8:	e71c      	b.n	80004f4 <__adddf3+0x138>
 80006ba:	bf00      	nop

080006bc <__aeabi_ul2d>:
 80006bc:	ea50 0201 	orrs.w	r2, r0, r1
 80006c0:	bf08      	it	eq
 80006c2:	4770      	bxeq	lr
 80006c4:	b530      	push	{r4, r5, lr}
 80006c6:	f04f 0500 	mov.w	r5, #0
 80006ca:	e00a      	b.n	80006e2 <__aeabi_l2d+0x16>

080006cc <__aeabi_l2d>:
 80006cc:	ea50 0201 	orrs.w	r2, r0, r1
 80006d0:	bf08      	it	eq
 80006d2:	4770      	bxeq	lr
 80006d4:	b530      	push	{r4, r5, lr}
 80006d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006da:	d502      	bpl.n	80006e2 <__aeabi_l2d+0x16>
 80006dc:	4240      	negs	r0, r0
 80006de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ee:	f43f aed8 	beq.w	80004a2 <__adddf3+0xe6>
 80006f2:	f04f 0203 	mov.w	r2, #3
 80006f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006fa:	bf18      	it	ne
 80006fc:	3203      	addne	r2, #3
 80006fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000702:	bf18      	it	ne
 8000704:	3203      	addne	r2, #3
 8000706:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800070a:	f1c2 0320 	rsb	r3, r2, #32
 800070e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000712:	fa20 f002 	lsr.w	r0, r0, r2
 8000716:	fa01 fe03 	lsl.w	lr, r1, r3
 800071a:	ea40 000e 	orr.w	r0, r0, lr
 800071e:	fa21 f102 	lsr.w	r1, r1, r2
 8000722:	4414      	add	r4, r2
 8000724:	e6bd      	b.n	80004a2 <__adddf3+0xe6>
 8000726:	bf00      	nop

08000728 <__aeabi_uldivmod>:
 8000728:	b953      	cbnz	r3, 8000740 <__aeabi_uldivmod+0x18>
 800072a:	b94a      	cbnz	r2, 8000740 <__aeabi_uldivmod+0x18>
 800072c:	2900      	cmp	r1, #0
 800072e:	bf08      	it	eq
 8000730:	2800      	cmpeq	r0, #0
 8000732:	bf1c      	itt	ne
 8000734:	f04f 31ff 	movne.w	r1, #4294967295
 8000738:	f04f 30ff 	movne.w	r0, #4294967295
 800073c:	f000 b9a2 	b.w	8000a84 <__aeabi_idiv0>
 8000740:	f1ad 0c08 	sub.w	ip, sp, #8
 8000744:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000748:	f000 f83e 	bl	80007c8 <__udivmoddi4>
 800074c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000750:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000754:	b004      	add	sp, #16
 8000756:	4770      	bx	lr

08000758 <__aeabi_d2lz>:
 8000758:	b508      	push	{r3, lr}
 800075a:	4602      	mov	r2, r0
 800075c:	460b      	mov	r3, r1
 800075e:	ec43 2b17 	vmov	d7, r2, r3
 8000762:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000766:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800076a:	d403      	bmi.n	8000774 <__aeabi_d2lz+0x1c>
 800076c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000770:	f000 b80a 	b.w	8000788 <__aeabi_d2ulz>
 8000774:	eeb1 7b47 	vneg.f64	d7, d7
 8000778:	ec51 0b17 	vmov	r0, r1, d7
 800077c:	f000 f804 	bl	8000788 <__aeabi_d2ulz>
 8000780:	4240      	negs	r0, r0
 8000782:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000786:	bd08      	pop	{r3, pc}

08000788 <__aeabi_d2ulz>:
 8000788:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 80007b8 <__aeabi_d2ulz+0x30>
 800078c:	ec41 0b17 	vmov	d7, r0, r1
 8000790:	ed9f 5b0b 	vldr	d5, [pc, #44]	@ 80007c0 <__aeabi_d2ulz+0x38>
 8000794:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000798:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800079c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80007a0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80007a4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80007a8:	ee16 1a10 	vmov	r1, s12
 80007ac:	ee17 0a90 	vmov	r0, s15
 80007b0:	4770      	bx	lr
 80007b2:	bf00      	nop
 80007b4:	f3af 8000 	nop.w
 80007b8:	00000000 	.word	0x00000000
 80007bc:	3df00000 	.word	0x3df00000
 80007c0:	00000000 	.word	0x00000000
 80007c4:	41f00000 	.word	0x41f00000

080007c8 <__udivmoddi4>:
 80007c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007cc:	9d08      	ldr	r5, [sp, #32]
 80007ce:	460c      	mov	r4, r1
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d14e      	bne.n	8000872 <__udivmoddi4+0xaa>
 80007d4:	4694      	mov	ip, r2
 80007d6:	458c      	cmp	ip, r1
 80007d8:	4686      	mov	lr, r0
 80007da:	fab2 f282 	clz	r2, r2
 80007de:	d962      	bls.n	80008a6 <__udivmoddi4+0xde>
 80007e0:	b14a      	cbz	r2, 80007f6 <__udivmoddi4+0x2e>
 80007e2:	f1c2 0320 	rsb	r3, r2, #32
 80007e6:	4091      	lsls	r1, r2
 80007e8:	fa20 f303 	lsr.w	r3, r0, r3
 80007ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80007f0:	4319      	orrs	r1, r3
 80007f2:	fa00 fe02 	lsl.w	lr, r0, r2
 80007f6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80007fa:	fa1f f68c 	uxth.w	r6, ip
 80007fe:	fbb1 f4f7 	udiv	r4, r1, r7
 8000802:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000806:	fb07 1114 	mls	r1, r7, r4, r1
 800080a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800080e:	fb04 f106 	mul.w	r1, r4, r6
 8000812:	4299      	cmp	r1, r3
 8000814:	d90a      	bls.n	800082c <__udivmoddi4+0x64>
 8000816:	eb1c 0303 	adds.w	r3, ip, r3
 800081a:	f104 30ff 	add.w	r0, r4, #4294967295
 800081e:	f080 8112 	bcs.w	8000a46 <__udivmoddi4+0x27e>
 8000822:	4299      	cmp	r1, r3
 8000824:	f240 810f 	bls.w	8000a46 <__udivmoddi4+0x27e>
 8000828:	3c02      	subs	r4, #2
 800082a:	4463      	add	r3, ip
 800082c:	1a59      	subs	r1, r3, r1
 800082e:	fa1f f38e 	uxth.w	r3, lr
 8000832:	fbb1 f0f7 	udiv	r0, r1, r7
 8000836:	fb07 1110 	mls	r1, r7, r0, r1
 800083a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800083e:	fb00 f606 	mul.w	r6, r0, r6
 8000842:	429e      	cmp	r6, r3
 8000844:	d90a      	bls.n	800085c <__udivmoddi4+0x94>
 8000846:	eb1c 0303 	adds.w	r3, ip, r3
 800084a:	f100 31ff 	add.w	r1, r0, #4294967295
 800084e:	f080 80fc 	bcs.w	8000a4a <__udivmoddi4+0x282>
 8000852:	429e      	cmp	r6, r3
 8000854:	f240 80f9 	bls.w	8000a4a <__udivmoddi4+0x282>
 8000858:	4463      	add	r3, ip
 800085a:	3802      	subs	r0, #2
 800085c:	1b9b      	subs	r3, r3, r6
 800085e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000862:	2100      	movs	r1, #0
 8000864:	b11d      	cbz	r5, 800086e <__udivmoddi4+0xa6>
 8000866:	40d3      	lsrs	r3, r2
 8000868:	2200      	movs	r2, #0
 800086a:	e9c5 3200 	strd	r3, r2, [r5]
 800086e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000872:	428b      	cmp	r3, r1
 8000874:	d905      	bls.n	8000882 <__udivmoddi4+0xba>
 8000876:	b10d      	cbz	r5, 800087c <__udivmoddi4+0xb4>
 8000878:	e9c5 0100 	strd	r0, r1, [r5]
 800087c:	2100      	movs	r1, #0
 800087e:	4608      	mov	r0, r1
 8000880:	e7f5      	b.n	800086e <__udivmoddi4+0xa6>
 8000882:	fab3 f183 	clz	r1, r3
 8000886:	2900      	cmp	r1, #0
 8000888:	d146      	bne.n	8000918 <__udivmoddi4+0x150>
 800088a:	42a3      	cmp	r3, r4
 800088c:	d302      	bcc.n	8000894 <__udivmoddi4+0xcc>
 800088e:	4290      	cmp	r0, r2
 8000890:	f0c0 80f0 	bcc.w	8000a74 <__udivmoddi4+0x2ac>
 8000894:	1a86      	subs	r6, r0, r2
 8000896:	eb64 0303 	sbc.w	r3, r4, r3
 800089a:	2001      	movs	r0, #1
 800089c:	2d00      	cmp	r5, #0
 800089e:	d0e6      	beq.n	800086e <__udivmoddi4+0xa6>
 80008a0:	e9c5 6300 	strd	r6, r3, [r5]
 80008a4:	e7e3      	b.n	800086e <__udivmoddi4+0xa6>
 80008a6:	2a00      	cmp	r2, #0
 80008a8:	f040 8090 	bne.w	80009cc <__udivmoddi4+0x204>
 80008ac:	eba1 040c 	sub.w	r4, r1, ip
 80008b0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80008b4:	fa1f f78c 	uxth.w	r7, ip
 80008b8:	2101      	movs	r1, #1
 80008ba:	fbb4 f6f8 	udiv	r6, r4, r8
 80008be:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80008c2:	fb08 4416 	mls	r4, r8, r6, r4
 80008c6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80008ca:	fb07 f006 	mul.w	r0, r7, r6
 80008ce:	4298      	cmp	r0, r3
 80008d0:	d908      	bls.n	80008e4 <__udivmoddi4+0x11c>
 80008d2:	eb1c 0303 	adds.w	r3, ip, r3
 80008d6:	f106 34ff 	add.w	r4, r6, #4294967295
 80008da:	d202      	bcs.n	80008e2 <__udivmoddi4+0x11a>
 80008dc:	4298      	cmp	r0, r3
 80008de:	f200 80cd 	bhi.w	8000a7c <__udivmoddi4+0x2b4>
 80008e2:	4626      	mov	r6, r4
 80008e4:	1a1c      	subs	r4, r3, r0
 80008e6:	fa1f f38e 	uxth.w	r3, lr
 80008ea:	fbb4 f0f8 	udiv	r0, r4, r8
 80008ee:	fb08 4410 	mls	r4, r8, r0, r4
 80008f2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80008f6:	fb00 f707 	mul.w	r7, r0, r7
 80008fa:	429f      	cmp	r7, r3
 80008fc:	d908      	bls.n	8000910 <__udivmoddi4+0x148>
 80008fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000902:	f100 34ff 	add.w	r4, r0, #4294967295
 8000906:	d202      	bcs.n	800090e <__udivmoddi4+0x146>
 8000908:	429f      	cmp	r7, r3
 800090a:	f200 80b0 	bhi.w	8000a6e <__udivmoddi4+0x2a6>
 800090e:	4620      	mov	r0, r4
 8000910:	1bdb      	subs	r3, r3, r7
 8000912:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000916:	e7a5      	b.n	8000864 <__udivmoddi4+0x9c>
 8000918:	f1c1 0620 	rsb	r6, r1, #32
 800091c:	408b      	lsls	r3, r1
 800091e:	fa22 f706 	lsr.w	r7, r2, r6
 8000922:	431f      	orrs	r7, r3
 8000924:	fa20 fc06 	lsr.w	ip, r0, r6
 8000928:	fa04 f301 	lsl.w	r3, r4, r1
 800092c:	ea43 030c 	orr.w	r3, r3, ip
 8000930:	40f4      	lsrs	r4, r6
 8000932:	fa00 f801 	lsl.w	r8, r0, r1
 8000936:	0c38      	lsrs	r0, r7, #16
 8000938:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800093c:	fbb4 fef0 	udiv	lr, r4, r0
 8000940:	fa1f fc87 	uxth.w	ip, r7
 8000944:	fb00 441e 	mls	r4, r0, lr, r4
 8000948:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800094c:	fb0e f90c 	mul.w	r9, lr, ip
 8000950:	45a1      	cmp	r9, r4
 8000952:	fa02 f201 	lsl.w	r2, r2, r1
 8000956:	d90a      	bls.n	800096e <__udivmoddi4+0x1a6>
 8000958:	193c      	adds	r4, r7, r4
 800095a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800095e:	f080 8084 	bcs.w	8000a6a <__udivmoddi4+0x2a2>
 8000962:	45a1      	cmp	r9, r4
 8000964:	f240 8081 	bls.w	8000a6a <__udivmoddi4+0x2a2>
 8000968:	f1ae 0e02 	sub.w	lr, lr, #2
 800096c:	443c      	add	r4, r7
 800096e:	eba4 0409 	sub.w	r4, r4, r9
 8000972:	fa1f f983 	uxth.w	r9, r3
 8000976:	fbb4 f3f0 	udiv	r3, r4, r0
 800097a:	fb00 4413 	mls	r4, r0, r3, r4
 800097e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000982:	fb03 fc0c 	mul.w	ip, r3, ip
 8000986:	45a4      	cmp	ip, r4
 8000988:	d907      	bls.n	800099a <__udivmoddi4+0x1d2>
 800098a:	193c      	adds	r4, r7, r4
 800098c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000990:	d267      	bcs.n	8000a62 <__udivmoddi4+0x29a>
 8000992:	45a4      	cmp	ip, r4
 8000994:	d965      	bls.n	8000a62 <__udivmoddi4+0x29a>
 8000996:	3b02      	subs	r3, #2
 8000998:	443c      	add	r4, r7
 800099a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800099e:	fba0 9302 	umull	r9, r3, r0, r2
 80009a2:	eba4 040c 	sub.w	r4, r4, ip
 80009a6:	429c      	cmp	r4, r3
 80009a8:	46ce      	mov	lr, r9
 80009aa:	469c      	mov	ip, r3
 80009ac:	d351      	bcc.n	8000a52 <__udivmoddi4+0x28a>
 80009ae:	d04e      	beq.n	8000a4e <__udivmoddi4+0x286>
 80009b0:	b155      	cbz	r5, 80009c8 <__udivmoddi4+0x200>
 80009b2:	ebb8 030e 	subs.w	r3, r8, lr
 80009b6:	eb64 040c 	sbc.w	r4, r4, ip
 80009ba:	fa04 f606 	lsl.w	r6, r4, r6
 80009be:	40cb      	lsrs	r3, r1
 80009c0:	431e      	orrs	r6, r3
 80009c2:	40cc      	lsrs	r4, r1
 80009c4:	e9c5 6400 	strd	r6, r4, [r5]
 80009c8:	2100      	movs	r1, #0
 80009ca:	e750      	b.n	800086e <__udivmoddi4+0xa6>
 80009cc:	f1c2 0320 	rsb	r3, r2, #32
 80009d0:	fa20 f103 	lsr.w	r1, r0, r3
 80009d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80009d8:	fa24 f303 	lsr.w	r3, r4, r3
 80009dc:	4094      	lsls	r4, r2
 80009de:	430c      	orrs	r4, r1
 80009e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80009e4:	fa00 fe02 	lsl.w	lr, r0, r2
 80009e8:	fa1f f78c 	uxth.w	r7, ip
 80009ec:	fbb3 f0f8 	udiv	r0, r3, r8
 80009f0:	fb08 3110 	mls	r1, r8, r0, r3
 80009f4:	0c23      	lsrs	r3, r4, #16
 80009f6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80009fa:	fb00 f107 	mul.w	r1, r0, r7
 80009fe:	4299      	cmp	r1, r3
 8000a00:	d908      	bls.n	8000a14 <__udivmoddi4+0x24c>
 8000a02:	eb1c 0303 	adds.w	r3, ip, r3
 8000a06:	f100 36ff 	add.w	r6, r0, #4294967295
 8000a0a:	d22c      	bcs.n	8000a66 <__udivmoddi4+0x29e>
 8000a0c:	4299      	cmp	r1, r3
 8000a0e:	d92a      	bls.n	8000a66 <__udivmoddi4+0x29e>
 8000a10:	3802      	subs	r0, #2
 8000a12:	4463      	add	r3, ip
 8000a14:	1a5b      	subs	r3, r3, r1
 8000a16:	b2a4      	uxth	r4, r4
 8000a18:	fbb3 f1f8 	udiv	r1, r3, r8
 8000a1c:	fb08 3311 	mls	r3, r8, r1, r3
 8000a20:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a24:	fb01 f307 	mul.w	r3, r1, r7
 8000a28:	42a3      	cmp	r3, r4
 8000a2a:	d908      	bls.n	8000a3e <__udivmoddi4+0x276>
 8000a2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000a30:	f101 36ff 	add.w	r6, r1, #4294967295
 8000a34:	d213      	bcs.n	8000a5e <__udivmoddi4+0x296>
 8000a36:	42a3      	cmp	r3, r4
 8000a38:	d911      	bls.n	8000a5e <__udivmoddi4+0x296>
 8000a3a:	3902      	subs	r1, #2
 8000a3c:	4464      	add	r4, ip
 8000a3e:	1ae4      	subs	r4, r4, r3
 8000a40:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000a44:	e739      	b.n	80008ba <__udivmoddi4+0xf2>
 8000a46:	4604      	mov	r4, r0
 8000a48:	e6f0      	b.n	800082c <__udivmoddi4+0x64>
 8000a4a:	4608      	mov	r0, r1
 8000a4c:	e706      	b.n	800085c <__udivmoddi4+0x94>
 8000a4e:	45c8      	cmp	r8, r9
 8000a50:	d2ae      	bcs.n	80009b0 <__udivmoddi4+0x1e8>
 8000a52:	ebb9 0e02 	subs.w	lr, r9, r2
 8000a56:	eb63 0c07 	sbc.w	ip, r3, r7
 8000a5a:	3801      	subs	r0, #1
 8000a5c:	e7a8      	b.n	80009b0 <__udivmoddi4+0x1e8>
 8000a5e:	4631      	mov	r1, r6
 8000a60:	e7ed      	b.n	8000a3e <__udivmoddi4+0x276>
 8000a62:	4603      	mov	r3, r0
 8000a64:	e799      	b.n	800099a <__udivmoddi4+0x1d2>
 8000a66:	4630      	mov	r0, r6
 8000a68:	e7d4      	b.n	8000a14 <__udivmoddi4+0x24c>
 8000a6a:	46d6      	mov	lr, sl
 8000a6c:	e77f      	b.n	800096e <__udivmoddi4+0x1a6>
 8000a6e:	4463      	add	r3, ip
 8000a70:	3802      	subs	r0, #2
 8000a72:	e74d      	b.n	8000910 <__udivmoddi4+0x148>
 8000a74:	4606      	mov	r6, r0
 8000a76:	4623      	mov	r3, r4
 8000a78:	4608      	mov	r0, r1
 8000a7a:	e70f      	b.n	800089c <__udivmoddi4+0xd4>
 8000a7c:	3e02      	subs	r6, #2
 8000a7e:	4463      	add	r3, ip
 8000a80:	e730      	b.n	80008e4 <__udivmoddi4+0x11c>
 8000a82:	bf00      	nop

08000a84 <__aeabi_idiv0>:
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000a8c:	4b3d      	ldr	r3, [pc, #244]	@ (8000b84 <SystemInit+0xfc>)
 8000a8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a92:	4a3c      	ldr	r2, [pc, #240]	@ (8000b84 <SystemInit+0xfc>)
 8000a94:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a98:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000a9c:	4b39      	ldr	r3, [pc, #228]	@ (8000b84 <SystemInit+0xfc>)
 8000a9e:	691b      	ldr	r3, [r3, #16]
 8000aa0:	4a38      	ldr	r2, [pc, #224]	@ (8000b84 <SystemInit+0xfc>)
 8000aa2:	f043 0310 	orr.w	r3, r3, #16
 8000aa6:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000aa8:	4b37      	ldr	r3, [pc, #220]	@ (8000b88 <SystemInit+0x100>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	f003 030f 	and.w	r3, r3, #15
 8000ab0:	2b06      	cmp	r3, #6
 8000ab2:	d807      	bhi.n	8000ac4 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000ab4:	4b34      	ldr	r3, [pc, #208]	@ (8000b88 <SystemInit+0x100>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	f023 030f 	bic.w	r3, r3, #15
 8000abc:	4a32      	ldr	r2, [pc, #200]	@ (8000b88 <SystemInit+0x100>)
 8000abe:	f043 0307 	orr.w	r3, r3, #7
 8000ac2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000ac4:	4b31      	ldr	r3, [pc, #196]	@ (8000b8c <SystemInit+0x104>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	4a30      	ldr	r2, [pc, #192]	@ (8000b8c <SystemInit+0x104>)
 8000aca:	f043 0301 	orr.w	r3, r3, #1
 8000ace:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000ad0:	4b2e      	ldr	r3, [pc, #184]	@ (8000b8c <SystemInit+0x104>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000ad6:	4b2d      	ldr	r3, [pc, #180]	@ (8000b8c <SystemInit+0x104>)
 8000ad8:	681a      	ldr	r2, [r3, #0]
 8000ada:	492c      	ldr	r1, [pc, #176]	@ (8000b8c <SystemInit+0x104>)
 8000adc:	4b2c      	ldr	r3, [pc, #176]	@ (8000b90 <SystemInit+0x108>)
 8000ade:	4013      	ands	r3, r2
 8000ae0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000ae2:	4b29      	ldr	r3, [pc, #164]	@ (8000b88 <SystemInit+0x100>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	f003 0308 	and.w	r3, r3, #8
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d007      	beq.n	8000afe <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000aee:	4b26      	ldr	r3, [pc, #152]	@ (8000b88 <SystemInit+0x100>)
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	f023 030f 	bic.w	r3, r3, #15
 8000af6:	4a24      	ldr	r2, [pc, #144]	@ (8000b88 <SystemInit+0x100>)
 8000af8:	f043 0307 	orr.w	r3, r3, #7
 8000afc:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000afe:	4b23      	ldr	r3, [pc, #140]	@ (8000b8c <SystemInit+0x104>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000b04:	4b21      	ldr	r3, [pc, #132]	@ (8000b8c <SystemInit+0x104>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000b0a:	4b20      	ldr	r3, [pc, #128]	@ (8000b8c <SystemInit+0x104>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000b10:	4b1e      	ldr	r3, [pc, #120]	@ (8000b8c <SystemInit+0x104>)
 8000b12:	4a20      	ldr	r2, [pc, #128]	@ (8000b94 <SystemInit+0x10c>)
 8000b14:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000b16:	4b1d      	ldr	r3, [pc, #116]	@ (8000b8c <SystemInit+0x104>)
 8000b18:	4a1f      	ldr	r2, [pc, #124]	@ (8000b98 <SystemInit+0x110>)
 8000b1a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000b1c:	4b1b      	ldr	r3, [pc, #108]	@ (8000b8c <SystemInit+0x104>)
 8000b1e:	4a1f      	ldr	r2, [pc, #124]	@ (8000b9c <SystemInit+0x114>)
 8000b20:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000b22:	4b1a      	ldr	r3, [pc, #104]	@ (8000b8c <SystemInit+0x104>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000b28:	4b18      	ldr	r3, [pc, #96]	@ (8000b8c <SystemInit+0x104>)
 8000b2a:	4a1c      	ldr	r2, [pc, #112]	@ (8000b9c <SystemInit+0x114>)
 8000b2c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000b2e:	4b17      	ldr	r3, [pc, #92]	@ (8000b8c <SystemInit+0x104>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000b34:	4b15      	ldr	r3, [pc, #84]	@ (8000b8c <SystemInit+0x104>)
 8000b36:	4a19      	ldr	r2, [pc, #100]	@ (8000b9c <SystemInit+0x114>)
 8000b38:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000b3a:	4b14      	ldr	r3, [pc, #80]	@ (8000b8c <SystemInit+0x104>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000b40:	4b12      	ldr	r3, [pc, #72]	@ (8000b8c <SystemInit+0x104>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	4a11      	ldr	r2, [pc, #68]	@ (8000b8c <SystemInit+0x104>)
 8000b46:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000b4a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000b4c:	4b0f      	ldr	r3, [pc, #60]	@ (8000b8c <SystemInit+0x104>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000b52:	4b13      	ldr	r3, [pc, #76]	@ (8000ba0 <SystemInit+0x118>)
 8000b54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b56:	4a12      	ldr	r2, [pc, #72]	@ (8000ba0 <SystemInit+0x118>)
 8000b58:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b5c:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000b5e:	4b11      	ldr	r3, [pc, #68]	@ (8000ba4 <SystemInit+0x11c>)
 8000b60:	681a      	ldr	r2, [r3, #0]
 8000b62:	4b11      	ldr	r3, [pc, #68]	@ (8000ba8 <SystemInit+0x120>)
 8000b64:	4013      	ands	r3, r2
 8000b66:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000b6a:	d202      	bcs.n	8000b72 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000b6c:	4b0f      	ldr	r3, [pc, #60]	@ (8000bac <SystemInit+0x124>)
 8000b6e:	2201      	movs	r2, #1
 8000b70:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000b72:	4b0f      	ldr	r3, [pc, #60]	@ (8000bb0 <SystemInit+0x128>)
 8000b74:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000b78:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000b7a:	bf00      	nop
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b82:	4770      	bx	lr
 8000b84:	e000ed00 	.word	0xe000ed00
 8000b88:	52002000 	.word	0x52002000
 8000b8c:	58024400 	.word	0x58024400
 8000b90:	eaf6ed7f 	.word	0xeaf6ed7f
 8000b94:	02020200 	.word	0x02020200
 8000b98:	01ff0000 	.word	0x01ff0000
 8000b9c:	01010280 	.word	0x01010280
 8000ba0:	580000c0 	.word	0x580000c0
 8000ba4:	5c001000 	.word	0x5c001000
 8000ba8:	ffff0000 	.word	0xffff0000
 8000bac:	51008108 	.word	0x51008108
 8000bb0:	52004000 	.word	0x52004000

08000bb4 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b08a      	sub	sp, #40	@ 0x28
 8000bb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000bba:	f107 031c 	add.w	r3, r7, #28
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	601a      	str	r2, [r3, #0]
 8000bc2:	605a      	str	r2, [r3, #4]
 8000bc4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000bc6:	463b      	mov	r3, r7
 8000bc8:	2200      	movs	r2, #0
 8000bca:	601a      	str	r2, [r3, #0]
 8000bcc:	605a      	str	r2, [r3, #4]
 8000bce:	609a      	str	r2, [r3, #8]
 8000bd0:	60da      	str	r2, [r3, #12]
 8000bd2:	611a      	str	r2, [r3, #16]
 8000bd4:	615a      	str	r2, [r3, #20]
 8000bd6:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000bd8:	4b35      	ldr	r3, [pc, #212]	@ (8000cb0 <MX_ADC1_Init+0xfc>)
 8000bda:	4a36      	ldr	r2, [pc, #216]	@ (8000cb4 <MX_ADC1_Init+0x100>)
 8000bdc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000bde:	4b34      	ldr	r3, [pc, #208]	@ (8000cb0 <MX_ADC1_Init+0xfc>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000be4:	4b32      	ldr	r3, [pc, #200]	@ (8000cb0 <MX_ADC1_Init+0xfc>)
 8000be6:	2204      	movs	r2, #4
 8000be8:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000bea:	4b31      	ldr	r3, [pc, #196]	@ (8000cb0 <MX_ADC1_Init+0xfc>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000bf0:	4b2f      	ldr	r3, [pc, #188]	@ (8000cb0 <MX_ADC1_Init+0xfc>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8000bf6:	4b2e      	ldr	r3, [pc, #184]	@ (8000cb0 <MX_ADC1_Init+0xfc>)
 8000bf8:	2201      	movs	r2, #1
 8000bfa:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000bfc:	4b2c      	ldr	r3, [pc, #176]	@ (8000cb0 <MX_ADC1_Init+0xfc>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c02:	4b2b      	ldr	r3, [pc, #172]	@ (8000cb0 <MX_ADC1_Init+0xfc>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c08:	4b29      	ldr	r3, [pc, #164]	@ (8000cb0 <MX_ADC1_Init+0xfc>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000c0e:	4b28      	ldr	r3, [pc, #160]	@ (8000cb0 <MX_ADC1_Init+0xfc>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000c14:	4b26      	ldr	r3, [pc, #152]	@ (8000cb0 <MX_ADC1_Init+0xfc>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000c1a:	4b25      	ldr	r3, [pc, #148]	@ (8000cb0 <MX_ADC1_Init+0xfc>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000c20:	4b23      	ldr	r3, [pc, #140]	@ (8000cb0 <MX_ADC1_Init+0xfc>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Oversampling.Ratio = 1;
 8000c28:	4b21      	ldr	r3, [pc, #132]	@ (8000cb0 <MX_ADC1_Init+0xfc>)
 8000c2a:	2201      	movs	r2, #1
 8000c2c:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000c2e:	4820      	ldr	r0, [pc, #128]	@ (8000cb0 <MX_ADC1_Init+0xfc>)
 8000c30:	f002 f9b0 	bl	8002f94 <HAL_ADC_Init>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d001      	beq.n	8000c3e <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8000c3a:	f001 fc1f 	bl	800247c <Error_Handler>
  }
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000c3e:	4b1c      	ldr	r3, [pc, #112]	@ (8000cb0 <MX_ADC1_Init+0xfc>)
 8000c40:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000c44:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000c46:	4b1a      	ldr	r3, [pc, #104]	@ (8000cb0 <MX_ADC1_Init+0xfc>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000c4c:	4818      	ldr	r0, [pc, #96]	@ (8000cb0 <MX_ADC1_Init+0xfc>)
 8000c4e:	f002 f9a1 	bl	8002f94 <HAL_ADC_Init>
 8000c52:	4603      	mov	r3, r0
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d001      	beq.n	8000c5c <MX_ADC1_Init+0xa8>
  {
    Error_Handler();
 8000c58:	f001 fc10 	bl	800247c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000c60:	f107 031c 	add.w	r3, r7, #28
 8000c64:	4619      	mov	r1, r3
 8000c66:	4812      	ldr	r0, [pc, #72]	@ (8000cb0 <MX_ADC1_Init+0xfc>)
 8000c68:	f003 fa1a 	bl	80040a0 <HAL_ADCEx_MultiModeConfigChannel>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d001      	beq.n	8000c76 <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 8000c72:	f001 fc03 	bl	800247c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_19;
 8000c76:	4b10      	ldr	r3, [pc, #64]	@ (8000cb8 <MX_ADC1_Init+0x104>)
 8000c78:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c7a:	2306      	movs	r3, #6
 8000c7c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000c82:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000c86:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000c88:	2304      	movs	r3, #4
 8000c8a:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000c90:	2300      	movs	r3, #0
 8000c92:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c94:	463b      	mov	r3, r7
 8000c96:	4619      	mov	r1, r3
 8000c98:	4805      	ldr	r0, [pc, #20]	@ (8000cb0 <MX_ADC1_Init+0xfc>)
 8000c9a:	f002 fce9 	bl	8003670 <HAL_ADC_ConfigChannel>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d001      	beq.n	8000ca8 <MX_ADC1_Init+0xf4>
  {
    Error_Handler();
 8000ca4:	f001 fbea 	bl	800247c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ca8:	bf00      	nop
 8000caa:	3728      	adds	r7, #40	@ 0x28
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	24000204 	.word	0x24000204
 8000cb4:	40022000 	.word	0x40022000
 8000cb8:	4fb80000 	.word	0x4fb80000

08000cbc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b0ba      	sub	sp, #232	@ 0xe8
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000cc8:	2200      	movs	r2, #0
 8000cca:	601a      	str	r2, [r3, #0]
 8000ccc:	605a      	str	r2, [r3, #4]
 8000cce:	609a      	str	r2, [r3, #8]
 8000cd0:	60da      	str	r2, [r3, #12]
 8000cd2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000cd4:	f107 0310 	add.w	r3, r7, #16
 8000cd8:	22c0      	movs	r2, #192	@ 0xc0
 8000cda:	2100      	movs	r1, #0
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f00f f868 	bl	800fdb2 <memset>
  if(adcHandle->Instance==ADC1)
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	4a43      	ldr	r2, [pc, #268]	@ (8000df4 <HAL_ADC_MspInit+0x138>)
 8000ce8:	4293      	cmp	r3, r2
 8000cea:	d17f      	bne.n	8000dec <HAL_ADC_MspInit+0x130>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000cec:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000cf0:	f04f 0300 	mov.w	r3, #0
 8000cf4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 4;
 8000cf8:	2304      	movs	r3, #4
 8000cfa:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 10;
 8000cfc:	230a      	movs	r3, #10
 8000cfe:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000d00:	2302      	movs	r3, #2
 8000d02:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000d04:	2302      	movs	r3, #2
 8000d06:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000d08:	2302      	movs	r3, #2
 8000d0a:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000d0c:	23c0      	movs	r3, #192	@ 0xc0
 8000d0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8000d10:	2320      	movs	r3, #32
 8000d12:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000d14:	2300      	movs	r3, #0
 8000d16:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d1e:	f107 0310 	add.w	r3, r7, #16
 8000d22:	4618      	mov	r0, r3
 8000d24:	f007 fe0a 	bl	800893c <HAL_RCCEx_PeriphCLKConfig>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d001      	beq.n	8000d32 <HAL_ADC_MspInit+0x76>
    {
      Error_Handler();
 8000d2e:	f001 fba5 	bl	800247c <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000d32:	4b31      	ldr	r3, [pc, #196]	@ (8000df8 <HAL_ADC_MspInit+0x13c>)
 8000d34:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000d38:	4a2f      	ldr	r2, [pc, #188]	@ (8000df8 <HAL_ADC_MspInit+0x13c>)
 8000d3a:	f043 0320 	orr.w	r3, r3, #32
 8000d3e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000d42:	4b2d      	ldr	r3, [pc, #180]	@ (8000df8 <HAL_ADC_MspInit+0x13c>)
 8000d44:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000d48:	f003 0320 	and.w	r3, r3, #32
 8000d4c:	60fb      	str	r3, [r7, #12]
 8000d4e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d50:	4b29      	ldr	r3, [pc, #164]	@ (8000df8 <HAL_ADC_MspInit+0x13c>)
 8000d52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d56:	4a28      	ldr	r2, [pc, #160]	@ (8000df8 <HAL_ADC_MspInit+0x13c>)
 8000d58:	f043 0301 	orr.w	r3, r3, #1
 8000d5c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d60:	4b25      	ldr	r3, [pc, #148]	@ (8000df8 <HAL_ADC_MspInit+0x13c>)
 8000d62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d66:	f003 0301 	and.w	r3, r3, #1
 8000d6a:	60bb      	str	r3, [r7, #8]
 8000d6c:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA5     ------> ADC1_INP19
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000d6e:	2320      	movs	r3, #32
 8000d70:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d74:	2303      	movs	r3, #3
 8000d76:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d80:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000d84:	4619      	mov	r1, r3
 8000d86:	481d      	ldr	r0, [pc, #116]	@ (8000dfc <HAL_ADC_MspInit+0x140>)
 8000d88:	f005 fd9e 	bl	80068c8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8000d8c:	4b1c      	ldr	r3, [pc, #112]	@ (8000e00 <HAL_ADC_MspInit+0x144>)
 8000d8e:	4a1d      	ldr	r2, [pc, #116]	@ (8000e04 <HAL_ADC_MspInit+0x148>)
 8000d90:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000d92:	4b1b      	ldr	r3, [pc, #108]	@ (8000e00 <HAL_ADC_MspInit+0x144>)
 8000d94:	2209      	movs	r2, #9
 8000d96:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d98:	4b19      	ldr	r3, [pc, #100]	@ (8000e00 <HAL_ADC_MspInit+0x144>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d9e:	4b18      	ldr	r3, [pc, #96]	@ (8000e00 <HAL_ADC_MspInit+0x144>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000da4:	4b16      	ldr	r3, [pc, #88]	@ (8000e00 <HAL_ADC_MspInit+0x144>)
 8000da6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000daa:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000dac:	4b14      	ldr	r3, [pc, #80]	@ (8000e00 <HAL_ADC_MspInit+0x144>)
 8000dae:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000db2:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000db4:	4b12      	ldr	r3, [pc, #72]	@ (8000e00 <HAL_ADC_MspInit+0x144>)
 8000db6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000dba:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000dbc:	4b10      	ldr	r3, [pc, #64]	@ (8000e00 <HAL_ADC_MspInit+0x144>)
 8000dbe:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000dc2:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000dc4:	4b0e      	ldr	r3, [pc, #56]	@ (8000e00 <HAL_ADC_MspInit+0x144>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000dca:	4b0d      	ldr	r3, [pc, #52]	@ (8000e00 <HAL_ADC_MspInit+0x144>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000dd0:	480b      	ldr	r0, [pc, #44]	@ (8000e00 <HAL_ADC_MspInit+0x144>)
 8000dd2:	f003 fb53 	bl	800447c <HAL_DMA_Init>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d001      	beq.n	8000de0 <HAL_ADC_MspInit+0x124>
    {
      Error_Handler();
 8000ddc:	f001 fb4e 	bl	800247c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	4a07      	ldr	r2, [pc, #28]	@ (8000e00 <HAL_ADC_MspInit+0x144>)
 8000de4:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000de6:	4a06      	ldr	r2, [pc, #24]	@ (8000e00 <HAL_ADC_MspInit+0x144>)
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000dec:	bf00      	nop
 8000dee:	37e8      	adds	r7, #232	@ 0xe8
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}
 8000df4:	40022000 	.word	0x40022000
 8000df8:	58024400 	.word	0x58024400
 8000dfc:	58020000 	.word	0x58020000
 8000e00:	24000268 	.word	0x24000268
 8000e04:	40020010 	.word	0x40020010

08000e08 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b082      	sub	sp, #8
 8000e0c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e0e:	4b0d      	ldr	r3, [pc, #52]	@ (8000e44 <MX_DMA_Init+0x3c>)
 8000e10:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000e14:	4a0b      	ldr	r2, [pc, #44]	@ (8000e44 <MX_DMA_Init+0x3c>)
 8000e16:	f043 0301 	orr.w	r3, r3, #1
 8000e1a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000e1e:	4b09      	ldr	r3, [pc, #36]	@ (8000e44 <MX_DMA_Init+0x3c>)
 8000e20:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000e24:	f003 0301 	and.w	r3, r3, #1
 8000e28:	607b      	str	r3, [r7, #4]
 8000e2a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	2100      	movs	r1, #0
 8000e30:	200b      	movs	r0, #11
 8000e32:	f003 faee 	bl	8004412 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000e36:	200b      	movs	r0, #11
 8000e38:	f003 fb05 	bl	8004446 <HAL_NVIC_EnableIRQ>

}
 8000e3c:	bf00      	nop
 8000e3e:	3708      	adds	r7, #8
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	58024400 	.word	0x58024400

08000e48 <EEPROM_WriteIntArray>:
 * @param data Pointer to the array of data to be written.
 * @param size The size of the data array (in bytes).
 *
 * @return HAL_StatusTypeDef The status of the EEPROM write operation (e.g., HAL_OK, HAL_ERROR).
 */
HAL_StatusTypeDef EEPROM_WriteIntArray(uint16_t memAddress, uint8_t *data, uint16_t size) {
 8000e48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000e4c:	b087      	sub	sp, #28
 8000e4e:	af02      	add	r7, sp, #8
 8000e50:	4603      	mov	r3, r0
 8000e52:	6039      	str	r1, [r7, #0]
 8000e54:	80fb      	strh	r3, [r7, #6]
 8000e56:	4613      	mov	r3, r2
 8000e58:	80bb      	strh	r3, [r7, #4]
 8000e5a:	466b      	mov	r3, sp
 8000e5c:	461e      	mov	r6, r3
    uint8_t buffer[size + 2];
 8000e5e:	88bb      	ldrh	r3, [r7, #4]
 8000e60:	1c99      	adds	r1, r3, #2
 8000e62:	1e4b      	subs	r3, r1, #1
 8000e64:	60fb      	str	r3, [r7, #12]
 8000e66:	460a      	mov	r2, r1
 8000e68:	2300      	movs	r3, #0
 8000e6a:	4690      	mov	r8, r2
 8000e6c:	4699      	mov	r9, r3
 8000e6e:	f04f 0200 	mov.w	r2, #0
 8000e72:	f04f 0300 	mov.w	r3, #0
 8000e76:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000e7a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000e7e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000e82:	460a      	mov	r2, r1
 8000e84:	2300      	movs	r3, #0
 8000e86:	4614      	mov	r4, r2
 8000e88:	461d      	mov	r5, r3
 8000e8a:	f04f 0200 	mov.w	r2, #0
 8000e8e:	f04f 0300 	mov.w	r3, #0
 8000e92:	00eb      	lsls	r3, r5, #3
 8000e94:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000e98:	00e2      	lsls	r2, r4, #3
 8000e9a:	460b      	mov	r3, r1
 8000e9c:	3307      	adds	r3, #7
 8000e9e:	08db      	lsrs	r3, r3, #3
 8000ea0:	00db      	lsls	r3, r3, #3
 8000ea2:	ebad 0d03 	sub.w	sp, sp, r3
 8000ea6:	ab02      	add	r3, sp, #8
 8000ea8:	3300      	adds	r3, #0
 8000eaa:	60bb      	str	r3, [r7, #8]
    buffer[0] = (uint8_t)(memAddress >> 8);
 8000eac:	88fb      	ldrh	r3, [r7, #6]
 8000eae:	0a1b      	lsrs	r3, r3, #8
 8000eb0:	b29b      	uxth	r3, r3
 8000eb2:	b2da      	uxtb	r2, r3
 8000eb4:	68bb      	ldr	r3, [r7, #8]
 8000eb6:	701a      	strb	r2, [r3, #0]
    buffer[1] = (uint8_t)(memAddress & 0xFF);
 8000eb8:	88fb      	ldrh	r3, [r7, #6]
 8000eba:	b2da      	uxtb	r2, r3
 8000ebc:	68bb      	ldr	r3, [r7, #8]
 8000ebe:	705a      	strb	r2, [r3, #1]
    memcpy(&buffer[2], data, size);
 8000ec0:	68bb      	ldr	r3, [r7, #8]
 8000ec2:	3302      	adds	r3, #2
 8000ec4:	88ba      	ldrh	r2, [r7, #4]
 8000ec6:	6839      	ldr	r1, [r7, #0]
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f00f f804 	bl	800fed6 <memcpy>

    return HAL_I2C_Master_Transmit(&hi2c2, EEPROM_ADDRESS << 1, buffer, size + 2, HAL_MAX_DELAY);
 8000ece:	88bb      	ldrh	r3, [r7, #4]
 8000ed0:	3302      	adds	r3, #2
 8000ed2:	b29b      	uxth	r3, r3
 8000ed4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ed8:	9200      	str	r2, [sp, #0]
 8000eda:	68ba      	ldr	r2, [r7, #8]
 8000edc:	21a4      	movs	r1, #164	@ 0xa4
 8000ede:	4805      	ldr	r0, [pc, #20]	@ (8000ef4 <EEPROM_WriteIntArray+0xac>)
 8000ee0:	f005 ffa0 	bl	8006e24 <HAL_I2C_Master_Transmit>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	46b5      	mov	sp, r6
}
 8000ee8:	4618      	mov	r0, r3
 8000eea:	3714      	adds	r7, #20
 8000eec:	46bd      	mov	sp, r7
 8000eee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000ef2:	bf00      	nop
 8000ef4:	240002e0 	.word	0x240002e0

08000ef8 <EEPROM_ReadIntArray>:
 * @param data Pointer to the buffer where the read data will be stored.
 * @param size The size of the data array (in bytes).
 *
 * @return HAL_StatusTypeDef The status of the EEPROM read operation (e.g., HAL_OK, HAL_ERROR).
 */
HAL_StatusTypeDef EEPROM_ReadIntArray(uint16_t memAddress, uint8_t *data, uint16_t size) {
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b092      	sub	sp, #72	@ 0x48
 8000efc:	af02      	add	r7, sp, #8
 8000efe:	4603      	mov	r3, r0
 8000f00:	6039      	str	r1, [r7, #0]
 8000f02:	80fb      	strh	r3, [r7, #6]
 8000f04:	4613      	mov	r3, r2
 8000f06:	80bb      	strh	r3, [r7, #4]
    uint8_t addressBuffer[2];
    addressBuffer[0] = (uint8_t)(memAddress >> 8);
 8000f08:	88fb      	ldrh	r3, [r7, #6]
 8000f0a:	0a1b      	lsrs	r3, r3, #8
 8000f0c:	b29b      	uxth	r3, r3
 8000f0e:	b2db      	uxtb	r3, r3
 8000f10:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
    addressBuffer[1] = (uint8_t)(memAddress & 0xFF);
 8000f14:	88fb      	ldrh	r3, [r7, #6]
 8000f16:	b2db      	uxtb	r3, r3
 8000f18:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d

    HAL_StatusTypeDef status = HAL_I2C_Master_Transmit(&hi2c2, EEPROM_ADDRESS << 1, addressBuffer, 2, HAL_MAX_DELAY);
 8000f1c:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 8000f20:	f04f 33ff 	mov.w	r3, #4294967295
 8000f24:	9300      	str	r3, [sp, #0]
 8000f26:	2302      	movs	r3, #2
 8000f28:	21a4      	movs	r1, #164	@ 0xa4
 8000f2a:	4813      	ldr	r0, [pc, #76]	@ (8000f78 <EEPROM_ReadIntArray+0x80>)
 8000f2c:	f005 ff7a 	bl	8006e24 <HAL_I2C_Master_Transmit>
 8000f30:	4603      	mov	r3, r0
 8000f32:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    if (status == HAL_OK) {
 8000f36:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d103      	bne.n	8000f46 <EEPROM_ReadIntArray+0x4e>
//        SendDebugMessage("{\"operation\": \"read\", \"message\": \"success\"}\r\n");
    	HAL_Delay(10); //10 ms delay out of black hole, otherwise it doesn't work
 8000f3e:	200a      	movs	r0, #10
 8000f40:	f001 fe16 	bl	8002b70 <HAL_Delay>
 8000f44:	e00a      	b.n	8000f5c <EEPROM_ReadIntArray+0x64>
    } else {
        char buffer[50];
        snprintf(buffer, sizeof(buffer), "{\"operation\": \"read\", \"message\": \"success\", \"status\" = %d}\r\n", status);
 8000f46:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000f4a:	f107 0008 	add.w	r0, r7, #8
 8000f4e:	4a0b      	ldr	r2, [pc, #44]	@ (8000f7c <EEPROM_ReadIntArray+0x84>)
 8000f50:	2132      	movs	r1, #50	@ 0x32
 8000f52:	f00e fe97 	bl	800fc84 <sniprintf>
    	HAL_Delay(10); //10 ms delay out of black hole, otherwise it doesn't work
 8000f56:	200a      	movs	r0, #10
 8000f58:	f001 fe0a 	bl	8002b70 <HAL_Delay>
//        SendDebugMessage(buffer);
    }
    return HAL_I2C_Master_Receive(&hi2c2, EEPROM_ADDRESS << 1, data, size, HAL_MAX_DELAY);
 8000f5c:	88bb      	ldrh	r3, [r7, #4]
 8000f5e:	f04f 32ff 	mov.w	r2, #4294967295
 8000f62:	9200      	str	r2, [sp, #0]
 8000f64:	683a      	ldr	r2, [r7, #0]
 8000f66:	21a4      	movs	r1, #164	@ 0xa4
 8000f68:	4803      	ldr	r0, [pc, #12]	@ (8000f78 <EEPROM_ReadIntArray+0x80>)
 8000f6a:	f006 f873 	bl	8007054 <HAL_I2C_Master_Receive>
 8000f6e:	4603      	mov	r3, r0
}
 8000f70:	4618      	mov	r0, r3
 8000f72:	3740      	adds	r7, #64	@ 0x40
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	240002e0 	.word	0x240002e0
 8000f7c:	080138f0 	.word	0x080138f0

08000f80 <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b08c      	sub	sp, #48	@ 0x30
 8000f84:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f86:	f107 031c 	add.w	r3, r7, #28
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	601a      	str	r2, [r3, #0]
 8000f8e:	605a      	str	r2, [r3, #4]
 8000f90:	609a      	str	r2, [r3, #8]
 8000f92:	60da      	str	r2, [r3, #12]
 8000f94:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f96:	4b77      	ldr	r3, [pc, #476]	@ (8001174 <MX_GPIO_Init+0x1f4>)
 8000f98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f9c:	4a75      	ldr	r2, [pc, #468]	@ (8001174 <MX_GPIO_Init+0x1f4>)
 8000f9e:	f043 0304 	orr.w	r3, r3, #4
 8000fa2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000fa6:	4b73      	ldr	r3, [pc, #460]	@ (8001174 <MX_GPIO_Init+0x1f4>)
 8000fa8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fac:	f003 0304 	and.w	r3, r3, #4
 8000fb0:	61bb      	str	r3, [r7, #24]
 8000fb2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fb4:	4b6f      	ldr	r3, [pc, #444]	@ (8001174 <MX_GPIO_Init+0x1f4>)
 8000fb6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fba:	4a6e      	ldr	r2, [pc, #440]	@ (8001174 <MX_GPIO_Init+0x1f4>)
 8000fbc:	f043 0301 	orr.w	r3, r3, #1
 8000fc0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000fc4:	4b6b      	ldr	r3, [pc, #428]	@ (8001174 <MX_GPIO_Init+0x1f4>)
 8000fc6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fca:	f003 0301 	and.w	r3, r3, #1
 8000fce:	617b      	str	r3, [r7, #20]
 8000fd0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fd2:	4b68      	ldr	r3, [pc, #416]	@ (8001174 <MX_GPIO_Init+0x1f4>)
 8000fd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fd8:	4a66      	ldr	r2, [pc, #408]	@ (8001174 <MX_GPIO_Init+0x1f4>)
 8000fda:	f043 0302 	orr.w	r3, r3, #2
 8000fde:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000fe2:	4b64      	ldr	r3, [pc, #400]	@ (8001174 <MX_GPIO_Init+0x1f4>)
 8000fe4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fe8:	f003 0302 	and.w	r3, r3, #2
 8000fec:	613b      	str	r3, [r7, #16]
 8000fee:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ff0:	4b60      	ldr	r3, [pc, #384]	@ (8001174 <MX_GPIO_Init+0x1f4>)
 8000ff2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ff6:	4a5f      	ldr	r2, [pc, #380]	@ (8001174 <MX_GPIO_Init+0x1f4>)
 8000ff8:	f043 0308 	orr.w	r3, r3, #8
 8000ffc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001000:	4b5c      	ldr	r3, [pc, #368]	@ (8001174 <MX_GPIO_Init+0x1f4>)
 8001002:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001006:	f003 0308 	and.w	r3, r3, #8
 800100a:	60fb      	str	r3, [r7, #12]
 800100c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800100e:	4b59      	ldr	r3, [pc, #356]	@ (8001174 <MX_GPIO_Init+0x1f4>)
 8001010:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001014:	4a57      	ldr	r2, [pc, #348]	@ (8001174 <MX_GPIO_Init+0x1f4>)
 8001016:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800101a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800101e:	4b55      	ldr	r3, [pc, #340]	@ (8001174 <MX_GPIO_Init+0x1f4>)
 8001020:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001024:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001028:	60bb      	str	r3, [r7, #8]
 800102a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800102c:	4b51      	ldr	r3, [pc, #324]	@ (8001174 <MX_GPIO_Init+0x1f4>)
 800102e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001032:	4a50      	ldr	r2, [pc, #320]	@ (8001174 <MX_GPIO_Init+0x1f4>)
 8001034:	f043 0310 	orr.w	r3, r3, #16
 8001038:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800103c:	4b4d      	ldr	r3, [pc, #308]	@ (8001174 <MX_GPIO_Init+0x1f4>)
 800103e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001042:	f003 0310 	and.w	r3, r3, #16
 8001046:	607b      	str	r3, [r7, #4]
 8001048:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED3_Pin, GPIO_PIN_RESET);
 800104a:	2200      	movs	r2, #0
 800104c:	f244 0101 	movw	r1, #16385	@ 0x4001
 8001050:	4849      	ldr	r0, [pc, #292]	@ (8001178 <MX_GPIO_Init+0x1f8>)
 8001052:	f005 fde9 	bl	8006c28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8001056:	2200      	movs	r2, #0
 8001058:	2102      	movs	r1, #2
 800105a:	4848      	ldr	r0, [pc, #288]	@ (800117c <MX_GPIO_Init+0x1fc>)
 800105c:	f005 fde4 	bl	8006c28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 8001060:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001064:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001066:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800106a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106c:	2300      	movs	r3, #0
 800106e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8001070:	f107 031c 	add.w	r3, r7, #28
 8001074:	4619      	mov	r1, r3
 8001076:	4842      	ldr	r0, [pc, #264]	@ (8001180 <MX_GPIO_Init+0x200>)
 8001078:	f005 fc26 	bl	80068c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800107c:	2332      	movs	r3, #50	@ 0x32
 800107e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001080:	2302      	movs	r3, #2
 8001082:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001084:	2300      	movs	r3, #0
 8001086:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001088:	2300      	movs	r3, #0
 800108a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800108c:	230b      	movs	r3, #11
 800108e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001090:	f107 031c 	add.w	r3, r7, #28
 8001094:	4619      	mov	r1, r3
 8001096:	483a      	ldr	r0, [pc, #232]	@ (8001180 <MX_GPIO_Init+0x200>)
 8001098:	f005 fc16 	bl	80068c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800109c:	2386      	movs	r3, #134	@ 0x86
 800109e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010a0:	2302      	movs	r3, #2
 80010a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a4:	2300      	movs	r3, #0
 80010a6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a8:	2300      	movs	r3, #0
 80010aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80010ac:	230b      	movs	r3, #11
 80010ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010b0:	f107 031c 	add.w	r3, r7, #28
 80010b4:	4619      	mov	r1, r3
 80010b6:	4833      	ldr	r0, [pc, #204]	@ (8001184 <MX_GPIO_Init+0x204>)
 80010b8:	f005 fc06 	bl	80068c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LED1_Pin|LED3_Pin;
 80010bc:	f244 0301 	movw	r3, #16385	@ 0x4001
 80010c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010c2:	2301      	movs	r3, #1
 80010c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c6:	2300      	movs	r3, #0
 80010c8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ca:	2300      	movs	r3, #0
 80010cc:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010ce:	f107 031c 	add.w	r3, r7, #28
 80010d2:	4619      	mov	r1, r3
 80010d4:	4828      	ldr	r0, [pc, #160]	@ (8001178 <MX_GPIO_Init+0x1f8>)
 80010d6:	f005 fbf7 	bl	80068c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80010da:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80010de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010e0:	2302      	movs	r3, #2
 80010e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e4:	2300      	movs	r3, #0
 80010e6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010e8:	2300      	movs	r3, #0
 80010ea:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80010ec:	230b      	movs	r3, #11
 80010ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010f0:	f107 031c 	add.w	r3, r7, #28
 80010f4:	4619      	mov	r1, r3
 80010f6:	4820      	ldr	r0, [pc, #128]	@ (8001178 <MX_GPIO_Init+0x1f8>)
 80010f8:	f005 fbe6 	bl	80068c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 80010fc:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 8001100:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001102:	2302      	movs	r3, #2
 8001104:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001106:	2300      	movs	r3, #0
 8001108:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800110a:	2300      	movs	r3, #0
 800110c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800110e:	230a      	movs	r3, #10
 8001110:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001112:	f107 031c 	add.w	r3, r7, #28
 8001116:	4619      	mov	r1, r3
 8001118:	481a      	ldr	r0, [pc, #104]	@ (8001184 <MX_GPIO_Init+0x204>)
 800111a:	f005 fbd5 	bl	80068c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG11 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 800111e:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8001122:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001124:	2302      	movs	r3, #2
 8001126:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001128:	2300      	movs	r3, #0
 800112a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800112c:	2300      	movs	r3, #0
 800112e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001130:	230b      	movs	r3, #11
 8001132:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001134:	f107 031c 	add.w	r3, r7, #28
 8001138:	4619      	mov	r1, r3
 800113a:	4813      	ldr	r0, [pc, #76]	@ (8001188 <MX_GPIO_Init+0x208>)
 800113c:	f005 fbc4 	bl	80068c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED2_Pin;
 8001140:	2302      	movs	r3, #2
 8001142:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001144:	2301      	movs	r3, #1
 8001146:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001148:	2300      	movs	r3, #0
 800114a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800114c:	2300      	movs	r3, #0
 800114e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 8001150:	f107 031c 	add.w	r3, r7, #28
 8001154:	4619      	mov	r1, r3
 8001156:	4809      	ldr	r0, [pc, #36]	@ (800117c <MX_GPIO_Init+0x1fc>)
 8001158:	f005 fbb6 	bl	80068c8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800115c:	2200      	movs	r2, #0
 800115e:	2100      	movs	r1, #0
 8001160:	2028      	movs	r0, #40	@ 0x28
 8001162:	f003 f956 	bl	8004412 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001166:	2028      	movs	r0, #40	@ 0x28
 8001168:	f003 f96d 	bl	8004446 <HAL_NVIC_EnableIRQ>

}
 800116c:	bf00      	nop
 800116e:	3730      	adds	r7, #48	@ 0x30
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}
 8001174:	58024400 	.word	0x58024400
 8001178:	58020400 	.word	0x58020400
 800117c:	58021000 	.word	0x58021000
 8001180:	58020800 	.word	0x58020800
 8001184:	58020000 	.word	0x58020000
 8001188:	58021800 	.word	0x58021800

0800118c <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001190:	4b1b      	ldr	r3, [pc, #108]	@ (8001200 <MX_I2C2_Init+0x74>)
 8001192:	4a1c      	ldr	r2, [pc, #112]	@ (8001204 <MX_I2C2_Init+0x78>)
 8001194:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00707CBB;
 8001196:	4b1a      	ldr	r3, [pc, #104]	@ (8001200 <MX_I2C2_Init+0x74>)
 8001198:	4a1b      	ldr	r2, [pc, #108]	@ (8001208 <MX_I2C2_Init+0x7c>)
 800119a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800119c:	4b18      	ldr	r3, [pc, #96]	@ (8001200 <MX_I2C2_Init+0x74>)
 800119e:	2200      	movs	r2, #0
 80011a0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011a2:	4b17      	ldr	r3, [pc, #92]	@ (8001200 <MX_I2C2_Init+0x74>)
 80011a4:	2201      	movs	r2, #1
 80011a6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011a8:	4b15      	ldr	r3, [pc, #84]	@ (8001200 <MX_I2C2_Init+0x74>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80011ae:	4b14      	ldr	r3, [pc, #80]	@ (8001200 <MX_I2C2_Init+0x74>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80011b4:	4b12      	ldr	r3, [pc, #72]	@ (8001200 <MX_I2C2_Init+0x74>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011ba:	4b11      	ldr	r3, [pc, #68]	@ (8001200 <MX_I2C2_Init+0x74>)
 80011bc:	2200      	movs	r2, #0
 80011be:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011c0:	4b0f      	ldr	r3, [pc, #60]	@ (8001200 <MX_I2C2_Init+0x74>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80011c6:	480e      	ldr	r0, [pc, #56]	@ (8001200 <MX_I2C2_Init+0x74>)
 80011c8:	f005 fd90 	bl	8006cec <HAL_I2C_Init>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d001      	beq.n	80011d6 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80011d2:	f001 f953 	bl	800247c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80011d6:	2100      	movs	r1, #0
 80011d8:	4809      	ldr	r0, [pc, #36]	@ (8001200 <MX_I2C2_Init+0x74>)
 80011da:	f006 fad7 	bl	800778c <HAL_I2CEx_ConfigAnalogFilter>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d001      	beq.n	80011e8 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80011e4:	f001 f94a 	bl	800247c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80011e8:	2100      	movs	r1, #0
 80011ea:	4805      	ldr	r0, [pc, #20]	@ (8001200 <MX_I2C2_Init+0x74>)
 80011ec:	f006 fb19 	bl	8007822 <HAL_I2CEx_ConfigDigitalFilter>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d001      	beq.n	80011fa <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80011f6:	f001 f941 	bl	800247c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80011fa:	bf00      	nop
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	240002e0 	.word	0x240002e0
 8001204:	40005800 	.word	0x40005800
 8001208:	00707cbb 	.word	0x00707cbb

0800120c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b0ba      	sub	sp, #232	@ 0xe8
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001214:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001218:	2200      	movs	r2, #0
 800121a:	601a      	str	r2, [r3, #0]
 800121c:	605a      	str	r2, [r3, #4]
 800121e:	609a      	str	r2, [r3, #8]
 8001220:	60da      	str	r2, [r3, #12]
 8001222:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001224:	f107 0310 	add.w	r3, r7, #16
 8001228:	22c0      	movs	r2, #192	@ 0xc0
 800122a:	2100      	movs	r1, #0
 800122c:	4618      	mov	r0, r3
 800122e:	f00e fdc0 	bl	800fdb2 <memset>
  if(i2cHandle->Instance==I2C2)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	4a27      	ldr	r2, [pc, #156]	@ (80012d4 <HAL_I2C_MspInit+0xc8>)
 8001238:	4293      	cmp	r3, r2
 800123a:	d146      	bne.n	80012ca <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 800123c:	f04f 0208 	mov.w	r2, #8
 8001240:	f04f 0300 	mov.w	r3, #0
 8001244:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8001248:	2300      	movs	r3, #0
 800124a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800124e:	f107 0310 	add.w	r3, r7, #16
 8001252:	4618      	mov	r0, r3
 8001254:	f007 fb72 	bl	800893c <HAL_RCCEx_PeriphCLKConfig>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d001      	beq.n	8001262 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 800125e:	f001 f90d 	bl	800247c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001262:	4b1d      	ldr	r3, [pc, #116]	@ (80012d8 <HAL_I2C_MspInit+0xcc>)
 8001264:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001268:	4a1b      	ldr	r2, [pc, #108]	@ (80012d8 <HAL_I2C_MspInit+0xcc>)
 800126a:	f043 0302 	orr.w	r3, r3, #2
 800126e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001272:	4b19      	ldr	r3, [pc, #100]	@ (80012d8 <HAL_I2C_MspInit+0xcc>)
 8001274:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001278:	f003 0302 	and.w	r3, r3, #2
 800127c:	60fb      	str	r3, [r7, #12]
 800127e:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001280:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001284:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001288:	2312      	movs	r3, #18
 800128a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128e:	2300      	movs	r3, #0
 8001290:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001294:	2300      	movs	r3, #0
 8001296:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800129a:	2304      	movs	r3, #4
 800129c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012a0:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80012a4:	4619      	mov	r1, r3
 80012a6:	480d      	ldr	r0, [pc, #52]	@ (80012dc <HAL_I2C_MspInit+0xd0>)
 80012a8:	f005 fb0e 	bl	80068c8 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80012ac:	4b0a      	ldr	r3, [pc, #40]	@ (80012d8 <HAL_I2C_MspInit+0xcc>)
 80012ae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80012b2:	4a09      	ldr	r2, [pc, #36]	@ (80012d8 <HAL_I2C_MspInit+0xcc>)
 80012b4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80012b8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80012bc:	4b06      	ldr	r3, [pc, #24]	@ (80012d8 <HAL_I2C_MspInit+0xcc>)
 80012be:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80012c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80012c6:	60bb      	str	r3, [r7, #8]
 80012c8:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80012ca:	bf00      	nop
 80012cc:	37e8      	adds	r7, #232	@ 0xe8
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	40005800 	.word	0x40005800
 80012d8:	58024400 	.word	0x58024400
 80012dc:	58020400 	.word	0x58020400

080012e0 <lcd_init>:
 * Sends initialization commands to the LCD via I2C and prepares it for operation.
 *
 * @param lcd Pointer to the lcd_disp structure representing the LCD configuration.
 */
void lcd_init(struct lcd_disp * lcd)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b084      	sub	sp, #16
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
	uint8_t xpin = 0;
 80012e8:	2300      	movs	r3, #0
 80012ea:	73fb      	strb	r3, [r7, #15]
	/* set backlight */
	if(lcd->bl)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d001      	beq.n	80012fa <lcd_init+0x1a>
	{
		xpin = BL_PIN;
 80012f6:	2308      	movs	r3, #8
 80012f8:	73fb      	strb	r3, [r7, #15]
	}

	/* init sequence */
	HAL_Delay(40);
 80012fa:	2028      	movs	r0, #40	@ 0x28
 80012fc:	f001 fc38 	bl	8002b70 <HAL_Delay>
	lcd_write(lcd->addr, INIT_8_BIT_MODE, xpin);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	781b      	ldrb	r3, [r3, #0]
 8001304:	7bfa      	ldrb	r2, [r7, #15]
 8001306:	2130      	movs	r1, #48	@ 0x30
 8001308:	4618      	mov	r0, r3
 800130a:	f000 f829 	bl	8001360 <lcd_write>
	HAL_Delay(5);
 800130e:	2005      	movs	r0, #5
 8001310:	f001 fc2e 	bl	8002b70 <HAL_Delay>
	lcd_write(lcd->addr, INIT_8_BIT_MODE, xpin);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	781b      	ldrb	r3, [r3, #0]
 8001318:	7bfa      	ldrb	r2, [r7, #15]
 800131a:	2130      	movs	r1, #48	@ 0x30
 800131c:	4618      	mov	r0, r3
 800131e:	f000 f81f 	bl	8001360 <lcd_write>
	HAL_Delay(1);
 8001322:	2001      	movs	r0, #1
 8001324:	f001 fc24 	bl	8002b70 <HAL_Delay>
	lcd_write(lcd->addr, INIT_8_BIT_MODE, xpin);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	781b      	ldrb	r3, [r3, #0]
 800132c:	7bfa      	ldrb	r2, [r7, #15]
 800132e:	2130      	movs	r1, #48	@ 0x30
 8001330:	4618      	mov	r0, r3
 8001332:	f000 f815 	bl	8001360 <lcd_write>

	/* set 4-bit mode */
	lcd_write(lcd->addr, INIT_4_BIT_MODE, xpin);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	781b      	ldrb	r3, [r3, #0]
 800133a:	7bfa      	ldrb	r2, [r7, #15]
 800133c:	2102      	movs	r1, #2
 800133e:	4618      	mov	r0, r3
 8001340:	f000 f80e 	bl	8001360 <lcd_write>

	/* set cursor mode */
	lcd_write(lcd->addr, UNDERLINE_OFF_BLINK_OFF, xpin);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	7bfa      	ldrb	r2, [r7, #15]
 800134a:	210c      	movs	r1, #12
 800134c:	4618      	mov	r0, r3
 800134e:	f000 f807 	bl	8001360 <lcd_write>

	/* clear */
	lcd_clear(lcd);
 8001352:	6878      	ldr	r0, [r7, #4]
 8001354:	f000 f89f 	bl	8001496 <lcd_clear>

}
 8001358:	bf00      	nop
 800135a:	3710      	adds	r7, #16
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}

08001360 <lcd_write>:
 * @param addr I2C address of the LCD.
 * @param data The data or command byte to be written.
 * @param xpin Pin configuration (RS, RW, EN).
 */
void lcd_write(uint8_t addr, uint8_t data, uint8_t xpin)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b086      	sub	sp, #24
 8001364:	af02      	add	r7, sp, #8
 8001366:	4603      	mov	r3, r0
 8001368:	71fb      	strb	r3, [r7, #7]
 800136a:	460b      	mov	r3, r1
 800136c:	71bb      	strb	r3, [r7, #6]
 800136e:	4613      	mov	r3, r2
 8001370:	717b      	strb	r3, [r7, #5]
	uint8_t tx_data[4];

	/* split data */
	tx_data[0] = (data & 0xF0) | EN_PIN | xpin;
 8001372:	79bb      	ldrb	r3, [r7, #6]
 8001374:	f023 030f 	bic.w	r3, r3, #15
 8001378:	b2da      	uxtb	r2, r3
 800137a:	797b      	ldrb	r3, [r7, #5]
 800137c:	4313      	orrs	r3, r2
 800137e:	b2db      	uxtb	r3, r3
 8001380:	f043 0304 	orr.w	r3, r3, #4
 8001384:	b2db      	uxtb	r3, r3
 8001386:	733b      	strb	r3, [r7, #12]
	tx_data[1] = (data & 0xF0) | xpin;
 8001388:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800138c:	f023 030f 	bic.w	r3, r3, #15
 8001390:	b25a      	sxtb	r2, r3
 8001392:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001396:	4313      	orrs	r3, r2
 8001398:	b25b      	sxtb	r3, r3
 800139a:	b2db      	uxtb	r3, r3
 800139c:	737b      	strb	r3, [r7, #13]
	tx_data[2] = (data << 4) | EN_PIN | xpin;
 800139e:	79bb      	ldrb	r3, [r7, #6]
 80013a0:	011b      	lsls	r3, r3, #4
 80013a2:	b2da      	uxtb	r2, r3
 80013a4:	797b      	ldrb	r3, [r7, #5]
 80013a6:	4313      	orrs	r3, r2
 80013a8:	b2db      	uxtb	r3, r3
 80013aa:	f043 0304 	orr.w	r3, r3, #4
 80013ae:	b2db      	uxtb	r3, r3
 80013b0:	73bb      	strb	r3, [r7, #14]
	tx_data[3] = (data << 4) | xpin;
 80013b2:	79bb      	ldrb	r3, [r7, #6]
 80013b4:	011b      	lsls	r3, r3, #4
 80013b6:	b25a      	sxtb	r2, r3
 80013b8:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80013bc:	4313      	orrs	r3, r2
 80013be:	b25b      	sxtb	r3, r3
 80013c0:	b2db      	uxtb	r3, r3
 80013c2:	73fb      	strb	r3, [r7, #15]

	/* send data via i2c */
	HAL_I2C_Master_Transmit(&HI2C_DEF, addr, tx_data, 4, 100);
 80013c4:	79fb      	ldrb	r3, [r7, #7]
 80013c6:	b299      	uxth	r1, r3
 80013c8:	f107 020c 	add.w	r2, r7, #12
 80013cc:	2364      	movs	r3, #100	@ 0x64
 80013ce:	9300      	str	r3, [sp, #0]
 80013d0:	2304      	movs	r3, #4
 80013d2:	4805      	ldr	r0, [pc, #20]	@ (80013e8 <lcd_write+0x88>)
 80013d4:	f005 fd26 	bl	8006e24 <HAL_I2C_Master_Transmit>

	HAL_Delay(5);
 80013d8:	2005      	movs	r0, #5
 80013da:	f001 fbc9 	bl	8002b70 <HAL_Delay>
}
 80013de:	bf00      	nop
 80013e0:	3710      	adds	r7, #16
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	240002e0 	.word	0x240002e0

080013ec <lcd_display>:
 * Sends the contents of `f_line` and `s_line` to the LCD display.
 *
 * @param lcd Pointer to the lcd_disp structure containing the display data.
 */
void lcd_display(struct lcd_disp * lcd)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b084      	sub	sp, #16
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
	uint8_t xpin = 0, i = 0;
 80013f4:	2300      	movs	r3, #0
 80013f6:	73fb      	strb	r3, [r7, #15]
 80013f8:	2300      	movs	r3, #0
 80013fa:	73bb      	strb	r3, [r7, #14]

	/* set backlight */
	if(lcd->bl)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8001402:	2b00      	cmp	r3, #0
 8001404:	d001      	beq.n	800140a <lcd_display+0x1e>
	{
		xpin = BL_PIN;
 8001406:	2308      	movs	r3, #8
 8001408:	73fb      	strb	r3, [r7, #15]
	}

	lcd_clear(lcd);
 800140a:	6878      	ldr	r0, [r7, #4]
 800140c:	f000 f843 	bl	8001496 <lcd_clear>

	/* send first line data */
	lcd_write(lcd->addr, FIRST_CHAR_LINE_1, xpin);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	781b      	ldrb	r3, [r3, #0]
 8001414:	7bfa      	ldrb	r2, [r7, #15]
 8001416:	2180      	movs	r1, #128	@ 0x80
 8001418:	4618      	mov	r0, r3
 800141a:	f7ff ffa1 	bl	8001360 <lcd_write>
	while(lcd->f_line[i])
 800141e:	e00f      	b.n	8001440 <lcd_display+0x54>
	{
		lcd_write(lcd->addr, lcd->f_line[i], (xpin | RS_PIN));
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	7818      	ldrb	r0, [r3, #0]
 8001424:	7bbb      	ldrb	r3, [r7, #14]
 8001426:	687a      	ldr	r2, [r7, #4]
 8001428:	4413      	add	r3, r2
 800142a:	7859      	ldrb	r1, [r3, #1]
 800142c:	7bfb      	ldrb	r3, [r7, #15]
 800142e:	f043 0301 	orr.w	r3, r3, #1
 8001432:	b2db      	uxtb	r3, r3
 8001434:	461a      	mov	r2, r3
 8001436:	f7ff ff93 	bl	8001360 <lcd_write>
		i++;
 800143a:	7bbb      	ldrb	r3, [r7, #14]
 800143c:	3301      	adds	r3, #1
 800143e:	73bb      	strb	r3, [r7, #14]
	while(lcd->f_line[i])
 8001440:	7bbb      	ldrb	r3, [r7, #14]
 8001442:	687a      	ldr	r2, [r7, #4]
 8001444:	4413      	add	r3, r2
 8001446:	785b      	ldrb	r3, [r3, #1]
 8001448:	2b00      	cmp	r3, #0
 800144a:	d1e9      	bne.n	8001420 <lcd_display+0x34>
	}

	/* send second line data */
	i = 0;
 800144c:	2300      	movs	r3, #0
 800144e:	73bb      	strb	r3, [r7, #14]
	lcd_write(lcd->addr, FIRST_CHAR_LINE_2, xpin);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	781b      	ldrb	r3, [r3, #0]
 8001454:	7bfa      	ldrb	r2, [r7, #15]
 8001456:	21c0      	movs	r1, #192	@ 0xc0
 8001458:	4618      	mov	r0, r3
 800145a:	f7ff ff81 	bl	8001360 <lcd_write>
	while(lcd->s_line[i])
 800145e:	e00f      	b.n	8001480 <lcd_display+0x94>
	{
		lcd_write(lcd->addr, lcd->s_line[i], (xpin | RS_PIN));
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	7818      	ldrb	r0, [r3, #0]
 8001464:	7bbb      	ldrb	r3, [r7, #14]
 8001466:	687a      	ldr	r2, [r7, #4]
 8001468:	4413      	add	r3, r2
 800146a:	7c99      	ldrb	r1, [r3, #18]
 800146c:	7bfb      	ldrb	r3, [r7, #15]
 800146e:	f043 0301 	orr.w	r3, r3, #1
 8001472:	b2db      	uxtb	r3, r3
 8001474:	461a      	mov	r2, r3
 8001476:	f7ff ff73 	bl	8001360 <lcd_write>
		i++;
 800147a:	7bbb      	ldrb	r3, [r7, #14]
 800147c:	3301      	adds	r3, #1
 800147e:	73bb      	strb	r3, [r7, #14]
	while(lcd->s_line[i])
 8001480:	7bbb      	ldrb	r3, [r7, #14]
 8001482:	687a      	ldr	r2, [r7, #4]
 8001484:	4413      	add	r3, r2
 8001486:	7c9b      	ldrb	r3, [r3, #18]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d1e9      	bne.n	8001460 <lcd_display+0x74>
	}
}
 800148c:	bf00      	nop
 800148e:	bf00      	nop
 8001490:	3710      	adds	r7, #16
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}

08001496 <lcd_clear>:
 * Sends a clear command to the LCD and resets the content of the lcd_disp structure.
 *
 * @param lcd Pointer to the lcd_disp structure representing the LCD configuration.
 */
void lcd_clear(struct lcd_disp * lcd)
{
 8001496:	b580      	push	{r7, lr}
 8001498:	b084      	sub	sp, #16
 800149a:	af00      	add	r7, sp, #0
 800149c:	6078      	str	r0, [r7, #4]
	uint8_t xpin = 0;
 800149e:	2300      	movs	r3, #0
 80014a0:	73fb      	strb	r3, [r7, #15]

	/* set backlight */
	if(lcd->bl)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d001      	beq.n	80014b0 <lcd_clear+0x1a>
	{
		xpin = BL_PIN;
 80014ac:	2308      	movs	r3, #8
 80014ae:	73fb      	strb	r3, [r7, #15]
	}

	/* clear display */
	lcd_write(lcd->addr, CLEAR_LCD, xpin);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	7bfa      	ldrb	r2, [r7, #15]
 80014b6:	2101      	movs	r1, #1
 80014b8:	4618      	mov	r0, r3
 80014ba:	f7ff ff51 	bl	8001360 <lcd_write>
}
 80014be:	bf00      	nop
 80014c0:	3710      	adds	r7, #16
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}

080014c6 <jsmn_alloc_token>:
#ifndef JSMN_HEADER
/**
 * Allocates a fresh unused token from the token pool.
 */
static jsmntok_t *jsmn_alloc_token(jsmn_parser *parser, jsmntok_t *tokens,
                                   const size_t num_tokens) {
 80014c6:	b480      	push	{r7}
 80014c8:	b087      	sub	sp, #28
 80014ca:	af00      	add	r7, sp, #0
 80014cc:	60f8      	str	r0, [r7, #12]
 80014ce:	60b9      	str	r1, [r7, #8]
 80014d0:	607a      	str	r2, [r7, #4]
  jsmntok_t *tok;
  if (parser->toknext >= num_tokens) {
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	687a      	ldr	r2, [r7, #4]
 80014d8:	429a      	cmp	r2, r3
 80014da:	d801      	bhi.n	80014e0 <jsmn_alloc_token+0x1a>
    return NULL;
 80014dc:	2300      	movs	r3, #0
 80014de:	e014      	b.n	800150a <jsmn_alloc_token+0x44>
  }
  tok = &tokens[parser->toknext++];
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	1c59      	adds	r1, r3, #1
 80014e6:	68fa      	ldr	r2, [r7, #12]
 80014e8:	6051      	str	r1, [r2, #4]
 80014ea:	011b      	lsls	r3, r3, #4
 80014ec:	68ba      	ldr	r2, [r7, #8]
 80014ee:	4413      	add	r3, r2
 80014f0:	617b      	str	r3, [r7, #20]
  tok->start = tok->end = -1;
 80014f2:	697b      	ldr	r3, [r7, #20]
 80014f4:	f04f 32ff 	mov.w	r2, #4294967295
 80014f8:	609a      	str	r2, [r3, #8]
 80014fa:	697b      	ldr	r3, [r7, #20]
 80014fc:	689a      	ldr	r2, [r3, #8]
 80014fe:	697b      	ldr	r3, [r7, #20]
 8001500:	605a      	str	r2, [r3, #4]
  tok->size = 0;
 8001502:	697b      	ldr	r3, [r7, #20]
 8001504:	2200      	movs	r2, #0
 8001506:	60da      	str	r2, [r3, #12]
#ifdef JSMN_PARENT_LINKS
  tok->parent = -1;
#endif
  return tok;
 8001508:	697b      	ldr	r3, [r7, #20]
}
 800150a:	4618      	mov	r0, r3
 800150c:	371c      	adds	r7, #28
 800150e:	46bd      	mov	sp, r7
 8001510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001514:	4770      	bx	lr

08001516 <jsmn_fill_token>:

/**
 * Fills token type and boundaries.
 */
static void jsmn_fill_token(jsmntok_t *token, const jsmntype_t type,
                            const int start, const int end) {
 8001516:	b480      	push	{r7}
 8001518:	b085      	sub	sp, #20
 800151a:	af00      	add	r7, sp, #0
 800151c:	60f8      	str	r0, [r7, #12]
 800151e:	607a      	str	r2, [r7, #4]
 8001520:	603b      	str	r3, [r7, #0]
 8001522:	460b      	mov	r3, r1
 8001524:	72fb      	strb	r3, [r7, #11]
  token->type = type;
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	7afa      	ldrb	r2, [r7, #11]
 800152a:	701a      	strb	r2, [r3, #0]
  token->start = start;
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	687a      	ldr	r2, [r7, #4]
 8001530:	605a      	str	r2, [r3, #4]
  token->end = end;
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	683a      	ldr	r2, [r7, #0]
 8001536:	609a      	str	r2, [r3, #8]
  token->size = 0;
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	2200      	movs	r2, #0
 800153c:	60da      	str	r2, [r3, #12]
}
 800153e:	bf00      	nop
 8001540:	3714      	adds	r7, #20
 8001542:	46bd      	mov	sp, r7
 8001544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001548:	4770      	bx	lr
	...

0800154c <jsmn_parse_primitive>:
/**
 * Fills next available token with JSON primitive.
 */
static int jsmn_parse_primitive(jsmn_parser *parser, const char *js,
                                const size_t len, jsmntok_t *tokens,
                                const size_t num_tokens) {
 800154c:	b580      	push	{r7, lr}
 800154e:	b086      	sub	sp, #24
 8001550:	af00      	add	r7, sp, #0
 8001552:	60f8      	str	r0, [r7, #12]
 8001554:	60b9      	str	r1, [r7, #8]
 8001556:	607a      	str	r2, [r7, #4]
 8001558:	603b      	str	r3, [r7, #0]
  jsmntok_t *token;
  int start;

  start = parser->pos;
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	617b      	str	r3, [r7, #20]

  for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 8001560:	e03f      	b.n	80015e2 <jsmn_parse_primitive+0x96>
    switch (js[parser->pos]) {
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	68ba      	ldr	r2, [r7, #8]
 8001568:	4413      	add	r3, r2
 800156a:	781b      	ldrb	r3, [r3, #0]
 800156c:	2b7d      	cmp	r3, #125	@ 0x7d
 800156e:	d045      	beq.n	80015fc <jsmn_parse_primitive+0xb0>
 8001570:	2b7d      	cmp	r3, #125	@ 0x7d
 8001572:	dc1c      	bgt.n	80015ae <jsmn_parse_primitive+0x62>
 8001574:	2b5d      	cmp	r3, #93	@ 0x5d
 8001576:	d041      	beq.n	80015fc <jsmn_parse_primitive+0xb0>
 8001578:	2b5d      	cmp	r3, #93	@ 0x5d
 800157a:	dc18      	bgt.n	80015ae <jsmn_parse_primitive+0x62>
 800157c:	2b3a      	cmp	r3, #58	@ 0x3a
 800157e:	dc16      	bgt.n	80015ae <jsmn_parse_primitive+0x62>
 8001580:	2b20      	cmp	r3, #32
 8001582:	da04      	bge.n	800158e <jsmn_parse_primitive+0x42>
 8001584:	2b0a      	cmp	r3, #10
 8001586:	dc10      	bgt.n	80015aa <jsmn_parse_primitive+0x5e>
 8001588:	2b09      	cmp	r3, #9
 800158a:	da37      	bge.n	80015fc <jsmn_parse_primitive+0xb0>
    case ']':
    case '}':
      goto found;
    default:
                   /* to quiet a warning from gcc*/
      break;
 800158c:	e00f      	b.n	80015ae <jsmn_parse_primitive+0x62>
    switch (js[parser->pos]) {
 800158e:	3b20      	subs	r3, #32
 8001590:	4a31      	ldr	r2, [pc, #196]	@ (8001658 <jsmn_parse_primitive+0x10c>)
 8001592:	fa22 f303 	lsr.w	r3, r2, r3
 8001596:	f003 0301 	and.w	r3, r3, #1
 800159a:	2b00      	cmp	r3, #0
 800159c:	bf14      	ite	ne
 800159e:	2301      	movne	r3, #1
 80015a0:	2300      	moveq	r3, #0
 80015a2:	b2db      	uxtb	r3, r3
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d129      	bne.n	80015fc <jsmn_parse_primitive+0xb0>
      break;
 80015a8:	e001      	b.n	80015ae <jsmn_parse_primitive+0x62>
    switch (js[parser->pos]) {
 80015aa:	2b0d      	cmp	r3, #13
 80015ac:	d026      	beq.n	80015fc <jsmn_parse_primitive+0xb0>
      break;
 80015ae:	bf00      	nop
    }
    if (js[parser->pos] < 32 || js[parser->pos] >= 127) {
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	68ba      	ldr	r2, [r7, #8]
 80015b6:	4413      	add	r3, r2
 80015b8:	781b      	ldrb	r3, [r3, #0]
 80015ba:	2b1f      	cmp	r3, #31
 80015bc:	d906      	bls.n	80015cc <jsmn_parse_primitive+0x80>
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	68ba      	ldr	r2, [r7, #8]
 80015c4:	4413      	add	r3, r2
 80015c6:	781b      	ldrb	r3, [r3, #0]
 80015c8:	2b7e      	cmp	r3, #126	@ 0x7e
 80015ca:	d905      	bls.n	80015d8 <jsmn_parse_primitive+0x8c>
      parser->pos = start;
 80015cc:	697a      	ldr	r2, [r7, #20]
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	601a      	str	r2, [r3, #0]
      return JSMN_ERROR_INVAL;
 80015d2:	f06f 0301 	mvn.w	r3, #1
 80015d6:	e03a      	b.n	800164e <jsmn_parse_primitive+0x102>
  for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	1c5a      	adds	r2, r3, #1
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	601a      	str	r2, [r3, #0]
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	687a      	ldr	r2, [r7, #4]
 80015e8:	429a      	cmp	r2, r3
 80015ea:	d909      	bls.n	8001600 <jsmn_parse_primitive+0xb4>
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	68ba      	ldr	r2, [r7, #8]
 80015f2:	4413      	add	r3, r2
 80015f4:	781b      	ldrb	r3, [r3, #0]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d1b3      	bne.n	8001562 <jsmn_parse_primitive+0x16>
  /* In strict mode primitive must be followed by a comma/object/array */
  parser->pos = start;
  return JSMN_ERROR_PART;
#endif

found:
 80015fa:	e001      	b.n	8001600 <jsmn_parse_primitive+0xb4>
      goto found;
 80015fc:	bf00      	nop
 80015fe:	e000      	b.n	8001602 <jsmn_parse_primitive+0xb6>
found:
 8001600:	bf00      	nop
  if (tokens == NULL) {
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	2b00      	cmp	r3, #0
 8001606:	d106      	bne.n	8001616 <jsmn_parse_primitive+0xca>
    parser->pos--;
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	1e5a      	subs	r2, r3, #1
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	601a      	str	r2, [r3, #0]
    return 0;
 8001612:	2300      	movs	r3, #0
 8001614:	e01b      	b.n	800164e <jsmn_parse_primitive+0x102>
  }
  token = jsmn_alloc_token(parser, tokens, num_tokens);
 8001616:	6a3a      	ldr	r2, [r7, #32]
 8001618:	6839      	ldr	r1, [r7, #0]
 800161a:	68f8      	ldr	r0, [r7, #12]
 800161c:	f7ff ff53 	bl	80014c6 <jsmn_alloc_token>
 8001620:	6138      	str	r0, [r7, #16]
  if (token == NULL) {
 8001622:	693b      	ldr	r3, [r7, #16]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d105      	bne.n	8001634 <jsmn_parse_primitive+0xe8>
    parser->pos = start;
 8001628:	697a      	ldr	r2, [r7, #20]
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	601a      	str	r2, [r3, #0]
    return JSMN_ERROR_NOMEM;
 800162e:	f04f 33ff 	mov.w	r3, #4294967295
 8001632:	e00c      	b.n	800164e <jsmn_parse_primitive+0x102>
  }
  jsmn_fill_token(token, JSMN_PRIMITIVE, start, parser->pos);
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	697a      	ldr	r2, [r7, #20]
 800163a:	2108      	movs	r1, #8
 800163c:	6938      	ldr	r0, [r7, #16]
 800163e:	f7ff ff6a 	bl	8001516 <jsmn_fill_token>
#ifdef JSMN_PARENT_LINKS
  token->parent = parser->toksuper;
#endif
  parser->pos--;
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	1e5a      	subs	r2, r3, #1
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	601a      	str	r2, [r3, #0]
  return 0;
 800164c:	2300      	movs	r3, #0
}
 800164e:	4618      	mov	r0, r3
 8001650:	3718      	adds	r7, #24
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	04001001 	.word	0x04001001

0800165c <jsmn_parse_string>:
/**
 * Fills next token with JSON string.
 */
static int jsmn_parse_string(jsmn_parser *parser, const char *js,
                             const size_t len, jsmntok_t *tokens,
                             const size_t num_tokens) {
 800165c:	b580      	push	{r7, lr}
 800165e:	b088      	sub	sp, #32
 8001660:	af00      	add	r7, sp, #0
 8001662:	60f8      	str	r0, [r7, #12]
 8001664:	60b9      	str	r1, [r7, #8]
 8001666:	607a      	str	r2, [r7, #4]
 8001668:	603b      	str	r3, [r7, #0]
  jsmntok_t *token;

  int start = parser->pos;
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	61bb      	str	r3, [r7, #24]
  
  /* Skip starting quote */
  parser->pos++;
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	1c5a      	adds	r2, r3, #1
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	601a      	str	r2, [r3, #0]
  
  for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 800167a:	e0ba      	b.n	80017f2 <jsmn_parse_string+0x196>
    char c = js[parser->pos];
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	68ba      	ldr	r2, [r7, #8]
 8001682:	4413      	add	r3, r2
 8001684:	781b      	ldrb	r3, [r3, #0]
 8001686:	75fb      	strb	r3, [r7, #23]

    /* Quote: end of string */
    if (c == '\"') {
 8001688:	7dfb      	ldrb	r3, [r7, #23]
 800168a:	2b22      	cmp	r3, #34	@ 0x22
 800168c:	d11d      	bne.n	80016ca <jsmn_parse_string+0x6e>
      if (tokens == NULL) {
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d101      	bne.n	8001698 <jsmn_parse_string+0x3c>
        return 0;
 8001694:	2300      	movs	r3, #0
 8001696:	e0be      	b.n	8001816 <jsmn_parse_string+0x1ba>
      }
      token = jsmn_alloc_token(parser, tokens, num_tokens);
 8001698:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800169a:	6839      	ldr	r1, [r7, #0]
 800169c:	68f8      	ldr	r0, [r7, #12]
 800169e:	f7ff ff12 	bl	80014c6 <jsmn_alloc_token>
 80016a2:	6138      	str	r0, [r7, #16]
      if (token == NULL) {
 80016a4:	693b      	ldr	r3, [r7, #16]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d105      	bne.n	80016b6 <jsmn_parse_string+0x5a>
        parser->pos = start;
 80016aa:	69ba      	ldr	r2, [r7, #24]
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	601a      	str	r2, [r3, #0]
        return JSMN_ERROR_NOMEM;
 80016b0:	f04f 33ff 	mov.w	r3, #4294967295
 80016b4:	e0af      	b.n	8001816 <jsmn_parse_string+0x1ba>
      }
      jsmn_fill_token(token, JSMN_STRING, start + 1, parser->pos);
 80016b6:	69bb      	ldr	r3, [r7, #24]
 80016b8:	1c5a      	adds	r2, r3, #1
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	2104      	movs	r1, #4
 80016c0:	6938      	ldr	r0, [r7, #16]
 80016c2:	f7ff ff28 	bl	8001516 <jsmn_fill_token>
#ifdef JSMN_PARENT_LINKS
      token->parent = parser->toksuper;
#endif
      return 0;
 80016c6:	2300      	movs	r3, #0
 80016c8:	e0a5      	b.n	8001816 <jsmn_parse_string+0x1ba>
    }

    /* Backslash: Quoted symbol expected */
    if (c == '\\' && parser->pos + 1 < len) {
 80016ca:	7dfb      	ldrb	r3, [r7, #23]
 80016cc:	2b5c      	cmp	r3, #92	@ 0x5c
 80016ce:	f040 808b 	bne.w	80017e8 <jsmn_parse_string+0x18c>
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	3301      	adds	r3, #1
 80016d8:	687a      	ldr	r2, [r7, #4]
 80016da:	429a      	cmp	r2, r3
 80016dc:	f240 8084 	bls.w	80017e8 <jsmn_parse_string+0x18c>
      int i;
      parser->pos++;
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	1c5a      	adds	r2, r3, #1
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	601a      	str	r2, [r3, #0]
      switch (js[parser->pos]) {
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	68ba      	ldr	r2, [r7, #8]
 80016f0:	4413      	add	r3, r2
 80016f2:	781b      	ldrb	r3, [r3, #0]
 80016f4:	2b75      	cmp	r3, #117	@ 0x75
 80016f6:	dc70      	bgt.n	80017da <jsmn_parse_string+0x17e>
 80016f8:	2b5c      	cmp	r3, #92	@ 0x5c
 80016fa:	da04      	bge.n	8001706 <jsmn_parse_string+0xaa>
 80016fc:	2b22      	cmp	r3, #34	@ 0x22
 80016fe:	d072      	beq.n	80017e6 <jsmn_parse_string+0x18a>
 8001700:	2b2f      	cmp	r3, #47	@ 0x2f
 8001702:	d070      	beq.n	80017e6 <jsmn_parse_string+0x18a>
 8001704:	e069      	b.n	80017da <jsmn_parse_string+0x17e>
 8001706:	3b5c      	subs	r3, #92	@ 0x5c
 8001708:	2201      	movs	r2, #1
 800170a:	409a      	lsls	r2, r3
 800170c:	4b44      	ldr	r3, [pc, #272]	@ (8001820 <jsmn_parse_string+0x1c4>)
 800170e:	4013      	ands	r3, r2
 8001710:	2b00      	cmp	r3, #0
 8001712:	bf14      	ite	ne
 8001714:	2301      	movne	r3, #1
 8001716:	2300      	moveq	r3, #0
 8001718:	b2db      	uxtb	r3, r3
 800171a:	2b00      	cmp	r3, #0
 800171c:	d163      	bne.n	80017e6 <jsmn_parse_string+0x18a>
 800171e:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8001722:	2b00      	cmp	r3, #0
 8001724:	bf14      	ite	ne
 8001726:	2301      	movne	r3, #1
 8001728:	2300      	moveq	r3, #0
 800172a:	b2db      	uxtb	r3, r3
 800172c:	2b00      	cmp	r3, #0
 800172e:	d054      	beq.n	80017da <jsmn_parse_string+0x17e>
      case 'n':
      case 't':
        break;
      /* Allows escaped symbol \uXXXX */
      case 'u':
        parser->pos++;
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	1c5a      	adds	r2, r3, #1
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	601a      	str	r2, [r3, #0]
        for (i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0';
 800173a:	2300      	movs	r3, #0
 800173c:	61fb      	str	r3, [r7, #28]
 800173e:	e037      	b.n	80017b0 <jsmn_parse_string+0x154>
             i++) {
          /* If it isn't a hex character we have an error */
          if (!((js[parser->pos] >= 48 && js[parser->pos] <= 57) ||   /* 0-9 */
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	68ba      	ldr	r2, [r7, #8]
 8001746:	4413      	add	r3, r2
 8001748:	781b      	ldrb	r3, [r3, #0]
 800174a:	2b2f      	cmp	r3, #47	@ 0x2f
 800174c:	d906      	bls.n	800175c <jsmn_parse_string+0x100>
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	68ba      	ldr	r2, [r7, #8]
 8001754:	4413      	add	r3, r2
 8001756:	781b      	ldrb	r3, [r3, #0]
 8001758:	2b39      	cmp	r3, #57	@ 0x39
 800175a:	d921      	bls.n	80017a0 <jsmn_parse_string+0x144>
                (js[parser->pos] >= 65 && js[parser->pos] <= 70) ||   /* A-F */
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	68ba      	ldr	r2, [r7, #8]
 8001762:	4413      	add	r3, r2
 8001764:	781b      	ldrb	r3, [r3, #0]
          if (!((js[parser->pos] >= 48 && js[parser->pos] <= 57) ||   /* 0-9 */
 8001766:	2b40      	cmp	r3, #64	@ 0x40
 8001768:	d906      	bls.n	8001778 <jsmn_parse_string+0x11c>
                (js[parser->pos] >= 65 && js[parser->pos] <= 70) ||   /* A-F */
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	68ba      	ldr	r2, [r7, #8]
 8001770:	4413      	add	r3, r2
 8001772:	781b      	ldrb	r3, [r3, #0]
 8001774:	2b46      	cmp	r3, #70	@ 0x46
 8001776:	d913      	bls.n	80017a0 <jsmn_parse_string+0x144>
                (js[parser->pos] >= 97 && js[parser->pos] <= 102))) { /* a-f */
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	68ba      	ldr	r2, [r7, #8]
 800177e:	4413      	add	r3, r2
 8001780:	781b      	ldrb	r3, [r3, #0]
          if (!((js[parser->pos] >= 48 && js[parser->pos] <= 57) ||   /* 0-9 */
 8001782:	2b60      	cmp	r3, #96	@ 0x60
 8001784:	d906      	bls.n	8001794 <jsmn_parse_string+0x138>
                (js[parser->pos] >= 97 && js[parser->pos] <= 102))) { /* a-f */
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	68ba      	ldr	r2, [r7, #8]
 800178c:	4413      	add	r3, r2
 800178e:	781b      	ldrb	r3, [r3, #0]
 8001790:	2b66      	cmp	r3, #102	@ 0x66
 8001792:	d905      	bls.n	80017a0 <jsmn_parse_string+0x144>
            parser->pos = start;
 8001794:	69ba      	ldr	r2, [r7, #24]
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	601a      	str	r2, [r3, #0]
            return JSMN_ERROR_INVAL;
 800179a:	f06f 0301 	mvn.w	r3, #1
 800179e:	e03a      	b.n	8001816 <jsmn_parse_string+0x1ba>
          }
          parser->pos++;
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	1c5a      	adds	r2, r3, #1
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	601a      	str	r2, [r3, #0]
             i++) {
 80017aa:	69fb      	ldr	r3, [r7, #28]
 80017ac:	3301      	adds	r3, #1
 80017ae:	61fb      	str	r3, [r7, #28]
        for (i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0';
 80017b0:	69fb      	ldr	r3, [r7, #28]
 80017b2:	2b03      	cmp	r3, #3
 80017b4:	dc0b      	bgt.n	80017ce <jsmn_parse_string+0x172>
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	687a      	ldr	r2, [r7, #4]
 80017bc:	429a      	cmp	r2, r3
 80017be:	d906      	bls.n	80017ce <jsmn_parse_string+0x172>
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	68ba      	ldr	r2, [r7, #8]
 80017c6:	4413      	add	r3, r2
 80017c8:	781b      	ldrb	r3, [r3, #0]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d1b8      	bne.n	8001740 <jsmn_parse_string+0xe4>
        }
        parser->pos--;
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	1e5a      	subs	r2, r3, #1
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	601a      	str	r2, [r3, #0]
        break;
 80017d8:	e006      	b.n	80017e8 <jsmn_parse_string+0x18c>
      /* Unexpected symbol */
      default:
        parser->pos = start;
 80017da:	69ba      	ldr	r2, [r7, #24]
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	601a      	str	r2, [r3, #0]
        return JSMN_ERROR_INVAL;
 80017e0:	f06f 0301 	mvn.w	r3, #1
 80017e4:	e017      	b.n	8001816 <jsmn_parse_string+0x1ba>
        break;
 80017e6:	bf00      	nop
  for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	1c5a      	adds	r2, r3, #1
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	601a      	str	r2, [r3, #0]
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	687a      	ldr	r2, [r7, #4]
 80017f8:	429a      	cmp	r2, r3
 80017fa:	d907      	bls.n	800180c <jsmn_parse_string+0x1b0>
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	68ba      	ldr	r2, [r7, #8]
 8001802:	4413      	add	r3, r2
 8001804:	781b      	ldrb	r3, [r3, #0]
 8001806:	2b00      	cmp	r3, #0
 8001808:	f47f af38 	bne.w	800167c <jsmn_parse_string+0x20>
      }
    }
  }
  parser->pos = start;
 800180c:	69ba      	ldr	r2, [r7, #24]
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	601a      	str	r2, [r3, #0]
  return JSMN_ERROR_PART;
 8001812:	f06f 0302 	mvn.w	r3, #2
}
 8001816:	4618      	mov	r0, r3
 8001818:	3720      	adds	r7, #32
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	01440441 	.word	0x01440441

08001824 <jsmn_parse>:

/**
 * Parse JSON string and fill tokens.
 */
JSMN_API int jsmn_parse(jsmn_parser *parser, const char *js, const size_t len,
                        jsmntok_t *tokens, const unsigned int num_tokens) {
 8001824:	b580      	push	{r7, lr}
 8001826:	b08c      	sub	sp, #48	@ 0x30
 8001828:	af02      	add	r7, sp, #8
 800182a:	60f8      	str	r0, [r7, #12]
 800182c:	60b9      	str	r1, [r7, #8]
 800182e:	607a      	str	r2, [r7, #4]
 8001830:	603b      	str	r3, [r7, #0]
  int r;
  int i;
  jsmntok_t *token;
  int count = parser->toknext;
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	623b      	str	r3, [r7, #32]

  for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 8001838:	e176      	b.n	8001b28 <jsmn_parse+0x304>
    char c;
    jsmntype_t type;

    c = js[parser->pos];
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	68ba      	ldr	r2, [r7, #8]
 8001840:	4413      	add	r3, r2
 8001842:	781b      	ldrb	r3, [r3, #0]
 8001844:	77fb      	strb	r3, [r7, #31]
    switch (c) {
 8001846:	7ffb      	ldrb	r3, [r7, #31]
 8001848:	2b7d      	cmp	r3, #125	@ 0x7d
 800184a:	d06c      	beq.n	8001926 <jsmn_parse+0x102>
 800184c:	2b7d      	cmp	r3, #125	@ 0x7d
 800184e:	f300 8136 	bgt.w	8001abe <jsmn_parse+0x29a>
 8001852:	2b7b      	cmp	r3, #123	@ 0x7b
 8001854:	d030      	beq.n	80018b8 <jsmn_parse+0x94>
 8001856:	2b7b      	cmp	r3, #123	@ 0x7b
 8001858:	f300 8131 	bgt.w	8001abe <jsmn_parse+0x29a>
 800185c:	2b5d      	cmp	r3, #93	@ 0x5d
 800185e:	d062      	beq.n	8001926 <jsmn_parse+0x102>
 8001860:	2b5d      	cmp	r3, #93	@ 0x5d
 8001862:	f300 812c 	bgt.w	8001abe <jsmn_parse+0x29a>
 8001866:	2b5b      	cmp	r3, #91	@ 0x5b
 8001868:	d026      	beq.n	80018b8 <jsmn_parse+0x94>
 800186a:	2b5b      	cmp	r3, #91	@ 0x5b
 800186c:	f300 8127 	bgt.w	8001abe <jsmn_parse+0x29a>
 8001870:	2b3a      	cmp	r3, #58	@ 0x3a
 8001872:	f000 80d6 	beq.w	8001a22 <jsmn_parse+0x1fe>
 8001876:	2b3a      	cmp	r3, #58	@ 0x3a
 8001878:	f300 8121 	bgt.w	8001abe <jsmn_parse+0x29a>
 800187c:	2b2c      	cmp	r3, #44	@ 0x2c
 800187e:	f000 80d7 	beq.w	8001a30 <jsmn_parse+0x20c>
 8001882:	2b2c      	cmp	r3, #44	@ 0x2c
 8001884:	f300 811b 	bgt.w	8001abe <jsmn_parse+0x29a>
 8001888:	2b20      	cmp	r3, #32
 800188a:	dc11      	bgt.n	80018b0 <jsmn_parse+0x8c>
 800188c:	2b09      	cmp	r3, #9
 800188e:	f2c0 8116 	blt.w	8001abe <jsmn_parse+0x29a>
 8001892:	3b09      	subs	r3, #9
 8001894:	4a91      	ldr	r2, [pc, #580]	@ (8001adc <jsmn_parse+0x2b8>)
 8001896:	fa22 f303 	lsr.w	r3, r2, r3
 800189a:	f003 0301 	and.w	r3, r3, #1
 800189e:	2b00      	cmp	r3, #0
 80018a0:	bf14      	ite	ne
 80018a2:	2301      	movne	r3, #1
 80018a4:	2300      	moveq	r3, #0
 80018a6:	b2db      	uxtb	r3, r3
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	f040 812d 	bne.w	8001b08 <jsmn_parse+0x2e4>
 80018ae:	e106      	b.n	8001abe <jsmn_parse+0x29a>
 80018b0:	2b22      	cmp	r3, #34	@ 0x22
 80018b2:	f000 8092 	beq.w	80019da <jsmn_parse+0x1b6>
 80018b6:	e102      	b.n	8001abe <jsmn_parse+0x29a>
    case '{':
    case '[':
      count++;
 80018b8:	6a3b      	ldr	r3, [r7, #32]
 80018ba:	3301      	adds	r3, #1
 80018bc:	623b      	str	r3, [r7, #32]
      if (tokens == NULL) {
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	f000 8123 	beq.w	8001b0c <jsmn_parse+0x2e8>
        break;
      }
      token = jsmn_alloc_token(parser, tokens, num_tokens);
 80018c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80018c8:	6839      	ldr	r1, [r7, #0]
 80018ca:	68f8      	ldr	r0, [r7, #12]
 80018cc:	f7ff fdfb 	bl	80014c6 <jsmn_alloc_token>
 80018d0:	61b8      	str	r0, [r7, #24]
      if (token == NULL) {
 80018d2:	69bb      	ldr	r3, [r7, #24]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d102      	bne.n	80018de <jsmn_parse+0xba>
        return JSMN_ERROR_NOMEM;
 80018d8:	f04f 33ff 	mov.w	r3, #4294967295
 80018dc:	e153      	b.n	8001b86 <jsmn_parse+0x362>
      }
      if (parser->toksuper != -1) {
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	689b      	ldr	r3, [r3, #8]
 80018e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018e6:	d00a      	beq.n	80018fe <jsmn_parse+0xda>
        jsmntok_t *t = &tokens[parser->toksuper];
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	689b      	ldr	r3, [r3, #8]
 80018ec:	011b      	lsls	r3, r3, #4
 80018ee:	683a      	ldr	r2, [r7, #0]
 80018f0:	4413      	add	r3, r2
 80018f2:	617b      	str	r3, [r7, #20]
        /* In strict mode an object or array can't become a key */
        if (t->type == JSMN_OBJECT) {
          return JSMN_ERROR_INVAL;
        }
#endif
        t->size++;
 80018f4:	697b      	ldr	r3, [r7, #20]
 80018f6:	68db      	ldr	r3, [r3, #12]
 80018f8:	1c5a      	adds	r2, r3, #1
 80018fa:	697b      	ldr	r3, [r7, #20]
 80018fc:	60da      	str	r2, [r3, #12]
#ifdef JSMN_PARENT_LINKS
        token->parent = parser->toksuper;
#endif
      }
      token->type = (c == '{' ? JSMN_OBJECT : JSMN_ARRAY);
 80018fe:	7ffb      	ldrb	r3, [r7, #31]
 8001900:	2b7b      	cmp	r3, #123	@ 0x7b
 8001902:	d101      	bne.n	8001908 <jsmn_parse+0xe4>
 8001904:	2201      	movs	r2, #1
 8001906:	e000      	b.n	800190a <jsmn_parse+0xe6>
 8001908:	2202      	movs	r2, #2
 800190a:	69bb      	ldr	r3, [r7, #24]
 800190c:	701a      	strb	r2, [r3, #0]
      token->start = parser->pos;
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	461a      	mov	r2, r3
 8001914:	69bb      	ldr	r3, [r7, #24]
 8001916:	605a      	str	r2, [r3, #4]
      parser->toksuper = parser->toknext - 1;
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	3b01      	subs	r3, #1
 800191e:	461a      	mov	r2, r3
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	609a      	str	r2, [r3, #8]
      break;
 8001924:	e0fb      	b.n	8001b1e <jsmn_parse+0x2fa>
    case '}':
    case ']':
      if (tokens == NULL) {
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	2b00      	cmp	r3, #0
 800192a:	f000 80f1 	beq.w	8001b10 <jsmn_parse+0x2ec>
        break;
      }
      type = (c == '}' ? JSMN_OBJECT : JSMN_ARRAY);
 800192e:	7ffb      	ldrb	r3, [r7, #31]
 8001930:	2b7d      	cmp	r3, #125	@ 0x7d
 8001932:	d101      	bne.n	8001938 <jsmn_parse+0x114>
 8001934:	2301      	movs	r3, #1
 8001936:	e000      	b.n	800193a <jsmn_parse+0x116>
 8001938:	2302      	movs	r3, #2
 800193a:	77bb      	strb	r3, [r7, #30]
          break;
        }
        token = &tokens[token->parent];
      }
#else
      for (i = parser->toknext - 1; i >= 0; i--) {
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	3b01      	subs	r3, #1
 8001942:	627b      	str	r3, [r7, #36]	@ 0x24
 8001944:	e024      	b.n	8001990 <jsmn_parse+0x16c>
        token = &tokens[i];
 8001946:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001948:	011b      	lsls	r3, r3, #4
 800194a:	683a      	ldr	r2, [r7, #0]
 800194c:	4413      	add	r3, r2
 800194e:	61bb      	str	r3, [r7, #24]
        if (token->start != -1 && token->end == -1) {
 8001950:	69bb      	ldr	r3, [r7, #24]
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001958:	d017      	beq.n	800198a <jsmn_parse+0x166>
 800195a:	69bb      	ldr	r3, [r7, #24]
 800195c:	689b      	ldr	r3, [r3, #8]
 800195e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001962:	d112      	bne.n	800198a <jsmn_parse+0x166>
          if (token->type != type) {
 8001964:	69bb      	ldr	r3, [r7, #24]
 8001966:	781b      	ldrb	r3, [r3, #0]
 8001968:	7fba      	ldrb	r2, [r7, #30]
 800196a:	429a      	cmp	r2, r3
 800196c:	d002      	beq.n	8001974 <jsmn_parse+0x150>
            return JSMN_ERROR_INVAL;
 800196e:	f06f 0301 	mvn.w	r3, #1
 8001972:	e108      	b.n	8001b86 <jsmn_parse+0x362>
          }
          parser->toksuper = -1;
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	f04f 32ff 	mov.w	r2, #4294967295
 800197a:	609a      	str	r2, [r3, #8]
          token->end = parser->pos + 1;
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	3301      	adds	r3, #1
 8001982:	461a      	mov	r2, r3
 8001984:	69bb      	ldr	r3, [r7, #24]
 8001986:	609a      	str	r2, [r3, #8]
          break;
 8001988:	e005      	b.n	8001996 <jsmn_parse+0x172>
      for (i = parser->toknext - 1; i >= 0; i--) {
 800198a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800198c:	3b01      	subs	r3, #1
 800198e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001990:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001992:	2b00      	cmp	r3, #0
 8001994:	dad7      	bge.n	8001946 <jsmn_parse+0x122>
        }
      }
      /* Error if unmatched closing bracket */
      if (i == -1) {
 8001996:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001998:	f1b3 3fff 	cmp.w	r3, #4294967295
 800199c:	d119      	bne.n	80019d2 <jsmn_parse+0x1ae>
        return JSMN_ERROR_INVAL;
 800199e:	f06f 0301 	mvn.w	r3, #1
 80019a2:	e0f0      	b.n	8001b86 <jsmn_parse+0x362>
      }
      for (; i >= 0; i--) {
        token = &tokens[i];
 80019a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019a6:	011b      	lsls	r3, r3, #4
 80019a8:	683a      	ldr	r2, [r7, #0]
 80019aa:	4413      	add	r3, r2
 80019ac:	61bb      	str	r3, [r7, #24]
        if (token->start != -1 && token->end == -1) {
 80019ae:	69bb      	ldr	r3, [r7, #24]
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019b6:	d009      	beq.n	80019cc <jsmn_parse+0x1a8>
 80019b8:	69bb      	ldr	r3, [r7, #24]
 80019ba:	689b      	ldr	r3, [r3, #8]
 80019bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019c0:	d104      	bne.n	80019cc <jsmn_parse+0x1a8>
          parser->toksuper = i;
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80019c6:	609a      	str	r2, [r3, #8]
          break;
 80019c8:	bf00      	nop
        }
      }
#endif
      break;
 80019ca:	e0a8      	b.n	8001b1e <jsmn_parse+0x2fa>
      for (; i >= 0; i--) {
 80019cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019ce:	3b01      	subs	r3, #1
 80019d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80019d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	dae5      	bge.n	80019a4 <jsmn_parse+0x180>
      break;
 80019d8:	e0a1      	b.n	8001b1e <jsmn_parse+0x2fa>
    case '\"':
      r = jsmn_parse_string(parser, js, len, tokens, num_tokens);
 80019da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80019dc:	9300      	str	r3, [sp, #0]
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	687a      	ldr	r2, [r7, #4]
 80019e2:	68b9      	ldr	r1, [r7, #8]
 80019e4:	68f8      	ldr	r0, [r7, #12]
 80019e6:	f7ff fe39 	bl	800165c <jsmn_parse_string>
 80019ea:	6138      	str	r0, [r7, #16]
      if (r < 0) {
 80019ec:	693b      	ldr	r3, [r7, #16]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	da01      	bge.n	80019f6 <jsmn_parse+0x1d2>
        return r;
 80019f2:	693b      	ldr	r3, [r7, #16]
 80019f4:	e0c7      	b.n	8001b86 <jsmn_parse+0x362>
      }
      count++;
 80019f6:	6a3b      	ldr	r3, [r7, #32]
 80019f8:	3301      	adds	r3, #1
 80019fa:	623b      	str	r3, [r7, #32]
      if (parser->toksuper != -1 && tokens != NULL) {
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	689b      	ldr	r3, [r3, #8]
 8001a00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a04:	f000 8086 	beq.w	8001b14 <jsmn_parse+0x2f0>
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	f000 8082 	beq.w	8001b14 <jsmn_parse+0x2f0>
        tokens[parser->toksuper].size++;
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	689b      	ldr	r3, [r3, #8]
 8001a14:	011b      	lsls	r3, r3, #4
 8001a16:	683a      	ldr	r2, [r7, #0]
 8001a18:	4413      	add	r3, r2
 8001a1a:	68da      	ldr	r2, [r3, #12]
 8001a1c:	3201      	adds	r2, #1
 8001a1e:	60da      	str	r2, [r3, #12]
      }
      break;
 8001a20:	e078      	b.n	8001b14 <jsmn_parse+0x2f0>
    case '\r':
    case '\n':
    case ' ':
      break;
    case ':':
      parser->toksuper = parser->toknext - 1;
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	3b01      	subs	r3, #1
 8001a28:	461a      	mov	r2, r3
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	609a      	str	r2, [r3, #8]
      break;
 8001a2e:	e076      	b.n	8001b1e <jsmn_parse+0x2fa>
    case ',':
      if (tokens != NULL && parser->toksuper != -1 &&
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d070      	beq.n	8001b18 <jsmn_parse+0x2f4>
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	689b      	ldr	r3, [r3, #8]
 8001a3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a3e:	d06b      	beq.n	8001b18 <jsmn_parse+0x2f4>
          tokens[parser->toksuper].type != JSMN_ARRAY &&
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	689b      	ldr	r3, [r3, #8]
 8001a44:	011b      	lsls	r3, r3, #4
 8001a46:	683a      	ldr	r2, [r7, #0]
 8001a48:	4413      	add	r3, r2
 8001a4a:	781b      	ldrb	r3, [r3, #0]
      if (tokens != NULL && parser->toksuper != -1 &&
 8001a4c:	2b02      	cmp	r3, #2
 8001a4e:	d063      	beq.n	8001b18 <jsmn_parse+0x2f4>
          tokens[parser->toksuper].type != JSMN_OBJECT) {
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	689b      	ldr	r3, [r3, #8]
 8001a54:	011b      	lsls	r3, r3, #4
 8001a56:	683a      	ldr	r2, [r7, #0]
 8001a58:	4413      	add	r3, r2
 8001a5a:	781b      	ldrb	r3, [r3, #0]
          tokens[parser->toksuper].type != JSMN_ARRAY &&
 8001a5c:	2b01      	cmp	r3, #1
 8001a5e:	d05b      	beq.n	8001b18 <jsmn_parse+0x2f4>
#ifdef JSMN_PARENT_LINKS
        parser->toksuper = tokens[parser->toksuper].parent;
#else
        for (i = parser->toknext - 1; i >= 0; i--) {
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	3b01      	subs	r3, #1
 8001a66:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a68:	e025      	b.n	8001ab6 <jsmn_parse+0x292>
          if (tokens[i].type == JSMN_ARRAY || tokens[i].type == JSMN_OBJECT) {
 8001a6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a6c:	011b      	lsls	r3, r3, #4
 8001a6e:	683a      	ldr	r2, [r7, #0]
 8001a70:	4413      	add	r3, r2
 8001a72:	781b      	ldrb	r3, [r3, #0]
 8001a74:	2b02      	cmp	r3, #2
 8001a76:	d006      	beq.n	8001a86 <jsmn_parse+0x262>
 8001a78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a7a:	011b      	lsls	r3, r3, #4
 8001a7c:	683a      	ldr	r2, [r7, #0]
 8001a7e:	4413      	add	r3, r2
 8001a80:	781b      	ldrb	r3, [r3, #0]
 8001a82:	2b01      	cmp	r3, #1
 8001a84:	d114      	bne.n	8001ab0 <jsmn_parse+0x28c>
            if (tokens[i].start != -1 && tokens[i].end == -1) {
 8001a86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a88:	011b      	lsls	r3, r3, #4
 8001a8a:	683a      	ldr	r2, [r7, #0]
 8001a8c:	4413      	add	r3, r2
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a94:	d00c      	beq.n	8001ab0 <jsmn_parse+0x28c>
 8001a96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a98:	011b      	lsls	r3, r3, #4
 8001a9a:	683a      	ldr	r2, [r7, #0]
 8001a9c:	4413      	add	r3, r2
 8001a9e:	689b      	ldr	r3, [r3, #8]
 8001aa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001aa4:	d104      	bne.n	8001ab0 <jsmn_parse+0x28c>
              parser->toksuper = i;
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001aaa:	609a      	str	r2, [r3, #8]
              break;
 8001aac:	bf00      	nop
            }
          }
        }
#endif
      }
      break;
 8001aae:	e033      	b.n	8001b18 <jsmn_parse+0x2f4>
        for (i = parser->toknext - 1; i >= 0; i--) {
 8001ab0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ab2:	3b01      	subs	r3, #1
 8001ab4:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ab6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	dad6      	bge.n	8001a6a <jsmn_parse+0x246>
      break;
 8001abc:	e02c      	b.n	8001b18 <jsmn_parse+0x2f4>
      }
#else
    /* In non-strict mode every unquoted value is a primitive */
    default:
#endif
      r = jsmn_parse_primitive(parser, js, len, tokens, num_tokens);
 8001abe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ac0:	9300      	str	r3, [sp, #0]
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	687a      	ldr	r2, [r7, #4]
 8001ac6:	68b9      	ldr	r1, [r7, #8]
 8001ac8:	68f8      	ldr	r0, [r7, #12]
 8001aca:	f7ff fd3f 	bl	800154c <jsmn_parse_primitive>
 8001ace:	6138      	str	r0, [r7, #16]
      if (r < 0) {
 8001ad0:	693b      	ldr	r3, [r7, #16]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	da04      	bge.n	8001ae0 <jsmn_parse+0x2bc>
        return r;
 8001ad6:	693b      	ldr	r3, [r7, #16]
 8001ad8:	e055      	b.n	8001b86 <jsmn_parse+0x362>
 8001ada:	bf00      	nop
 8001adc:	00800013 	.word	0x00800013
      }
      count++;
 8001ae0:	6a3b      	ldr	r3, [r7, #32]
 8001ae2:	3301      	adds	r3, #1
 8001ae4:	623b      	str	r3, [r7, #32]
      if (parser->toksuper != -1 && tokens != NULL) {
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	689b      	ldr	r3, [r3, #8]
 8001aea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001aee:	d015      	beq.n	8001b1c <jsmn_parse+0x2f8>
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d012      	beq.n	8001b1c <jsmn_parse+0x2f8>
        tokens[parser->toksuper].size++;
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	689b      	ldr	r3, [r3, #8]
 8001afa:	011b      	lsls	r3, r3, #4
 8001afc:	683a      	ldr	r2, [r7, #0]
 8001afe:	4413      	add	r3, r2
 8001b00:	68da      	ldr	r2, [r3, #12]
 8001b02:	3201      	adds	r2, #1
 8001b04:	60da      	str	r2, [r3, #12]
      }
      break;
 8001b06:	e009      	b.n	8001b1c <jsmn_parse+0x2f8>
      break;
 8001b08:	bf00      	nop
 8001b0a:	e008      	b.n	8001b1e <jsmn_parse+0x2fa>
        break;
 8001b0c:	bf00      	nop
 8001b0e:	e006      	b.n	8001b1e <jsmn_parse+0x2fa>
        break;
 8001b10:	bf00      	nop
 8001b12:	e004      	b.n	8001b1e <jsmn_parse+0x2fa>
      break;
 8001b14:	bf00      	nop
 8001b16:	e002      	b.n	8001b1e <jsmn_parse+0x2fa>
      break;
 8001b18:	bf00      	nop
 8001b1a:	e000      	b.n	8001b1e <jsmn_parse+0x2fa>
      break;
 8001b1c:	bf00      	nop
  for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	1c5a      	adds	r2, r3, #1
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	601a      	str	r2, [r3, #0]
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	687a      	ldr	r2, [r7, #4]
 8001b2e:	429a      	cmp	r2, r3
 8001b30:	d907      	bls.n	8001b42 <jsmn_parse+0x31e>
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	68ba      	ldr	r2, [r7, #8]
 8001b38:	4413      	add	r3, r2
 8001b3a:	781b      	ldrb	r3, [r3, #0]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	f47f ae7c 	bne.w	800183a <jsmn_parse+0x16>
      return JSMN_ERROR_INVAL;
#endif
    }
  }

  if (tokens != NULL) {
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d01d      	beq.n	8001b84 <jsmn_parse+0x360>
    for (i = parser->toknext - 1; i >= 0; i--) {
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	3b01      	subs	r3, #1
 8001b4e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b50:	e015      	b.n	8001b7e <jsmn_parse+0x35a>
      /* Unmatched opened object or array */
      if (tokens[i].start != -1 && tokens[i].end == -1) {
 8001b52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b54:	011b      	lsls	r3, r3, #4
 8001b56:	683a      	ldr	r2, [r7, #0]
 8001b58:	4413      	add	r3, r2
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b60:	d00a      	beq.n	8001b78 <jsmn_parse+0x354>
 8001b62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b64:	011b      	lsls	r3, r3, #4
 8001b66:	683a      	ldr	r2, [r7, #0]
 8001b68:	4413      	add	r3, r2
 8001b6a:	689b      	ldr	r3, [r3, #8]
 8001b6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b70:	d102      	bne.n	8001b78 <jsmn_parse+0x354>
        return JSMN_ERROR_PART;
 8001b72:	f06f 0302 	mvn.w	r3, #2
 8001b76:	e006      	b.n	8001b86 <jsmn_parse+0x362>
    for (i = parser->toknext - 1; i >= 0; i--) {
 8001b78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b7a:	3b01      	subs	r3, #1
 8001b7c:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	dae6      	bge.n	8001b52 <jsmn_parse+0x32e>
      }
    }
  }

  return count;
 8001b84:	6a3b      	ldr	r3, [r7, #32]
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	3728      	adds	r7, #40	@ 0x28
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	bf00      	nop

08001b90 <jsmn_init>:

/**
 * Creates a new parser based over a given buffer with an array of tokens
 * available.
 */
JSMN_API void jsmn_init(jsmn_parser *parser) {
 8001b90:	b480      	push	{r7}
 8001b92:	b083      	sub	sp, #12
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  parser->pos = 0;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	601a      	str	r2, [r3, #0]
  parser->toknext = 0;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	605a      	str	r2, [r3, #4]
  parser->toksuper = -1;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	f04f 32ff 	mov.w	r2, #4294967295
 8001baa:	609a      	str	r2, [r3, #8]
}
 8001bac:	bf00      	nop
 8001bae:	370c      	adds	r7, #12
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb6:	4770      	bx	lr

08001bb8 <SendDebugMessage>:
 * @brief Sends a debug message over UART. Can be used as a medium for communication
 * with other device. Allows sending strings or even a JSON.
 *
 * @param message The message string to send.
 */
void SendDebugMessage(const char* message) {
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b082      	sub	sp, #8
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart3, (uint8_t*)message, strlen(message), HAL_MAX_DELAY);
 8001bc0:	6878      	ldr	r0, [r7, #4]
 8001bc2:	f7fe fbed 	bl	80003a0 <strlen>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	b29a      	uxth	r2, r3
 8001bca:	f04f 33ff 	mov.w	r3, #4294967295
 8001bce:	6879      	ldr	r1, [r7, #4]
 8001bd0:	4803      	ldr	r0, [pc, #12]	@ (8001be0 <SendDebugMessage+0x28>)
 8001bd2:	f00a fced 	bl	800c5b0 <HAL_UART_Transmit>
}
 8001bd6:	bf00      	nop
 8001bd8:	3708      	adds	r7, #8
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	240003ec 	.word	0x240003ec

08001be4 <HAL_UART_RxCpltCallback>:
 * incoming data character by character and triggers JSON parsing when a complete
 * JSON message is received.
 *
 * @param huart The UART handle.
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b082      	sub	sp, #8
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
    if (rx_data != '}') {
 8001bec:	4b17      	ldr	r3, [pc, #92]	@ (8001c4c <HAL_UART_RxCpltCallback+0x68>)
 8001bee:	781b      	ldrb	r3, [r3, #0]
 8001bf0:	2b7d      	cmp	r3, #125	@ 0x7d
 8001bf2:	d00b      	beq.n	8001c0c <HAL_UART_RxCpltCallback+0x28>
        rx_buffer[rx_index++] = rx_data;
 8001bf4:	4b16      	ldr	r3, [pc, #88]	@ (8001c50 <HAL_UART_RxCpltCallback+0x6c>)
 8001bf6:	781b      	ldrb	r3, [r3, #0]
 8001bf8:	1c5a      	adds	r2, r3, #1
 8001bfa:	b2d1      	uxtb	r1, r2
 8001bfc:	4a14      	ldr	r2, [pc, #80]	@ (8001c50 <HAL_UART_RxCpltCallback+0x6c>)
 8001bfe:	7011      	strb	r1, [r2, #0]
 8001c00:	461a      	mov	r2, r3
 8001c02:	4b12      	ldr	r3, [pc, #72]	@ (8001c4c <HAL_UART_RxCpltCallback+0x68>)
 8001c04:	7819      	ldrb	r1, [r3, #0]
 8001c06:	4b13      	ldr	r3, [pc, #76]	@ (8001c54 <HAL_UART_RxCpltCallback+0x70>)
 8001c08:	5499      	strb	r1, [r3, r2]
 8001c0a:	e016      	b.n	8001c3a <HAL_UART_RxCpltCallback+0x56>
    } else {
        rx_buffer[rx_index++] = rx_data;
 8001c0c:	4b10      	ldr	r3, [pc, #64]	@ (8001c50 <HAL_UART_RxCpltCallback+0x6c>)
 8001c0e:	781b      	ldrb	r3, [r3, #0]
 8001c10:	1c5a      	adds	r2, r3, #1
 8001c12:	b2d1      	uxtb	r1, r2
 8001c14:	4a0e      	ldr	r2, [pc, #56]	@ (8001c50 <HAL_UART_RxCpltCallback+0x6c>)
 8001c16:	7011      	strb	r1, [r2, #0]
 8001c18:	461a      	mov	r2, r3
 8001c1a:	4b0c      	ldr	r3, [pc, #48]	@ (8001c4c <HAL_UART_RxCpltCallback+0x68>)
 8001c1c:	7819      	ldrb	r1, [r3, #0]
 8001c1e:	4b0d      	ldr	r3, [pc, #52]	@ (8001c54 <HAL_UART_RxCpltCallback+0x70>)
 8001c20:	5499      	strb	r1, [r3, r2]
        rx_buffer[rx_index] = '\0';
 8001c22:	4b0b      	ldr	r3, [pc, #44]	@ (8001c50 <HAL_UART_RxCpltCallback+0x6c>)
 8001c24:	781b      	ldrb	r3, [r3, #0]
 8001c26:	461a      	mov	r2, r3
 8001c28:	4b0a      	ldr	r3, [pc, #40]	@ (8001c54 <HAL_UART_RxCpltCallback+0x70>)
 8001c2a:	2100      	movs	r1, #0
 8001c2c:	5499      	strb	r1, [r3, r2]
        rx_index = 0;
 8001c2e:	4b08      	ldr	r3, [pc, #32]	@ (8001c50 <HAL_UART_RxCpltCallback+0x6c>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	701a      	strb	r2, [r3, #0]
        ParseJson((char*)rx_buffer);
 8001c34:	4807      	ldr	r0, [pc, #28]	@ (8001c54 <HAL_UART_RxCpltCallback+0x70>)
 8001c36:	f000 f891 	bl	8001d5c <ParseJson>
    }
    HAL_UART_Receive_IT(&huart3, &rx_data, 1);
 8001c3a:	2201      	movs	r2, #1
 8001c3c:	4903      	ldr	r1, [pc, #12]	@ (8001c4c <HAL_UART_RxCpltCallback+0x68>)
 8001c3e:	4806      	ldr	r0, [pc, #24]	@ (8001c58 <HAL_UART_RxCpltCallback+0x74>)
 8001c40:	f00a fd44 	bl	800c6cc <HAL_UART_Receive_IT>
}
 8001c44:	bf00      	nop
 8001c46:	3708      	adds	r7, #8
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}
 8001c4c:	2400038e 	.word	0x2400038e
 8001c50:	2400038f 	.word	0x2400038f
 8001c54:	2400035c 	.word	0x2400035c
 8001c58:	240003ec 	.word	0x240003ec

08001c5c <HAL_GPIO_EXTI_Callback>:
 * This function is triggered when an external interrupt is generated on a specific GPIO pin.
 * It detects user button presses and sets a flag.
 *
 * @param GPIO_Pin The pin number that triggered the interrupt.
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001c5c:	b480      	push	{r7}
 8001c5e:	b083      	sub	sp, #12
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	4603      	mov	r3, r0
 8001c64:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == USER_BUTTON_Pin) {
 8001c66:	88fb      	ldrh	r3, [r7, #6]
 8001c68:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001c6c:	d102      	bne.n	8001c74 <HAL_GPIO_EXTI_Callback+0x18>
		userButtonPressed = true;
 8001c6e:	4b04      	ldr	r3, [pc, #16]	@ (8001c80 <HAL_GPIO_EXTI_Callback+0x24>)
 8001c70:	2201      	movs	r2, #1
 8001c72:	701a      	strb	r2, [r3, #0]
	}
}
 8001c74:	bf00      	nop
 8001c76:	370c      	adds	r7, #12
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7e:	4770      	bx	lr
 8001c80:	2400035a 	.word	0x2400035a
 8001c84:	00000000 	.word	0x00000000

08001c88 <measureLux>:
 * This function starts an ADC conversion, calculates the voltage from the ADC value,
 * computes the resistance of the light sensor, and calculates the lux value using a formula.
 *
 * @return The calculated lux value as a float.
 */
float measureLux() {
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b084      	sub	sp, #16
 8001c8c:	af00      	add	r7, sp, #0
	HAL_ADC_Start(&hadc1);
 8001c8e:	4832      	ldr	r0, [pc, #200]	@ (8001d58 <measureLux+0xd0>)
 8001c90:	f001 fb22 	bl	80032d8 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1,20);
 8001c94:	2114      	movs	r1, #20
 8001c96:	4830      	ldr	r0, [pc, #192]	@ (8001d58 <measureLux+0xd0>)
 8001c98:	f001 fbe8 	bl	800346c <HAL_ADC_PollForConversion>
	uint16_t v = HAL_ADC_GetValue(&hadc1);
 8001c9c:	482e      	ldr	r0, [pc, #184]	@ (8001d58 <measureLux+0xd0>)
 8001c9e:	f001 fcd9 	bl	8003654 <HAL_ADC_GetValue>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	81fb      	strh	r3, [r7, #14]

	float voltage = 3.3 * v / 65535;
 8001ca6:	89fb      	ldrh	r3, [r7, #14]
 8001ca8:	ee07 3a90 	vmov	s15, r3
 8001cac:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001cb0:	ed9f 6b1f 	vldr	d6, [pc, #124]	@ 8001d30 <measureLux+0xa8>
 8001cb4:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001cb8:	ed9f 5b1f 	vldr	d5, [pc, #124]	@ 8001d38 <measureLux+0xb0>
 8001cbc:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001cc0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001cc4:	edc7 7a02 	vstr	s15, [r7, #8]
	float resistance = (( voltage)/(3.3 - voltage) * 4700);
 8001cc8:	edd7 7a02 	vldr	s15, [r7, #8]
 8001ccc:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8001cd0:	edd7 7a02 	vldr	s15, [r7, #8]
 8001cd4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001cd8:	ed9f 6b15 	vldr	d6, [pc, #84]	@ 8001d30 <measureLux+0xa8>
 8001cdc:	ee36 6b47 	vsub.f64	d6, d6, d7
 8001ce0:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001ce4:	ed9f 6b16 	vldr	d6, [pc, #88]	@ 8001d40 <measureLux+0xb8>
 8001ce8:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001cec:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001cf0:	edc7 7a01 	vstr	s15, [r7, #4]
	float lux = (10 * pow(8000, 1/0.6)) / pow(resistance, 1/0.6);
 8001cf4:	edd7 7a01 	vldr	s15, [r7, #4]
 8001cf8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001cfc:	ed9f 1b12 	vldr	d1, [pc, #72]	@ 8001d48 <measureLux+0xc0>
 8001d00:	eeb0 0b47 	vmov.f64	d0, d7
 8001d04:	f011 fb24 	bl	8013350 <pow>
 8001d08:	eeb0 6b40 	vmov.f64	d6, d0
 8001d0c:	ed9f 5b10 	vldr	d5, [pc, #64]	@ 8001d50 <measureLux+0xc8>
 8001d10:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001d14:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001d18:	edc7 7a00 	vstr	s15, [r7]
	return lux;
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	ee07 3a90 	vmov	s15, r3
}
 8001d22:	eeb0 0a67 	vmov.f32	s0, s15
 8001d26:	3710      	adds	r7, #16
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}
 8001d2c:	f3af 8000 	nop.w
 8001d30:	66666666 	.word	0x66666666
 8001d34:	400a6666 	.word	0x400a6666
 8001d38:	00000000 	.word	0x00000000
 8001d3c:	40efffe0 	.word	0x40efffe0
 8001d40:	00000000 	.word	0x00000000
 8001d44:	40b25c00 	.word	0x40b25c00
 8001d48:	aaaaaaab 	.word	0xaaaaaaab
 8001d4c:	3ffaaaaa 	.word	0x3ffaaaaa
 8001d50:	00000006 	.word	0x00000006
 8001d54:	417e8480 	.word	0x417e8480
 8001d58:	24000204 	.word	0x24000204

08001d5c <ParseJson>:
 *
 * Sends a success message as a JSON response after processing.
 *
 * @param json The JSON string to parse.
 */
void ParseJson(const char* json) {
 8001d5c:	b590      	push	{r4, r7, lr}
 8001d5e:	b0e3      	sub	sp, #396	@ 0x18c
 8001d60:	af02      	add	r7, sp, #8
 8001d62:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001d66:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8001d6a:	6018      	str	r0, [r3, #0]
    jsmn_parser parser;
    jsmntok_t tokens[20];
    jsmn_init(&parser);
 8001d6c:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8001d70:	4618      	mov	r0, r3
 8001d72:	f7ff ff0d 	bl	8001b90 <jsmn_init>

    int r = jsmn_parse(&parser, json, strlen(json), tokens, sizeof(tokens) / sizeof(tokens[0]));
 8001d76:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001d7a:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8001d7e:	6818      	ldr	r0, [r3, #0]
 8001d80:	f7fe fb0e 	bl	80003a0 <strlen>
 8001d84:	4604      	mov	r4, r0
 8001d86:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001d8a:	f507 72c0 	add.w	r2, r7, #384	@ 0x180
 8001d8e:	f5a2 71be 	sub.w	r1, r2, #380	@ 0x17c
 8001d92:	f507 70b4 	add.w	r0, r7, #360	@ 0x168
 8001d96:	2214      	movs	r2, #20
 8001d98:	9200      	str	r2, [sp, #0]
 8001d9a:	4622      	mov	r2, r4
 8001d9c:	6809      	ldr	r1, [r1, #0]
 8001d9e:	f7ff fd41 	bl	8001824 <jsmn_parse>
 8001da2:	f8c7 0178 	str.w	r0, [r7, #376]	@ 0x178
    if (r < 0) { return; }
 8001da6:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	f2c0 80e6 	blt.w	8001f7c <ParseJson+0x220>

    for (int i = 1; i < r; i++) {
 8001db0:	2301      	movs	r3, #1
 8001db2:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8001db6:	e0d6      	b.n	8001f66 <ParseJson+0x20a>
        if (tokens[i].type == JSMN_STRING) {
 8001db8:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001dbc:	f5a3 72ac 	sub.w	r2, r3, #344	@ 0x158
 8001dc0:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 8001dc4:	011b      	lsls	r3, r3, #4
 8001dc6:	4413      	add	r3, r2
 8001dc8:	781b      	ldrb	r3, [r3, #0]
 8001dca:	2b04      	cmp	r3, #4
 8001dcc:	f040 80c6 	bne.w	8001f5c <ParseJson+0x200>
            char key[10];
            snprintf(key, sizeof(key), "%.*s", tokens[i].end - tokens[i].start, json + tokens[i].start);
 8001dd0:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001dd4:	f5a3 72ac 	sub.w	r2, r3, #344	@ 0x158
 8001dd8:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 8001ddc:	011b      	lsls	r3, r3, #4
 8001dde:	4413      	add	r3, r2
 8001de0:	3308      	adds	r3, #8
 8001de2:	681a      	ldr	r2, [r3, #0]
 8001de4:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001de8:	f5a3 71ac 	sub.w	r1, r3, #344	@ 0x158
 8001dec:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 8001df0:	011b      	lsls	r3, r3, #4
 8001df2:	440b      	add	r3, r1
 8001df4:	3304      	adds	r3, #4
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	1ad1      	subs	r1, r2, r3
 8001dfa:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001dfe:	f5a3 72ac 	sub.w	r2, r3, #344	@ 0x158
 8001e02:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 8001e06:	011b      	lsls	r3, r3, #4
 8001e08:	4413      	add	r3, r2
 8001e0a:	3304      	adds	r3, #4
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	461a      	mov	r2, r3
 8001e10:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001e14:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4413      	add	r3, r2
 8001e1c:	f107 001c 	add.w	r0, r7, #28
 8001e20:	9300      	str	r3, [sp, #0]
 8001e22:	460b      	mov	r3, r1
 8001e24:	4a58      	ldr	r2, [pc, #352]	@ (8001f88 <ParseJson+0x22c>)
 8001e26:	210a      	movs	r1, #10
 8001e28:	f00d ff2c 	bl	800fc84 <sniprintf>
            if (i + 1 < r) {
 8001e2c:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 8001e30:	3301      	adds	r3, #1
 8001e32:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8001e36:	429a      	cmp	r2, r3
 8001e38:	f340 808b 	ble.w	8001f52 <ParseJson+0x1f6>
            	if (tokens[i + 1].type == JSMN_PRIMITIVE) {
 8001e3c:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 8001e40:	3301      	adds	r3, #1
 8001e42:	f507 72c0 	add.w	r2, r7, #384	@ 0x180
 8001e46:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8001e4a:	011b      	lsls	r3, r3, #4
 8001e4c:	4413      	add	r3, r2
 8001e4e:	781b      	ldrb	r3, [r3, #0]
 8001e50:	2b08      	cmp	r3, #8
 8001e52:	d17e      	bne.n	8001f52 <ParseJson+0x1f6>
            		char value[10];
					snprintf(value, sizeof(value), "%.*s", tokens[i + 1].end - tokens[i + 1].start, json + tokens[i + 1].start);
 8001e54:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 8001e58:	3301      	adds	r3, #1
 8001e5a:	f507 72c0 	add.w	r2, r7, #384	@ 0x180
 8001e5e:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8001e62:	011b      	lsls	r3, r3, #4
 8001e64:	4413      	add	r3, r2
 8001e66:	3308      	adds	r3, #8
 8001e68:	681a      	ldr	r2, [r3, #0]
 8001e6a:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 8001e6e:	3301      	adds	r3, #1
 8001e70:	f507 71c0 	add.w	r1, r7, #384	@ 0x180
 8001e74:	f5a1 71ac 	sub.w	r1, r1, #344	@ 0x158
 8001e78:	011b      	lsls	r3, r3, #4
 8001e7a:	440b      	add	r3, r1
 8001e7c:	3304      	adds	r3, #4
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	1ad1      	subs	r1, r2, r3
 8001e82:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 8001e86:	3301      	adds	r3, #1
 8001e88:	f507 72c0 	add.w	r2, r7, #384	@ 0x180
 8001e8c:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8001e90:	011b      	lsls	r3, r3, #4
 8001e92:	4413      	add	r3, r2
 8001e94:	3304      	adds	r3, #4
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	461a      	mov	r2, r3
 8001e9a:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001e9e:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4413      	add	r3, r2
 8001ea6:	f107 0010 	add.w	r0, r7, #16
 8001eaa:	9300      	str	r3, [sp, #0]
 8001eac:	460b      	mov	r3, r1
 8001eae:	4a36      	ldr	r2, [pc, #216]	@ (8001f88 <ParseJson+0x22c>)
 8001eb0:	210a      	movs	r1, #10
 8001eb2:	f00d fee7 	bl	800fc84 <sniprintf>
					char *endptr;
					int num_value = (int) strtol(value, &endptr, 10);
 8001eb6:	f107 010c 	add.w	r1, r7, #12
 8001eba:	f107 0310 	add.w	r3, r7, #16
 8001ebe:	220a      	movs	r2, #10
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f00c ffcf 	bl	800ee64 <strtol>
 8001ec6:	f8c7 0174 	str.w	r0, [r7, #372]	@ 0x174
					if (strcmp(key, "LED") == 0) {
 8001eca:	f107 031c 	add.w	r3, r7, #28
 8001ece:	492f      	ldr	r1, [pc, #188]	@ (8001f8c <ParseJson+0x230>)
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f7fe fa05 	bl	80002e0 <strcmp>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d10d      	bne.n	8001ef8 <ParseJson+0x19c>
						if (*endptr == '\0') {
 8001edc:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001ee0:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	781b      	ldrb	r3, [r3, #0]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d132      	bne.n	8001f52 <ParseJson+0x1f6>
							set_value = num_value;
 8001eec:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 8001ef0:	b29a      	uxth	r2, r3
 8001ef2:	4b27      	ldr	r3, [pc, #156]	@ (8001f90 <ParseJson+0x234>)
 8001ef4:	801a      	strh	r2, [r3, #0]
 8001ef6:	e02c      	b.n	8001f52 <ParseJson+0x1f6>
						}
					} else if (strcmp(key, "PWM") == 0) {
 8001ef8:	f107 031c 	add.w	r3, r7, #28
 8001efc:	4925      	ldr	r1, [pc, #148]	@ (8001f94 <ParseJson+0x238>)
 8001efe:	4618      	mov	r0, r3
 8001f00:	f7fe f9ee 	bl	80002e0 <strcmp>
 8001f04:	4603      	mov	r3, r0
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d10d      	bne.n	8001f26 <ParseJson+0x1ca>
						if (*endptr == '\0' ) {
 8001f0a:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001f0e:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	781b      	ldrb	r3, [r3, #0]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d11b      	bne.n	8001f52 <ParseJson+0x1f6>
							pwm_width = num_value;
 8001f1a:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 8001f1e:	b29a      	uxth	r2, r3
 8001f20:	4b1d      	ldr	r3, [pc, #116]	@ (8001f98 <ParseJson+0x23c>)
 8001f22:	801a      	strh	r2, [r3, #0]
 8001f24:	e015      	b.n	8001f52 <ParseJson+0x1f6>
						}
					} else if (strcmp(key, "PRIORITY") == 0) {
 8001f26:	f107 031c 	add.w	r3, r7, #28
 8001f2a:	491c      	ldr	r1, [pc, #112]	@ (8001f9c <ParseJson+0x240>)
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f7fe f9d7 	bl	80002e0 <strcmp>
 8001f32:	4603      	mov	r3, r0
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d10c      	bne.n	8001f52 <ParseJson+0x1f6>
						if (*endptr == '\0' ) {
 8001f38:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001f3c:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	781b      	ldrb	r3, [r3, #0]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d104      	bne.n	8001f52 <ParseJson+0x1f6>
							priority = num_value;
 8001f48:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 8001f4c:	b2da      	uxtb	r2, r3
 8001f4e:	4b14      	ldr	r3, [pc, #80]	@ (8001fa0 <ParseJson+0x244>)
 8001f50:	701a      	strb	r2, [r3, #0]
						}
					}
				}
            }
            i++;
 8001f52:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 8001f56:	3301      	adds	r3, #1
 8001f58:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
    for (int i = 1; i < r; i++) {
 8001f5c:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 8001f60:	3301      	adds	r3, #1
 8001f62:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8001f66:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 8001f6a:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 8001f6e:	429a      	cmp	r2, r3
 8001f70:	f6ff af22 	blt.w	8001db8 <ParseJson+0x5c>
        }
    }

	SendDebugMessage("{\"success\": 1, \"message\": \"Success!\"}");
 8001f74:	480b      	ldr	r0, [pc, #44]	@ (8001fa4 <ParseJson+0x248>)
 8001f76:	f7ff fe1f 	bl	8001bb8 <SendDebugMessage>
 8001f7a:	e000      	b.n	8001f7e <ParseJson+0x222>
    if (r < 0) { return; }
 8001f7c:	bf00      	nop
}
 8001f7e:	f507 77c2 	add.w	r7, r7, #388	@ 0x184
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd90      	pop	{r4, r7, pc}
 8001f86:	bf00      	nop
 8001f88:	0801393c 	.word	0x0801393c
 8001f8c:	08013944 	.word	0x08013944
 8001f90:	2400000a 	.word	0x2400000a
 8001f94:	08013948 	.word	0x08013948
 8001f98:	2400000c 	.word	0x2400000c
 8001f9c:	0801394c 	.word	0x0801394c
 8001fa0:	2400000e 	.word	0x2400000e
 8001fa4:	08013958 	.word	0x08013958

08001fa8 <saturate>:
 *
 * @param value The input value to be saturated.
 *
 * @return The saturated value within the range [1, 999].
 */
int saturate(uint16_t value) {
 8001fa8:	b480      	push	{r7}
 8001faa:	b083      	sub	sp, #12
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	4603      	mov	r3, r0
 8001fb0:	80fb      	strh	r3, [r7, #6]
	if (value > 999) {
 8001fb2:	88fb      	ldrh	r3, [r7, #6]
 8001fb4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001fb8:	d302      	bcc.n	8001fc0 <saturate+0x18>
		value = 999;
 8001fba:	f240 33e7 	movw	r3, #999	@ 0x3e7
 8001fbe:	80fb      	strh	r3, [r7, #6]
	}
	if (value < 1) {
 8001fc0:	88fb      	ldrh	r3, [r7, #6]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d101      	bne.n	8001fca <saturate+0x22>
		value = 1;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	80fb      	strh	r3, [r7, #6]
	}
	return value;
 8001fca:	88fb      	ldrh	r3, [r7, #6]
}
 8001fcc:	4618      	mov	r0, r3
 8001fce:	370c      	adds	r7, #12
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd6:	4770      	bx	lr

08001fd8 <PID_calc>:
 * @param current_lux The current measured lux value.
 * @param set_lux_value The desired lux value to achieve.
 *
 * @return The PID control output value, saturated within the range [1, 999].
 */
uint16_t PID_calc(uint16_t current_lux, uint16_t set_lux_value) {
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b086      	sub	sp, #24
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	4603      	mov	r3, r0
 8001fe0:	460a      	mov	r2, r1
 8001fe2:	80fb      	strh	r3, [r7, #6]
 8001fe4:	4613      	mov	r3, r2
 8001fe6:	80bb      	strh	r3, [r7, #4]
    int e = set_lux_value - current_lux;
 8001fe8:	88ba      	ldrh	r2, [r7, #4]
 8001fea:	88fb      	ldrh	r3, [r7, #6]
 8001fec:	1ad3      	subs	r3, r2, r3
 8001fee:	617b      	str	r3, [r7, #20]
    float u_k = kp * (float)e;
 8001ff0:	697b      	ldr	r3, [r7, #20]
 8001ff2:	ee07 3a90 	vmov	s15, r3
 8001ff6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ffa:	4b2a      	ldr	r3, [pc, #168]	@ (80020a4 <PID_calc+0xcc>)
 8001ffc:	edd3 7a00 	vldr	s15, [r3]
 8002000:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002004:	edc7 7a04 	vstr	s15, [r7, #16]
    u_i = u_i + (int)(ki * (float)e);
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	ee07 3a90 	vmov	s15, r3
 800200e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002012:	4b25      	ldr	r3, [pc, #148]	@ (80020a8 <PID_calc+0xd0>)
 8002014:	edd3 7a00 	vldr	s15, [r3]
 8002018:	ee67 7a27 	vmul.f32	s15, s14, s15
 800201c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002020:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002024:	4b21      	ldr	r3, [pc, #132]	@ (80020ac <PID_calc+0xd4>)
 8002026:	edd3 7a00 	vldr	s15, [r3]
 800202a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800202e:	4b1f      	ldr	r3, [pc, #124]	@ (80020ac <PID_calc+0xd4>)
 8002030:	edc3 7a00 	vstr	s15, [r3]
    float u_d = kd * ((float)(e - prev_value) / 2.0);
 8002034:	4b1e      	ldr	r3, [pc, #120]	@ (80020b0 <PID_calc+0xd8>)
 8002036:	edd3 7a00 	vldr	s15, [r3]
 800203a:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800203e:	4b1d      	ldr	r3, [pc, #116]	@ (80020b4 <PID_calc+0xdc>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	697a      	ldr	r2, [r7, #20]
 8002044:	1ad3      	subs	r3, r2, r3
 8002046:	ee07 3a90 	vmov	s15, r3
 800204a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800204e:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8002052:	eeb0 4b00 	vmov.f64	d4, #0	@ 0x40000000  2.0
 8002056:	ee85 7b04 	vdiv.f64	d7, d5, d4
 800205a:	ee26 7b07 	vmul.f64	d7, d6, d7
 800205e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002062:	edc7 7a03 	vstr	s15, [r7, #12]
    int u_pid = (int)(u_k + u_i + u_d);
 8002066:	4b11      	ldr	r3, [pc, #68]	@ (80020ac <PID_calc+0xd4>)
 8002068:	ed93 7a00 	vldr	s14, [r3]
 800206c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002070:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002074:	edd7 7a03 	vldr	s15, [r7, #12]
 8002078:	ee77 7a27 	vadd.f32	s15, s14, s15
 800207c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002080:	ee17 3a90 	vmov	r3, s15
 8002084:	60bb      	str	r3, [r7, #8]
    prev_value = e;
 8002086:	4a0b      	ldr	r2, [pc, #44]	@ (80020b4 <PID_calc+0xdc>)
 8002088:	697b      	ldr	r3, [r7, #20]
 800208a:	6013      	str	r3, [r2, #0]
    return saturate(u_pid);
 800208c:	68bb      	ldr	r3, [r7, #8]
 800208e:	b29b      	uxth	r3, r3
 8002090:	4618      	mov	r0, r3
 8002092:	f7ff ff89 	bl	8001fa8 <saturate>
 8002096:	4603      	mov	r3, r0
 8002098:	b29b      	uxth	r3, r3
}
 800209a:	4618      	mov	r0, r3
 800209c:	3718      	adds	r7, #24
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}
 80020a2:	bf00      	nop
 80020a4:	24000010 	.word	0x24000010
 80020a8:	24000014 	.word	0x24000014
 80020ac:	24000398 	.word	0x24000398
 80020b0:	24000394 	.word	0x24000394
 80020b4:	24000390 	.word	0x24000390

080020b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b0d6      	sub	sp, #344	@ 0x158
 80020bc:	af02      	add	r7, sp, #8
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 80020be:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80020c2:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 80020c6:	bf00      	nop
 80020c8:	4b9e      	ldr	r3, [pc, #632]	@ (8002344 <main+0x28c>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d006      	beq.n	80020e2 <main+0x2a>
 80020d4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80020d8:	1e5a      	subs	r2, r3, #1
 80020da:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 80020de:	2b00      	cmp	r3, #0
 80020e0:	dcf2      	bgt.n	80020c8 <main+0x10>
  if ( timeout < 0 )
 80020e2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	da01      	bge.n	80020ee <main+0x36>
  {
  Error_Handler();
 80020ea:	f000 f9c7 	bl	800247c <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80020ee:	f000 fcad 	bl	8002a4c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80020f2:	f000 f951 	bl	8002398 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 80020f6:	4b93      	ldr	r3, [pc, #588]	@ (8002344 <main+0x28c>)
 80020f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80020fc:	4a91      	ldr	r2, [pc, #580]	@ (8002344 <main+0x28c>)
 80020fe:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002102:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002106:	4b8f      	ldr	r3, [pc, #572]	@ (8002344 <main+0x28c>)
 8002108:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800210c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002110:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8002114:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8002118:	2000      	movs	r0, #0
 800211a:	f004 fdb9 	bl	8006c90 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 800211e:	2100      	movs	r1, #0
 8002120:	2000      	movs	r0, #0
 8002122:	f004 fdcf 	bl	8006cc4 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8002126:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800212a:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 800212e:	bf00      	nop
 8002130:	4b84      	ldr	r3, [pc, #528]	@ (8002344 <main+0x28c>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002138:	2b00      	cmp	r3, #0
 800213a:	d106      	bne.n	800214a <main+0x92>
 800213c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8002140:	1e5a      	subs	r2, r3, #1
 8002142:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 8002146:	2b00      	cmp	r3, #0
 8002148:	dcf2      	bgt.n	8002130 <main+0x78>
if ( timeout < 0 )
 800214a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800214e:	2b00      	cmp	r3, #0
 8002150:	da01      	bge.n	8002156 <main+0x9e>
{
Error_Handler();
 8002152:	f000 f993 	bl	800247c <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002156:	f7fe ff13 	bl	8000f80 <MX_GPIO_Init>
  MX_DMA_Init();
 800215a:	f7fe fe55 	bl	8000e08 <MX_DMA_Init>
  MX_ADC1_Init();
 800215e:	f7fe fd29 	bl	8000bb4 <MX_ADC1_Init>
  MX_TIM2_Init();
 8002162:	f000 fabd 	bl	80026e0 <MX_TIM2_Init>
  MX_USART3_UART_Init();
 8002166:	f000 fb89 	bl	800287c <MX_USART3_UART_Init>
  MX_I2C2_Init();
 800216a:	f7ff f80f 	bl	800118c <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  //LCD initialization
	disp.addr = (0x27 << 1);
 800216e:	4b76      	ldr	r3, [pc, #472]	@ (8002348 <main+0x290>)
 8002170:	224e      	movs	r2, #78	@ 0x4e
 8002172:	701a      	strb	r2, [r3, #0]
	disp.bl = true;
 8002174:	4b74      	ldr	r3, [pc, #464]	@ (8002348 <main+0x290>)
 8002176:	2201      	movs	r2, #1
 8002178:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
	lcd_init(&disp);
 800217c:	4872      	ldr	r0, [pc, #456]	@ (8002348 <main+0x290>)
 800217e:	f7ff f8af 	bl	80012e0 <lcd_init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	//Starting the required services
	TIM2->CCR1 = 100;
 8002182:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002186:	2264      	movs	r2, #100	@ 0x64
 8002188:	635a      	str	r2, [r3, #52]	@ 0x34
	HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_1);
 800218a:	2100      	movs	r1, #0
 800218c:	486f      	ldr	r0, [pc, #444]	@ (800234c <main+0x294>)
 800218e:	f009 f98b 	bl	800b4a8 <HAL_TIM_PWM_Start_IT>
	HAL_UART_Receive_IT(&huart3, &rx_data, 3);
 8002192:	2203      	movs	r2, #3
 8002194:	496e      	ldr	r1, [pc, #440]	@ (8002350 <main+0x298>)
 8002196:	486f      	ldr	r0, [pc, #444]	@ (8002354 <main+0x29c>)
 8002198:	f00a fa98 	bl	800c6cc <HAL_UART_Receive_IT>
	//Sending single informative command
	char buffer[100];
	ParseJson("{\"LED\": 100, \"PWM\": 100, \"PRIORITY\": 1}\r\n");
 800219c:	486e      	ldr	r0, [pc, #440]	@ (8002358 <main+0x2a0>)
 800219e:	f7ff fddd 	bl	8001d5c <ParseJson>
  while (1)
  {
	// Measure lux in the area
	float lux = measureLux();
 80021a2:	f7ff fd71 	bl	8001c88 <measureLux>
 80021a6:	ed87 0a52 	vstr	s0, [r7, #328]	@ 0x148

	//LCD handler
	sprintf((char *)disp.f_line, "Current: %.2f", lux);
 80021aa:	edd7 7a52 	vldr	s15, [r7, #328]	@ 0x148
 80021ae:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80021b2:	ec53 2b17 	vmov	r2, r3, d7
 80021b6:	4969      	ldr	r1, [pc, #420]	@ (800235c <main+0x2a4>)
 80021b8:	4869      	ldr	r0, [pc, #420]	@ (8002360 <main+0x2a8>)
 80021ba:	f00d fd97 	bl	800fcec <siprintf>
	sprintf((char *)disp.s_line, "Set value: %d", set_value);
 80021be:	4b69      	ldr	r3, [pc, #420]	@ (8002364 <main+0x2ac>)
 80021c0:	881b      	ldrh	r3, [r3, #0]
 80021c2:	461a      	mov	r2, r3
 80021c4:	4968      	ldr	r1, [pc, #416]	@ (8002368 <main+0x2b0>)
 80021c6:	4869      	ldr	r0, [pc, #420]	@ (800236c <main+0x2b4>)
 80021c8:	f00d fd90 	bl	800fcec <siprintf>
	lcd_display(&disp);
 80021cc:	485e      	ldr	r0, [pc, #376]	@ (8002348 <main+0x290>)
 80021ce:	f7ff f90d 	bl	80013ec <lcd_display>

	// Change PWM width with respect to the priority
	// 0 - Prioritize to change the pwm width to meet the "set_value" value - Yes, PID
	// 1 - Set the PWM width value, to read the lux value, set by defualt
	if (priority == 1) {
 80021d2:	4b67      	ldr	r3, [pc, #412]	@ (8002370 <main+0x2b8>)
 80021d4:	781b      	ldrb	r3, [r3, #0]
 80021d6:	b2db      	uxtb	r3, r3
 80021d8:	2b01      	cmp	r3, #1
 80021da:	d105      	bne.n	80021e8 <main+0x130>
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, pwm_width);
 80021dc:	4b65      	ldr	r3, [pc, #404]	@ (8002374 <main+0x2bc>)
 80021de:	881a      	ldrh	r2, [r3, #0]
 80021e0:	4b5a      	ldr	r3, [pc, #360]	@ (800234c <main+0x294>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	635a      	str	r2, [r3, #52]	@ 0x34
 80021e6:	e014      	b.n	8002212 <main+0x15a>
	} else {
		uint16_t counter = PID_calc(lux, set_value);
 80021e8:	edd7 7a52 	vldr	s15, [r7, #328]	@ 0x148
 80021ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80021f0:	ee17 3a90 	vmov	r3, s15
 80021f4:	b29b      	uxth	r3, r3
 80021f6:	4a5b      	ldr	r2, [pc, #364]	@ (8002364 <main+0x2ac>)
 80021f8:	8812      	ldrh	r2, [r2, #0]
 80021fa:	4611      	mov	r1, r2
 80021fc:	4618      	mov	r0, r3
 80021fe:	f7ff feeb 	bl	8001fd8 <PID_calc>
 8002202:	4603      	mov	r3, r0
 8002204:	f8a7 3146 	strh.w	r3, [r7, #326]	@ 0x146
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, counter);
 8002208:	4b50      	ldr	r3, [pc, #320]	@ (800234c <main+0x294>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f8b7 2146 	ldrh.w	r2, [r7, #326]	@ 0x146
 8002210:	635a      	str	r2, [r3, #52]	@ 0x34
	}

	//Sending current data to desktop app for visualization
	char buffer[100];
	snprintf(buffer, sizeof(buffer), "{\"operation\": \"data\", \"data\": %.2f}\r\n", lux);
 8002212:	edd7 7a52 	vldr	s15, [r7, #328]	@ 0x148
 8002216:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800221a:	1d3b      	adds	r3, r7, #4
 800221c:	ed8d 7b00 	vstr	d7, [sp]
 8002220:	4a55      	ldr	r2, [pc, #340]	@ (8002378 <main+0x2c0>)
 8002222:	2164      	movs	r1, #100	@ 0x64
 8002224:	4618      	mov	r0, r3
 8002226:	f00d fd2d 	bl	800fc84 <sniprintf>
	SendDebugMessage(buffer);
 800222a:	1d3b      	adds	r3, r7, #4
 800222c:	4618      	mov	r0, r3
 800222e:	f7ff fcc3 	bl	8001bb8 <SendDebugMessage>

	HAL_Delay(500);
 8002232:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002236:	f000 fc9b 	bl	8002b70 <HAL_Delay>

	// User Button click handler
	// This function is called once after clicking the button, and performs
	// the configuration while stopping all other things and then resuming after it's done
	if (userButtonPressed) {
 800223a:	4b50      	ldr	r3, [pc, #320]	@ (800237c <main+0x2c4>)
 800223c:	781b      	ldrb	r3, [r3, #0]
 800223e:	b2db      	uxtb	r3, r3
 8002240:	2b00      	cmp	r3, #0
 8002242:	d0ae      	beq.n	80021a2 <main+0xea>
		userButtonPressed = false;
 8002244:	4b4d      	ldr	r3, [pc, #308]	@ (800237c <main+0x2c4>)
 8002246:	2200      	movs	r2, #0
 8002248:	701a      	strb	r2, [r3, #0]
		uint32_t backup_value = __HAL_TIM_GET_COMPARE(&htim2, TIM_CHANNEL_1);
 800224a:	4b40      	ldr	r3, [pc, #256]	@ (800234c <main+0x294>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002250:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
		//Measuring lowest and highest possible lux value at output
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 8002254:	4b3d      	ldr	r3, [pc, #244]	@ (800234c <main+0x294>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	2200      	movs	r2, #0
 800225a:	635a      	str	r2, [r3, #52]	@ 0x34
		HAL_Delay(500);
 800225c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002260:	f000 fc86 	bl	8002b70 <HAL_Delay>
		uint16_t low_lux = measureLux();
 8002264:	f7ff fd10 	bl	8001c88 <measureLux>
 8002268:	eef0 7a40 	vmov.f32	s15, s0
 800226c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002270:	ee17 3a90 	vmov	r3, s15
 8002274:	f8a7 313e 	strh.w	r3, [r7, #318]	@ 0x13e
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 999);
 8002278:	4b34      	ldr	r3, [pc, #208]	@ (800234c <main+0x294>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002280:	635a      	str	r2, [r3, #52]	@ 0x34
		HAL_Delay(500);
 8002282:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002286:	f000 fc73 	bl	8002b70 <HAL_Delay>
		uint16_t high_lux = measureLux();
 800228a:	f7ff fcfd 	bl	8001c88 <measureLux>
 800228e:	eef0 7a40 	vmov.f32	s15, s0
 8002292:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002296:	ee17 3a90 	vmov	r3, s15
 800229a:	f8a7 313c 	strh.w	r3, [r7, #316]	@ 0x13c

		//YES I COULD HAVE CHANGED THE VALUES OF HIGH AND LOW LUX HERE

		// Writing the acquired data to EEPROM
		uint16_t measures[2] = {low_lux, high_lux};
 800229e:	f8b7 313e 	ldrh.w	r3, [r7, #318]	@ 0x13e
 80022a2:	f8a7 30d0 	strh.w	r3, [r7, #208]	@ 0xd0
 80022a6:	f8b7 313c 	ldrh.w	r3, [r7, #316]	@ 0x13c
 80022aa:	f8a7 30d2 	strh.w	r3, [r7, #210]	@ 0xd2
		if (EEPROM_WriteIntArray(0x0000, measures, sizeof(measures)) == HAL_OK) {
 80022ae:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 80022b2:	2204      	movs	r2, #4
 80022b4:	4619      	mov	r1, r3
 80022b6:	2000      	movs	r0, #0
 80022b8:	f7fe fdc6 	bl	8000e48 <EEPROM_WriteIntArray>
 80022bc:	4603      	mov	r3, r0
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d103      	bne.n	80022ca <main+0x212>
			SendDebugMessage("{\"operation\": \"write\", \"message\": \"success\"}\r\n");
 80022c2:	482f      	ldr	r0, [pc, #188]	@ (8002380 <main+0x2c8>)
 80022c4:	f7ff fc78 	bl	8001bb8 <SendDebugMessage>
 80022c8:	e002      	b.n	80022d0 <main+0x218>
		} else {
			SendDebugMessage("{\"message\": \"failure\"}\r\n");
 80022ca:	482e      	ldr	r0, [pc, #184]	@ (8002384 <main+0x2cc>)
 80022cc:	f7ff fc74 	bl	8001bb8 <SendDebugMessage>
		}
		HAL_Delay(10);
 80022d0:	200a      	movs	r0, #10
 80022d2:	f000 fc4d 	bl	8002b70 <HAL_Delay>

		//Reading the data from EEPROM
		uint16_t readMeasurements[2] = {0,0};
 80022d6:	2300      	movs	r3, #0
 80022d8:	f8a7 30cc 	strh.w	r3, [r7, #204]	@ 0xcc
 80022dc:	2300      	movs	r3, #0
 80022de:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
		if (EEPROM_ReadIntArray(0x0000, &readMeasurements, sizeof(readMeasurements)) == HAL_OK) {
 80022e2:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80022e6:	2204      	movs	r2, #4
 80022e8:	4619      	mov	r1, r3
 80022ea:	2000      	movs	r0, #0
 80022ec:	f7fe fe04 	bl	8000ef8 <EEPROM_ReadIntArray>
 80022f0:	4603      	mov	r3, r0
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d119      	bne.n	800232a <main+0x272>
			char buffer[100];
			snprintf(buffer, sizeof(buffer), "{\"operation\": \"read\", \"message\": \"success\", \"low_lux\": %d, \"high_lux\": %d}\r\n", low_lux, high_lux);
 80022f6:	f8b7 213e 	ldrh.w	r2, [r7, #318]	@ 0x13e
 80022fa:	f8b7 313c 	ldrh.w	r3, [r7, #316]	@ 0x13c
 80022fe:	f107 0068 	add.w	r0, r7, #104	@ 0x68
 8002302:	9300      	str	r3, [sp, #0]
 8002304:	4613      	mov	r3, r2
 8002306:	4a20      	ldr	r2, [pc, #128]	@ (8002388 <main+0x2d0>)
 8002308:	2164      	movs	r1, #100	@ 0x64
 800230a:	f00d fcbb 	bl	800fc84 <sniprintf>
			// HERE WE READ THE MIN AND MAX VALUE FOR LED C:
			min_lux_value = readMeasurements[0];
 800230e:	f8b7 20cc 	ldrh.w	r2, [r7, #204]	@ 0xcc
 8002312:	4b1e      	ldr	r3, [pc, #120]	@ (800238c <main+0x2d4>)
 8002314:	801a      	strh	r2, [r3, #0]
			max_lux_value = readMeasurements[1];
 8002316:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	@ 0xce
 800231a:	4b1d      	ldr	r3, [pc, #116]	@ (8002390 <main+0x2d8>)
 800231c:	801a      	strh	r2, [r3, #0]
			SendDebugMessage(buffer);
 800231e:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8002322:	4618      	mov	r0, r3
 8002324:	f7ff fc48 	bl	8001bb8 <SendDebugMessage>
 8002328:	e002      	b.n	8002330 <main+0x278>
		} else {
			SendDebugMessage("{\"operation\": \"read\", \"message\": \"failure\"}\r\n");
 800232a:	481a      	ldr	r0, [pc, #104]	@ (8002394 <main+0x2dc>)
 800232c:	f7ff fc44 	bl	8001bb8 <SendDebugMessage>
		}
		//Restoring the previous value
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, backup_value);
 8002330:	4b06      	ldr	r3, [pc, #24]	@ (800234c <main+0x294>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f8d7 2140 	ldr.w	r2, [r7, #320]	@ 0x140
 8002338:	635a      	str	r2, [r3, #52]	@ 0x34
		HAL_Delay(300);
 800233a:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800233e:	f000 fc17 	bl	8002b70 <HAL_Delay>
  {
 8002342:	e72e      	b.n	80021a2 <main+0xea>
 8002344:	58024400 	.word	0x58024400
 8002348:	24000334 	.word	0x24000334
 800234c:	240003a0 	.word	0x240003a0
 8002350:	2400038e 	.word	0x2400038e
 8002354:	240003ec 	.word	0x240003ec
 8002358:	08013980 	.word	0x08013980
 800235c:	080139ac 	.word	0x080139ac
 8002360:	24000335 	.word	0x24000335
 8002364:	2400000a 	.word	0x2400000a
 8002368:	080139bc 	.word	0x080139bc
 800236c:	24000346 	.word	0x24000346
 8002370:	2400000e 	.word	0x2400000e
 8002374:	2400000c 	.word	0x2400000c
 8002378:	080139cc 	.word	0x080139cc
 800237c:	2400035a 	.word	0x2400035a
 8002380:	080139f4 	.word	0x080139f4
 8002384:	08013a24 	.word	0x08013a24
 8002388:	08013a40 	.word	0x08013a40
 800238c:	24000358 	.word	0x24000358
 8002390:	24000008 	.word	0x24000008
 8002394:	08013a90 	.word	0x08013a90

08002398 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b09c      	sub	sp, #112	@ 0x70
 800239c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800239e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80023a2:	224c      	movs	r2, #76	@ 0x4c
 80023a4:	2100      	movs	r1, #0
 80023a6:	4618      	mov	r0, r3
 80023a8:	f00d fd03 	bl	800fdb2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80023ac:	1d3b      	adds	r3, r7, #4
 80023ae:	2220      	movs	r2, #32
 80023b0:	2100      	movs	r1, #0
 80023b2:	4618      	mov	r0, r3
 80023b4:	f00d fcfd 	bl	800fdb2 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80023b8:	2004      	movs	r0, #4
 80023ba:	f005 fa7f 	bl	80078bc <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80023be:	2300      	movs	r3, #0
 80023c0:	603b      	str	r3, [r7, #0]
 80023c2:	4b2b      	ldr	r3, [pc, #172]	@ (8002470 <SystemClock_Config+0xd8>)
 80023c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023c6:	4a2a      	ldr	r2, [pc, #168]	@ (8002470 <SystemClock_Config+0xd8>)
 80023c8:	f023 0301 	bic.w	r3, r3, #1
 80023cc:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80023ce:	4b28      	ldr	r3, [pc, #160]	@ (8002470 <SystemClock_Config+0xd8>)
 80023d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023d2:	f003 0301 	and.w	r3, r3, #1
 80023d6:	603b      	str	r3, [r7, #0]
 80023d8:	4b26      	ldr	r3, [pc, #152]	@ (8002474 <SystemClock_Config+0xdc>)
 80023da:	699b      	ldr	r3, [r3, #24]
 80023dc:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80023e0:	4a24      	ldr	r2, [pc, #144]	@ (8002474 <SystemClock_Config+0xdc>)
 80023e2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80023e6:	6193      	str	r3, [r2, #24]
 80023e8:	4b22      	ldr	r3, [pc, #136]	@ (8002474 <SystemClock_Config+0xdc>)
 80023ea:	699b      	ldr	r3, [r3, #24]
 80023ec:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80023f0:	603b      	str	r3, [r7, #0]
 80023f2:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80023f4:	bf00      	nop
 80023f6:	4b1f      	ldr	r3, [pc, #124]	@ (8002474 <SystemClock_Config+0xdc>)
 80023f8:	699b      	ldr	r3, [r3, #24]
 80023fa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80023fe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002402:	d1f8      	bne.n	80023f6 <SystemClock_Config+0x5e>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 8002404:	4b1c      	ldr	r3, [pc, #112]	@ (8002478 <SystemClock_Config+0xe0>)
 8002406:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002408:	4a1b      	ldr	r2, [pc, #108]	@ (8002478 <SystemClock_Config+0xe0>)
 800240a:	f023 0303 	bic.w	r3, r3, #3
 800240e:	6293      	str	r3, [r2, #40]	@ 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002410:	2302      	movs	r3, #2
 8002412:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8002414:	2301      	movs	r3, #1
 8002416:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002418:	2340      	movs	r3, #64	@ 0x40
 800241a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800241c:	2300      	movs	r3, #0
 800241e:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002420:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002424:	4618      	mov	r0, r3
 8002426:	f005 faa3 	bl	8007970 <HAL_RCC_OscConfig>
 800242a:	4603      	mov	r3, r0
 800242c:	2b00      	cmp	r3, #0
 800242e:	d001      	beq.n	8002434 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8002430:	f000 f824 	bl	800247c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002434:	233f      	movs	r3, #63	@ 0x3f
 8002436:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002438:	2300      	movs	r3, #0
 800243a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800243c:	2300      	movs	r3, #0
 800243e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8002440:	2300      	movs	r3, #0
 8002442:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8002444:	2300      	movs	r3, #0
 8002446:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8002448:	2340      	movs	r3, #64	@ 0x40
 800244a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 800244c:	2300      	movs	r3, #0
 800244e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8002450:	2300      	movs	r3, #0
 8002452:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002454:	1d3b      	adds	r3, r7, #4
 8002456:	2101      	movs	r1, #1
 8002458:	4618      	mov	r0, r3
 800245a:	f005 fee3 	bl	8008224 <HAL_RCC_ClockConfig>
 800245e:	4603      	mov	r3, r0
 8002460:	2b00      	cmp	r3, #0
 8002462:	d001      	beq.n	8002468 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8002464:	f000 f80a 	bl	800247c <Error_Handler>
  }
}
 8002468:	bf00      	nop
 800246a:	3770      	adds	r7, #112	@ 0x70
 800246c:	46bd      	mov	sp, r7
 800246e:	bd80      	pop	{r7, pc}
 8002470:	58000400 	.word	0x58000400
 8002474:	58024800 	.word	0x58024800
 8002478:	58024400 	.word	0x58024400

0800247c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800247c:	b480      	push	{r7}
 800247e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002480:	b672      	cpsid	i
}
 8002482:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002484:	bf00      	nop
 8002486:	e7fd      	b.n	8002484 <Error_Handler+0x8>

08002488 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002488:	b480      	push	{r7}
 800248a:	b083      	sub	sp, #12
 800248c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800248e:	4b0a      	ldr	r3, [pc, #40]	@ (80024b8 <HAL_MspInit+0x30>)
 8002490:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002494:	4a08      	ldr	r2, [pc, #32]	@ (80024b8 <HAL_MspInit+0x30>)
 8002496:	f043 0302 	orr.w	r3, r3, #2
 800249a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800249e:	4b06      	ldr	r3, [pc, #24]	@ (80024b8 <HAL_MspInit+0x30>)
 80024a0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80024a4:	f003 0302 	and.w	r3, r3, #2
 80024a8:	607b      	str	r3, [r7, #4]
 80024aa:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80024ac:	bf00      	nop
 80024ae:	370c      	adds	r7, #12
 80024b0:	46bd      	mov	sp, r7
 80024b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b6:	4770      	bx	lr
 80024b8:	58024400 	.word	0x58024400

080024bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80024bc:	b480      	push	{r7}
 80024be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80024c0:	bf00      	nop
 80024c2:	e7fd      	b.n	80024c0 <NMI_Handler+0x4>

080024c4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80024c4:	b480      	push	{r7}
 80024c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80024c8:	bf00      	nop
 80024ca:	e7fd      	b.n	80024c8 <HardFault_Handler+0x4>

080024cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80024cc:	b480      	push	{r7}
 80024ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80024d0:	bf00      	nop
 80024d2:	e7fd      	b.n	80024d0 <MemManage_Handler+0x4>

080024d4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80024d4:	b480      	push	{r7}
 80024d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80024d8:	bf00      	nop
 80024da:	e7fd      	b.n	80024d8 <BusFault_Handler+0x4>

080024dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80024dc:	b480      	push	{r7}
 80024de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80024e0:	bf00      	nop
 80024e2:	e7fd      	b.n	80024e0 <UsageFault_Handler+0x4>

080024e4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80024e4:	b480      	push	{r7}
 80024e6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80024e8:	bf00      	nop
 80024ea:	46bd      	mov	sp, r7
 80024ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f0:	4770      	bx	lr

080024f2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80024f2:	b480      	push	{r7}
 80024f4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80024f6:	bf00      	nop
 80024f8:	46bd      	mov	sp, r7
 80024fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fe:	4770      	bx	lr

08002500 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002500:	b480      	push	{r7}
 8002502:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002504:	bf00      	nop
 8002506:	46bd      	mov	sp, r7
 8002508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250c:	4770      	bx	lr

0800250e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800250e:	b580      	push	{r7, lr}
 8002510:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002512:	f000 fb0d 	bl	8002b30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002516:	bf00      	nop
 8002518:	bd80      	pop	{r7, pc}
	...

0800251c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002520:	4802      	ldr	r0, [pc, #8]	@ (800252c <DMA1_Stream0_IRQHandler+0x10>)
 8002522:	f003 f86b 	bl	80055fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002526:	bf00      	nop
 8002528:	bd80      	pop	{r7, pc}
 800252a:	bf00      	nop
 800252c:	24000268 	.word	0x24000268

08002530 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002534:	4802      	ldr	r0, [pc, #8]	@ (8002540 <USART3_IRQHandler+0x10>)
 8002536:	f00a f915 	bl	800c764 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800253a:	bf00      	nop
 800253c:	bd80      	pop	{r7, pc}
 800253e:	bf00      	nop
 8002540:	240003ec 	.word	0x240003ec

08002544 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_BUTTON_Pin);
 8002548:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800254c:	f004 fb85 	bl	8006c5a <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002550:	bf00      	nop
 8002552:	bd80      	pop	{r7, pc}

08002554 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002554:	b480      	push	{r7}
 8002556:	af00      	add	r7, sp, #0
  return 1;
 8002558:	2301      	movs	r3, #1
}
 800255a:	4618      	mov	r0, r3
 800255c:	46bd      	mov	sp, r7
 800255e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002562:	4770      	bx	lr

08002564 <_kill>:

int _kill(int pid, int sig)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b082      	sub	sp, #8
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
 800256c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800256e:	f00d fc85 	bl	800fe7c <__errno>
 8002572:	4603      	mov	r3, r0
 8002574:	2216      	movs	r2, #22
 8002576:	601a      	str	r2, [r3, #0]
  return -1;
 8002578:	f04f 33ff 	mov.w	r3, #4294967295
}
 800257c:	4618      	mov	r0, r3
 800257e:	3708      	adds	r7, #8
 8002580:	46bd      	mov	sp, r7
 8002582:	bd80      	pop	{r7, pc}

08002584 <_exit>:

void _exit (int status)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b082      	sub	sp, #8
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800258c:	f04f 31ff 	mov.w	r1, #4294967295
 8002590:	6878      	ldr	r0, [r7, #4]
 8002592:	f7ff ffe7 	bl	8002564 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002596:	bf00      	nop
 8002598:	e7fd      	b.n	8002596 <_exit+0x12>

0800259a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800259a:	b580      	push	{r7, lr}
 800259c:	b086      	sub	sp, #24
 800259e:	af00      	add	r7, sp, #0
 80025a0:	60f8      	str	r0, [r7, #12]
 80025a2:	60b9      	str	r1, [r7, #8]
 80025a4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025a6:	2300      	movs	r3, #0
 80025a8:	617b      	str	r3, [r7, #20]
 80025aa:	e00a      	b.n	80025c2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80025ac:	f3af 8000 	nop.w
 80025b0:	4601      	mov	r1, r0
 80025b2:	68bb      	ldr	r3, [r7, #8]
 80025b4:	1c5a      	adds	r2, r3, #1
 80025b6:	60ba      	str	r2, [r7, #8]
 80025b8:	b2ca      	uxtb	r2, r1
 80025ba:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025bc:	697b      	ldr	r3, [r7, #20]
 80025be:	3301      	adds	r3, #1
 80025c0:	617b      	str	r3, [r7, #20]
 80025c2:	697a      	ldr	r2, [r7, #20]
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	429a      	cmp	r2, r3
 80025c8:	dbf0      	blt.n	80025ac <_read+0x12>
  }

  return len;
 80025ca:	687b      	ldr	r3, [r7, #4]
}
 80025cc:	4618      	mov	r0, r3
 80025ce:	3718      	adds	r7, #24
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bd80      	pop	{r7, pc}

080025d4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b086      	sub	sp, #24
 80025d8:	af00      	add	r7, sp, #0
 80025da:	60f8      	str	r0, [r7, #12]
 80025dc:	60b9      	str	r1, [r7, #8]
 80025de:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025e0:	2300      	movs	r3, #0
 80025e2:	617b      	str	r3, [r7, #20]
 80025e4:	e009      	b.n	80025fa <_write+0x26>
  {
    __io_putchar(*ptr++);
 80025e6:	68bb      	ldr	r3, [r7, #8]
 80025e8:	1c5a      	adds	r2, r3, #1
 80025ea:	60ba      	str	r2, [r7, #8]
 80025ec:	781b      	ldrb	r3, [r3, #0]
 80025ee:	4618      	mov	r0, r3
 80025f0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025f4:	697b      	ldr	r3, [r7, #20]
 80025f6:	3301      	adds	r3, #1
 80025f8:	617b      	str	r3, [r7, #20]
 80025fa:	697a      	ldr	r2, [r7, #20]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	429a      	cmp	r2, r3
 8002600:	dbf1      	blt.n	80025e6 <_write+0x12>
  }
  return len;
 8002602:	687b      	ldr	r3, [r7, #4]
}
 8002604:	4618      	mov	r0, r3
 8002606:	3718      	adds	r7, #24
 8002608:	46bd      	mov	sp, r7
 800260a:	bd80      	pop	{r7, pc}

0800260c <_close>:

int _close(int file)
{
 800260c:	b480      	push	{r7}
 800260e:	b083      	sub	sp, #12
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002614:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002618:	4618      	mov	r0, r3
 800261a:	370c      	adds	r7, #12
 800261c:	46bd      	mov	sp, r7
 800261e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002622:	4770      	bx	lr

08002624 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002624:	b480      	push	{r7}
 8002626:	b083      	sub	sp, #12
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
 800262c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002634:	605a      	str	r2, [r3, #4]
  return 0;
 8002636:	2300      	movs	r3, #0
}
 8002638:	4618      	mov	r0, r3
 800263a:	370c      	adds	r7, #12
 800263c:	46bd      	mov	sp, r7
 800263e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002642:	4770      	bx	lr

08002644 <_isatty>:

int _isatty(int file)
{
 8002644:	b480      	push	{r7}
 8002646:	b083      	sub	sp, #12
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800264c:	2301      	movs	r3, #1
}
 800264e:	4618      	mov	r0, r3
 8002650:	370c      	adds	r7, #12
 8002652:	46bd      	mov	sp, r7
 8002654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002658:	4770      	bx	lr

0800265a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800265a:	b480      	push	{r7}
 800265c:	b085      	sub	sp, #20
 800265e:	af00      	add	r7, sp, #0
 8002660:	60f8      	str	r0, [r7, #12]
 8002662:	60b9      	str	r1, [r7, #8]
 8002664:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002666:	2300      	movs	r3, #0
}
 8002668:	4618      	mov	r0, r3
 800266a:	3714      	adds	r7, #20
 800266c:	46bd      	mov	sp, r7
 800266e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002672:	4770      	bx	lr

08002674 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b086      	sub	sp, #24
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800267c:	4a14      	ldr	r2, [pc, #80]	@ (80026d0 <_sbrk+0x5c>)
 800267e:	4b15      	ldr	r3, [pc, #84]	@ (80026d4 <_sbrk+0x60>)
 8002680:	1ad3      	subs	r3, r2, r3
 8002682:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002688:	4b13      	ldr	r3, [pc, #76]	@ (80026d8 <_sbrk+0x64>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d102      	bne.n	8002696 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002690:	4b11      	ldr	r3, [pc, #68]	@ (80026d8 <_sbrk+0x64>)
 8002692:	4a12      	ldr	r2, [pc, #72]	@ (80026dc <_sbrk+0x68>)
 8002694:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002696:	4b10      	ldr	r3, [pc, #64]	@ (80026d8 <_sbrk+0x64>)
 8002698:	681a      	ldr	r2, [r3, #0]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	4413      	add	r3, r2
 800269e:	693a      	ldr	r2, [r7, #16]
 80026a0:	429a      	cmp	r2, r3
 80026a2:	d207      	bcs.n	80026b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80026a4:	f00d fbea 	bl	800fe7c <__errno>
 80026a8:	4603      	mov	r3, r0
 80026aa:	220c      	movs	r2, #12
 80026ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80026ae:	f04f 33ff 	mov.w	r3, #4294967295
 80026b2:	e009      	b.n	80026c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80026b4:	4b08      	ldr	r3, [pc, #32]	@ (80026d8 <_sbrk+0x64>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80026ba:	4b07      	ldr	r3, [pc, #28]	@ (80026d8 <_sbrk+0x64>)
 80026bc:	681a      	ldr	r2, [r3, #0]
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	4413      	add	r3, r2
 80026c2:	4a05      	ldr	r2, [pc, #20]	@ (80026d8 <_sbrk+0x64>)
 80026c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80026c6:	68fb      	ldr	r3, [r7, #12]
}
 80026c8:	4618      	mov	r0, r3
 80026ca:	3718      	adds	r7, #24
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bd80      	pop	{r7, pc}
 80026d0:	24080000 	.word	0x24080000
 80026d4:	00000400 	.word	0x00000400
 80026d8:	2400039c 	.word	0x2400039c
 80026dc:	240005d0 	.word	0x240005d0

080026e0 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b08e      	sub	sp, #56	@ 0x38
 80026e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80026e6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80026ea:	2200      	movs	r2, #0
 80026ec:	601a      	str	r2, [r3, #0]
 80026ee:	605a      	str	r2, [r3, #4]
 80026f0:	609a      	str	r2, [r3, #8]
 80026f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026f4:	f107 031c 	add.w	r3, r7, #28
 80026f8:	2200      	movs	r2, #0
 80026fa:	601a      	str	r2, [r3, #0]
 80026fc:	605a      	str	r2, [r3, #4]
 80026fe:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002700:	463b      	mov	r3, r7
 8002702:	2200      	movs	r2, #0
 8002704:	601a      	str	r2, [r3, #0]
 8002706:	605a      	str	r2, [r3, #4]
 8002708:	609a      	str	r2, [r3, #8]
 800270a:	60da      	str	r2, [r3, #12]
 800270c:	611a      	str	r2, [r3, #16]
 800270e:	615a      	str	r2, [r3, #20]
 8002710:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002712:	4b2d      	ldr	r3, [pc, #180]	@ (80027c8 <MX_TIM2_Init+0xe8>)
 8002714:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002718:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 63;
 800271a:	4b2b      	ldr	r3, [pc, #172]	@ (80027c8 <MX_TIM2_Init+0xe8>)
 800271c:	223f      	movs	r2, #63	@ 0x3f
 800271e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002720:	4b29      	ldr	r3, [pc, #164]	@ (80027c8 <MX_TIM2_Init+0xe8>)
 8002722:	2200      	movs	r2, #0
 8002724:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8002726:	4b28      	ldr	r3, [pc, #160]	@ (80027c8 <MX_TIM2_Init+0xe8>)
 8002728:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800272c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800272e:	4b26      	ldr	r3, [pc, #152]	@ (80027c8 <MX_TIM2_Init+0xe8>)
 8002730:	2200      	movs	r2, #0
 8002732:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002734:	4b24      	ldr	r3, [pc, #144]	@ (80027c8 <MX_TIM2_Init+0xe8>)
 8002736:	2200      	movs	r2, #0
 8002738:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800273a:	4823      	ldr	r0, [pc, #140]	@ (80027c8 <MX_TIM2_Init+0xe8>)
 800273c:	f008 fdfc 	bl	800b338 <HAL_TIM_Base_Init>
 8002740:	4603      	mov	r3, r0
 8002742:	2b00      	cmp	r3, #0
 8002744:	d001      	beq.n	800274a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8002746:	f7ff fe99 	bl	800247c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800274a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800274e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002750:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002754:	4619      	mov	r1, r3
 8002756:	481c      	ldr	r0, [pc, #112]	@ (80027c8 <MX_TIM2_Init+0xe8>)
 8002758:	f009 f914 	bl	800b984 <HAL_TIM_ConfigClockSource>
 800275c:	4603      	mov	r3, r0
 800275e:	2b00      	cmp	r3, #0
 8002760:	d001      	beq.n	8002766 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8002762:	f7ff fe8b 	bl	800247c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002766:	4818      	ldr	r0, [pc, #96]	@ (80027c8 <MX_TIM2_Init+0xe8>)
 8002768:	f008 fe3d 	bl	800b3e6 <HAL_TIM_PWM_Init>
 800276c:	4603      	mov	r3, r0
 800276e:	2b00      	cmp	r3, #0
 8002770:	d001      	beq.n	8002776 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8002772:	f7ff fe83 	bl	800247c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002776:	2300      	movs	r3, #0
 8002778:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800277a:	2300      	movs	r3, #0
 800277c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800277e:	f107 031c 	add.w	r3, r7, #28
 8002782:	4619      	mov	r1, r3
 8002784:	4810      	ldr	r0, [pc, #64]	@ (80027c8 <MX_TIM2_Init+0xe8>)
 8002786:	f009 fe35 	bl	800c3f4 <HAL_TIMEx_MasterConfigSynchronization>
 800278a:	4603      	mov	r3, r0
 800278c:	2b00      	cmp	r3, #0
 800278e:	d001      	beq.n	8002794 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8002790:	f7ff fe74 	bl	800247c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002794:	2360      	movs	r3, #96	@ 0x60
 8002796:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002798:	2300      	movs	r3, #0
 800279a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800279c:	2300      	movs	r3, #0
 800279e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80027a0:	2300      	movs	r3, #0
 80027a2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80027a4:	463b      	mov	r3, r7
 80027a6:	2200      	movs	r2, #0
 80027a8:	4619      	mov	r1, r3
 80027aa:	4807      	ldr	r0, [pc, #28]	@ (80027c8 <MX_TIM2_Init+0xe8>)
 80027ac:	f008 ffd6 	bl	800b75c <HAL_TIM_PWM_ConfigChannel>
 80027b0:	4603      	mov	r3, r0
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d001      	beq.n	80027ba <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80027b6:	f7ff fe61 	bl	800247c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80027ba:	4803      	ldr	r0, [pc, #12]	@ (80027c8 <MX_TIM2_Init+0xe8>)
 80027bc:	f000 f826 	bl	800280c <HAL_TIM_MspPostInit>

}
 80027c0:	bf00      	nop
 80027c2:	3738      	adds	r7, #56	@ 0x38
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bd80      	pop	{r7, pc}
 80027c8:	240003a0 	.word	0x240003a0

080027cc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b085      	sub	sp, #20
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80027dc:	d10e      	bne.n	80027fc <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80027de:	4b0a      	ldr	r3, [pc, #40]	@ (8002808 <HAL_TIM_Base_MspInit+0x3c>)
 80027e0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80027e4:	4a08      	ldr	r2, [pc, #32]	@ (8002808 <HAL_TIM_Base_MspInit+0x3c>)
 80027e6:	f043 0301 	orr.w	r3, r3, #1
 80027ea:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80027ee:	4b06      	ldr	r3, [pc, #24]	@ (8002808 <HAL_TIM_Base_MspInit+0x3c>)
 80027f0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80027f4:	f003 0301 	and.w	r3, r3, #1
 80027f8:	60fb      	str	r3, [r7, #12]
 80027fa:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80027fc:	bf00      	nop
 80027fe:	3714      	adds	r7, #20
 8002800:	46bd      	mov	sp, r7
 8002802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002806:	4770      	bx	lr
 8002808:	58024400 	.word	0x58024400

0800280c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b088      	sub	sp, #32
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002814:	f107 030c 	add.w	r3, r7, #12
 8002818:	2200      	movs	r2, #0
 800281a:	601a      	str	r2, [r3, #0]
 800281c:	605a      	str	r2, [r3, #4]
 800281e:	609a      	str	r2, [r3, #8]
 8002820:	60da      	str	r2, [r3, #12]
 8002822:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800282c:	d11e      	bne.n	800286c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800282e:	4b11      	ldr	r3, [pc, #68]	@ (8002874 <HAL_TIM_MspPostInit+0x68>)
 8002830:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002834:	4a0f      	ldr	r2, [pc, #60]	@ (8002874 <HAL_TIM_MspPostInit+0x68>)
 8002836:	f043 0301 	orr.w	r3, r3, #1
 800283a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800283e:	4b0d      	ldr	r3, [pc, #52]	@ (8002874 <HAL_TIM_MspPostInit+0x68>)
 8002840:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002844:	f003 0301 	and.w	r3, r3, #1
 8002848:	60bb      	str	r3, [r7, #8]
 800284a:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800284c:	2301      	movs	r3, #1
 800284e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002850:	2302      	movs	r3, #2
 8002852:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002854:	2300      	movs	r3, #0
 8002856:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002858:	2300      	movs	r3, #0
 800285a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800285c:	2301      	movs	r3, #1
 800285e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002860:	f107 030c 	add.w	r3, r7, #12
 8002864:	4619      	mov	r1, r3
 8002866:	4804      	ldr	r0, [pc, #16]	@ (8002878 <HAL_TIM_MspPostInit+0x6c>)
 8002868:	f004 f82e 	bl	80068c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800286c:	bf00      	nop
 800286e:	3720      	adds	r7, #32
 8002870:	46bd      	mov	sp, r7
 8002872:	bd80      	pop	{r7, pc}
 8002874:	58024400 	.word	0x58024400
 8002878:	58020000 	.word	0x58020000

0800287c <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002880:	4b22      	ldr	r3, [pc, #136]	@ (800290c <MX_USART3_UART_Init+0x90>)
 8002882:	4a23      	ldr	r2, [pc, #140]	@ (8002910 <MX_USART3_UART_Init+0x94>)
 8002884:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8002886:	4b21      	ldr	r3, [pc, #132]	@ (800290c <MX_USART3_UART_Init+0x90>)
 8002888:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800288c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800288e:	4b1f      	ldr	r3, [pc, #124]	@ (800290c <MX_USART3_UART_Init+0x90>)
 8002890:	2200      	movs	r2, #0
 8002892:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002894:	4b1d      	ldr	r3, [pc, #116]	@ (800290c <MX_USART3_UART_Init+0x90>)
 8002896:	2200      	movs	r2, #0
 8002898:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800289a:	4b1c      	ldr	r3, [pc, #112]	@ (800290c <MX_USART3_UART_Init+0x90>)
 800289c:	2200      	movs	r2, #0
 800289e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80028a0:	4b1a      	ldr	r3, [pc, #104]	@ (800290c <MX_USART3_UART_Init+0x90>)
 80028a2:	220c      	movs	r2, #12
 80028a4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80028a6:	4b19      	ldr	r3, [pc, #100]	@ (800290c <MX_USART3_UART_Init+0x90>)
 80028a8:	2200      	movs	r2, #0
 80028aa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80028ac:	4b17      	ldr	r3, [pc, #92]	@ (800290c <MX_USART3_UART_Init+0x90>)
 80028ae:	2200      	movs	r2, #0
 80028b0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80028b2:	4b16      	ldr	r3, [pc, #88]	@ (800290c <MX_USART3_UART_Init+0x90>)
 80028b4:	2200      	movs	r2, #0
 80028b6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80028b8:	4b14      	ldr	r3, [pc, #80]	@ (800290c <MX_USART3_UART_Init+0x90>)
 80028ba:	2200      	movs	r2, #0
 80028bc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80028be:	4b13      	ldr	r3, [pc, #76]	@ (800290c <MX_USART3_UART_Init+0x90>)
 80028c0:	2200      	movs	r2, #0
 80028c2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80028c4:	4811      	ldr	r0, [pc, #68]	@ (800290c <MX_USART3_UART_Init+0x90>)
 80028c6:	f009 fe23 	bl	800c510 <HAL_UART_Init>
 80028ca:	4603      	mov	r3, r0
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d001      	beq.n	80028d4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80028d0:	f7ff fdd4 	bl	800247c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80028d4:	2100      	movs	r1, #0
 80028d6:	480d      	ldr	r0, [pc, #52]	@ (800290c <MX_USART3_UART_Init+0x90>)
 80028d8:	f00c f97d 	bl	800ebd6 <HAL_UARTEx_SetTxFifoThreshold>
 80028dc:	4603      	mov	r3, r0
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d001      	beq.n	80028e6 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80028e2:	f7ff fdcb 	bl	800247c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80028e6:	2100      	movs	r1, #0
 80028e8:	4808      	ldr	r0, [pc, #32]	@ (800290c <MX_USART3_UART_Init+0x90>)
 80028ea:	f00c f9b2 	bl	800ec52 <HAL_UARTEx_SetRxFifoThreshold>
 80028ee:	4603      	mov	r3, r0
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d001      	beq.n	80028f8 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80028f4:	f7ff fdc2 	bl	800247c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80028f8:	4804      	ldr	r0, [pc, #16]	@ (800290c <MX_USART3_UART_Init+0x90>)
 80028fa:	f00c f933 	bl	800eb64 <HAL_UARTEx_DisableFifoMode>
 80028fe:	4603      	mov	r3, r0
 8002900:	2b00      	cmp	r3, #0
 8002902:	d001      	beq.n	8002908 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8002904:	f7ff fdba 	bl	800247c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002908:	bf00      	nop
 800290a:	bd80      	pop	{r7, pc}
 800290c:	240003ec 	.word	0x240003ec
 8002910:	40004800 	.word	0x40004800

08002914 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b0ba      	sub	sp, #232	@ 0xe8
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800291c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002920:	2200      	movs	r2, #0
 8002922:	601a      	str	r2, [r3, #0]
 8002924:	605a      	str	r2, [r3, #4]
 8002926:	609a      	str	r2, [r3, #8]
 8002928:	60da      	str	r2, [r3, #12]
 800292a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800292c:	f107 0310 	add.w	r3, r7, #16
 8002930:	22c0      	movs	r2, #192	@ 0xc0
 8002932:	2100      	movs	r1, #0
 8002934:	4618      	mov	r0, r3
 8002936:	f00d fa3c 	bl	800fdb2 <memset>
  if(uartHandle->Instance==USART3)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4a2b      	ldr	r2, [pc, #172]	@ (80029ec <HAL_UART_MspInit+0xd8>)
 8002940:	4293      	cmp	r3, r2
 8002942:	d14e      	bne.n	80029e2 <HAL_UART_MspInit+0xce>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002944:	f04f 0202 	mov.w	r2, #2
 8002948:	f04f 0300 	mov.w	r3, #0
 800294c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002950:	2300      	movs	r3, #0
 8002952:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002956:	f107 0310 	add.w	r3, r7, #16
 800295a:	4618      	mov	r0, r3
 800295c:	f005 ffee 	bl	800893c <HAL_RCCEx_PeriphCLKConfig>
 8002960:	4603      	mov	r3, r0
 8002962:	2b00      	cmp	r3, #0
 8002964:	d001      	beq.n	800296a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8002966:	f7ff fd89 	bl	800247c <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800296a:	4b21      	ldr	r3, [pc, #132]	@ (80029f0 <HAL_UART_MspInit+0xdc>)
 800296c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002970:	4a1f      	ldr	r2, [pc, #124]	@ (80029f0 <HAL_UART_MspInit+0xdc>)
 8002972:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002976:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800297a:	4b1d      	ldr	r3, [pc, #116]	@ (80029f0 <HAL_UART_MspInit+0xdc>)
 800297c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002980:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002984:	60fb      	str	r3, [r7, #12]
 8002986:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002988:	4b19      	ldr	r3, [pc, #100]	@ (80029f0 <HAL_UART_MspInit+0xdc>)
 800298a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800298e:	4a18      	ldr	r2, [pc, #96]	@ (80029f0 <HAL_UART_MspInit+0xdc>)
 8002990:	f043 0308 	orr.w	r3, r3, #8
 8002994:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002998:	4b15      	ldr	r3, [pc, #84]	@ (80029f0 <HAL_UART_MspInit+0xdc>)
 800299a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800299e:	f003 0308 	and.w	r3, r3, #8
 80029a2:	60bb      	str	r3, [r7, #8]
 80029a4:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80029a6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80029aa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029ae:	2302      	movs	r3, #2
 80029b0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029b4:	2300      	movs	r3, #0
 80029b6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029ba:	2300      	movs	r3, #0
 80029bc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80029c0:	2307      	movs	r3, #7
 80029c2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80029c6:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80029ca:	4619      	mov	r1, r3
 80029cc:	4809      	ldr	r0, [pc, #36]	@ (80029f4 <HAL_UART_MspInit+0xe0>)
 80029ce:	f003 ff7b 	bl	80068c8 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80029d2:	2200      	movs	r2, #0
 80029d4:	2100      	movs	r1, #0
 80029d6:	2027      	movs	r0, #39	@ 0x27
 80029d8:	f001 fd1b 	bl	8004412 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80029dc:	2027      	movs	r0, #39	@ 0x27
 80029de:	f001 fd32 	bl	8004446 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80029e2:	bf00      	nop
 80029e4:	37e8      	adds	r7, #232	@ 0xe8
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd80      	pop	{r7, pc}
 80029ea:	bf00      	nop
 80029ec:	40004800 	.word	0x40004800
 80029f0:	58024400 	.word	0x58024400
 80029f4:	58020c00 	.word	0x58020c00

080029f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80029f8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002a30 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80029fc:	f7fe f844 	bl	8000a88 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002a00:	480c      	ldr	r0, [pc, #48]	@ (8002a34 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002a02:	490d      	ldr	r1, [pc, #52]	@ (8002a38 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002a04:	4a0d      	ldr	r2, [pc, #52]	@ (8002a3c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002a06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a08:	e002      	b.n	8002a10 <LoopCopyDataInit>

08002a0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a0e:	3304      	adds	r3, #4

08002a10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a14:	d3f9      	bcc.n	8002a0a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a16:	4a0a      	ldr	r2, [pc, #40]	@ (8002a40 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002a18:	4c0a      	ldr	r4, [pc, #40]	@ (8002a44 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002a1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a1c:	e001      	b.n	8002a22 <LoopFillZerobss>

08002a1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a20:	3204      	adds	r2, #4

08002a22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a24:	d3fb      	bcc.n	8002a1e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002a26:	f00d fa2f 	bl	800fe88 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002a2a:	f7ff fb45 	bl	80020b8 <main>
  bx  lr
 8002a2e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002a30:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002a34:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002a38:	240001e8 	.word	0x240001e8
  ldr r2, =_sidata
 8002a3c:	080157f8 	.word	0x080157f8
  ldr r2, =_sbss
 8002a40:	240001e8 	.word	0x240001e8
  ldr r4, =_ebss
 8002a44:	240005d0 	.word	0x240005d0

08002a48 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002a48:	e7fe      	b.n	8002a48 <ADC3_IRQHandler>
	...

08002a4c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b082      	sub	sp, #8
 8002a50:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a52:	2003      	movs	r0, #3
 8002a54:	f001 fcd2 	bl	80043fc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002a58:	f005 fd9a 	bl	8008590 <HAL_RCC_GetSysClockFreq>
 8002a5c:	4602      	mov	r2, r0
 8002a5e:	4b15      	ldr	r3, [pc, #84]	@ (8002ab4 <HAL_Init+0x68>)
 8002a60:	699b      	ldr	r3, [r3, #24]
 8002a62:	0a1b      	lsrs	r3, r3, #8
 8002a64:	f003 030f 	and.w	r3, r3, #15
 8002a68:	4913      	ldr	r1, [pc, #76]	@ (8002ab8 <HAL_Init+0x6c>)
 8002a6a:	5ccb      	ldrb	r3, [r1, r3]
 8002a6c:	f003 031f 	and.w	r3, r3, #31
 8002a70:	fa22 f303 	lsr.w	r3, r2, r3
 8002a74:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002a76:	4b0f      	ldr	r3, [pc, #60]	@ (8002ab4 <HAL_Init+0x68>)
 8002a78:	699b      	ldr	r3, [r3, #24]
 8002a7a:	f003 030f 	and.w	r3, r3, #15
 8002a7e:	4a0e      	ldr	r2, [pc, #56]	@ (8002ab8 <HAL_Init+0x6c>)
 8002a80:	5cd3      	ldrb	r3, [r2, r3]
 8002a82:	f003 031f 	and.w	r3, r3, #31
 8002a86:	687a      	ldr	r2, [r7, #4]
 8002a88:	fa22 f303 	lsr.w	r3, r2, r3
 8002a8c:	4a0b      	ldr	r2, [pc, #44]	@ (8002abc <HAL_Init+0x70>)
 8002a8e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002a90:	4a0b      	ldr	r2, [pc, #44]	@ (8002ac0 <HAL_Init+0x74>)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002a96:	2000      	movs	r0, #0
 8002a98:	f000 f814 	bl	8002ac4 <HAL_InitTick>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d001      	beq.n	8002aa6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e002      	b.n	8002aac <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002aa6:	f7ff fcef 	bl	8002488 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002aaa:	2300      	movs	r3, #0
}
 8002aac:	4618      	mov	r0, r3
 8002aae:	3708      	adds	r7, #8
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bd80      	pop	{r7, pc}
 8002ab4:	58024400 	.word	0x58024400
 8002ab8:	08013ac0 	.word	0x08013ac0
 8002abc:	24000004 	.word	0x24000004
 8002ac0:	24000000 	.word	0x24000000

08002ac4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b082      	sub	sp, #8
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002acc:	4b15      	ldr	r3, [pc, #84]	@ (8002b24 <HAL_InitTick+0x60>)
 8002ace:	781b      	ldrb	r3, [r3, #0]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d101      	bne.n	8002ad8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	e021      	b.n	8002b1c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002ad8:	4b13      	ldr	r3, [pc, #76]	@ (8002b28 <HAL_InitTick+0x64>)
 8002ada:	681a      	ldr	r2, [r3, #0]
 8002adc:	4b11      	ldr	r3, [pc, #68]	@ (8002b24 <HAL_InitTick+0x60>)
 8002ade:	781b      	ldrb	r3, [r3, #0]
 8002ae0:	4619      	mov	r1, r3
 8002ae2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002ae6:	fbb3 f3f1 	udiv	r3, r3, r1
 8002aea:	fbb2 f3f3 	udiv	r3, r2, r3
 8002aee:	4618      	mov	r0, r3
 8002af0:	f001 fcb7 	bl	8004462 <HAL_SYSTICK_Config>
 8002af4:	4603      	mov	r3, r0
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d001      	beq.n	8002afe <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002afa:	2301      	movs	r3, #1
 8002afc:	e00e      	b.n	8002b1c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2b0f      	cmp	r3, #15
 8002b02:	d80a      	bhi.n	8002b1a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b04:	2200      	movs	r2, #0
 8002b06:	6879      	ldr	r1, [r7, #4]
 8002b08:	f04f 30ff 	mov.w	r0, #4294967295
 8002b0c:	f001 fc81 	bl	8004412 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002b10:	4a06      	ldr	r2, [pc, #24]	@ (8002b2c <HAL_InitTick+0x68>)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002b16:	2300      	movs	r3, #0
 8002b18:	e000      	b.n	8002b1c <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002b1a:	2301      	movs	r3, #1
}
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	3708      	adds	r7, #8
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bd80      	pop	{r7, pc}
 8002b24:	2400001c 	.word	0x2400001c
 8002b28:	24000000 	.word	0x24000000
 8002b2c:	24000018 	.word	0x24000018

08002b30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b30:	b480      	push	{r7}
 8002b32:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002b34:	4b06      	ldr	r3, [pc, #24]	@ (8002b50 <HAL_IncTick+0x20>)
 8002b36:	781b      	ldrb	r3, [r3, #0]
 8002b38:	461a      	mov	r2, r3
 8002b3a:	4b06      	ldr	r3, [pc, #24]	@ (8002b54 <HAL_IncTick+0x24>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4413      	add	r3, r2
 8002b40:	4a04      	ldr	r2, [pc, #16]	@ (8002b54 <HAL_IncTick+0x24>)
 8002b42:	6013      	str	r3, [r2, #0]
}
 8002b44:	bf00      	nop
 8002b46:	46bd      	mov	sp, r7
 8002b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4c:	4770      	bx	lr
 8002b4e:	bf00      	nop
 8002b50:	2400001c 	.word	0x2400001c
 8002b54:	24000480 	.word	0x24000480

08002b58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	af00      	add	r7, sp, #0
  return uwTick;
 8002b5c:	4b03      	ldr	r3, [pc, #12]	@ (8002b6c <HAL_GetTick+0x14>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
}
 8002b60:	4618      	mov	r0, r3
 8002b62:	46bd      	mov	sp, r7
 8002b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b68:	4770      	bx	lr
 8002b6a:	bf00      	nop
 8002b6c:	24000480 	.word	0x24000480

08002b70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b084      	sub	sp, #16
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002b78:	f7ff ffee 	bl	8002b58 <HAL_GetTick>
 8002b7c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b88:	d005      	beq.n	8002b96 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002b8a:	4b0a      	ldr	r3, [pc, #40]	@ (8002bb4 <HAL_Delay+0x44>)
 8002b8c:	781b      	ldrb	r3, [r3, #0]
 8002b8e:	461a      	mov	r2, r3
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	4413      	add	r3, r2
 8002b94:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002b96:	bf00      	nop
 8002b98:	f7ff ffde 	bl	8002b58 <HAL_GetTick>
 8002b9c:	4602      	mov	r2, r0
 8002b9e:	68bb      	ldr	r3, [r7, #8]
 8002ba0:	1ad3      	subs	r3, r2, r3
 8002ba2:	68fa      	ldr	r2, [r7, #12]
 8002ba4:	429a      	cmp	r2, r3
 8002ba6:	d8f7      	bhi.n	8002b98 <HAL_Delay+0x28>
  {
  }
}
 8002ba8:	bf00      	nop
 8002baa:	bf00      	nop
 8002bac:	3710      	adds	r7, #16
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}
 8002bb2:	bf00      	nop
 8002bb4:	2400001c 	.word	0x2400001c

08002bb8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002bbc:	4b03      	ldr	r3, [pc, #12]	@ (8002bcc <HAL_GetREVID+0x14>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	0c1b      	lsrs	r3, r3, #16
}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bca:	4770      	bx	lr
 8002bcc:	5c001000 	.word	0x5c001000

08002bd0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b083      	sub	sp, #12
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
 8002bd8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	689b      	ldr	r3, [r3, #8]
 8002bde:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	431a      	orrs	r2, r3
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	609a      	str	r2, [r3, #8]
}
 8002bea:	bf00      	nop
 8002bec:	370c      	adds	r7, #12
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf4:	4770      	bx	lr

08002bf6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002bf6:	b480      	push	{r7}
 8002bf8:	b083      	sub	sp, #12
 8002bfa:	af00      	add	r7, sp, #0
 8002bfc:	6078      	str	r0, [r7, #4]
 8002bfe:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	689b      	ldr	r3, [r3, #8]
 8002c04:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	431a      	orrs	r2, r3
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	609a      	str	r2, [r3, #8]
}
 8002c10:	bf00      	nop
 8002c12:	370c      	adds	r7, #12
 8002c14:	46bd      	mov	sp, r7
 8002c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1a:	4770      	bx	lr

08002c1c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b083      	sub	sp, #12
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	689b      	ldr	r3, [r3, #8]
 8002c28:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	370c      	adds	r7, #12
 8002c30:	46bd      	mov	sp, r7
 8002c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c36:	4770      	bx	lr

08002c38 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	b087      	sub	sp, #28
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	60f8      	str	r0, [r7, #12]
 8002c40:	60b9      	str	r1, [r7, #8]
 8002c42:	607a      	str	r2, [r7, #4]
 8002c44:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	3360      	adds	r3, #96	@ 0x60
 8002c4a:	461a      	mov	r2, r3
 8002c4c:	68bb      	ldr	r3, [r7, #8]
 8002c4e:	009b      	lsls	r3, r3, #2
 8002c50:	4413      	add	r3, r2
 8002c52:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8002c54:	697b      	ldr	r3, [r7, #20]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	430b      	orrs	r3, r1
 8002c66:	431a      	orrs	r2, r3
 8002c68:	697b      	ldr	r3, [r7, #20]
 8002c6a:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8002c6c:	bf00      	nop
 8002c6e:	371c      	adds	r7, #28
 8002c70:	46bd      	mov	sp, r7
 8002c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c76:	4770      	bx	lr

08002c78 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	b085      	sub	sp, #20
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	60f8      	str	r0, [r7, #12]
 8002c80:	60b9      	str	r1, [r7, #8]
 8002c82:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	691b      	ldr	r3, [r3, #16]
 8002c88:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8002c8c:	68bb      	ldr	r3, [r7, #8]
 8002c8e:	f003 031f 	and.w	r3, r3, #31
 8002c92:	6879      	ldr	r1, [r7, #4]
 8002c94:	fa01 f303 	lsl.w	r3, r1, r3
 8002c98:	431a      	orrs	r2, r3
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	611a      	str	r2, [r3, #16]
}
 8002c9e:	bf00      	nop
 8002ca0:	3714      	adds	r7, #20
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca8:	4770      	bx	lr

08002caa <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8002caa:	b480      	push	{r7}
 8002cac:	b087      	sub	sp, #28
 8002cae:	af00      	add	r7, sp, #0
 8002cb0:	60f8      	str	r0, [r7, #12]
 8002cb2:	60b9      	str	r1, [r7, #8]
 8002cb4:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	3360      	adds	r3, #96	@ 0x60
 8002cba:	461a      	mov	r2, r3
 8002cbc:	68bb      	ldr	r3, [r7, #8]
 8002cbe:	009b      	lsls	r3, r3, #2
 8002cc0:	4413      	add	r3, r2
 8002cc2:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8002cc4:	697b      	ldr	r3, [r7, #20]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	431a      	orrs	r2, r3
 8002cd0:	697b      	ldr	r3, [r7, #20]
 8002cd2:	601a      	str	r2, [r3, #0]
  }
}
 8002cd4:	bf00      	nop
 8002cd6:	371c      	adds	r7, #28
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cde:	4770      	bx	lr

08002ce0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	b083      	sub	sp, #12
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	68db      	ldr	r3, [r3, #12]
 8002cec:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d101      	bne.n	8002cf8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	e000      	b.n	8002cfa <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002cf8:	2300      	movs	r3, #0
}
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	370c      	adds	r7, #12
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d04:	4770      	bx	lr

08002d06 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002d06:	b480      	push	{r7}
 8002d08:	b087      	sub	sp, #28
 8002d0a:	af00      	add	r7, sp, #0
 8002d0c:	60f8      	str	r0, [r7, #12]
 8002d0e:	60b9      	str	r1, [r7, #8]
 8002d10:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	3330      	adds	r3, #48	@ 0x30
 8002d16:	461a      	mov	r2, r3
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	0a1b      	lsrs	r3, r3, #8
 8002d1c:	009b      	lsls	r3, r3, #2
 8002d1e:	f003 030c 	and.w	r3, r3, #12
 8002d22:	4413      	add	r3, r2
 8002d24:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002d26:	697b      	ldr	r3, [r7, #20]
 8002d28:	681a      	ldr	r2, [r3, #0]
 8002d2a:	68bb      	ldr	r3, [r7, #8]
 8002d2c:	f003 031f 	and.w	r3, r3, #31
 8002d30:	211f      	movs	r1, #31
 8002d32:	fa01 f303 	lsl.w	r3, r1, r3
 8002d36:	43db      	mvns	r3, r3
 8002d38:	401a      	ands	r2, r3
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	0e9b      	lsrs	r3, r3, #26
 8002d3e:	f003 011f 	and.w	r1, r3, #31
 8002d42:	68bb      	ldr	r3, [r7, #8]
 8002d44:	f003 031f 	and.w	r3, r3, #31
 8002d48:	fa01 f303 	lsl.w	r3, r1, r3
 8002d4c:	431a      	orrs	r2, r3
 8002d4e:	697b      	ldr	r3, [r7, #20]
 8002d50:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002d52:	bf00      	nop
 8002d54:	371c      	adds	r7, #28
 8002d56:	46bd      	mov	sp, r7
 8002d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5c:	4770      	bx	lr

08002d5e <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002d5e:	b480      	push	{r7}
 8002d60:	b087      	sub	sp, #28
 8002d62:	af00      	add	r7, sp, #0
 8002d64:	60f8      	str	r0, [r7, #12]
 8002d66:	60b9      	str	r1, [r7, #8]
 8002d68:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	3314      	adds	r3, #20
 8002d6e:	461a      	mov	r2, r3
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	0e5b      	lsrs	r3, r3, #25
 8002d74:	009b      	lsls	r3, r3, #2
 8002d76:	f003 0304 	and.w	r3, r3, #4
 8002d7a:	4413      	add	r3, r2
 8002d7c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002d7e:	697b      	ldr	r3, [r7, #20]
 8002d80:	681a      	ldr	r2, [r3, #0]
 8002d82:	68bb      	ldr	r3, [r7, #8]
 8002d84:	0d1b      	lsrs	r3, r3, #20
 8002d86:	f003 031f 	and.w	r3, r3, #31
 8002d8a:	2107      	movs	r1, #7
 8002d8c:	fa01 f303 	lsl.w	r3, r1, r3
 8002d90:	43db      	mvns	r3, r3
 8002d92:	401a      	ands	r2, r3
 8002d94:	68bb      	ldr	r3, [r7, #8]
 8002d96:	0d1b      	lsrs	r3, r3, #20
 8002d98:	f003 031f 	and.w	r3, r3, #31
 8002d9c:	6879      	ldr	r1, [r7, #4]
 8002d9e:	fa01 f303 	lsl.w	r3, r1, r3
 8002da2:	431a      	orrs	r2, r3
 8002da4:	697b      	ldr	r3, [r7, #20]
 8002da6:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002da8:	bf00      	nop
 8002daa:	371c      	adds	r7, #28
 8002dac:	46bd      	mov	sp, r7
 8002dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db2:	4770      	bx	lr

08002db4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002db4:	b480      	push	{r7}
 8002db6:	b085      	sub	sp, #20
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	60f8      	str	r0, [r7, #12]
 8002dbc:	60b9      	str	r1, [r7, #8]
 8002dbe:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8002dc6:	68bb      	ldr	r3, [r7, #8]
 8002dc8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002dcc:	43db      	mvns	r3, r3
 8002dce:	401a      	ands	r2, r3
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	f003 0318 	and.w	r3, r3, #24
 8002dd6:	4908      	ldr	r1, [pc, #32]	@ (8002df8 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002dd8:	40d9      	lsrs	r1, r3
 8002dda:	68bb      	ldr	r3, [r7, #8]
 8002ddc:	400b      	ands	r3, r1
 8002dde:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002de2:	431a      	orrs	r2, r3
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8002dea:	bf00      	nop
 8002dec:	3714      	adds	r7, #20
 8002dee:	46bd      	mov	sp, r7
 8002df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df4:	4770      	bx	lr
 8002df6:	bf00      	nop
 8002df8:	000fffff 	.word	0x000fffff

08002dfc <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b083      	sub	sp, #12
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	689b      	ldr	r3, [r3, #8]
 8002e08:	f003 031f 	and.w	r3, r3, #31
}
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	370c      	adds	r7, #12
 8002e10:	46bd      	mov	sp, r7
 8002e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e16:	4770      	bx	lr

08002e18 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	b083      	sub	sp, #12
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	689b      	ldr	r3, [r3, #8]
 8002e24:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 8002e28:	4618      	mov	r0, r3
 8002e2a:	370c      	adds	r7, #12
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e32:	4770      	bx	lr

08002e34 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002e34:	b480      	push	{r7}
 8002e36:	b083      	sub	sp, #12
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	689a      	ldr	r2, [r3, #8]
 8002e40:	4b04      	ldr	r3, [pc, #16]	@ (8002e54 <LL_ADC_DisableDeepPowerDown+0x20>)
 8002e42:	4013      	ands	r3, r2
 8002e44:	687a      	ldr	r2, [r7, #4]
 8002e46:	6093      	str	r3, [r2, #8]
}
 8002e48:	bf00      	nop
 8002e4a:	370c      	adds	r7, #12
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e52:	4770      	bx	lr
 8002e54:	5fffffc0 	.word	0x5fffffc0

08002e58 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b083      	sub	sp, #12
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	689b      	ldr	r3, [r3, #8]
 8002e64:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002e68:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002e6c:	d101      	bne.n	8002e72 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002e6e:	2301      	movs	r3, #1
 8002e70:	e000      	b.n	8002e74 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002e72:	2300      	movs	r3, #0
}
 8002e74:	4618      	mov	r0, r3
 8002e76:	370c      	adds	r7, #12
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7e:	4770      	bx	lr

08002e80 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002e80:	b480      	push	{r7}
 8002e82:	b083      	sub	sp, #12
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	689a      	ldr	r2, [r3, #8]
 8002e8c:	4b05      	ldr	r3, [pc, #20]	@ (8002ea4 <LL_ADC_EnableInternalRegulator+0x24>)
 8002e8e:	4013      	ands	r3, r2
 8002e90:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002e98:	bf00      	nop
 8002e9a:	370c      	adds	r7, #12
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea2:	4770      	bx	lr
 8002ea4:	6fffffc0 	.word	0x6fffffc0

08002ea8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b083      	sub	sp, #12
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	689b      	ldr	r3, [r3, #8]
 8002eb4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002eb8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002ebc:	d101      	bne.n	8002ec2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	e000      	b.n	8002ec4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002ec2:	2300      	movs	r3, #0
}
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	370c      	adds	r7, #12
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ece:	4770      	bx	lr

08002ed0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	b083      	sub	sp, #12
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	689a      	ldr	r2, [r3, #8]
 8002edc:	4b05      	ldr	r3, [pc, #20]	@ (8002ef4 <LL_ADC_Enable+0x24>)
 8002ede:	4013      	ands	r3, r2
 8002ee0:	f043 0201 	orr.w	r2, r3, #1
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002ee8:	bf00      	nop
 8002eea:	370c      	adds	r7, #12
 8002eec:	46bd      	mov	sp, r7
 8002eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef2:	4770      	bx	lr
 8002ef4:	7fffffc0 	.word	0x7fffffc0

08002ef8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	b083      	sub	sp, #12
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	689b      	ldr	r3, [r3, #8]
 8002f04:	f003 0301 	and.w	r3, r3, #1
 8002f08:	2b01      	cmp	r3, #1
 8002f0a:	d101      	bne.n	8002f10 <LL_ADC_IsEnabled+0x18>
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	e000      	b.n	8002f12 <LL_ADC_IsEnabled+0x1a>
 8002f10:	2300      	movs	r3, #0
}
 8002f12:	4618      	mov	r0, r3
 8002f14:	370c      	adds	r7, #12
 8002f16:	46bd      	mov	sp, r7
 8002f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1c:	4770      	bx	lr
	...

08002f20 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002f20:	b480      	push	{r7}
 8002f22:	b083      	sub	sp, #12
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	689a      	ldr	r2, [r3, #8]
 8002f2c:	4b05      	ldr	r3, [pc, #20]	@ (8002f44 <LL_ADC_REG_StartConversion+0x24>)
 8002f2e:	4013      	ands	r3, r2
 8002f30:	f043 0204 	orr.w	r2, r3, #4
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002f38:	bf00      	nop
 8002f3a:	370c      	adds	r7, #12
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f42:	4770      	bx	lr
 8002f44:	7fffffc0 	.word	0x7fffffc0

08002f48 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	b083      	sub	sp, #12
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	689b      	ldr	r3, [r3, #8]
 8002f54:	f003 0304 	and.w	r3, r3, #4
 8002f58:	2b04      	cmp	r3, #4
 8002f5a:	d101      	bne.n	8002f60 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	e000      	b.n	8002f62 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002f60:	2300      	movs	r3, #0
}
 8002f62:	4618      	mov	r0, r3
 8002f64:	370c      	adds	r7, #12
 8002f66:	46bd      	mov	sp, r7
 8002f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6c:	4770      	bx	lr

08002f6e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002f6e:	b480      	push	{r7}
 8002f70:	b083      	sub	sp, #12
 8002f72:	af00      	add	r7, sp, #0
 8002f74:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	689b      	ldr	r3, [r3, #8]
 8002f7a:	f003 0308 	and.w	r3, r3, #8
 8002f7e:	2b08      	cmp	r3, #8
 8002f80:	d101      	bne.n	8002f86 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002f82:	2301      	movs	r3, #1
 8002f84:	e000      	b.n	8002f88 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002f86:	2300      	movs	r3, #0
}
 8002f88:	4618      	mov	r0, r3
 8002f8a:	370c      	adds	r7, #12
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f92:	4770      	bx	lr

08002f94 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002f94:	b590      	push	{r4, r7, lr}
 8002f96:	b089      	sub	sp, #36	@ 0x24
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d101      	bne.n	8002fae <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002faa:	2301      	movs	r3, #1
 8002fac:	e18f      	b.n	80032ce <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	68db      	ldr	r3, [r3, #12]
 8002fb2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d109      	bne.n	8002fd0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002fbc:	6878      	ldr	r0, [r7, #4]
 8002fbe:	f7fd fe7d 	bl	8000cbc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2200      	movs	r2, #0
 8002fcc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	f7ff ff3f 	bl	8002e58 <LL_ADC_IsDeepPowerDownEnabled>
 8002fda:	4603      	mov	r3, r0
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d004      	beq.n	8002fea <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	f7ff ff25 	bl	8002e34 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4618      	mov	r0, r3
 8002ff0:	f7ff ff5a 	bl	8002ea8 <LL_ADC_IsInternalRegulatorEnabled>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d114      	bne.n	8003024 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4618      	mov	r0, r3
 8003000:	f7ff ff3e 	bl	8002e80 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003004:	4b87      	ldr	r3, [pc, #540]	@ (8003224 <HAL_ADC_Init+0x290>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	099b      	lsrs	r3, r3, #6
 800300a:	4a87      	ldr	r2, [pc, #540]	@ (8003228 <HAL_ADC_Init+0x294>)
 800300c:	fba2 2303 	umull	r2, r3, r2, r3
 8003010:	099b      	lsrs	r3, r3, #6
 8003012:	3301      	adds	r3, #1
 8003014:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003016:	e002      	b.n	800301e <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	3b01      	subs	r3, #1
 800301c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800301e:	68bb      	ldr	r3, [r7, #8]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d1f9      	bne.n	8003018 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4618      	mov	r0, r3
 800302a:	f7ff ff3d 	bl	8002ea8 <LL_ADC_IsInternalRegulatorEnabled>
 800302e:	4603      	mov	r3, r0
 8003030:	2b00      	cmp	r3, #0
 8003032:	d10d      	bne.n	8003050 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003038:	f043 0210 	orr.w	r2, r3, #16
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003044:	f043 0201 	orr.w	r2, r3, #1
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800304c:	2301      	movs	r3, #1
 800304e:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4618      	mov	r0, r3
 8003056:	f7ff ff77 	bl	8002f48 <LL_ADC_REG_IsConversionOngoing>
 800305a:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003060:	f003 0310 	and.w	r3, r3, #16
 8003064:	2b00      	cmp	r3, #0
 8003066:	f040 8129 	bne.w	80032bc <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800306a:	697b      	ldr	r3, [r7, #20]
 800306c:	2b00      	cmp	r3, #0
 800306e:	f040 8125 	bne.w	80032bc <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003076:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800307a:	f043 0202 	orr.w	r2, r3, #2
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4618      	mov	r0, r3
 8003088:	f7ff ff36 	bl	8002ef8 <LL_ADC_IsEnabled>
 800308c:	4603      	mov	r3, r0
 800308e:	2b00      	cmp	r3, #0
 8003090:	d136      	bne.n	8003100 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4a65      	ldr	r2, [pc, #404]	@ (800322c <HAL_ADC_Init+0x298>)
 8003098:	4293      	cmp	r3, r2
 800309a:	d004      	beq.n	80030a6 <HAL_ADC_Init+0x112>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4a63      	ldr	r2, [pc, #396]	@ (8003230 <HAL_ADC_Init+0x29c>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d10e      	bne.n	80030c4 <HAL_ADC_Init+0x130>
 80030a6:	4861      	ldr	r0, [pc, #388]	@ (800322c <HAL_ADC_Init+0x298>)
 80030a8:	f7ff ff26 	bl	8002ef8 <LL_ADC_IsEnabled>
 80030ac:	4604      	mov	r4, r0
 80030ae:	4860      	ldr	r0, [pc, #384]	@ (8003230 <HAL_ADC_Init+0x29c>)
 80030b0:	f7ff ff22 	bl	8002ef8 <LL_ADC_IsEnabled>
 80030b4:	4603      	mov	r3, r0
 80030b6:	4323      	orrs	r3, r4
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	bf0c      	ite	eq
 80030bc:	2301      	moveq	r3, #1
 80030be:	2300      	movne	r3, #0
 80030c0:	b2db      	uxtb	r3, r3
 80030c2:	e008      	b.n	80030d6 <HAL_ADC_Init+0x142>
 80030c4:	485b      	ldr	r0, [pc, #364]	@ (8003234 <HAL_ADC_Init+0x2a0>)
 80030c6:	f7ff ff17 	bl	8002ef8 <LL_ADC_IsEnabled>
 80030ca:	4603      	mov	r3, r0
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	bf0c      	ite	eq
 80030d0:	2301      	moveq	r3, #1
 80030d2:	2300      	movne	r3, #0
 80030d4:	b2db      	uxtb	r3, r3
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d012      	beq.n	8003100 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4a53      	ldr	r2, [pc, #332]	@ (800322c <HAL_ADC_Init+0x298>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d004      	beq.n	80030ee <HAL_ADC_Init+0x15a>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a51      	ldr	r2, [pc, #324]	@ (8003230 <HAL_ADC_Init+0x29c>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d101      	bne.n	80030f2 <HAL_ADC_Init+0x15e>
 80030ee:	4a52      	ldr	r2, [pc, #328]	@ (8003238 <HAL_ADC_Init+0x2a4>)
 80030f0:	e000      	b.n	80030f4 <HAL_ADC_Init+0x160>
 80030f2:	4a52      	ldr	r2, [pc, #328]	@ (800323c <HAL_ADC_Init+0x2a8>)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	4619      	mov	r1, r3
 80030fa:	4610      	mov	r0, r2
 80030fc:	f7ff fd68 	bl	8002bd0 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8003100:	f7ff fd5a 	bl	8002bb8 <HAL_GetREVID>
 8003104:	4603      	mov	r3, r0
 8003106:	f241 0203 	movw	r2, #4099	@ 0x1003
 800310a:	4293      	cmp	r3, r2
 800310c:	d914      	bls.n	8003138 <HAL_ADC_Init+0x1a4>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	689b      	ldr	r3, [r3, #8]
 8003112:	2b10      	cmp	r3, #16
 8003114:	d110      	bne.n	8003138 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	7d5b      	ldrb	r3, [r3, #21]
 800311a:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003120:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8003126:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	7f1b      	ldrb	r3, [r3, #28]
 800312c:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 800312e:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003130:	f043 030c 	orr.w	r3, r3, #12
 8003134:	61bb      	str	r3, [r7, #24]
 8003136:	e00d      	b.n	8003154 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	7d5b      	ldrb	r3, [r3, #21]
 800313c:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003142:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8003148:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	7f1b      	ldrb	r3, [r3, #28]
 800314e:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003150:	4313      	orrs	r3, r2
 8003152:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	7f1b      	ldrb	r3, [r3, #28]
 8003158:	2b01      	cmp	r3, #1
 800315a:	d106      	bne.n	800316a <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6a1b      	ldr	r3, [r3, #32]
 8003160:	3b01      	subs	r3, #1
 8003162:	045b      	lsls	r3, r3, #17
 8003164:	69ba      	ldr	r2, [r7, #24]
 8003166:	4313      	orrs	r3, r2
 8003168:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800316e:	2b00      	cmp	r3, #0
 8003170:	d009      	beq.n	8003186 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003176:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800317e:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003180:	69ba      	ldr	r2, [r7, #24]
 8003182:	4313      	orrs	r3, r2
 8003184:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	68da      	ldr	r2, [r3, #12]
 800318c:	4b2c      	ldr	r3, [pc, #176]	@ (8003240 <HAL_ADC_Init+0x2ac>)
 800318e:	4013      	ands	r3, r2
 8003190:	687a      	ldr	r2, [r7, #4]
 8003192:	6812      	ldr	r2, [r2, #0]
 8003194:	69b9      	ldr	r1, [r7, #24]
 8003196:	430b      	orrs	r3, r1
 8003198:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4618      	mov	r0, r3
 80031a0:	f7ff fed2 	bl	8002f48 <LL_ADC_REG_IsConversionOngoing>
 80031a4:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4618      	mov	r0, r3
 80031ac:	f7ff fedf 	bl	8002f6e <LL_ADC_INJ_IsConversionOngoing>
 80031b0:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80031b2:	693b      	ldr	r3, [r7, #16]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d15f      	bne.n	8003278 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d15c      	bne.n	8003278 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	7d1b      	ldrb	r3, [r3, #20]
 80031c2:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 80031c8:	4313      	orrs	r3, r2
 80031ca:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	68da      	ldr	r2, [r3, #12]
 80031d2:	4b1c      	ldr	r3, [pc, #112]	@ (8003244 <HAL_ADC_Init+0x2b0>)
 80031d4:	4013      	ands	r3, r2
 80031d6:	687a      	ldr	r2, [r7, #4]
 80031d8:	6812      	ldr	r2, [r2, #0]
 80031da:	69b9      	ldr	r1, [r7, #24]
 80031dc:	430b      	orrs	r3, r1
 80031de:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80031e6:	2b01      	cmp	r3, #1
 80031e8:	d130      	bne.n	800324c <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031ee:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	691a      	ldr	r2, [r3, #16]
 80031f6:	4b14      	ldr	r3, [pc, #80]	@ (8003248 <HAL_ADC_Init+0x2b4>)
 80031f8:	4013      	ands	r3, r2
 80031fa:	687a      	ldr	r2, [r7, #4]
 80031fc:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80031fe:	3a01      	subs	r2, #1
 8003200:	0411      	lsls	r1, r2, #16
 8003202:	687a      	ldr	r2, [r7, #4]
 8003204:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003206:	4311      	orrs	r1, r2
 8003208:	687a      	ldr	r2, [r7, #4]
 800320a:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800320c:	4311      	orrs	r1, r2
 800320e:	687a      	ldr	r2, [r7, #4]
 8003210:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003212:	430a      	orrs	r2, r1
 8003214:	431a      	orrs	r2, r3
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f042 0201 	orr.w	r2, r2, #1
 800321e:	611a      	str	r2, [r3, #16]
 8003220:	e01c      	b.n	800325c <HAL_ADC_Init+0x2c8>
 8003222:	bf00      	nop
 8003224:	24000000 	.word	0x24000000
 8003228:	053e2d63 	.word	0x053e2d63
 800322c:	40022000 	.word	0x40022000
 8003230:	40022100 	.word	0x40022100
 8003234:	58026000 	.word	0x58026000
 8003238:	40022300 	.word	0x40022300
 800323c:	58026300 	.word	0x58026300
 8003240:	fff0c003 	.word	0xfff0c003
 8003244:	ffffbffc 	.word	0xffffbffc
 8003248:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	691a      	ldr	r2, [r3, #16]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f022 0201 	bic.w	r2, r2, #1
 800325a:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	691b      	ldr	r3, [r3, #16]
 8003262:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	430a      	orrs	r2, r1
 8003270:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8003272:	6878      	ldr	r0, [r7, #4]
 8003274:	f000 fde2 	bl	8003e3c <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	68db      	ldr	r3, [r3, #12]
 800327c:	2b01      	cmp	r3, #1
 800327e:	d10c      	bne.n	800329a <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003286:	f023 010f 	bic.w	r1, r3, #15
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	699b      	ldr	r3, [r3, #24]
 800328e:	1e5a      	subs	r2, r3, #1
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	430a      	orrs	r2, r1
 8003296:	631a      	str	r2, [r3, #48]	@ 0x30
 8003298:	e007      	b.n	80032aa <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f022 020f 	bic.w	r2, r2, #15
 80032a8:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032ae:	f023 0303 	bic.w	r3, r3, #3
 80032b2:	f043 0201 	orr.w	r2, r3, #1
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	655a      	str	r2, [r3, #84]	@ 0x54
 80032ba:	e007      	b.n	80032cc <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032c0:	f043 0210 	orr.w	r2, r3, #16
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80032c8:	2301      	movs	r3, #1
 80032ca:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80032cc:	7ffb      	ldrb	r3, [r7, #31]
}
 80032ce:	4618      	mov	r0, r3
 80032d0:	3724      	adds	r7, #36	@ 0x24
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bd90      	pop	{r4, r7, pc}
 80032d6:	bf00      	nop

080032d8 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b086      	sub	sp, #24
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4a5c      	ldr	r2, [pc, #368]	@ (8003458 <HAL_ADC_Start+0x180>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d004      	beq.n	80032f4 <HAL_ADC_Start+0x1c>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4a5b      	ldr	r2, [pc, #364]	@ (800345c <HAL_ADC_Start+0x184>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d101      	bne.n	80032f8 <HAL_ADC_Start+0x20>
 80032f4:	4b5a      	ldr	r3, [pc, #360]	@ (8003460 <HAL_ADC_Start+0x188>)
 80032f6:	e000      	b.n	80032fa <HAL_ADC_Start+0x22>
 80032f8:	4b5a      	ldr	r3, [pc, #360]	@ (8003464 <HAL_ADC_Start+0x18c>)
 80032fa:	4618      	mov	r0, r3
 80032fc:	f7ff fd7e 	bl	8002dfc <LL_ADC_GetMultimode>
 8003300:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4618      	mov	r0, r3
 8003308:	f7ff fe1e 	bl	8002f48 <LL_ADC_REG_IsConversionOngoing>
 800330c:	4603      	mov	r3, r0
 800330e:	2b00      	cmp	r3, #0
 8003310:	f040 809a 	bne.w	8003448 <HAL_ADC_Start+0x170>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800331a:	2b01      	cmp	r3, #1
 800331c:	d101      	bne.n	8003322 <HAL_ADC_Start+0x4a>
 800331e:	2302      	movs	r3, #2
 8003320:	e095      	b.n	800344e <HAL_ADC_Start+0x176>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2201      	movs	r2, #1
 8003326:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800332a:	6878      	ldr	r0, [r7, #4]
 800332c:	f000 fcfc 	bl	8003d28 <ADC_Enable>
 8003330:	4603      	mov	r3, r0
 8003332:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003334:	7dfb      	ldrb	r3, [r7, #23]
 8003336:	2b00      	cmp	r3, #0
 8003338:	f040 8081 	bne.w	800343e <HAL_ADC_Start+0x166>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003340:	4b49      	ldr	r3, [pc, #292]	@ (8003468 <HAL_ADC_Start+0x190>)
 8003342:	4013      	ands	r3, r2
 8003344:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a42      	ldr	r2, [pc, #264]	@ (800345c <HAL_ADC_Start+0x184>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d002      	beq.n	800335c <HAL_ADC_Start+0x84>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	e000      	b.n	800335e <HAL_ADC_Start+0x86>
 800335c:	4b3e      	ldr	r3, [pc, #248]	@ (8003458 <HAL_ADC_Start+0x180>)
 800335e:	687a      	ldr	r2, [r7, #4]
 8003360:	6812      	ldr	r2, [r2, #0]
 8003362:	4293      	cmp	r3, r2
 8003364:	d002      	beq.n	800336c <HAL_ADC_Start+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003366:	693b      	ldr	r3, [r7, #16]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d105      	bne.n	8003378 <HAL_ADC_Start+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003370:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	655a      	str	r2, [r3, #84]	@ 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800337c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003380:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003384:	d106      	bne.n	8003394 <HAL_ADC_Start+0xbc>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800338a:	f023 0206 	bic.w	r2, r3, #6
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	659a      	str	r2, [r3, #88]	@ 0x58
 8003392:	e002      	b.n	800339a <HAL_ADC_Start+0xc2>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2200      	movs	r2, #0
 8003398:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	221c      	movs	r2, #28
 80033a0:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2200      	movs	r2, #0
 80033a6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4a2b      	ldr	r2, [pc, #172]	@ (800345c <HAL_ADC_Start+0x184>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d002      	beq.n	80033ba <HAL_ADC_Start+0xe2>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	e000      	b.n	80033bc <HAL_ADC_Start+0xe4>
 80033ba:	4b27      	ldr	r3, [pc, #156]	@ (8003458 <HAL_ADC_Start+0x180>)
 80033bc:	687a      	ldr	r2, [r7, #4]
 80033be:	6812      	ldr	r2, [r2, #0]
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d008      	beq.n	80033d6 <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80033c4:	693b      	ldr	r3, [r7, #16]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d005      	beq.n	80033d6 <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80033ca:	693b      	ldr	r3, [r7, #16]
 80033cc:	2b05      	cmp	r3, #5
 80033ce:	d002      	beq.n	80033d6 <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80033d0:	693b      	ldr	r3, [r7, #16]
 80033d2:	2b09      	cmp	r3, #9
 80033d4:	d114      	bne.n	8003400 <HAL_ADC_Start+0x128>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	68db      	ldr	r3, [r3, #12]
 80033dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d007      	beq.n	80033f4 <HAL_ADC_Start+0x11c>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033e8:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80033ec:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4618      	mov	r0, r3
 80033fa:	f7ff fd91 	bl	8002f20 <LL_ADC_REG_StartConversion>
 80033fe:	e025      	b.n	800344c <HAL_ADC_Start+0x174>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003404:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	655a      	str	r2, [r3, #84]	@ 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a12      	ldr	r2, [pc, #72]	@ (800345c <HAL_ADC_Start+0x184>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d002      	beq.n	800341c <HAL_ADC_Start+0x144>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	e000      	b.n	800341e <HAL_ADC_Start+0x146>
 800341c:	4b0e      	ldr	r3, [pc, #56]	@ (8003458 <HAL_ADC_Start+0x180>)
 800341e:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	68db      	ldr	r3, [r3, #12]
 8003424:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003428:	2b00      	cmp	r3, #0
 800342a:	d00f      	beq.n	800344c <HAL_ADC_Start+0x174>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003430:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003434:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	655a      	str	r2, [r3, #84]	@ 0x54
 800343c:	e006      	b.n	800344c <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2200      	movs	r2, #0
 8003442:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8003446:	e001      	b.n	800344c <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003448:	2302      	movs	r3, #2
 800344a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800344c:	7dfb      	ldrb	r3, [r7, #23]
}
 800344e:	4618      	mov	r0, r3
 8003450:	3718      	adds	r7, #24
 8003452:	46bd      	mov	sp, r7
 8003454:	bd80      	pop	{r7, pc}
 8003456:	bf00      	nop
 8003458:	40022000 	.word	0x40022000
 800345c:	40022100 	.word	0x40022100
 8003460:	40022300 	.word	0x40022300
 8003464:	58026300 	.word	0x58026300
 8003468:	fffff0fe 	.word	0xfffff0fe

0800346c <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b088      	sub	sp, #32
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
 8003474:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4a72      	ldr	r2, [pc, #456]	@ (8003644 <HAL_ADC_PollForConversion+0x1d8>)
 800347c:	4293      	cmp	r3, r2
 800347e:	d004      	beq.n	800348a <HAL_ADC_PollForConversion+0x1e>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4a70      	ldr	r2, [pc, #448]	@ (8003648 <HAL_ADC_PollForConversion+0x1dc>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d101      	bne.n	800348e <HAL_ADC_PollForConversion+0x22>
 800348a:	4b70      	ldr	r3, [pc, #448]	@ (800364c <HAL_ADC_PollForConversion+0x1e0>)
 800348c:	e000      	b.n	8003490 <HAL_ADC_PollForConversion+0x24>
 800348e:	4b70      	ldr	r3, [pc, #448]	@ (8003650 <HAL_ADC_PollForConversion+0x1e4>)
 8003490:	4618      	mov	r0, r3
 8003492:	f7ff fcb3 	bl	8002dfc <LL_ADC_GetMultimode>
 8003496:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	691b      	ldr	r3, [r3, #16]
 800349c:	2b08      	cmp	r3, #8
 800349e:	d102      	bne.n	80034a6 <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80034a0:	2308      	movs	r3, #8
 80034a2:	61fb      	str	r3, [r7, #28]
 80034a4:	e037      	b.n	8003516 <HAL_ADC_PollForConversion+0xaa>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80034a6:	697b      	ldr	r3, [r7, #20]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d005      	beq.n	80034b8 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80034ac:	697b      	ldr	r3, [r7, #20]
 80034ae:	2b05      	cmp	r3, #5
 80034b0:	d002      	beq.n	80034b8 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80034b2:	697b      	ldr	r3, [r7, #20]
 80034b4:	2b09      	cmp	r3, #9
 80034b6:	d111      	bne.n	80034dc <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	68db      	ldr	r3, [r3, #12]
 80034be:	f003 0301 	and.w	r3, r3, #1
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d007      	beq.n	80034d6 <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034ca:	f043 0220 	orr.w	r2, r3, #32
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 80034d2:	2301      	movs	r3, #1
 80034d4:	e0b1      	b.n	800363a <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80034d6:	2304      	movs	r3, #4
 80034d8:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 80034da:	e01c      	b.n	8003516 <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4a58      	ldr	r2, [pc, #352]	@ (8003644 <HAL_ADC_PollForConversion+0x1d8>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d004      	beq.n	80034f0 <HAL_ADC_PollForConversion+0x84>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4a57      	ldr	r2, [pc, #348]	@ (8003648 <HAL_ADC_PollForConversion+0x1dc>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d101      	bne.n	80034f4 <HAL_ADC_PollForConversion+0x88>
 80034f0:	4b56      	ldr	r3, [pc, #344]	@ (800364c <HAL_ADC_PollForConversion+0x1e0>)
 80034f2:	e000      	b.n	80034f6 <HAL_ADC_PollForConversion+0x8a>
 80034f4:	4b56      	ldr	r3, [pc, #344]	@ (8003650 <HAL_ADC_PollForConversion+0x1e4>)
 80034f6:	4618      	mov	r0, r3
 80034f8:	f7ff fc8e 	bl	8002e18 <LL_ADC_GetMultiDMATransfer>
 80034fc:	4603      	mov	r3, r0
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d007      	beq.n	8003512 <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003506:	f043 0220 	orr.w	r2, r3, #32
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 800350e:	2301      	movs	r3, #1
 8003510:	e093      	b.n	800363a <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8003512:	2304      	movs	r3, #4
 8003514:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8003516:	f7ff fb1f 	bl	8002b58 <HAL_GetTick>
 800351a:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800351c:	e021      	b.n	8003562 <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003524:	d01d      	beq.n	8003562 <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8003526:	f7ff fb17 	bl	8002b58 <HAL_GetTick>
 800352a:	4602      	mov	r2, r0
 800352c:	693b      	ldr	r3, [r7, #16]
 800352e:	1ad3      	subs	r3, r2, r3
 8003530:	683a      	ldr	r2, [r7, #0]
 8003532:	429a      	cmp	r2, r3
 8003534:	d302      	bcc.n	800353c <HAL_ADC_PollForConversion+0xd0>
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d112      	bne.n	8003562 <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	681a      	ldr	r2, [r3, #0]
 8003542:	69fb      	ldr	r3, [r7, #28]
 8003544:	4013      	ands	r3, r2
 8003546:	2b00      	cmp	r3, #0
 8003548:	d10b      	bne.n	8003562 <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800354e:	f043 0204 	orr.w	r2, r3, #4
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2200      	movs	r2, #0
 800355a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

          return HAL_TIMEOUT;
 800355e:	2303      	movs	r3, #3
 8003560:	e06b      	b.n	800363a <HAL_ADC_PollForConversion+0x1ce>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	681a      	ldr	r2, [r3, #0]
 8003568:	69fb      	ldr	r3, [r7, #28]
 800356a:	4013      	ands	r3, r2
 800356c:	2b00      	cmp	r3, #0
 800356e:	d0d6      	beq.n	800351e <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003574:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4618      	mov	r0, r3
 8003582:	f7ff fbad 	bl	8002ce0 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003586:	4603      	mov	r3, r0
 8003588:	2b00      	cmp	r3, #0
 800358a:	d01c      	beq.n	80035c6 <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	7d5b      	ldrb	r3, [r3, #21]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d118      	bne.n	80035c6 <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f003 0308 	and.w	r3, r3, #8
 800359e:	2b08      	cmp	r3, #8
 80035a0:	d111      	bne.n	80035c6 <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035a6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	655a      	str	r2, [r3, #84]	@ 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035b2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d105      	bne.n	80035c6 <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035be:	f043 0201 	orr.w	r2, r3, #1
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4a1f      	ldr	r2, [pc, #124]	@ (8003648 <HAL_ADC_PollForConversion+0x1dc>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d002      	beq.n	80035d6 <HAL_ADC_PollForConversion+0x16a>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	e000      	b.n	80035d8 <HAL_ADC_PollForConversion+0x16c>
 80035d6:	4b1b      	ldr	r3, [pc, #108]	@ (8003644 <HAL_ADC_PollForConversion+0x1d8>)
 80035d8:	687a      	ldr	r2, [r7, #4]
 80035da:	6812      	ldr	r2, [r2, #0]
 80035dc:	4293      	cmp	r3, r2
 80035de:	d008      	beq.n	80035f2 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80035e0:	697b      	ldr	r3, [r7, #20]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d005      	beq.n	80035f2 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80035e6:	697b      	ldr	r3, [r7, #20]
 80035e8:	2b05      	cmp	r3, #5
 80035ea:	d002      	beq.n	80035f2 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80035ec:	697b      	ldr	r3, [r7, #20]
 80035ee:	2b09      	cmp	r3, #9
 80035f0:	d104      	bne.n	80035fc <HAL_ADC_PollForConversion+0x190>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	68db      	ldr	r3, [r3, #12]
 80035f8:	61bb      	str	r3, [r7, #24]
 80035fa:	e00c      	b.n	8003616 <HAL_ADC_PollForConversion+0x1aa>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4a11      	ldr	r2, [pc, #68]	@ (8003648 <HAL_ADC_PollForConversion+0x1dc>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d002      	beq.n	800360c <HAL_ADC_PollForConversion+0x1a0>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	e000      	b.n	800360e <HAL_ADC_PollForConversion+0x1a2>
 800360c:	4b0d      	ldr	r3, [pc, #52]	@ (8003644 <HAL_ADC_PollForConversion+0x1d8>)
 800360e:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	68db      	ldr	r3, [r3, #12]
 8003614:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8003616:	69fb      	ldr	r3, [r7, #28]
 8003618:	2b08      	cmp	r3, #8
 800361a:	d104      	bne.n	8003626 <HAL_ADC_PollForConversion+0x1ba>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	2208      	movs	r2, #8
 8003622:	601a      	str	r2, [r3, #0]
 8003624:	e008      	b.n	8003638 <HAL_ADC_PollForConversion+0x1cc>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8003626:	69bb      	ldr	r3, [r7, #24]
 8003628:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800362c:	2b00      	cmp	r3, #0
 800362e:	d103      	bne.n	8003638 <HAL_ADC_PollForConversion+0x1cc>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	220c      	movs	r2, #12
 8003636:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8003638:	2300      	movs	r3, #0
}
 800363a:	4618      	mov	r0, r3
 800363c:	3720      	adds	r7, #32
 800363e:	46bd      	mov	sp, r7
 8003640:	bd80      	pop	{r7, pc}
 8003642:	bf00      	nop
 8003644:	40022000 	.word	0x40022000
 8003648:	40022100 	.word	0x40022100
 800364c:	40022300 	.word	0x40022300
 8003650:	58026300 	.word	0x58026300

08003654 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8003654:	b480      	push	{r7}
 8003656:	b083      	sub	sp, #12
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8003662:	4618      	mov	r0, r3
 8003664:	370c      	adds	r7, #12
 8003666:	46bd      	mov	sp, r7
 8003668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366c:	4770      	bx	lr
	...

08003670 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003670:	b590      	push	{r4, r7, lr}
 8003672:	b0a1      	sub	sp, #132	@ 0x84
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
 8003678:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800367a:	2300      	movs	r3, #0
 800367c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8003680:	2300      	movs	r3, #0
 8003682:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	68db      	ldr	r3, [r3, #12]
 8003688:	4a65      	ldr	r2, [pc, #404]	@ (8003820 <HAL_ADC_ConfigChannel+0x1b0>)
 800368a:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003692:	2b01      	cmp	r3, #1
 8003694:	d101      	bne.n	800369a <HAL_ADC_ConfigChannel+0x2a>
 8003696:	2302      	movs	r3, #2
 8003698:	e32e      	b.n	8003cf8 <HAL_ADC_ConfigChannel+0x688>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2201      	movs	r2, #1
 800369e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4618      	mov	r0, r3
 80036a8:	f7ff fc4e 	bl	8002f48 <LL_ADC_REG_IsConversionOngoing>
 80036ac:	4603      	mov	r3, r0
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	f040 8313 	bne.w	8003cda <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	db2c      	blt.n	8003716 <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d108      	bne.n	80036da <HAL_ADC_ConfigChannel+0x6a>
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	0e9b      	lsrs	r3, r3, #26
 80036ce:	f003 031f 	and.w	r3, r3, #31
 80036d2:	2201      	movs	r2, #1
 80036d4:	fa02 f303 	lsl.w	r3, r2, r3
 80036d8:	e016      	b.n	8003708 <HAL_ADC_ConfigChannel+0x98>
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	667b      	str	r3, [r7, #100]	@ 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036e0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80036e2:	fa93 f3a3 	rbit	r3, r3
 80036e6:	663b      	str	r3, [r7, #96]	@ 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80036e8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80036ea:	66bb      	str	r3, [r7, #104]	@ 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80036ec:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d101      	bne.n	80036f6 <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 80036f2:	2320      	movs	r3, #32
 80036f4:	e003      	b.n	80036fe <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 80036f6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80036f8:	fab3 f383 	clz	r3, r3
 80036fc:	b2db      	uxtb	r3, r3
 80036fe:	f003 031f 	and.w	r3, r3, #31
 8003702:	2201      	movs	r2, #1
 8003704:	fa02 f303 	lsl.w	r3, r2, r3
 8003708:	687a      	ldr	r2, [r7, #4]
 800370a:	6812      	ldr	r2, [r2, #0]
 800370c:	69d1      	ldr	r1, [r2, #28]
 800370e:	687a      	ldr	r2, [r7, #4]
 8003710:	6812      	ldr	r2, [r2, #0]
 8003712:	430b      	orrs	r3, r1
 8003714:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6818      	ldr	r0, [r3, #0]
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	6859      	ldr	r1, [r3, #4]
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	461a      	mov	r2, r3
 8003724:	f7ff faef 	bl	8002d06 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4618      	mov	r0, r3
 800372e:	f7ff fc0b 	bl	8002f48 <LL_ADC_REG_IsConversionOngoing>
 8003732:	67b8      	str	r0, [r7, #120]	@ 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4618      	mov	r0, r3
 800373a:	f7ff fc18 	bl	8002f6e <LL_ADC_INJ_IsConversionOngoing>
 800373e:	6778      	str	r0, [r7, #116]	@ 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003740:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003742:	2b00      	cmp	r3, #0
 8003744:	f040 80b8 	bne.w	80038b8 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003748:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800374a:	2b00      	cmp	r3, #0
 800374c:	f040 80b4 	bne.w	80038b8 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6818      	ldr	r0, [r3, #0]
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	6819      	ldr	r1, [r3, #0]
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	689b      	ldr	r3, [r3, #8]
 800375c:	461a      	mov	r2, r3
 800375e:	f7ff fafe 	bl	8002d5e <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003762:	4b30      	ldr	r3, [pc, #192]	@ (8003824 <HAL_ADC_ConfigChannel+0x1b4>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800376a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800376e:	d10b      	bne.n	8003788 <HAL_ADC_ConfigChannel+0x118>
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	695a      	ldr	r2, [r3, #20]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	68db      	ldr	r3, [r3, #12]
 800377a:	089b      	lsrs	r3, r3, #2
 800377c:	f003 0307 	and.w	r3, r3, #7
 8003780:	005b      	lsls	r3, r3, #1
 8003782:	fa02 f303 	lsl.w	r3, r2, r3
 8003786:	e01d      	b.n	80037c4 <HAL_ADC_ConfigChannel+0x154>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	68db      	ldr	r3, [r3, #12]
 800378e:	f003 0310 	and.w	r3, r3, #16
 8003792:	2b00      	cmp	r3, #0
 8003794:	d10b      	bne.n	80037ae <HAL_ADC_ConfigChannel+0x13e>
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	695a      	ldr	r2, [r3, #20]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	68db      	ldr	r3, [r3, #12]
 80037a0:	089b      	lsrs	r3, r3, #2
 80037a2:	f003 0307 	and.w	r3, r3, #7
 80037a6:	005b      	lsls	r3, r3, #1
 80037a8:	fa02 f303 	lsl.w	r3, r2, r3
 80037ac:	e00a      	b.n	80037c4 <HAL_ADC_ConfigChannel+0x154>
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	695a      	ldr	r2, [r3, #20]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	68db      	ldr	r3, [r3, #12]
 80037b8:	089b      	lsrs	r3, r3, #2
 80037ba:	f003 0304 	and.w	r3, r3, #4
 80037be:	005b      	lsls	r3, r3, #1
 80037c0:	fa02 f303 	lsl.w	r3, r2, r3
 80037c4:	673b      	str	r3, [r7, #112]	@ 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	691b      	ldr	r3, [r3, #16]
 80037ca:	2b04      	cmp	r3, #4
 80037cc:	d02c      	beq.n	8003828 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6818      	ldr	r0, [r3, #0]
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	6919      	ldr	r1, [r3, #16]
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	681a      	ldr	r2, [r3, #0]
 80037da:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80037dc:	f7ff fa2c 	bl	8002c38 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6818      	ldr	r0, [r3, #0]
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	6919      	ldr	r1, [r3, #16]
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	7e5b      	ldrb	r3, [r3, #25]
 80037ec:	2b01      	cmp	r3, #1
 80037ee:	d102      	bne.n	80037f6 <HAL_ADC_ConfigChannel+0x186>
 80037f0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80037f4:	e000      	b.n	80037f8 <HAL_ADC_ConfigChannel+0x188>
 80037f6:	2300      	movs	r3, #0
 80037f8:	461a      	mov	r2, r3
 80037fa:	f7ff fa56 	bl	8002caa <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6818      	ldr	r0, [r3, #0]
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	6919      	ldr	r1, [r3, #16]
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	7e1b      	ldrb	r3, [r3, #24]
 800380a:	2b01      	cmp	r3, #1
 800380c:	d102      	bne.n	8003814 <HAL_ADC_ConfigChannel+0x1a4>
 800380e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003812:	e000      	b.n	8003816 <HAL_ADC_ConfigChannel+0x1a6>
 8003814:	2300      	movs	r3, #0
 8003816:	461a      	mov	r2, r3
 8003818:	f7ff fa2e 	bl	8002c78 <LL_ADC_SetDataRightShift>
 800381c:	e04c      	b.n	80038b8 <HAL_ADC_ConfigChannel+0x248>
 800381e:	bf00      	nop
 8003820:	47ff0000 	.word	0x47ff0000
 8003824:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800382e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	069b      	lsls	r3, r3, #26
 8003838:	429a      	cmp	r2, r3
 800383a:	d107      	bne.n	800384c <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800384a:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003852:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	069b      	lsls	r3, r3, #26
 800385c:	429a      	cmp	r2, r3
 800385e:	d107      	bne.n	8003870 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800386e:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003876:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	069b      	lsls	r3, r3, #26
 8003880:	429a      	cmp	r2, r3
 8003882:	d107      	bne.n	8003894 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003892:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800389a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	069b      	lsls	r3, r3, #26
 80038a4:	429a      	cmp	r2, r3
 80038a6:	d107      	bne.n	80038b8 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80038b6:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4618      	mov	r0, r3
 80038be:	f7ff fb1b 	bl	8002ef8 <LL_ADC_IsEnabled>
 80038c2:	4603      	mov	r3, r0
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	f040 8211 	bne.w	8003cec <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6818      	ldr	r0, [r3, #0]
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	6819      	ldr	r1, [r3, #0]
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	68db      	ldr	r3, [r3, #12]
 80038d6:	461a      	mov	r2, r3
 80038d8:	f7ff fa6c 	bl	8002db4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	68db      	ldr	r3, [r3, #12]
 80038e0:	4aa1      	ldr	r2, [pc, #644]	@ (8003b68 <HAL_ADC_ConfigChannel+0x4f8>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	f040 812e 	bne.w	8003b44 <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d10b      	bne.n	8003910 <HAL_ADC_ConfigChannel+0x2a0>
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	0e9b      	lsrs	r3, r3, #26
 80038fe:	3301      	adds	r3, #1
 8003900:	f003 031f 	and.w	r3, r3, #31
 8003904:	2b09      	cmp	r3, #9
 8003906:	bf94      	ite	ls
 8003908:	2301      	movls	r3, #1
 800390a:	2300      	movhi	r3, #0
 800390c:	b2db      	uxtb	r3, r3
 800390e:	e019      	b.n	8003944 <HAL_ADC_ConfigChannel+0x2d4>
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003916:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003918:	fa93 f3a3 	rbit	r3, r3
 800391c:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 800391e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003920:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8003922:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003924:	2b00      	cmp	r3, #0
 8003926:	d101      	bne.n	800392c <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 8003928:	2320      	movs	r3, #32
 800392a:	e003      	b.n	8003934 <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 800392c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800392e:	fab3 f383 	clz	r3, r3
 8003932:	b2db      	uxtb	r3, r3
 8003934:	3301      	adds	r3, #1
 8003936:	f003 031f 	and.w	r3, r3, #31
 800393a:	2b09      	cmp	r3, #9
 800393c:	bf94      	ite	ls
 800393e:	2301      	movls	r3, #1
 8003940:	2300      	movhi	r3, #0
 8003942:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003944:	2b00      	cmp	r3, #0
 8003946:	d079      	beq.n	8003a3c <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003950:	2b00      	cmp	r3, #0
 8003952:	d107      	bne.n	8003964 <HAL_ADC_ConfigChannel+0x2f4>
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	0e9b      	lsrs	r3, r3, #26
 800395a:	3301      	adds	r3, #1
 800395c:	069b      	lsls	r3, r3, #26
 800395e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003962:	e015      	b.n	8003990 <HAL_ADC_ConfigChannel+0x320>
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800396a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800396c:	fa93 f3a3 	rbit	r3, r3
 8003970:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8003972:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003974:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8003976:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003978:	2b00      	cmp	r3, #0
 800397a:	d101      	bne.n	8003980 <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 800397c:	2320      	movs	r3, #32
 800397e:	e003      	b.n	8003988 <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 8003980:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003982:	fab3 f383 	clz	r3, r3
 8003986:	b2db      	uxtb	r3, r3
 8003988:	3301      	adds	r3, #1
 800398a:	069b      	lsls	r3, r3, #26
 800398c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003998:	2b00      	cmp	r3, #0
 800399a:	d109      	bne.n	80039b0 <HAL_ADC_ConfigChannel+0x340>
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	0e9b      	lsrs	r3, r3, #26
 80039a2:	3301      	adds	r3, #1
 80039a4:	f003 031f 	and.w	r3, r3, #31
 80039a8:	2101      	movs	r1, #1
 80039aa:	fa01 f303 	lsl.w	r3, r1, r3
 80039ae:	e017      	b.n	80039e0 <HAL_ADC_ConfigChannel+0x370>
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80039b8:	fa93 f3a3 	rbit	r3, r3
 80039bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 80039be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80039c0:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 80039c2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d101      	bne.n	80039cc <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 80039c8:	2320      	movs	r3, #32
 80039ca:	e003      	b.n	80039d4 <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 80039cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80039ce:	fab3 f383 	clz	r3, r3
 80039d2:	b2db      	uxtb	r3, r3
 80039d4:	3301      	adds	r3, #1
 80039d6:	f003 031f 	and.w	r3, r3, #31
 80039da:	2101      	movs	r1, #1
 80039dc:	fa01 f303 	lsl.w	r3, r1, r3
 80039e0:	ea42 0103 	orr.w	r1, r2, r3
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d10a      	bne.n	8003a06 <HAL_ADC_ConfigChannel+0x396>
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	0e9b      	lsrs	r3, r3, #26
 80039f6:	3301      	adds	r3, #1
 80039f8:	f003 021f 	and.w	r2, r3, #31
 80039fc:	4613      	mov	r3, r2
 80039fe:	005b      	lsls	r3, r3, #1
 8003a00:	4413      	add	r3, r2
 8003a02:	051b      	lsls	r3, r3, #20
 8003a04:	e018      	b.n	8003a38 <HAL_ADC_ConfigChannel+0x3c8>
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a0e:	fa93 f3a3 	rbit	r3, r3
 8003a12:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8003a14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a16:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8003a18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d101      	bne.n	8003a22 <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 8003a1e:	2320      	movs	r3, #32
 8003a20:	e003      	b.n	8003a2a <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 8003a22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a24:	fab3 f383 	clz	r3, r3
 8003a28:	b2db      	uxtb	r3, r3
 8003a2a:	3301      	adds	r3, #1
 8003a2c:	f003 021f 	and.w	r2, r3, #31
 8003a30:	4613      	mov	r3, r2
 8003a32:	005b      	lsls	r3, r3, #1
 8003a34:	4413      	add	r3, r2
 8003a36:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003a38:	430b      	orrs	r3, r1
 8003a3a:	e07e      	b.n	8003b3a <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d107      	bne.n	8003a58 <HAL_ADC_ConfigChannel+0x3e8>
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	0e9b      	lsrs	r3, r3, #26
 8003a4e:	3301      	adds	r3, #1
 8003a50:	069b      	lsls	r3, r3, #26
 8003a52:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003a56:	e015      	b.n	8003a84 <HAL_ADC_ConfigChannel+0x414>
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a60:	fa93 f3a3 	rbit	r3, r3
 8003a64:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8003a66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a68:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8003a6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d101      	bne.n	8003a74 <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 8003a70:	2320      	movs	r3, #32
 8003a72:	e003      	b.n	8003a7c <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 8003a74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a76:	fab3 f383 	clz	r3, r3
 8003a7a:	b2db      	uxtb	r3, r3
 8003a7c:	3301      	adds	r3, #1
 8003a7e:	069b      	lsls	r3, r3, #26
 8003a80:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d109      	bne.n	8003aa4 <HAL_ADC_ConfigChannel+0x434>
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	0e9b      	lsrs	r3, r3, #26
 8003a96:	3301      	adds	r3, #1
 8003a98:	f003 031f 	and.w	r3, r3, #31
 8003a9c:	2101      	movs	r1, #1
 8003a9e:	fa01 f303 	lsl.w	r3, r1, r3
 8003aa2:	e017      	b.n	8003ad4 <HAL_ADC_ConfigChannel+0x464>
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aaa:	69fb      	ldr	r3, [r7, #28]
 8003aac:	fa93 f3a3 	rbit	r3, r3
 8003ab0:	61bb      	str	r3, [r7, #24]
  return result;
 8003ab2:	69bb      	ldr	r3, [r7, #24]
 8003ab4:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8003ab6:	6a3b      	ldr	r3, [r7, #32]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d101      	bne.n	8003ac0 <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 8003abc:	2320      	movs	r3, #32
 8003abe:	e003      	b.n	8003ac8 <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 8003ac0:	6a3b      	ldr	r3, [r7, #32]
 8003ac2:	fab3 f383 	clz	r3, r3
 8003ac6:	b2db      	uxtb	r3, r3
 8003ac8:	3301      	adds	r3, #1
 8003aca:	f003 031f 	and.w	r3, r3, #31
 8003ace:	2101      	movs	r1, #1
 8003ad0:	fa01 f303 	lsl.w	r3, r1, r3
 8003ad4:	ea42 0103 	orr.w	r1, r2, r3
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d10d      	bne.n	8003b00 <HAL_ADC_ConfigChannel+0x490>
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	0e9b      	lsrs	r3, r3, #26
 8003aea:	3301      	adds	r3, #1
 8003aec:	f003 021f 	and.w	r2, r3, #31
 8003af0:	4613      	mov	r3, r2
 8003af2:	005b      	lsls	r3, r3, #1
 8003af4:	4413      	add	r3, r2
 8003af6:	3b1e      	subs	r3, #30
 8003af8:	051b      	lsls	r3, r3, #20
 8003afa:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003afe:	e01b      	b.n	8003b38 <HAL_ADC_ConfigChannel+0x4c8>
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b06:	693b      	ldr	r3, [r7, #16]
 8003b08:	fa93 f3a3 	rbit	r3, r3
 8003b0c:	60fb      	str	r3, [r7, #12]
  return result;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003b12:	697b      	ldr	r3, [r7, #20]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d101      	bne.n	8003b1c <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 8003b18:	2320      	movs	r3, #32
 8003b1a:	e003      	b.n	8003b24 <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 8003b1c:	697b      	ldr	r3, [r7, #20]
 8003b1e:	fab3 f383 	clz	r3, r3
 8003b22:	b2db      	uxtb	r3, r3
 8003b24:	3301      	adds	r3, #1
 8003b26:	f003 021f 	and.w	r2, r3, #31
 8003b2a:	4613      	mov	r3, r2
 8003b2c:	005b      	lsls	r3, r3, #1
 8003b2e:	4413      	add	r3, r2
 8003b30:	3b1e      	subs	r3, #30
 8003b32:	051b      	lsls	r3, r3, #20
 8003b34:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003b38:	430b      	orrs	r3, r1
 8003b3a:	683a      	ldr	r2, [r7, #0]
 8003b3c:	6892      	ldr	r2, [r2, #8]
 8003b3e:	4619      	mov	r1, r3
 8003b40:	f7ff f90d 	bl	8002d5e <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	f280 80cf 	bge.w	8003cec <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4a06      	ldr	r2, [pc, #24]	@ (8003b6c <HAL_ADC_ConfigChannel+0x4fc>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d004      	beq.n	8003b62 <HAL_ADC_ConfigChannel+0x4f2>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a04      	ldr	r2, [pc, #16]	@ (8003b70 <HAL_ADC_ConfigChannel+0x500>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d10a      	bne.n	8003b78 <HAL_ADC_ConfigChannel+0x508>
 8003b62:	4b04      	ldr	r3, [pc, #16]	@ (8003b74 <HAL_ADC_ConfigChannel+0x504>)
 8003b64:	e009      	b.n	8003b7a <HAL_ADC_ConfigChannel+0x50a>
 8003b66:	bf00      	nop
 8003b68:	47ff0000 	.word	0x47ff0000
 8003b6c:	40022000 	.word	0x40022000
 8003b70:	40022100 	.word	0x40022100
 8003b74:	40022300 	.word	0x40022300
 8003b78:	4b61      	ldr	r3, [pc, #388]	@ (8003d00 <HAL_ADC_ConfigChannel+0x690>)
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	f7ff f84e 	bl	8002c1c <LL_ADC_GetCommonPathInternalCh>
 8003b80:	66f8      	str	r0, [r7, #108]	@ 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4a5f      	ldr	r2, [pc, #380]	@ (8003d04 <HAL_ADC_ConfigChannel+0x694>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d004      	beq.n	8003b96 <HAL_ADC_ConfigChannel+0x526>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a5d      	ldr	r2, [pc, #372]	@ (8003d08 <HAL_ADC_ConfigChannel+0x698>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d10e      	bne.n	8003bb4 <HAL_ADC_ConfigChannel+0x544>
 8003b96:	485b      	ldr	r0, [pc, #364]	@ (8003d04 <HAL_ADC_ConfigChannel+0x694>)
 8003b98:	f7ff f9ae 	bl	8002ef8 <LL_ADC_IsEnabled>
 8003b9c:	4604      	mov	r4, r0
 8003b9e:	485a      	ldr	r0, [pc, #360]	@ (8003d08 <HAL_ADC_ConfigChannel+0x698>)
 8003ba0:	f7ff f9aa 	bl	8002ef8 <LL_ADC_IsEnabled>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	4323      	orrs	r3, r4
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	bf0c      	ite	eq
 8003bac:	2301      	moveq	r3, #1
 8003bae:	2300      	movne	r3, #0
 8003bb0:	b2db      	uxtb	r3, r3
 8003bb2:	e008      	b.n	8003bc6 <HAL_ADC_ConfigChannel+0x556>
 8003bb4:	4855      	ldr	r0, [pc, #340]	@ (8003d0c <HAL_ADC_ConfigChannel+0x69c>)
 8003bb6:	f7ff f99f 	bl	8002ef8 <LL_ADC_IsEnabled>
 8003bba:	4603      	mov	r3, r0
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	bf0c      	ite	eq
 8003bc0:	2301      	moveq	r3, #1
 8003bc2:	2300      	movne	r3, #0
 8003bc4:	b2db      	uxtb	r3, r3
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d07d      	beq.n	8003cc6 <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4a50      	ldr	r2, [pc, #320]	@ (8003d10 <HAL_ADC_ConfigChannel+0x6a0>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d130      	bne.n	8003c36 <HAL_ADC_ConfigChannel+0x5c6>
 8003bd4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003bd6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d12b      	bne.n	8003c36 <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4a4a      	ldr	r2, [pc, #296]	@ (8003d0c <HAL_ADC_ConfigChannel+0x69c>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	f040 8081 	bne.w	8003cec <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a45      	ldr	r2, [pc, #276]	@ (8003d04 <HAL_ADC_ConfigChannel+0x694>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d004      	beq.n	8003bfe <HAL_ADC_ConfigChannel+0x58e>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4a43      	ldr	r2, [pc, #268]	@ (8003d08 <HAL_ADC_ConfigChannel+0x698>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d101      	bne.n	8003c02 <HAL_ADC_ConfigChannel+0x592>
 8003bfe:	4a45      	ldr	r2, [pc, #276]	@ (8003d14 <HAL_ADC_ConfigChannel+0x6a4>)
 8003c00:	e000      	b.n	8003c04 <HAL_ADC_ConfigChannel+0x594>
 8003c02:	4a3f      	ldr	r2, [pc, #252]	@ (8003d00 <HAL_ADC_ConfigChannel+0x690>)
 8003c04:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003c06:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003c0a:	4619      	mov	r1, r3
 8003c0c:	4610      	mov	r0, r2
 8003c0e:	f7fe fff2 	bl	8002bf6 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003c12:	4b41      	ldr	r3, [pc, #260]	@ (8003d18 <HAL_ADC_ConfigChannel+0x6a8>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	099b      	lsrs	r3, r3, #6
 8003c18:	4a40      	ldr	r2, [pc, #256]	@ (8003d1c <HAL_ADC_ConfigChannel+0x6ac>)
 8003c1a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c1e:	099b      	lsrs	r3, r3, #6
 8003c20:	3301      	adds	r3, #1
 8003c22:	005b      	lsls	r3, r3, #1
 8003c24:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003c26:	e002      	b.n	8003c2e <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 8003c28:	68bb      	ldr	r3, [r7, #8]
 8003c2a:	3b01      	subs	r3, #1
 8003c2c:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003c2e:	68bb      	ldr	r3, [r7, #8]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d1f9      	bne.n	8003c28 <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003c34:	e05a      	b.n	8003cec <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4a39      	ldr	r2, [pc, #228]	@ (8003d20 <HAL_ADC_ConfigChannel+0x6b0>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d11e      	bne.n	8003c7e <HAL_ADC_ConfigChannel+0x60e>
 8003c40:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003c42:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d119      	bne.n	8003c7e <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4a2f      	ldr	r2, [pc, #188]	@ (8003d0c <HAL_ADC_ConfigChannel+0x69c>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d14b      	bne.n	8003cec <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4a2a      	ldr	r2, [pc, #168]	@ (8003d04 <HAL_ADC_ConfigChannel+0x694>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d004      	beq.n	8003c68 <HAL_ADC_ConfigChannel+0x5f8>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4a29      	ldr	r2, [pc, #164]	@ (8003d08 <HAL_ADC_ConfigChannel+0x698>)
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d101      	bne.n	8003c6c <HAL_ADC_ConfigChannel+0x5fc>
 8003c68:	4a2a      	ldr	r2, [pc, #168]	@ (8003d14 <HAL_ADC_ConfigChannel+0x6a4>)
 8003c6a:	e000      	b.n	8003c6e <HAL_ADC_ConfigChannel+0x5fe>
 8003c6c:	4a24      	ldr	r2, [pc, #144]	@ (8003d00 <HAL_ADC_ConfigChannel+0x690>)
 8003c6e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003c70:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003c74:	4619      	mov	r1, r3
 8003c76:	4610      	mov	r0, r2
 8003c78:	f7fe ffbd 	bl	8002bf6 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003c7c:	e036      	b.n	8003cec <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4a28      	ldr	r2, [pc, #160]	@ (8003d24 <HAL_ADC_ConfigChannel+0x6b4>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d131      	bne.n	8003cec <HAL_ADC_ConfigChannel+0x67c>
 8003c88:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003c8a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d12c      	bne.n	8003cec <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4a1d      	ldr	r2, [pc, #116]	@ (8003d0c <HAL_ADC_ConfigChannel+0x69c>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d127      	bne.n	8003cec <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a18      	ldr	r2, [pc, #96]	@ (8003d04 <HAL_ADC_ConfigChannel+0x694>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d004      	beq.n	8003cb0 <HAL_ADC_ConfigChannel+0x640>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4a17      	ldr	r2, [pc, #92]	@ (8003d08 <HAL_ADC_ConfigChannel+0x698>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d101      	bne.n	8003cb4 <HAL_ADC_ConfigChannel+0x644>
 8003cb0:	4a18      	ldr	r2, [pc, #96]	@ (8003d14 <HAL_ADC_ConfigChannel+0x6a4>)
 8003cb2:	e000      	b.n	8003cb6 <HAL_ADC_ConfigChannel+0x646>
 8003cb4:	4a12      	ldr	r2, [pc, #72]	@ (8003d00 <HAL_ADC_ConfigChannel+0x690>)
 8003cb6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003cb8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003cbc:	4619      	mov	r1, r3
 8003cbe:	4610      	mov	r0, r2
 8003cc0:	f7fe ff99 	bl	8002bf6 <LL_ADC_SetCommonPathInternalCh>
 8003cc4:	e012      	b.n	8003cec <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cca:	f043 0220 	orr.w	r2, r3, #32
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8003cd8:	e008      	b.n	8003cec <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cde:	f043 0220 	orr.w	r2, r3, #32
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2200      	movs	r2, #0
 8003cf0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8003cf4:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	3784      	adds	r7, #132	@ 0x84
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	bd90      	pop	{r4, r7, pc}
 8003d00:	58026300 	.word	0x58026300
 8003d04:	40022000 	.word	0x40022000
 8003d08:	40022100 	.word	0x40022100
 8003d0c:	58026000 	.word	0x58026000
 8003d10:	cb840000 	.word	0xcb840000
 8003d14:	40022300 	.word	0x40022300
 8003d18:	24000000 	.word	0x24000000
 8003d1c:	053e2d63 	.word	0x053e2d63
 8003d20:	c7520000 	.word	0xc7520000
 8003d24:	cfb80000 	.word	0xcfb80000

08003d28 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b084      	sub	sp, #16
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4618      	mov	r0, r3
 8003d36:	f7ff f8df 	bl	8002ef8 <LL_ADC_IsEnabled>
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d16e      	bne.n	8003e1e <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	689a      	ldr	r2, [r3, #8]
 8003d46:	4b38      	ldr	r3, [pc, #224]	@ (8003e28 <ADC_Enable+0x100>)
 8003d48:	4013      	ands	r3, r2
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d00d      	beq.n	8003d6a <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d52:	f043 0210 	orr.w	r2, r3, #16
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d5e:	f043 0201 	orr.w	r2, r3, #1
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8003d66:	2301      	movs	r3, #1
 8003d68:	e05a      	b.n	8003e20 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4618      	mov	r0, r3
 8003d70:	f7ff f8ae 	bl	8002ed0 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003d74:	f7fe fef0 	bl	8002b58 <HAL_GetTick>
 8003d78:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4a2b      	ldr	r2, [pc, #172]	@ (8003e2c <ADC_Enable+0x104>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d004      	beq.n	8003d8e <ADC_Enable+0x66>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4a29      	ldr	r2, [pc, #164]	@ (8003e30 <ADC_Enable+0x108>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d101      	bne.n	8003d92 <ADC_Enable+0x6a>
 8003d8e:	4b29      	ldr	r3, [pc, #164]	@ (8003e34 <ADC_Enable+0x10c>)
 8003d90:	e000      	b.n	8003d94 <ADC_Enable+0x6c>
 8003d92:	4b29      	ldr	r3, [pc, #164]	@ (8003e38 <ADC_Enable+0x110>)
 8003d94:	4618      	mov	r0, r3
 8003d96:	f7ff f831 	bl	8002dfc <LL_ADC_GetMultimode>
 8003d9a:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4a23      	ldr	r2, [pc, #140]	@ (8003e30 <ADC_Enable+0x108>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d002      	beq.n	8003dac <ADC_Enable+0x84>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	e000      	b.n	8003dae <ADC_Enable+0x86>
 8003dac:	4b1f      	ldr	r3, [pc, #124]	@ (8003e2c <ADC_Enable+0x104>)
 8003dae:	687a      	ldr	r2, [r7, #4]
 8003db0:	6812      	ldr	r2, [r2, #0]
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d02c      	beq.n	8003e10 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003db6:	68bb      	ldr	r3, [r7, #8]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d130      	bne.n	8003e1e <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003dbc:	e028      	b.n	8003e10 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	f7ff f898 	bl	8002ef8 <LL_ADC_IsEnabled>
 8003dc8:	4603      	mov	r3, r0
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d104      	bne.n	8003dd8 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	f7ff f87c 	bl	8002ed0 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003dd8:	f7fe febe 	bl	8002b58 <HAL_GetTick>
 8003ddc:	4602      	mov	r2, r0
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	1ad3      	subs	r3, r2, r3
 8003de2:	2b02      	cmp	r3, #2
 8003de4:	d914      	bls.n	8003e10 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f003 0301 	and.w	r3, r3, #1
 8003df0:	2b01      	cmp	r3, #1
 8003df2:	d00d      	beq.n	8003e10 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003df8:	f043 0210 	orr.w	r2, r3, #16
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e04:	f043 0201 	orr.w	r2, r3, #1
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	659a      	str	r2, [r3, #88]	@ 0x58

            return HAL_ERROR;
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	e007      	b.n	8003e20 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f003 0301 	and.w	r3, r3, #1
 8003e1a:	2b01      	cmp	r3, #1
 8003e1c:	d1cf      	bne.n	8003dbe <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003e1e:	2300      	movs	r3, #0
}
 8003e20:	4618      	mov	r0, r3
 8003e22:	3710      	adds	r7, #16
 8003e24:	46bd      	mov	sp, r7
 8003e26:	bd80      	pop	{r7, pc}
 8003e28:	8000003f 	.word	0x8000003f
 8003e2c:	40022000 	.word	0x40022000
 8003e30:	40022100 	.word	0x40022100
 8003e34:	40022300 	.word	0x40022300
 8003e38:	58026300 	.word	0x58026300

08003e3c <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b084      	sub	sp, #16
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4a7a      	ldr	r2, [pc, #488]	@ (8004034 <ADC_ConfigureBoostMode+0x1f8>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d004      	beq.n	8003e58 <ADC_ConfigureBoostMode+0x1c>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a79      	ldr	r2, [pc, #484]	@ (8004038 <ADC_ConfigureBoostMode+0x1fc>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d109      	bne.n	8003e6c <ADC_ConfigureBoostMode+0x30>
 8003e58:	4b78      	ldr	r3, [pc, #480]	@ (800403c <ADC_ConfigureBoostMode+0x200>)
 8003e5a:	689b      	ldr	r3, [r3, #8]
 8003e5c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	bf14      	ite	ne
 8003e64:	2301      	movne	r3, #1
 8003e66:	2300      	moveq	r3, #0
 8003e68:	b2db      	uxtb	r3, r3
 8003e6a:	e008      	b.n	8003e7e <ADC_ConfigureBoostMode+0x42>
 8003e6c:	4b74      	ldr	r3, [pc, #464]	@ (8004040 <ADC_ConfigureBoostMode+0x204>)
 8003e6e:	689b      	ldr	r3, [r3, #8]
 8003e70:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	bf14      	ite	ne
 8003e78:	2301      	movne	r3, #1
 8003e7a:	2300      	moveq	r3, #0
 8003e7c:	b2db      	uxtb	r3, r3
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d01c      	beq.n	8003ebc <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8003e82:	f004 fcff 	bl	8008884 <HAL_RCC_GetHCLKFreq>
 8003e86:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003e90:	d010      	beq.n	8003eb4 <ADC_ConfigureBoostMode+0x78>
 8003e92:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003e96:	d873      	bhi.n	8003f80 <ADC_ConfigureBoostMode+0x144>
 8003e98:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e9c:	d002      	beq.n	8003ea4 <ADC_ConfigureBoostMode+0x68>
 8003e9e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003ea2:	d16d      	bne.n	8003f80 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	685b      	ldr	r3, [r3, #4]
 8003ea8:	0c1b      	lsrs	r3, r3, #16
 8003eaa:	68fa      	ldr	r2, [r7, #12]
 8003eac:	fbb2 f3f3 	udiv	r3, r2, r3
 8003eb0:	60fb      	str	r3, [r7, #12]
        break;
 8003eb2:	e068      	b.n	8003f86 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	089b      	lsrs	r3, r3, #2
 8003eb8:	60fb      	str	r3, [r7, #12]
        break;
 8003eba:	e064      	b.n	8003f86 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8003ebc:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8003ec0:	f04f 0100 	mov.w	r1, #0
 8003ec4:	f005 ff44 	bl	8009d50 <HAL_RCCEx_GetPeriphCLKFreq>
 8003ec8:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	685b      	ldr	r3, [r3, #4]
 8003ece:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8003ed2:	d051      	beq.n	8003f78 <ADC_ConfigureBoostMode+0x13c>
 8003ed4:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8003ed8:	d854      	bhi.n	8003f84 <ADC_ConfigureBoostMode+0x148>
 8003eda:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8003ede:	d047      	beq.n	8003f70 <ADC_ConfigureBoostMode+0x134>
 8003ee0:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8003ee4:	d84e      	bhi.n	8003f84 <ADC_ConfigureBoostMode+0x148>
 8003ee6:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8003eea:	d03d      	beq.n	8003f68 <ADC_ConfigureBoostMode+0x12c>
 8003eec:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8003ef0:	d848      	bhi.n	8003f84 <ADC_ConfigureBoostMode+0x148>
 8003ef2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003ef6:	d033      	beq.n	8003f60 <ADC_ConfigureBoostMode+0x124>
 8003ef8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003efc:	d842      	bhi.n	8003f84 <ADC_ConfigureBoostMode+0x148>
 8003efe:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8003f02:	d029      	beq.n	8003f58 <ADC_ConfigureBoostMode+0x11c>
 8003f04:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8003f08:	d83c      	bhi.n	8003f84 <ADC_ConfigureBoostMode+0x148>
 8003f0a:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8003f0e:	d01a      	beq.n	8003f46 <ADC_ConfigureBoostMode+0x10a>
 8003f10:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8003f14:	d836      	bhi.n	8003f84 <ADC_ConfigureBoostMode+0x148>
 8003f16:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8003f1a:	d014      	beq.n	8003f46 <ADC_ConfigureBoostMode+0x10a>
 8003f1c:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8003f20:	d830      	bhi.n	8003f84 <ADC_ConfigureBoostMode+0x148>
 8003f22:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003f26:	d00e      	beq.n	8003f46 <ADC_ConfigureBoostMode+0x10a>
 8003f28:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003f2c:	d82a      	bhi.n	8003f84 <ADC_ConfigureBoostMode+0x148>
 8003f2e:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003f32:	d008      	beq.n	8003f46 <ADC_ConfigureBoostMode+0x10a>
 8003f34:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003f38:	d824      	bhi.n	8003f84 <ADC_ConfigureBoostMode+0x148>
 8003f3a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003f3e:	d002      	beq.n	8003f46 <ADC_ConfigureBoostMode+0x10a>
 8003f40:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003f44:	d11e      	bne.n	8003f84 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	685b      	ldr	r3, [r3, #4]
 8003f4a:	0c9b      	lsrs	r3, r3, #18
 8003f4c:	005b      	lsls	r3, r3, #1
 8003f4e:	68fa      	ldr	r2, [r7, #12]
 8003f50:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f54:	60fb      	str	r3, [r7, #12]
        break;
 8003f56:	e016      	b.n	8003f86 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	091b      	lsrs	r3, r3, #4
 8003f5c:	60fb      	str	r3, [r7, #12]
        break;
 8003f5e:	e012      	b.n	8003f86 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	095b      	lsrs	r3, r3, #5
 8003f64:	60fb      	str	r3, [r7, #12]
        break;
 8003f66:	e00e      	b.n	8003f86 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	099b      	lsrs	r3, r3, #6
 8003f6c:	60fb      	str	r3, [r7, #12]
        break;
 8003f6e:	e00a      	b.n	8003f86 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	09db      	lsrs	r3, r3, #7
 8003f74:	60fb      	str	r3, [r7, #12]
        break;
 8003f76:	e006      	b.n	8003f86 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	0a1b      	lsrs	r3, r3, #8
 8003f7c:	60fb      	str	r3, [r7, #12]
        break;
 8003f7e:	e002      	b.n	8003f86 <ADC_ConfigureBoostMode+0x14a>
        break;
 8003f80:	bf00      	nop
 8003f82:	e000      	b.n	8003f86 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8003f84:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8003f86:	f7fe fe17 	bl	8002bb8 <HAL_GetREVID>
 8003f8a:	4603      	mov	r3, r0
 8003f8c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d815      	bhi.n	8003fc0 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	4a2b      	ldr	r2, [pc, #172]	@ (8004044 <ADC_ConfigureBoostMode+0x208>)
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d908      	bls.n	8003fae <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	689a      	ldr	r2, [r3, #8]
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003faa:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8003fac:	e03e      	b.n	800402c <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	689a      	ldr	r2, [r3, #8]
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003fbc:	609a      	str	r2, [r3, #8]
}
 8003fbe:	e035      	b.n	800402c <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	085b      	lsrs	r3, r3, #1
 8003fc4:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	4a1f      	ldr	r2, [pc, #124]	@ (8004048 <ADC_ConfigureBoostMode+0x20c>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d808      	bhi.n	8003fe0 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	689a      	ldr	r2, [r3, #8]
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8003fdc:	609a      	str	r2, [r3, #8]
}
 8003fde:	e025      	b.n	800402c <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	4a1a      	ldr	r2, [pc, #104]	@ (800404c <ADC_ConfigureBoostMode+0x210>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d80a      	bhi.n	8003ffe <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	689b      	ldr	r3, [r3, #8]
 8003fee:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003ffa:	609a      	str	r2, [r3, #8]
}
 8003ffc:	e016      	b.n	800402c <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	4a13      	ldr	r2, [pc, #76]	@ (8004050 <ADC_ConfigureBoostMode+0x214>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d80a      	bhi.n	800401c <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	689b      	ldr	r3, [r3, #8]
 800400c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004018:	609a      	str	r2, [r3, #8]
}
 800401a:	e007      	b.n	800402c <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	689a      	ldr	r2, [r3, #8]
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 800402a:	609a      	str	r2, [r3, #8]
}
 800402c:	bf00      	nop
 800402e:	3710      	adds	r7, #16
 8004030:	46bd      	mov	sp, r7
 8004032:	bd80      	pop	{r7, pc}
 8004034:	40022000 	.word	0x40022000
 8004038:	40022100 	.word	0x40022100
 800403c:	40022300 	.word	0x40022300
 8004040:	58026300 	.word	0x58026300
 8004044:	01312d00 	.word	0x01312d00
 8004048:	005f5e10 	.word	0x005f5e10
 800404c:	00bebc20 	.word	0x00bebc20
 8004050:	017d7840 	.word	0x017d7840

08004054 <LL_ADC_IsEnabled>:
{
 8004054:	b480      	push	{r7}
 8004056:	b083      	sub	sp, #12
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	689b      	ldr	r3, [r3, #8]
 8004060:	f003 0301 	and.w	r3, r3, #1
 8004064:	2b01      	cmp	r3, #1
 8004066:	d101      	bne.n	800406c <LL_ADC_IsEnabled+0x18>
 8004068:	2301      	movs	r3, #1
 800406a:	e000      	b.n	800406e <LL_ADC_IsEnabled+0x1a>
 800406c:	2300      	movs	r3, #0
}
 800406e:	4618      	mov	r0, r3
 8004070:	370c      	adds	r7, #12
 8004072:	46bd      	mov	sp, r7
 8004074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004078:	4770      	bx	lr

0800407a <LL_ADC_REG_IsConversionOngoing>:
{
 800407a:	b480      	push	{r7}
 800407c:	b083      	sub	sp, #12
 800407e:	af00      	add	r7, sp, #0
 8004080:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	689b      	ldr	r3, [r3, #8]
 8004086:	f003 0304 	and.w	r3, r3, #4
 800408a:	2b04      	cmp	r3, #4
 800408c:	d101      	bne.n	8004092 <LL_ADC_REG_IsConversionOngoing+0x18>
 800408e:	2301      	movs	r3, #1
 8004090:	e000      	b.n	8004094 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004092:	2300      	movs	r3, #0
}
 8004094:	4618      	mov	r0, r3
 8004096:	370c      	adds	r7, #12
 8004098:	46bd      	mov	sp, r7
 800409a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409e:	4770      	bx	lr

080040a0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80040a0:	b590      	push	{r4, r7, lr}
 80040a2:	b09f      	sub	sp, #124	@ 0x7c
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
 80040a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80040aa:	2300      	movs	r3, #0
 80040ac:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80040b6:	2b01      	cmp	r3, #1
 80040b8:	d101      	bne.n	80040be <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80040ba:	2302      	movs	r3, #2
 80040bc:	e0be      	b.n	800423c <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2201      	movs	r2, #1
 80040c2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80040c6:	2300      	movs	r3, #0
 80040c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 80040ca:	2300      	movs	r3, #0
 80040cc:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4a5c      	ldr	r2, [pc, #368]	@ (8004244 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d102      	bne.n	80040de <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80040d8:	4b5b      	ldr	r3, [pc, #364]	@ (8004248 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80040da:	60bb      	str	r3, [r7, #8]
 80040dc:	e001      	b.n	80040e2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80040de:	2300      	movs	r3, #0
 80040e0:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80040e2:	68bb      	ldr	r3, [r7, #8]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d10b      	bne.n	8004100 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040ec:	f043 0220 	orr.w	r2, r3, #32
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2200      	movs	r2, #0
 80040f8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 80040fc:	2301      	movs	r3, #1
 80040fe:	e09d      	b.n	800423c <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8004100:	68bb      	ldr	r3, [r7, #8]
 8004102:	4618      	mov	r0, r3
 8004104:	f7ff ffb9 	bl	800407a <LL_ADC_REG_IsConversionOngoing>
 8004108:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4618      	mov	r0, r3
 8004110:	f7ff ffb3 	bl	800407a <LL_ADC_REG_IsConversionOngoing>
 8004114:	4603      	mov	r3, r0
 8004116:	2b00      	cmp	r3, #0
 8004118:	d17f      	bne.n	800421a <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800411a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800411c:	2b00      	cmp	r3, #0
 800411e:	d17c      	bne.n	800421a <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4a47      	ldr	r2, [pc, #284]	@ (8004244 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d004      	beq.n	8004134 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4a46      	ldr	r2, [pc, #280]	@ (8004248 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004130:	4293      	cmp	r3, r2
 8004132:	d101      	bne.n	8004138 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8004134:	4b45      	ldr	r3, [pc, #276]	@ (800424c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004136:	e000      	b.n	800413a <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8004138:	4b45      	ldr	r3, [pc, #276]	@ (8004250 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800413a:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d039      	beq.n	80041b8 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8004144:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004146:	689b      	ldr	r3, [r3, #8]
 8004148:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	685b      	ldr	r3, [r3, #4]
 8004150:	431a      	orrs	r2, r3
 8004152:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004154:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4a3a      	ldr	r2, [pc, #232]	@ (8004244 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d004      	beq.n	800416a <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4a38      	ldr	r2, [pc, #224]	@ (8004248 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d10e      	bne.n	8004188 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800416a:	4836      	ldr	r0, [pc, #216]	@ (8004244 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800416c:	f7ff ff72 	bl	8004054 <LL_ADC_IsEnabled>
 8004170:	4604      	mov	r4, r0
 8004172:	4835      	ldr	r0, [pc, #212]	@ (8004248 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004174:	f7ff ff6e 	bl	8004054 <LL_ADC_IsEnabled>
 8004178:	4603      	mov	r3, r0
 800417a:	4323      	orrs	r3, r4
 800417c:	2b00      	cmp	r3, #0
 800417e:	bf0c      	ite	eq
 8004180:	2301      	moveq	r3, #1
 8004182:	2300      	movne	r3, #0
 8004184:	b2db      	uxtb	r3, r3
 8004186:	e008      	b.n	800419a <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8004188:	4832      	ldr	r0, [pc, #200]	@ (8004254 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 800418a:	f7ff ff63 	bl	8004054 <LL_ADC_IsEnabled>
 800418e:	4603      	mov	r3, r0
 8004190:	2b00      	cmp	r3, #0
 8004192:	bf0c      	ite	eq
 8004194:	2301      	moveq	r3, #1
 8004196:	2300      	movne	r3, #0
 8004198:	b2db      	uxtb	r3, r3
 800419a:	2b00      	cmp	r3, #0
 800419c:	d047      	beq.n	800422e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800419e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80041a0:	689a      	ldr	r2, [r3, #8]
 80041a2:	4b2d      	ldr	r3, [pc, #180]	@ (8004258 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80041a4:	4013      	ands	r3, r2
 80041a6:	683a      	ldr	r2, [r7, #0]
 80041a8:	6811      	ldr	r1, [r2, #0]
 80041aa:	683a      	ldr	r2, [r7, #0]
 80041ac:	6892      	ldr	r2, [r2, #8]
 80041ae:	430a      	orrs	r2, r1
 80041b0:	431a      	orrs	r2, r3
 80041b2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80041b4:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80041b6:	e03a      	b.n	800422e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80041b8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80041ba:	689b      	ldr	r3, [r3, #8]
 80041bc:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80041c0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80041c2:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4a1e      	ldr	r2, [pc, #120]	@ (8004244 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d004      	beq.n	80041d8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	4a1d      	ldr	r2, [pc, #116]	@ (8004248 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80041d4:	4293      	cmp	r3, r2
 80041d6:	d10e      	bne.n	80041f6 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 80041d8:	481a      	ldr	r0, [pc, #104]	@ (8004244 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80041da:	f7ff ff3b 	bl	8004054 <LL_ADC_IsEnabled>
 80041de:	4604      	mov	r4, r0
 80041e0:	4819      	ldr	r0, [pc, #100]	@ (8004248 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80041e2:	f7ff ff37 	bl	8004054 <LL_ADC_IsEnabled>
 80041e6:	4603      	mov	r3, r0
 80041e8:	4323      	orrs	r3, r4
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	bf0c      	ite	eq
 80041ee:	2301      	moveq	r3, #1
 80041f0:	2300      	movne	r3, #0
 80041f2:	b2db      	uxtb	r3, r3
 80041f4:	e008      	b.n	8004208 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 80041f6:	4817      	ldr	r0, [pc, #92]	@ (8004254 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80041f8:	f7ff ff2c 	bl	8004054 <LL_ADC_IsEnabled>
 80041fc:	4603      	mov	r3, r0
 80041fe:	2b00      	cmp	r3, #0
 8004200:	bf0c      	ite	eq
 8004202:	2301      	moveq	r3, #1
 8004204:	2300      	movne	r3, #0
 8004206:	b2db      	uxtb	r3, r3
 8004208:	2b00      	cmp	r3, #0
 800420a:	d010      	beq.n	800422e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800420c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800420e:	689a      	ldr	r2, [r3, #8]
 8004210:	4b11      	ldr	r3, [pc, #68]	@ (8004258 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8004212:	4013      	ands	r3, r2
 8004214:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004216:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004218:	e009      	b.n	800422e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800421e:	f043 0220 	orr.w	r2, r3, #32
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8004226:	2301      	movs	r3, #1
 8004228:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 800422c:	e000      	b.n	8004230 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800422e:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2200      	movs	r2, #0
 8004234:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8004238:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 800423c:	4618      	mov	r0, r3
 800423e:	377c      	adds	r7, #124	@ 0x7c
 8004240:	46bd      	mov	sp, r7
 8004242:	bd90      	pop	{r4, r7, pc}
 8004244:	40022000 	.word	0x40022000
 8004248:	40022100 	.word	0x40022100
 800424c:	40022300 	.word	0x40022300
 8004250:	58026300 	.word	0x58026300
 8004254:	58026000 	.word	0x58026000
 8004258:	fffff0e0 	.word	0xfffff0e0

0800425c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800425c:	b480      	push	{r7}
 800425e:	b085      	sub	sp, #20
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	f003 0307 	and.w	r3, r3, #7
 800426a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800426c:	4b0b      	ldr	r3, [pc, #44]	@ (800429c <__NVIC_SetPriorityGrouping+0x40>)
 800426e:	68db      	ldr	r3, [r3, #12]
 8004270:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004272:	68ba      	ldr	r2, [r7, #8]
 8004274:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004278:	4013      	ands	r3, r2
 800427a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004284:	4b06      	ldr	r3, [pc, #24]	@ (80042a0 <__NVIC_SetPriorityGrouping+0x44>)
 8004286:	4313      	orrs	r3, r2
 8004288:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800428a:	4a04      	ldr	r2, [pc, #16]	@ (800429c <__NVIC_SetPriorityGrouping+0x40>)
 800428c:	68bb      	ldr	r3, [r7, #8]
 800428e:	60d3      	str	r3, [r2, #12]
}
 8004290:	bf00      	nop
 8004292:	3714      	adds	r7, #20
 8004294:	46bd      	mov	sp, r7
 8004296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429a:	4770      	bx	lr
 800429c:	e000ed00 	.word	0xe000ed00
 80042a0:	05fa0000 	.word	0x05fa0000

080042a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80042a4:	b480      	push	{r7}
 80042a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80042a8:	4b04      	ldr	r3, [pc, #16]	@ (80042bc <__NVIC_GetPriorityGrouping+0x18>)
 80042aa:	68db      	ldr	r3, [r3, #12]
 80042ac:	0a1b      	lsrs	r3, r3, #8
 80042ae:	f003 0307 	and.w	r3, r3, #7
}
 80042b2:	4618      	mov	r0, r3
 80042b4:	46bd      	mov	sp, r7
 80042b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ba:	4770      	bx	lr
 80042bc:	e000ed00 	.word	0xe000ed00

080042c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80042c0:	b480      	push	{r7}
 80042c2:	b083      	sub	sp, #12
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	4603      	mov	r3, r0
 80042c8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80042ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	db0b      	blt.n	80042ea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80042d2:	88fb      	ldrh	r3, [r7, #6]
 80042d4:	f003 021f 	and.w	r2, r3, #31
 80042d8:	4907      	ldr	r1, [pc, #28]	@ (80042f8 <__NVIC_EnableIRQ+0x38>)
 80042da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80042de:	095b      	lsrs	r3, r3, #5
 80042e0:	2001      	movs	r0, #1
 80042e2:	fa00 f202 	lsl.w	r2, r0, r2
 80042e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80042ea:	bf00      	nop
 80042ec:	370c      	adds	r7, #12
 80042ee:	46bd      	mov	sp, r7
 80042f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f4:	4770      	bx	lr
 80042f6:	bf00      	nop
 80042f8:	e000e100 	.word	0xe000e100

080042fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80042fc:	b480      	push	{r7}
 80042fe:	b083      	sub	sp, #12
 8004300:	af00      	add	r7, sp, #0
 8004302:	4603      	mov	r3, r0
 8004304:	6039      	str	r1, [r7, #0]
 8004306:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004308:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800430c:	2b00      	cmp	r3, #0
 800430e:	db0a      	blt.n	8004326 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	b2da      	uxtb	r2, r3
 8004314:	490c      	ldr	r1, [pc, #48]	@ (8004348 <__NVIC_SetPriority+0x4c>)
 8004316:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800431a:	0112      	lsls	r2, r2, #4
 800431c:	b2d2      	uxtb	r2, r2
 800431e:	440b      	add	r3, r1
 8004320:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004324:	e00a      	b.n	800433c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	b2da      	uxtb	r2, r3
 800432a:	4908      	ldr	r1, [pc, #32]	@ (800434c <__NVIC_SetPriority+0x50>)
 800432c:	88fb      	ldrh	r3, [r7, #6]
 800432e:	f003 030f 	and.w	r3, r3, #15
 8004332:	3b04      	subs	r3, #4
 8004334:	0112      	lsls	r2, r2, #4
 8004336:	b2d2      	uxtb	r2, r2
 8004338:	440b      	add	r3, r1
 800433a:	761a      	strb	r2, [r3, #24]
}
 800433c:	bf00      	nop
 800433e:	370c      	adds	r7, #12
 8004340:	46bd      	mov	sp, r7
 8004342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004346:	4770      	bx	lr
 8004348:	e000e100 	.word	0xe000e100
 800434c:	e000ed00 	.word	0xe000ed00

08004350 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004350:	b480      	push	{r7}
 8004352:	b089      	sub	sp, #36	@ 0x24
 8004354:	af00      	add	r7, sp, #0
 8004356:	60f8      	str	r0, [r7, #12]
 8004358:	60b9      	str	r1, [r7, #8]
 800435a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	f003 0307 	and.w	r3, r3, #7
 8004362:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004364:	69fb      	ldr	r3, [r7, #28]
 8004366:	f1c3 0307 	rsb	r3, r3, #7
 800436a:	2b04      	cmp	r3, #4
 800436c:	bf28      	it	cs
 800436e:	2304      	movcs	r3, #4
 8004370:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004372:	69fb      	ldr	r3, [r7, #28]
 8004374:	3304      	adds	r3, #4
 8004376:	2b06      	cmp	r3, #6
 8004378:	d902      	bls.n	8004380 <NVIC_EncodePriority+0x30>
 800437a:	69fb      	ldr	r3, [r7, #28]
 800437c:	3b03      	subs	r3, #3
 800437e:	e000      	b.n	8004382 <NVIC_EncodePriority+0x32>
 8004380:	2300      	movs	r3, #0
 8004382:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004384:	f04f 32ff 	mov.w	r2, #4294967295
 8004388:	69bb      	ldr	r3, [r7, #24]
 800438a:	fa02 f303 	lsl.w	r3, r2, r3
 800438e:	43da      	mvns	r2, r3
 8004390:	68bb      	ldr	r3, [r7, #8]
 8004392:	401a      	ands	r2, r3
 8004394:	697b      	ldr	r3, [r7, #20]
 8004396:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004398:	f04f 31ff 	mov.w	r1, #4294967295
 800439c:	697b      	ldr	r3, [r7, #20]
 800439e:	fa01 f303 	lsl.w	r3, r1, r3
 80043a2:	43d9      	mvns	r1, r3
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80043a8:	4313      	orrs	r3, r2
         );
}
 80043aa:	4618      	mov	r0, r3
 80043ac:	3724      	adds	r7, #36	@ 0x24
 80043ae:	46bd      	mov	sp, r7
 80043b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b4:	4770      	bx	lr
	...

080043b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b082      	sub	sp, #8
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	3b01      	subs	r3, #1
 80043c4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80043c8:	d301      	bcc.n	80043ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80043ca:	2301      	movs	r3, #1
 80043cc:	e00f      	b.n	80043ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80043ce:	4a0a      	ldr	r2, [pc, #40]	@ (80043f8 <SysTick_Config+0x40>)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	3b01      	subs	r3, #1
 80043d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80043d6:	210f      	movs	r1, #15
 80043d8:	f04f 30ff 	mov.w	r0, #4294967295
 80043dc:	f7ff ff8e 	bl	80042fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80043e0:	4b05      	ldr	r3, [pc, #20]	@ (80043f8 <SysTick_Config+0x40>)
 80043e2:	2200      	movs	r2, #0
 80043e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80043e6:	4b04      	ldr	r3, [pc, #16]	@ (80043f8 <SysTick_Config+0x40>)
 80043e8:	2207      	movs	r2, #7
 80043ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80043ec:	2300      	movs	r3, #0
}
 80043ee:	4618      	mov	r0, r3
 80043f0:	3708      	adds	r7, #8
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bd80      	pop	{r7, pc}
 80043f6:	bf00      	nop
 80043f8:	e000e010 	.word	0xe000e010

080043fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b082      	sub	sp, #8
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004404:	6878      	ldr	r0, [r7, #4]
 8004406:	f7ff ff29 	bl	800425c <__NVIC_SetPriorityGrouping>
}
 800440a:	bf00      	nop
 800440c:	3708      	adds	r7, #8
 800440e:	46bd      	mov	sp, r7
 8004410:	bd80      	pop	{r7, pc}

08004412 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004412:	b580      	push	{r7, lr}
 8004414:	b086      	sub	sp, #24
 8004416:	af00      	add	r7, sp, #0
 8004418:	4603      	mov	r3, r0
 800441a:	60b9      	str	r1, [r7, #8]
 800441c:	607a      	str	r2, [r7, #4]
 800441e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004420:	f7ff ff40 	bl	80042a4 <__NVIC_GetPriorityGrouping>
 8004424:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004426:	687a      	ldr	r2, [r7, #4]
 8004428:	68b9      	ldr	r1, [r7, #8]
 800442a:	6978      	ldr	r0, [r7, #20]
 800442c:	f7ff ff90 	bl	8004350 <NVIC_EncodePriority>
 8004430:	4602      	mov	r2, r0
 8004432:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004436:	4611      	mov	r1, r2
 8004438:	4618      	mov	r0, r3
 800443a:	f7ff ff5f 	bl	80042fc <__NVIC_SetPriority>
}
 800443e:	bf00      	nop
 8004440:	3718      	adds	r7, #24
 8004442:	46bd      	mov	sp, r7
 8004444:	bd80      	pop	{r7, pc}

08004446 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004446:	b580      	push	{r7, lr}
 8004448:	b082      	sub	sp, #8
 800444a:	af00      	add	r7, sp, #0
 800444c:	4603      	mov	r3, r0
 800444e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004450:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004454:	4618      	mov	r0, r3
 8004456:	f7ff ff33 	bl	80042c0 <__NVIC_EnableIRQ>
}
 800445a:	bf00      	nop
 800445c:	3708      	adds	r7, #8
 800445e:	46bd      	mov	sp, r7
 8004460:	bd80      	pop	{r7, pc}

08004462 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004462:	b580      	push	{r7, lr}
 8004464:	b082      	sub	sp, #8
 8004466:	af00      	add	r7, sp, #0
 8004468:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800446a:	6878      	ldr	r0, [r7, #4]
 800446c:	f7ff ffa4 	bl	80043b8 <SysTick_Config>
 8004470:	4603      	mov	r3, r0
}
 8004472:	4618      	mov	r0, r3
 8004474:	3708      	adds	r7, #8
 8004476:	46bd      	mov	sp, r7
 8004478:	bd80      	pop	{r7, pc}
	...

0800447c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b086      	sub	sp, #24
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8004484:	f7fe fb68 	bl	8002b58 <HAL_GetTick>
 8004488:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d101      	bne.n	8004494 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8004490:	2301      	movs	r3, #1
 8004492:	e316      	b.n	8004ac2 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4a66      	ldr	r2, [pc, #408]	@ (8004634 <HAL_DMA_Init+0x1b8>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d04a      	beq.n	8004534 <HAL_DMA_Init+0xb8>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4a65      	ldr	r2, [pc, #404]	@ (8004638 <HAL_DMA_Init+0x1bc>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d045      	beq.n	8004534 <HAL_DMA_Init+0xb8>
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4a63      	ldr	r2, [pc, #396]	@ (800463c <HAL_DMA_Init+0x1c0>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d040      	beq.n	8004534 <HAL_DMA_Init+0xb8>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4a62      	ldr	r2, [pc, #392]	@ (8004640 <HAL_DMA_Init+0x1c4>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d03b      	beq.n	8004534 <HAL_DMA_Init+0xb8>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4a60      	ldr	r2, [pc, #384]	@ (8004644 <HAL_DMA_Init+0x1c8>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d036      	beq.n	8004534 <HAL_DMA_Init+0xb8>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4a5f      	ldr	r2, [pc, #380]	@ (8004648 <HAL_DMA_Init+0x1cc>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d031      	beq.n	8004534 <HAL_DMA_Init+0xb8>
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4a5d      	ldr	r2, [pc, #372]	@ (800464c <HAL_DMA_Init+0x1d0>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d02c      	beq.n	8004534 <HAL_DMA_Init+0xb8>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	4a5c      	ldr	r2, [pc, #368]	@ (8004650 <HAL_DMA_Init+0x1d4>)
 80044e0:	4293      	cmp	r3, r2
 80044e2:	d027      	beq.n	8004534 <HAL_DMA_Init+0xb8>
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	4a5a      	ldr	r2, [pc, #360]	@ (8004654 <HAL_DMA_Init+0x1d8>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d022      	beq.n	8004534 <HAL_DMA_Init+0xb8>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	4a59      	ldr	r2, [pc, #356]	@ (8004658 <HAL_DMA_Init+0x1dc>)
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d01d      	beq.n	8004534 <HAL_DMA_Init+0xb8>
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	4a57      	ldr	r2, [pc, #348]	@ (800465c <HAL_DMA_Init+0x1e0>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d018      	beq.n	8004534 <HAL_DMA_Init+0xb8>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4a56      	ldr	r2, [pc, #344]	@ (8004660 <HAL_DMA_Init+0x1e4>)
 8004508:	4293      	cmp	r3, r2
 800450a:	d013      	beq.n	8004534 <HAL_DMA_Init+0xb8>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4a54      	ldr	r2, [pc, #336]	@ (8004664 <HAL_DMA_Init+0x1e8>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d00e      	beq.n	8004534 <HAL_DMA_Init+0xb8>
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	4a53      	ldr	r2, [pc, #332]	@ (8004668 <HAL_DMA_Init+0x1ec>)
 800451c:	4293      	cmp	r3, r2
 800451e:	d009      	beq.n	8004534 <HAL_DMA_Init+0xb8>
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4a51      	ldr	r2, [pc, #324]	@ (800466c <HAL_DMA_Init+0x1f0>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d004      	beq.n	8004534 <HAL_DMA_Init+0xb8>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	4a50      	ldr	r2, [pc, #320]	@ (8004670 <HAL_DMA_Init+0x1f4>)
 8004530:	4293      	cmp	r3, r2
 8004532:	d101      	bne.n	8004538 <HAL_DMA_Init+0xbc>
 8004534:	2301      	movs	r3, #1
 8004536:	e000      	b.n	800453a <HAL_DMA_Init+0xbe>
 8004538:	2300      	movs	r3, #0
 800453a:	2b00      	cmp	r3, #0
 800453c:	f000 813b 	beq.w	80047b6 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2202      	movs	r2, #2
 8004544:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2200      	movs	r2, #0
 800454c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	4a37      	ldr	r2, [pc, #220]	@ (8004634 <HAL_DMA_Init+0x1b8>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d04a      	beq.n	80045f0 <HAL_DMA_Init+0x174>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	4a36      	ldr	r2, [pc, #216]	@ (8004638 <HAL_DMA_Init+0x1bc>)
 8004560:	4293      	cmp	r3, r2
 8004562:	d045      	beq.n	80045f0 <HAL_DMA_Init+0x174>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	4a34      	ldr	r2, [pc, #208]	@ (800463c <HAL_DMA_Init+0x1c0>)
 800456a:	4293      	cmp	r3, r2
 800456c:	d040      	beq.n	80045f0 <HAL_DMA_Init+0x174>
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	4a33      	ldr	r2, [pc, #204]	@ (8004640 <HAL_DMA_Init+0x1c4>)
 8004574:	4293      	cmp	r3, r2
 8004576:	d03b      	beq.n	80045f0 <HAL_DMA_Init+0x174>
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4a31      	ldr	r2, [pc, #196]	@ (8004644 <HAL_DMA_Init+0x1c8>)
 800457e:	4293      	cmp	r3, r2
 8004580:	d036      	beq.n	80045f0 <HAL_DMA_Init+0x174>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	4a30      	ldr	r2, [pc, #192]	@ (8004648 <HAL_DMA_Init+0x1cc>)
 8004588:	4293      	cmp	r3, r2
 800458a:	d031      	beq.n	80045f0 <HAL_DMA_Init+0x174>
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4a2e      	ldr	r2, [pc, #184]	@ (800464c <HAL_DMA_Init+0x1d0>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d02c      	beq.n	80045f0 <HAL_DMA_Init+0x174>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	4a2d      	ldr	r2, [pc, #180]	@ (8004650 <HAL_DMA_Init+0x1d4>)
 800459c:	4293      	cmp	r3, r2
 800459e:	d027      	beq.n	80045f0 <HAL_DMA_Init+0x174>
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	4a2b      	ldr	r2, [pc, #172]	@ (8004654 <HAL_DMA_Init+0x1d8>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d022      	beq.n	80045f0 <HAL_DMA_Init+0x174>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4a2a      	ldr	r2, [pc, #168]	@ (8004658 <HAL_DMA_Init+0x1dc>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d01d      	beq.n	80045f0 <HAL_DMA_Init+0x174>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	4a28      	ldr	r2, [pc, #160]	@ (800465c <HAL_DMA_Init+0x1e0>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d018      	beq.n	80045f0 <HAL_DMA_Init+0x174>
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	4a27      	ldr	r2, [pc, #156]	@ (8004660 <HAL_DMA_Init+0x1e4>)
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d013      	beq.n	80045f0 <HAL_DMA_Init+0x174>
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	4a25      	ldr	r2, [pc, #148]	@ (8004664 <HAL_DMA_Init+0x1e8>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d00e      	beq.n	80045f0 <HAL_DMA_Init+0x174>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	4a24      	ldr	r2, [pc, #144]	@ (8004668 <HAL_DMA_Init+0x1ec>)
 80045d8:	4293      	cmp	r3, r2
 80045da:	d009      	beq.n	80045f0 <HAL_DMA_Init+0x174>
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4a22      	ldr	r2, [pc, #136]	@ (800466c <HAL_DMA_Init+0x1f0>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d004      	beq.n	80045f0 <HAL_DMA_Init+0x174>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4a21      	ldr	r2, [pc, #132]	@ (8004670 <HAL_DMA_Init+0x1f4>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d108      	bne.n	8004602 <HAL_DMA_Init+0x186>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	681a      	ldr	r2, [r3, #0]
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f022 0201 	bic.w	r2, r2, #1
 80045fe:	601a      	str	r2, [r3, #0]
 8004600:	e007      	b.n	8004612 <HAL_DMA_Init+0x196>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	681a      	ldr	r2, [r3, #0]
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f022 0201 	bic.w	r2, r2, #1
 8004610:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004612:	e02f      	b.n	8004674 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004614:	f7fe faa0 	bl	8002b58 <HAL_GetTick>
 8004618:	4602      	mov	r2, r0
 800461a:	693b      	ldr	r3, [r7, #16]
 800461c:	1ad3      	subs	r3, r2, r3
 800461e:	2b05      	cmp	r3, #5
 8004620:	d928      	bls.n	8004674 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2220      	movs	r2, #32
 8004626:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2203      	movs	r2, #3
 800462c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8004630:	2301      	movs	r3, #1
 8004632:	e246      	b.n	8004ac2 <HAL_DMA_Init+0x646>
 8004634:	40020010 	.word	0x40020010
 8004638:	40020028 	.word	0x40020028
 800463c:	40020040 	.word	0x40020040
 8004640:	40020058 	.word	0x40020058
 8004644:	40020070 	.word	0x40020070
 8004648:	40020088 	.word	0x40020088
 800464c:	400200a0 	.word	0x400200a0
 8004650:	400200b8 	.word	0x400200b8
 8004654:	40020410 	.word	0x40020410
 8004658:	40020428 	.word	0x40020428
 800465c:	40020440 	.word	0x40020440
 8004660:	40020458 	.word	0x40020458
 8004664:	40020470 	.word	0x40020470
 8004668:	40020488 	.word	0x40020488
 800466c:	400204a0 	.word	0x400204a0
 8004670:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f003 0301 	and.w	r3, r3, #1
 800467e:	2b00      	cmp	r3, #0
 8004680:	d1c8      	bne.n	8004614 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800468a:	697a      	ldr	r2, [r7, #20]
 800468c:	4b83      	ldr	r3, [pc, #524]	@ (800489c <HAL_DMA_Init+0x420>)
 800468e:	4013      	ands	r3, r2
 8004690:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800469a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	691b      	ldr	r3, [r3, #16]
 80046a0:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80046a6:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	699b      	ldr	r3, [r3, #24]
 80046ac:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80046b2:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6a1b      	ldr	r3, [r3, #32]
 80046b8:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80046ba:	697a      	ldr	r2, [r7, #20]
 80046bc:	4313      	orrs	r3, r2
 80046be:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046c4:	2b04      	cmp	r3, #4
 80046c6:	d107      	bne.n	80046d8 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046d0:	4313      	orrs	r3, r2
 80046d2:	697a      	ldr	r2, [r7, #20]
 80046d4:	4313      	orrs	r3, r2
 80046d6:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80046d8:	4b71      	ldr	r3, [pc, #452]	@ (80048a0 <HAL_DMA_Init+0x424>)
 80046da:	681a      	ldr	r2, [r3, #0]
 80046dc:	4b71      	ldr	r3, [pc, #452]	@ (80048a4 <HAL_DMA_Init+0x428>)
 80046de:	4013      	ands	r3, r2
 80046e0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80046e4:	d328      	bcc.n	8004738 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	685b      	ldr	r3, [r3, #4]
 80046ea:	2b28      	cmp	r3, #40	@ 0x28
 80046ec:	d903      	bls.n	80046f6 <HAL_DMA_Init+0x27a>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	685b      	ldr	r3, [r3, #4]
 80046f2:	2b2e      	cmp	r3, #46	@ 0x2e
 80046f4:	d917      	bls.n	8004726 <HAL_DMA_Init+0x2aa>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	685b      	ldr	r3, [r3, #4]
 80046fa:	2b3e      	cmp	r3, #62	@ 0x3e
 80046fc:	d903      	bls.n	8004706 <HAL_DMA_Init+0x28a>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	685b      	ldr	r3, [r3, #4]
 8004702:	2b42      	cmp	r3, #66	@ 0x42
 8004704:	d90f      	bls.n	8004726 <HAL_DMA_Init+0x2aa>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	685b      	ldr	r3, [r3, #4]
 800470a:	2b46      	cmp	r3, #70	@ 0x46
 800470c:	d903      	bls.n	8004716 <HAL_DMA_Init+0x29a>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	685b      	ldr	r3, [r3, #4]
 8004712:	2b48      	cmp	r3, #72	@ 0x48
 8004714:	d907      	bls.n	8004726 <HAL_DMA_Init+0x2aa>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	685b      	ldr	r3, [r3, #4]
 800471a:	2b4e      	cmp	r3, #78	@ 0x4e
 800471c:	d905      	bls.n	800472a <HAL_DMA_Init+0x2ae>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	2b52      	cmp	r3, #82	@ 0x52
 8004724:	d801      	bhi.n	800472a <HAL_DMA_Init+0x2ae>
 8004726:	2301      	movs	r3, #1
 8004728:	e000      	b.n	800472c <HAL_DMA_Init+0x2b0>
 800472a:	2300      	movs	r3, #0
 800472c:	2b00      	cmp	r3, #0
 800472e:	d003      	beq.n	8004738 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8004730:	697b      	ldr	r3, [r7, #20]
 8004732:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004736:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	697a      	ldr	r2, [r7, #20]
 800473e:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	695b      	ldr	r3, [r3, #20]
 8004746:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004748:	697b      	ldr	r3, [r7, #20]
 800474a:	f023 0307 	bic.w	r3, r3, #7
 800474e:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004754:	697a      	ldr	r2, [r7, #20]
 8004756:	4313      	orrs	r3, r2
 8004758:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800475e:	2b04      	cmp	r3, #4
 8004760:	d117      	bne.n	8004792 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004766:	697a      	ldr	r2, [r7, #20]
 8004768:	4313      	orrs	r3, r2
 800476a:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004770:	2b00      	cmp	r3, #0
 8004772:	d00e      	beq.n	8004792 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004774:	6878      	ldr	r0, [r7, #4]
 8004776:	f001 ff1d 	bl	80065b4 <DMA_CheckFifoParam>
 800477a:	4603      	mov	r3, r0
 800477c:	2b00      	cmp	r3, #0
 800477e:	d008      	beq.n	8004792 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2240      	movs	r2, #64	@ 0x40
 8004784:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2201      	movs	r2, #1
 800478a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 800478e:	2301      	movs	r3, #1
 8004790:	e197      	b.n	8004ac2 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	697a      	ldr	r2, [r7, #20]
 8004798:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800479a:	6878      	ldr	r0, [r7, #4]
 800479c:	f001 fe58 	bl	8006450 <DMA_CalcBaseAndBitshift>
 80047a0:	4603      	mov	r3, r0
 80047a2:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047a8:	f003 031f 	and.w	r3, r3, #31
 80047ac:	223f      	movs	r2, #63	@ 0x3f
 80047ae:	409a      	lsls	r2, r3
 80047b0:	68bb      	ldr	r3, [r7, #8]
 80047b2:	609a      	str	r2, [r3, #8]
 80047b4:	e0cd      	b.n	8004952 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4a3b      	ldr	r2, [pc, #236]	@ (80048a8 <HAL_DMA_Init+0x42c>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d022      	beq.n	8004806 <HAL_DMA_Init+0x38a>
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4a39      	ldr	r2, [pc, #228]	@ (80048ac <HAL_DMA_Init+0x430>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d01d      	beq.n	8004806 <HAL_DMA_Init+0x38a>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4a38      	ldr	r2, [pc, #224]	@ (80048b0 <HAL_DMA_Init+0x434>)
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d018      	beq.n	8004806 <HAL_DMA_Init+0x38a>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	4a36      	ldr	r2, [pc, #216]	@ (80048b4 <HAL_DMA_Init+0x438>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d013      	beq.n	8004806 <HAL_DMA_Init+0x38a>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4a35      	ldr	r2, [pc, #212]	@ (80048b8 <HAL_DMA_Init+0x43c>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d00e      	beq.n	8004806 <HAL_DMA_Init+0x38a>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	4a33      	ldr	r2, [pc, #204]	@ (80048bc <HAL_DMA_Init+0x440>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d009      	beq.n	8004806 <HAL_DMA_Init+0x38a>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4a32      	ldr	r2, [pc, #200]	@ (80048c0 <HAL_DMA_Init+0x444>)
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d004      	beq.n	8004806 <HAL_DMA_Init+0x38a>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4a30      	ldr	r2, [pc, #192]	@ (80048c4 <HAL_DMA_Init+0x448>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d101      	bne.n	800480a <HAL_DMA_Init+0x38e>
 8004806:	2301      	movs	r3, #1
 8004808:	e000      	b.n	800480c <HAL_DMA_Init+0x390>
 800480a:	2300      	movs	r3, #0
 800480c:	2b00      	cmp	r3, #0
 800480e:	f000 8097 	beq.w	8004940 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	4a24      	ldr	r2, [pc, #144]	@ (80048a8 <HAL_DMA_Init+0x42c>)
 8004818:	4293      	cmp	r3, r2
 800481a:	d021      	beq.n	8004860 <HAL_DMA_Init+0x3e4>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4a22      	ldr	r2, [pc, #136]	@ (80048ac <HAL_DMA_Init+0x430>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d01c      	beq.n	8004860 <HAL_DMA_Init+0x3e4>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	4a21      	ldr	r2, [pc, #132]	@ (80048b0 <HAL_DMA_Init+0x434>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d017      	beq.n	8004860 <HAL_DMA_Init+0x3e4>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	4a1f      	ldr	r2, [pc, #124]	@ (80048b4 <HAL_DMA_Init+0x438>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d012      	beq.n	8004860 <HAL_DMA_Init+0x3e4>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	4a1e      	ldr	r2, [pc, #120]	@ (80048b8 <HAL_DMA_Init+0x43c>)
 8004840:	4293      	cmp	r3, r2
 8004842:	d00d      	beq.n	8004860 <HAL_DMA_Init+0x3e4>
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	4a1c      	ldr	r2, [pc, #112]	@ (80048bc <HAL_DMA_Init+0x440>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d008      	beq.n	8004860 <HAL_DMA_Init+0x3e4>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	4a1b      	ldr	r2, [pc, #108]	@ (80048c0 <HAL_DMA_Init+0x444>)
 8004854:	4293      	cmp	r3, r2
 8004856:	d003      	beq.n	8004860 <HAL_DMA_Init+0x3e4>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4a19      	ldr	r2, [pc, #100]	@ (80048c4 <HAL_DMA_Init+0x448>)
 800485e:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2202      	movs	r2, #2
 8004864:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2200      	movs	r2, #0
 800486c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8004878:	697a      	ldr	r2, [r7, #20]
 800487a:	4b13      	ldr	r3, [pc, #76]	@ (80048c8 <HAL_DMA_Init+0x44c>)
 800487c:	4013      	ands	r3, r2
 800487e:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	689b      	ldr	r3, [r3, #8]
 8004884:	2b40      	cmp	r3, #64	@ 0x40
 8004886:	d021      	beq.n	80048cc <HAL_DMA_Init+0x450>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	689b      	ldr	r3, [r3, #8]
 800488c:	2b80      	cmp	r3, #128	@ 0x80
 800488e:	d102      	bne.n	8004896 <HAL_DMA_Init+0x41a>
 8004890:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004894:	e01b      	b.n	80048ce <HAL_DMA_Init+0x452>
 8004896:	2300      	movs	r3, #0
 8004898:	e019      	b.n	80048ce <HAL_DMA_Init+0x452>
 800489a:	bf00      	nop
 800489c:	fe10803f 	.word	0xfe10803f
 80048a0:	5c001000 	.word	0x5c001000
 80048a4:	ffff0000 	.word	0xffff0000
 80048a8:	58025408 	.word	0x58025408
 80048ac:	5802541c 	.word	0x5802541c
 80048b0:	58025430 	.word	0x58025430
 80048b4:	58025444 	.word	0x58025444
 80048b8:	58025458 	.word	0x58025458
 80048bc:	5802546c 	.word	0x5802546c
 80048c0:	58025480 	.word	0x58025480
 80048c4:	58025494 	.word	0x58025494
 80048c8:	fffe000f 	.word	0xfffe000f
 80048cc:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80048ce:	687a      	ldr	r2, [r7, #4]
 80048d0:	68d2      	ldr	r2, [r2, #12]
 80048d2:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80048d4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	691b      	ldr	r3, [r3, #16]
 80048da:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80048dc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	695b      	ldr	r3, [r3, #20]
 80048e2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80048e4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	699b      	ldr	r3, [r3, #24]
 80048ea:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80048ec:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	69db      	ldr	r3, [r3, #28]
 80048f2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80048f4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6a1b      	ldr	r3, [r3, #32]
 80048fa:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80048fc:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80048fe:	697a      	ldr	r2, [r7, #20]
 8004900:	4313      	orrs	r3, r2
 8004902:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	697a      	ldr	r2, [r7, #20]
 800490a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	461a      	mov	r2, r3
 8004912:	4b6e      	ldr	r3, [pc, #440]	@ (8004acc <HAL_DMA_Init+0x650>)
 8004914:	4413      	add	r3, r2
 8004916:	4a6e      	ldr	r2, [pc, #440]	@ (8004ad0 <HAL_DMA_Init+0x654>)
 8004918:	fba2 2303 	umull	r2, r3, r2, r3
 800491c:	091b      	lsrs	r3, r3, #4
 800491e:	009a      	lsls	r2, r3, #2
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004924:	6878      	ldr	r0, [r7, #4]
 8004926:	f001 fd93 	bl	8006450 <DMA_CalcBaseAndBitshift>
 800492a:	4603      	mov	r3, r0
 800492c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004932:	f003 031f 	and.w	r3, r3, #31
 8004936:	2201      	movs	r2, #1
 8004938:	409a      	lsls	r2, r3
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	605a      	str	r2, [r3, #4]
 800493e:	e008      	b.n	8004952 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2240      	movs	r2, #64	@ 0x40
 8004944:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2203      	movs	r2, #3
 800494a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 800494e:	2301      	movs	r3, #1
 8004950:	e0b7      	b.n	8004ac2 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	4a5f      	ldr	r2, [pc, #380]	@ (8004ad4 <HAL_DMA_Init+0x658>)
 8004958:	4293      	cmp	r3, r2
 800495a:	d072      	beq.n	8004a42 <HAL_DMA_Init+0x5c6>
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4a5d      	ldr	r2, [pc, #372]	@ (8004ad8 <HAL_DMA_Init+0x65c>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d06d      	beq.n	8004a42 <HAL_DMA_Init+0x5c6>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	4a5c      	ldr	r2, [pc, #368]	@ (8004adc <HAL_DMA_Init+0x660>)
 800496c:	4293      	cmp	r3, r2
 800496e:	d068      	beq.n	8004a42 <HAL_DMA_Init+0x5c6>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4a5a      	ldr	r2, [pc, #360]	@ (8004ae0 <HAL_DMA_Init+0x664>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d063      	beq.n	8004a42 <HAL_DMA_Init+0x5c6>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	4a59      	ldr	r2, [pc, #356]	@ (8004ae4 <HAL_DMA_Init+0x668>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d05e      	beq.n	8004a42 <HAL_DMA_Init+0x5c6>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	4a57      	ldr	r2, [pc, #348]	@ (8004ae8 <HAL_DMA_Init+0x66c>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d059      	beq.n	8004a42 <HAL_DMA_Init+0x5c6>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	4a56      	ldr	r2, [pc, #344]	@ (8004aec <HAL_DMA_Init+0x670>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d054      	beq.n	8004a42 <HAL_DMA_Init+0x5c6>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4a54      	ldr	r2, [pc, #336]	@ (8004af0 <HAL_DMA_Init+0x674>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d04f      	beq.n	8004a42 <HAL_DMA_Init+0x5c6>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	4a53      	ldr	r2, [pc, #332]	@ (8004af4 <HAL_DMA_Init+0x678>)
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d04a      	beq.n	8004a42 <HAL_DMA_Init+0x5c6>
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	4a51      	ldr	r2, [pc, #324]	@ (8004af8 <HAL_DMA_Init+0x67c>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d045      	beq.n	8004a42 <HAL_DMA_Init+0x5c6>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	4a50      	ldr	r2, [pc, #320]	@ (8004afc <HAL_DMA_Init+0x680>)
 80049bc:	4293      	cmp	r3, r2
 80049be:	d040      	beq.n	8004a42 <HAL_DMA_Init+0x5c6>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	4a4e      	ldr	r2, [pc, #312]	@ (8004b00 <HAL_DMA_Init+0x684>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d03b      	beq.n	8004a42 <HAL_DMA_Init+0x5c6>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4a4d      	ldr	r2, [pc, #308]	@ (8004b04 <HAL_DMA_Init+0x688>)
 80049d0:	4293      	cmp	r3, r2
 80049d2:	d036      	beq.n	8004a42 <HAL_DMA_Init+0x5c6>
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4a4b      	ldr	r2, [pc, #300]	@ (8004b08 <HAL_DMA_Init+0x68c>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d031      	beq.n	8004a42 <HAL_DMA_Init+0x5c6>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	4a4a      	ldr	r2, [pc, #296]	@ (8004b0c <HAL_DMA_Init+0x690>)
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d02c      	beq.n	8004a42 <HAL_DMA_Init+0x5c6>
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	4a48      	ldr	r2, [pc, #288]	@ (8004b10 <HAL_DMA_Init+0x694>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d027      	beq.n	8004a42 <HAL_DMA_Init+0x5c6>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	4a47      	ldr	r2, [pc, #284]	@ (8004b14 <HAL_DMA_Init+0x698>)
 80049f8:	4293      	cmp	r3, r2
 80049fa:	d022      	beq.n	8004a42 <HAL_DMA_Init+0x5c6>
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	4a45      	ldr	r2, [pc, #276]	@ (8004b18 <HAL_DMA_Init+0x69c>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d01d      	beq.n	8004a42 <HAL_DMA_Init+0x5c6>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	4a44      	ldr	r2, [pc, #272]	@ (8004b1c <HAL_DMA_Init+0x6a0>)
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d018      	beq.n	8004a42 <HAL_DMA_Init+0x5c6>
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	4a42      	ldr	r2, [pc, #264]	@ (8004b20 <HAL_DMA_Init+0x6a4>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d013      	beq.n	8004a42 <HAL_DMA_Init+0x5c6>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	4a41      	ldr	r2, [pc, #260]	@ (8004b24 <HAL_DMA_Init+0x6a8>)
 8004a20:	4293      	cmp	r3, r2
 8004a22:	d00e      	beq.n	8004a42 <HAL_DMA_Init+0x5c6>
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	4a3f      	ldr	r2, [pc, #252]	@ (8004b28 <HAL_DMA_Init+0x6ac>)
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d009      	beq.n	8004a42 <HAL_DMA_Init+0x5c6>
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	4a3e      	ldr	r2, [pc, #248]	@ (8004b2c <HAL_DMA_Init+0x6b0>)
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d004      	beq.n	8004a42 <HAL_DMA_Init+0x5c6>
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	4a3c      	ldr	r2, [pc, #240]	@ (8004b30 <HAL_DMA_Init+0x6b4>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d101      	bne.n	8004a46 <HAL_DMA_Init+0x5ca>
 8004a42:	2301      	movs	r3, #1
 8004a44:	e000      	b.n	8004a48 <HAL_DMA_Init+0x5cc>
 8004a46:	2300      	movs	r3, #0
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d032      	beq.n	8004ab2 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004a4c:	6878      	ldr	r0, [r7, #4]
 8004a4e:	f001 fe2d 	bl	80066ac <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	689b      	ldr	r3, [r3, #8]
 8004a56:	2b80      	cmp	r3, #128	@ 0x80
 8004a58:	d102      	bne.n	8004a60 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	685a      	ldr	r2, [r3, #4]
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a68:	b2d2      	uxtb	r2, r2
 8004a6a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004a70:	687a      	ldr	r2, [r7, #4]
 8004a72:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004a74:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	685b      	ldr	r3, [r3, #4]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d010      	beq.n	8004aa0 <HAL_DMA_Init+0x624>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	685b      	ldr	r3, [r3, #4]
 8004a82:	2b08      	cmp	r3, #8
 8004a84:	d80c      	bhi.n	8004aa0 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004a86:	6878      	ldr	r0, [r7, #4]
 8004a88:	f001 feaa 	bl	80067e0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004a90:	2200      	movs	r2, #0
 8004a92:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a98:	687a      	ldr	r2, [r7, #4]
 8004a9a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004a9c:	605a      	str	r2, [r3, #4]
 8004a9e:	e008      	b.n	8004ab2 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2200      	movs	r2, #0
 8004ab0:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2201      	movs	r2, #1
 8004abc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8004ac0:	2300      	movs	r3, #0
}
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	3718      	adds	r7, #24
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	bd80      	pop	{r7, pc}
 8004aca:	bf00      	nop
 8004acc:	a7fdabf8 	.word	0xa7fdabf8
 8004ad0:	cccccccd 	.word	0xcccccccd
 8004ad4:	40020010 	.word	0x40020010
 8004ad8:	40020028 	.word	0x40020028
 8004adc:	40020040 	.word	0x40020040
 8004ae0:	40020058 	.word	0x40020058
 8004ae4:	40020070 	.word	0x40020070
 8004ae8:	40020088 	.word	0x40020088
 8004aec:	400200a0 	.word	0x400200a0
 8004af0:	400200b8 	.word	0x400200b8
 8004af4:	40020410 	.word	0x40020410
 8004af8:	40020428 	.word	0x40020428
 8004afc:	40020440 	.word	0x40020440
 8004b00:	40020458 	.word	0x40020458
 8004b04:	40020470 	.word	0x40020470
 8004b08:	40020488 	.word	0x40020488
 8004b0c:	400204a0 	.word	0x400204a0
 8004b10:	400204b8 	.word	0x400204b8
 8004b14:	58025408 	.word	0x58025408
 8004b18:	5802541c 	.word	0x5802541c
 8004b1c:	58025430 	.word	0x58025430
 8004b20:	58025444 	.word	0x58025444
 8004b24:	58025458 	.word	0x58025458
 8004b28:	5802546c 	.word	0x5802546c
 8004b2c:	58025480 	.word	0x58025480
 8004b30:	58025494 	.word	0x58025494

08004b34 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b086      	sub	sp, #24
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8004b3c:	f7fe f80c 	bl	8002b58 <HAL_GetTick>
 8004b40:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d101      	bne.n	8004b4c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8004b48:	2301      	movs	r3, #1
 8004b4a:	e2dc      	b.n	8005106 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004b52:	b2db      	uxtb	r3, r3
 8004b54:	2b02      	cmp	r3, #2
 8004b56:	d008      	beq.n	8004b6a <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2280      	movs	r2, #128	@ 0x80
 8004b5c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2200      	movs	r2, #0
 8004b62:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8004b66:	2301      	movs	r3, #1
 8004b68:	e2cd      	b.n	8005106 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	4a76      	ldr	r2, [pc, #472]	@ (8004d48 <HAL_DMA_Abort+0x214>)
 8004b70:	4293      	cmp	r3, r2
 8004b72:	d04a      	beq.n	8004c0a <HAL_DMA_Abort+0xd6>
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	4a74      	ldr	r2, [pc, #464]	@ (8004d4c <HAL_DMA_Abort+0x218>)
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	d045      	beq.n	8004c0a <HAL_DMA_Abort+0xd6>
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	4a73      	ldr	r2, [pc, #460]	@ (8004d50 <HAL_DMA_Abort+0x21c>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d040      	beq.n	8004c0a <HAL_DMA_Abort+0xd6>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	4a71      	ldr	r2, [pc, #452]	@ (8004d54 <HAL_DMA_Abort+0x220>)
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d03b      	beq.n	8004c0a <HAL_DMA_Abort+0xd6>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	4a70      	ldr	r2, [pc, #448]	@ (8004d58 <HAL_DMA_Abort+0x224>)
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	d036      	beq.n	8004c0a <HAL_DMA_Abort+0xd6>
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4a6e      	ldr	r2, [pc, #440]	@ (8004d5c <HAL_DMA_Abort+0x228>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d031      	beq.n	8004c0a <HAL_DMA_Abort+0xd6>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4a6d      	ldr	r2, [pc, #436]	@ (8004d60 <HAL_DMA_Abort+0x22c>)
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d02c      	beq.n	8004c0a <HAL_DMA_Abort+0xd6>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4a6b      	ldr	r2, [pc, #428]	@ (8004d64 <HAL_DMA_Abort+0x230>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d027      	beq.n	8004c0a <HAL_DMA_Abort+0xd6>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4a6a      	ldr	r2, [pc, #424]	@ (8004d68 <HAL_DMA_Abort+0x234>)
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	d022      	beq.n	8004c0a <HAL_DMA_Abort+0xd6>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4a68      	ldr	r2, [pc, #416]	@ (8004d6c <HAL_DMA_Abort+0x238>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d01d      	beq.n	8004c0a <HAL_DMA_Abort+0xd6>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	4a67      	ldr	r2, [pc, #412]	@ (8004d70 <HAL_DMA_Abort+0x23c>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d018      	beq.n	8004c0a <HAL_DMA_Abort+0xd6>
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4a65      	ldr	r2, [pc, #404]	@ (8004d74 <HAL_DMA_Abort+0x240>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d013      	beq.n	8004c0a <HAL_DMA_Abort+0xd6>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	4a64      	ldr	r2, [pc, #400]	@ (8004d78 <HAL_DMA_Abort+0x244>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d00e      	beq.n	8004c0a <HAL_DMA_Abort+0xd6>
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	4a62      	ldr	r2, [pc, #392]	@ (8004d7c <HAL_DMA_Abort+0x248>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d009      	beq.n	8004c0a <HAL_DMA_Abort+0xd6>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	4a61      	ldr	r2, [pc, #388]	@ (8004d80 <HAL_DMA_Abort+0x24c>)
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d004      	beq.n	8004c0a <HAL_DMA_Abort+0xd6>
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	4a5f      	ldr	r2, [pc, #380]	@ (8004d84 <HAL_DMA_Abort+0x250>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d101      	bne.n	8004c0e <HAL_DMA_Abort+0xda>
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	e000      	b.n	8004c10 <HAL_DMA_Abort+0xdc>
 8004c0e:	2300      	movs	r3, #0
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d013      	beq.n	8004c3c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	681a      	ldr	r2, [r3, #0]
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f022 021e 	bic.w	r2, r2, #30
 8004c22:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	695a      	ldr	r2, [r3, #20]
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004c32:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	617b      	str	r3, [r7, #20]
 8004c3a:	e00a      	b.n	8004c52 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	681a      	ldr	r2, [r3, #0]
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f022 020e 	bic.w	r2, r2, #14
 8004c4a:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	4a3c      	ldr	r2, [pc, #240]	@ (8004d48 <HAL_DMA_Abort+0x214>)
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d072      	beq.n	8004d42 <HAL_DMA_Abort+0x20e>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	4a3a      	ldr	r2, [pc, #232]	@ (8004d4c <HAL_DMA_Abort+0x218>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d06d      	beq.n	8004d42 <HAL_DMA_Abort+0x20e>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4a39      	ldr	r2, [pc, #228]	@ (8004d50 <HAL_DMA_Abort+0x21c>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d068      	beq.n	8004d42 <HAL_DMA_Abort+0x20e>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4a37      	ldr	r2, [pc, #220]	@ (8004d54 <HAL_DMA_Abort+0x220>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d063      	beq.n	8004d42 <HAL_DMA_Abort+0x20e>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4a36      	ldr	r2, [pc, #216]	@ (8004d58 <HAL_DMA_Abort+0x224>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d05e      	beq.n	8004d42 <HAL_DMA_Abort+0x20e>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4a34      	ldr	r2, [pc, #208]	@ (8004d5c <HAL_DMA_Abort+0x228>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d059      	beq.n	8004d42 <HAL_DMA_Abort+0x20e>
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	4a33      	ldr	r2, [pc, #204]	@ (8004d60 <HAL_DMA_Abort+0x22c>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d054      	beq.n	8004d42 <HAL_DMA_Abort+0x20e>
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4a31      	ldr	r2, [pc, #196]	@ (8004d64 <HAL_DMA_Abort+0x230>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d04f      	beq.n	8004d42 <HAL_DMA_Abort+0x20e>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4a30      	ldr	r2, [pc, #192]	@ (8004d68 <HAL_DMA_Abort+0x234>)
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d04a      	beq.n	8004d42 <HAL_DMA_Abort+0x20e>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4a2e      	ldr	r2, [pc, #184]	@ (8004d6c <HAL_DMA_Abort+0x238>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d045      	beq.n	8004d42 <HAL_DMA_Abort+0x20e>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4a2d      	ldr	r2, [pc, #180]	@ (8004d70 <HAL_DMA_Abort+0x23c>)
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d040      	beq.n	8004d42 <HAL_DMA_Abort+0x20e>
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	4a2b      	ldr	r2, [pc, #172]	@ (8004d74 <HAL_DMA_Abort+0x240>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d03b      	beq.n	8004d42 <HAL_DMA_Abort+0x20e>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	4a2a      	ldr	r2, [pc, #168]	@ (8004d78 <HAL_DMA_Abort+0x244>)
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d036      	beq.n	8004d42 <HAL_DMA_Abort+0x20e>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	4a28      	ldr	r2, [pc, #160]	@ (8004d7c <HAL_DMA_Abort+0x248>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d031      	beq.n	8004d42 <HAL_DMA_Abort+0x20e>
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	4a27      	ldr	r2, [pc, #156]	@ (8004d80 <HAL_DMA_Abort+0x24c>)
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	d02c      	beq.n	8004d42 <HAL_DMA_Abort+0x20e>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	4a25      	ldr	r2, [pc, #148]	@ (8004d84 <HAL_DMA_Abort+0x250>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d027      	beq.n	8004d42 <HAL_DMA_Abort+0x20e>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	4a24      	ldr	r2, [pc, #144]	@ (8004d88 <HAL_DMA_Abort+0x254>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d022      	beq.n	8004d42 <HAL_DMA_Abort+0x20e>
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	4a22      	ldr	r2, [pc, #136]	@ (8004d8c <HAL_DMA_Abort+0x258>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d01d      	beq.n	8004d42 <HAL_DMA_Abort+0x20e>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	4a21      	ldr	r2, [pc, #132]	@ (8004d90 <HAL_DMA_Abort+0x25c>)
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d018      	beq.n	8004d42 <HAL_DMA_Abort+0x20e>
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	4a1f      	ldr	r2, [pc, #124]	@ (8004d94 <HAL_DMA_Abort+0x260>)
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d013      	beq.n	8004d42 <HAL_DMA_Abort+0x20e>
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	4a1e      	ldr	r2, [pc, #120]	@ (8004d98 <HAL_DMA_Abort+0x264>)
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d00e      	beq.n	8004d42 <HAL_DMA_Abort+0x20e>
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	4a1c      	ldr	r2, [pc, #112]	@ (8004d9c <HAL_DMA_Abort+0x268>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d009      	beq.n	8004d42 <HAL_DMA_Abort+0x20e>
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	4a1b      	ldr	r2, [pc, #108]	@ (8004da0 <HAL_DMA_Abort+0x26c>)
 8004d34:	4293      	cmp	r3, r2
 8004d36:	d004      	beq.n	8004d42 <HAL_DMA_Abort+0x20e>
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	4a19      	ldr	r2, [pc, #100]	@ (8004da4 <HAL_DMA_Abort+0x270>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d132      	bne.n	8004da8 <HAL_DMA_Abort+0x274>
 8004d42:	2301      	movs	r3, #1
 8004d44:	e031      	b.n	8004daa <HAL_DMA_Abort+0x276>
 8004d46:	bf00      	nop
 8004d48:	40020010 	.word	0x40020010
 8004d4c:	40020028 	.word	0x40020028
 8004d50:	40020040 	.word	0x40020040
 8004d54:	40020058 	.word	0x40020058
 8004d58:	40020070 	.word	0x40020070
 8004d5c:	40020088 	.word	0x40020088
 8004d60:	400200a0 	.word	0x400200a0
 8004d64:	400200b8 	.word	0x400200b8
 8004d68:	40020410 	.word	0x40020410
 8004d6c:	40020428 	.word	0x40020428
 8004d70:	40020440 	.word	0x40020440
 8004d74:	40020458 	.word	0x40020458
 8004d78:	40020470 	.word	0x40020470
 8004d7c:	40020488 	.word	0x40020488
 8004d80:	400204a0 	.word	0x400204a0
 8004d84:	400204b8 	.word	0x400204b8
 8004d88:	58025408 	.word	0x58025408
 8004d8c:	5802541c 	.word	0x5802541c
 8004d90:	58025430 	.word	0x58025430
 8004d94:	58025444 	.word	0x58025444
 8004d98:	58025458 	.word	0x58025458
 8004d9c:	5802546c 	.word	0x5802546c
 8004da0:	58025480 	.word	0x58025480
 8004da4:	58025494 	.word	0x58025494
 8004da8:	2300      	movs	r3, #0
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d007      	beq.n	8004dbe <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004db2:	681a      	ldr	r2, [r3, #0]
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004db8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004dbc:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	4a6d      	ldr	r2, [pc, #436]	@ (8004f78 <HAL_DMA_Abort+0x444>)
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d04a      	beq.n	8004e5e <HAL_DMA_Abort+0x32a>
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	4a6b      	ldr	r2, [pc, #428]	@ (8004f7c <HAL_DMA_Abort+0x448>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d045      	beq.n	8004e5e <HAL_DMA_Abort+0x32a>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	4a6a      	ldr	r2, [pc, #424]	@ (8004f80 <HAL_DMA_Abort+0x44c>)
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d040      	beq.n	8004e5e <HAL_DMA_Abort+0x32a>
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	4a68      	ldr	r2, [pc, #416]	@ (8004f84 <HAL_DMA_Abort+0x450>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d03b      	beq.n	8004e5e <HAL_DMA_Abort+0x32a>
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	4a67      	ldr	r2, [pc, #412]	@ (8004f88 <HAL_DMA_Abort+0x454>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d036      	beq.n	8004e5e <HAL_DMA_Abort+0x32a>
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	4a65      	ldr	r2, [pc, #404]	@ (8004f8c <HAL_DMA_Abort+0x458>)
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d031      	beq.n	8004e5e <HAL_DMA_Abort+0x32a>
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	4a64      	ldr	r2, [pc, #400]	@ (8004f90 <HAL_DMA_Abort+0x45c>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d02c      	beq.n	8004e5e <HAL_DMA_Abort+0x32a>
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	4a62      	ldr	r2, [pc, #392]	@ (8004f94 <HAL_DMA_Abort+0x460>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d027      	beq.n	8004e5e <HAL_DMA_Abort+0x32a>
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	4a61      	ldr	r2, [pc, #388]	@ (8004f98 <HAL_DMA_Abort+0x464>)
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d022      	beq.n	8004e5e <HAL_DMA_Abort+0x32a>
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	4a5f      	ldr	r2, [pc, #380]	@ (8004f9c <HAL_DMA_Abort+0x468>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d01d      	beq.n	8004e5e <HAL_DMA_Abort+0x32a>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	4a5e      	ldr	r2, [pc, #376]	@ (8004fa0 <HAL_DMA_Abort+0x46c>)
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d018      	beq.n	8004e5e <HAL_DMA_Abort+0x32a>
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4a5c      	ldr	r2, [pc, #368]	@ (8004fa4 <HAL_DMA_Abort+0x470>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d013      	beq.n	8004e5e <HAL_DMA_Abort+0x32a>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	4a5b      	ldr	r2, [pc, #364]	@ (8004fa8 <HAL_DMA_Abort+0x474>)
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d00e      	beq.n	8004e5e <HAL_DMA_Abort+0x32a>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4a59      	ldr	r2, [pc, #356]	@ (8004fac <HAL_DMA_Abort+0x478>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d009      	beq.n	8004e5e <HAL_DMA_Abort+0x32a>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	4a58      	ldr	r2, [pc, #352]	@ (8004fb0 <HAL_DMA_Abort+0x47c>)
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d004      	beq.n	8004e5e <HAL_DMA_Abort+0x32a>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	4a56      	ldr	r2, [pc, #344]	@ (8004fb4 <HAL_DMA_Abort+0x480>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d108      	bne.n	8004e70 <HAL_DMA_Abort+0x33c>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	681a      	ldr	r2, [r3, #0]
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f022 0201 	bic.w	r2, r2, #1
 8004e6c:	601a      	str	r2, [r3, #0]
 8004e6e:	e007      	b.n	8004e80 <HAL_DMA_Abort+0x34c>
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	681a      	ldr	r2, [r3, #0]
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f022 0201 	bic.w	r2, r2, #1
 8004e7e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8004e80:	e013      	b.n	8004eaa <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004e82:	f7fd fe69 	bl	8002b58 <HAL_GetTick>
 8004e86:	4602      	mov	r2, r0
 8004e88:	693b      	ldr	r3, [r7, #16]
 8004e8a:	1ad3      	subs	r3, r2, r3
 8004e8c:	2b05      	cmp	r3, #5
 8004e8e:	d90c      	bls.n	8004eaa <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2220      	movs	r2, #32
 8004e94:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2203      	movs	r2, #3
 8004e9a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	e12d      	b.n	8005106 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8004eaa:	697b      	ldr	r3, [r7, #20]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f003 0301 	and.w	r3, r3, #1
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d1e5      	bne.n	8004e82 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	4a2f      	ldr	r2, [pc, #188]	@ (8004f78 <HAL_DMA_Abort+0x444>)
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d04a      	beq.n	8004f56 <HAL_DMA_Abort+0x422>
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	4a2d      	ldr	r2, [pc, #180]	@ (8004f7c <HAL_DMA_Abort+0x448>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d045      	beq.n	8004f56 <HAL_DMA_Abort+0x422>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4a2c      	ldr	r2, [pc, #176]	@ (8004f80 <HAL_DMA_Abort+0x44c>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d040      	beq.n	8004f56 <HAL_DMA_Abort+0x422>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4a2a      	ldr	r2, [pc, #168]	@ (8004f84 <HAL_DMA_Abort+0x450>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d03b      	beq.n	8004f56 <HAL_DMA_Abort+0x422>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	4a29      	ldr	r2, [pc, #164]	@ (8004f88 <HAL_DMA_Abort+0x454>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d036      	beq.n	8004f56 <HAL_DMA_Abort+0x422>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	4a27      	ldr	r2, [pc, #156]	@ (8004f8c <HAL_DMA_Abort+0x458>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d031      	beq.n	8004f56 <HAL_DMA_Abort+0x422>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	4a26      	ldr	r2, [pc, #152]	@ (8004f90 <HAL_DMA_Abort+0x45c>)
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d02c      	beq.n	8004f56 <HAL_DMA_Abort+0x422>
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	4a24      	ldr	r2, [pc, #144]	@ (8004f94 <HAL_DMA_Abort+0x460>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d027      	beq.n	8004f56 <HAL_DMA_Abort+0x422>
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	4a23      	ldr	r2, [pc, #140]	@ (8004f98 <HAL_DMA_Abort+0x464>)
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d022      	beq.n	8004f56 <HAL_DMA_Abort+0x422>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	4a21      	ldr	r2, [pc, #132]	@ (8004f9c <HAL_DMA_Abort+0x468>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d01d      	beq.n	8004f56 <HAL_DMA_Abort+0x422>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	4a20      	ldr	r2, [pc, #128]	@ (8004fa0 <HAL_DMA_Abort+0x46c>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d018      	beq.n	8004f56 <HAL_DMA_Abort+0x422>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	4a1e      	ldr	r2, [pc, #120]	@ (8004fa4 <HAL_DMA_Abort+0x470>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d013      	beq.n	8004f56 <HAL_DMA_Abort+0x422>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4a1d      	ldr	r2, [pc, #116]	@ (8004fa8 <HAL_DMA_Abort+0x474>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d00e      	beq.n	8004f56 <HAL_DMA_Abort+0x422>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4a1b      	ldr	r2, [pc, #108]	@ (8004fac <HAL_DMA_Abort+0x478>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d009      	beq.n	8004f56 <HAL_DMA_Abort+0x422>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	4a1a      	ldr	r2, [pc, #104]	@ (8004fb0 <HAL_DMA_Abort+0x47c>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d004      	beq.n	8004f56 <HAL_DMA_Abort+0x422>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4a18      	ldr	r2, [pc, #96]	@ (8004fb4 <HAL_DMA_Abort+0x480>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d101      	bne.n	8004f5a <HAL_DMA_Abort+0x426>
 8004f56:	2301      	movs	r3, #1
 8004f58:	e000      	b.n	8004f5c <HAL_DMA_Abort+0x428>
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d02b      	beq.n	8004fb8 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f64:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f6a:	f003 031f 	and.w	r3, r3, #31
 8004f6e:	223f      	movs	r2, #63	@ 0x3f
 8004f70:	409a      	lsls	r2, r3
 8004f72:	68bb      	ldr	r3, [r7, #8]
 8004f74:	609a      	str	r2, [r3, #8]
 8004f76:	e02a      	b.n	8004fce <HAL_DMA_Abort+0x49a>
 8004f78:	40020010 	.word	0x40020010
 8004f7c:	40020028 	.word	0x40020028
 8004f80:	40020040 	.word	0x40020040
 8004f84:	40020058 	.word	0x40020058
 8004f88:	40020070 	.word	0x40020070
 8004f8c:	40020088 	.word	0x40020088
 8004f90:	400200a0 	.word	0x400200a0
 8004f94:	400200b8 	.word	0x400200b8
 8004f98:	40020410 	.word	0x40020410
 8004f9c:	40020428 	.word	0x40020428
 8004fa0:	40020440 	.word	0x40020440
 8004fa4:	40020458 	.word	0x40020458
 8004fa8:	40020470 	.word	0x40020470
 8004fac:	40020488 	.word	0x40020488
 8004fb0:	400204a0 	.word	0x400204a0
 8004fb4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004fbc:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004fc2:	f003 031f 	and.w	r3, r3, #31
 8004fc6:	2201      	movs	r2, #1
 8004fc8:	409a      	lsls	r2, r3
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	4a4f      	ldr	r2, [pc, #316]	@ (8005110 <HAL_DMA_Abort+0x5dc>)
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d072      	beq.n	80050be <HAL_DMA_Abort+0x58a>
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	4a4d      	ldr	r2, [pc, #308]	@ (8005114 <HAL_DMA_Abort+0x5e0>)
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d06d      	beq.n	80050be <HAL_DMA_Abort+0x58a>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	4a4c      	ldr	r2, [pc, #304]	@ (8005118 <HAL_DMA_Abort+0x5e4>)
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	d068      	beq.n	80050be <HAL_DMA_Abort+0x58a>
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	4a4a      	ldr	r2, [pc, #296]	@ (800511c <HAL_DMA_Abort+0x5e8>)
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d063      	beq.n	80050be <HAL_DMA_Abort+0x58a>
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	4a49      	ldr	r2, [pc, #292]	@ (8005120 <HAL_DMA_Abort+0x5ec>)
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	d05e      	beq.n	80050be <HAL_DMA_Abort+0x58a>
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	4a47      	ldr	r2, [pc, #284]	@ (8005124 <HAL_DMA_Abort+0x5f0>)
 8005006:	4293      	cmp	r3, r2
 8005008:	d059      	beq.n	80050be <HAL_DMA_Abort+0x58a>
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	4a46      	ldr	r2, [pc, #280]	@ (8005128 <HAL_DMA_Abort+0x5f4>)
 8005010:	4293      	cmp	r3, r2
 8005012:	d054      	beq.n	80050be <HAL_DMA_Abort+0x58a>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	4a44      	ldr	r2, [pc, #272]	@ (800512c <HAL_DMA_Abort+0x5f8>)
 800501a:	4293      	cmp	r3, r2
 800501c:	d04f      	beq.n	80050be <HAL_DMA_Abort+0x58a>
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	4a43      	ldr	r2, [pc, #268]	@ (8005130 <HAL_DMA_Abort+0x5fc>)
 8005024:	4293      	cmp	r3, r2
 8005026:	d04a      	beq.n	80050be <HAL_DMA_Abort+0x58a>
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	4a41      	ldr	r2, [pc, #260]	@ (8005134 <HAL_DMA_Abort+0x600>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d045      	beq.n	80050be <HAL_DMA_Abort+0x58a>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	4a40      	ldr	r2, [pc, #256]	@ (8005138 <HAL_DMA_Abort+0x604>)
 8005038:	4293      	cmp	r3, r2
 800503a:	d040      	beq.n	80050be <HAL_DMA_Abort+0x58a>
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	4a3e      	ldr	r2, [pc, #248]	@ (800513c <HAL_DMA_Abort+0x608>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d03b      	beq.n	80050be <HAL_DMA_Abort+0x58a>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	4a3d      	ldr	r2, [pc, #244]	@ (8005140 <HAL_DMA_Abort+0x60c>)
 800504c:	4293      	cmp	r3, r2
 800504e:	d036      	beq.n	80050be <HAL_DMA_Abort+0x58a>
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	4a3b      	ldr	r2, [pc, #236]	@ (8005144 <HAL_DMA_Abort+0x610>)
 8005056:	4293      	cmp	r3, r2
 8005058:	d031      	beq.n	80050be <HAL_DMA_Abort+0x58a>
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	4a3a      	ldr	r2, [pc, #232]	@ (8005148 <HAL_DMA_Abort+0x614>)
 8005060:	4293      	cmp	r3, r2
 8005062:	d02c      	beq.n	80050be <HAL_DMA_Abort+0x58a>
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	4a38      	ldr	r2, [pc, #224]	@ (800514c <HAL_DMA_Abort+0x618>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d027      	beq.n	80050be <HAL_DMA_Abort+0x58a>
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	4a37      	ldr	r2, [pc, #220]	@ (8005150 <HAL_DMA_Abort+0x61c>)
 8005074:	4293      	cmp	r3, r2
 8005076:	d022      	beq.n	80050be <HAL_DMA_Abort+0x58a>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	4a35      	ldr	r2, [pc, #212]	@ (8005154 <HAL_DMA_Abort+0x620>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d01d      	beq.n	80050be <HAL_DMA_Abort+0x58a>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	4a34      	ldr	r2, [pc, #208]	@ (8005158 <HAL_DMA_Abort+0x624>)
 8005088:	4293      	cmp	r3, r2
 800508a:	d018      	beq.n	80050be <HAL_DMA_Abort+0x58a>
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4a32      	ldr	r2, [pc, #200]	@ (800515c <HAL_DMA_Abort+0x628>)
 8005092:	4293      	cmp	r3, r2
 8005094:	d013      	beq.n	80050be <HAL_DMA_Abort+0x58a>
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	4a31      	ldr	r2, [pc, #196]	@ (8005160 <HAL_DMA_Abort+0x62c>)
 800509c:	4293      	cmp	r3, r2
 800509e:	d00e      	beq.n	80050be <HAL_DMA_Abort+0x58a>
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	4a2f      	ldr	r2, [pc, #188]	@ (8005164 <HAL_DMA_Abort+0x630>)
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d009      	beq.n	80050be <HAL_DMA_Abort+0x58a>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	4a2e      	ldr	r2, [pc, #184]	@ (8005168 <HAL_DMA_Abort+0x634>)
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d004      	beq.n	80050be <HAL_DMA_Abort+0x58a>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	4a2c      	ldr	r2, [pc, #176]	@ (800516c <HAL_DMA_Abort+0x638>)
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d101      	bne.n	80050c2 <HAL_DMA_Abort+0x58e>
 80050be:	2301      	movs	r3, #1
 80050c0:	e000      	b.n	80050c4 <HAL_DMA_Abort+0x590>
 80050c2:	2300      	movs	r3, #0
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d015      	beq.n	80050f4 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80050cc:	687a      	ldr	r2, [r7, #4]
 80050ce:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80050d0:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d00c      	beq.n	80050f4 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80050de:	681a      	ldr	r2, [r3, #0]
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80050e4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80050e8:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050ee:	687a      	ldr	r2, [r7, #4]
 80050f0:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80050f2:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2201      	movs	r2, #1
 80050f8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2200      	movs	r2, #0
 8005100:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8005104:	2300      	movs	r3, #0
}
 8005106:	4618      	mov	r0, r3
 8005108:	3718      	adds	r7, #24
 800510a:	46bd      	mov	sp, r7
 800510c:	bd80      	pop	{r7, pc}
 800510e:	bf00      	nop
 8005110:	40020010 	.word	0x40020010
 8005114:	40020028 	.word	0x40020028
 8005118:	40020040 	.word	0x40020040
 800511c:	40020058 	.word	0x40020058
 8005120:	40020070 	.word	0x40020070
 8005124:	40020088 	.word	0x40020088
 8005128:	400200a0 	.word	0x400200a0
 800512c:	400200b8 	.word	0x400200b8
 8005130:	40020410 	.word	0x40020410
 8005134:	40020428 	.word	0x40020428
 8005138:	40020440 	.word	0x40020440
 800513c:	40020458 	.word	0x40020458
 8005140:	40020470 	.word	0x40020470
 8005144:	40020488 	.word	0x40020488
 8005148:	400204a0 	.word	0x400204a0
 800514c:	400204b8 	.word	0x400204b8
 8005150:	58025408 	.word	0x58025408
 8005154:	5802541c 	.word	0x5802541c
 8005158:	58025430 	.word	0x58025430
 800515c:	58025444 	.word	0x58025444
 8005160:	58025458 	.word	0x58025458
 8005164:	5802546c 	.word	0x5802546c
 8005168:	58025480 	.word	0x58025480
 800516c:	58025494 	.word	0x58025494

08005170 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005170:	b580      	push	{r7, lr}
 8005172:	b084      	sub	sp, #16
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d101      	bne.n	8005182 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800517e:	2301      	movs	r3, #1
 8005180:	e237      	b.n	80055f2 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005188:	b2db      	uxtb	r3, r3
 800518a:	2b02      	cmp	r3, #2
 800518c:	d004      	beq.n	8005198 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2280      	movs	r2, #128	@ 0x80
 8005192:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8005194:	2301      	movs	r3, #1
 8005196:	e22c      	b.n	80055f2 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4a5c      	ldr	r2, [pc, #368]	@ (8005310 <HAL_DMA_Abort_IT+0x1a0>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d04a      	beq.n	8005238 <HAL_DMA_Abort_IT+0xc8>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	4a5b      	ldr	r2, [pc, #364]	@ (8005314 <HAL_DMA_Abort_IT+0x1a4>)
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d045      	beq.n	8005238 <HAL_DMA_Abort_IT+0xc8>
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	4a59      	ldr	r2, [pc, #356]	@ (8005318 <HAL_DMA_Abort_IT+0x1a8>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d040      	beq.n	8005238 <HAL_DMA_Abort_IT+0xc8>
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	4a58      	ldr	r2, [pc, #352]	@ (800531c <HAL_DMA_Abort_IT+0x1ac>)
 80051bc:	4293      	cmp	r3, r2
 80051be:	d03b      	beq.n	8005238 <HAL_DMA_Abort_IT+0xc8>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	4a56      	ldr	r2, [pc, #344]	@ (8005320 <HAL_DMA_Abort_IT+0x1b0>)
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d036      	beq.n	8005238 <HAL_DMA_Abort_IT+0xc8>
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	4a55      	ldr	r2, [pc, #340]	@ (8005324 <HAL_DMA_Abort_IT+0x1b4>)
 80051d0:	4293      	cmp	r3, r2
 80051d2:	d031      	beq.n	8005238 <HAL_DMA_Abort_IT+0xc8>
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	4a53      	ldr	r2, [pc, #332]	@ (8005328 <HAL_DMA_Abort_IT+0x1b8>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d02c      	beq.n	8005238 <HAL_DMA_Abort_IT+0xc8>
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	4a52      	ldr	r2, [pc, #328]	@ (800532c <HAL_DMA_Abort_IT+0x1bc>)
 80051e4:	4293      	cmp	r3, r2
 80051e6:	d027      	beq.n	8005238 <HAL_DMA_Abort_IT+0xc8>
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	4a50      	ldr	r2, [pc, #320]	@ (8005330 <HAL_DMA_Abort_IT+0x1c0>)
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d022      	beq.n	8005238 <HAL_DMA_Abort_IT+0xc8>
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	4a4f      	ldr	r2, [pc, #316]	@ (8005334 <HAL_DMA_Abort_IT+0x1c4>)
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d01d      	beq.n	8005238 <HAL_DMA_Abort_IT+0xc8>
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	4a4d      	ldr	r2, [pc, #308]	@ (8005338 <HAL_DMA_Abort_IT+0x1c8>)
 8005202:	4293      	cmp	r3, r2
 8005204:	d018      	beq.n	8005238 <HAL_DMA_Abort_IT+0xc8>
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	4a4c      	ldr	r2, [pc, #304]	@ (800533c <HAL_DMA_Abort_IT+0x1cc>)
 800520c:	4293      	cmp	r3, r2
 800520e:	d013      	beq.n	8005238 <HAL_DMA_Abort_IT+0xc8>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	4a4a      	ldr	r2, [pc, #296]	@ (8005340 <HAL_DMA_Abort_IT+0x1d0>)
 8005216:	4293      	cmp	r3, r2
 8005218:	d00e      	beq.n	8005238 <HAL_DMA_Abort_IT+0xc8>
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	4a49      	ldr	r2, [pc, #292]	@ (8005344 <HAL_DMA_Abort_IT+0x1d4>)
 8005220:	4293      	cmp	r3, r2
 8005222:	d009      	beq.n	8005238 <HAL_DMA_Abort_IT+0xc8>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	4a47      	ldr	r2, [pc, #284]	@ (8005348 <HAL_DMA_Abort_IT+0x1d8>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d004      	beq.n	8005238 <HAL_DMA_Abort_IT+0xc8>
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	4a46      	ldr	r2, [pc, #280]	@ (800534c <HAL_DMA_Abort_IT+0x1dc>)
 8005234:	4293      	cmp	r3, r2
 8005236:	d101      	bne.n	800523c <HAL_DMA_Abort_IT+0xcc>
 8005238:	2301      	movs	r3, #1
 800523a:	e000      	b.n	800523e <HAL_DMA_Abort_IT+0xce>
 800523c:	2300      	movs	r3, #0
 800523e:	2b00      	cmp	r3, #0
 8005240:	f000 8086 	beq.w	8005350 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2204      	movs	r2, #4
 8005248:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4a2f      	ldr	r2, [pc, #188]	@ (8005310 <HAL_DMA_Abort_IT+0x1a0>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d04a      	beq.n	80052ec <HAL_DMA_Abort_IT+0x17c>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	4a2e      	ldr	r2, [pc, #184]	@ (8005314 <HAL_DMA_Abort_IT+0x1a4>)
 800525c:	4293      	cmp	r3, r2
 800525e:	d045      	beq.n	80052ec <HAL_DMA_Abort_IT+0x17c>
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	4a2c      	ldr	r2, [pc, #176]	@ (8005318 <HAL_DMA_Abort_IT+0x1a8>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d040      	beq.n	80052ec <HAL_DMA_Abort_IT+0x17c>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	4a2b      	ldr	r2, [pc, #172]	@ (800531c <HAL_DMA_Abort_IT+0x1ac>)
 8005270:	4293      	cmp	r3, r2
 8005272:	d03b      	beq.n	80052ec <HAL_DMA_Abort_IT+0x17c>
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	4a29      	ldr	r2, [pc, #164]	@ (8005320 <HAL_DMA_Abort_IT+0x1b0>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d036      	beq.n	80052ec <HAL_DMA_Abort_IT+0x17c>
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	4a28      	ldr	r2, [pc, #160]	@ (8005324 <HAL_DMA_Abort_IT+0x1b4>)
 8005284:	4293      	cmp	r3, r2
 8005286:	d031      	beq.n	80052ec <HAL_DMA_Abort_IT+0x17c>
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	4a26      	ldr	r2, [pc, #152]	@ (8005328 <HAL_DMA_Abort_IT+0x1b8>)
 800528e:	4293      	cmp	r3, r2
 8005290:	d02c      	beq.n	80052ec <HAL_DMA_Abort_IT+0x17c>
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	4a25      	ldr	r2, [pc, #148]	@ (800532c <HAL_DMA_Abort_IT+0x1bc>)
 8005298:	4293      	cmp	r3, r2
 800529a:	d027      	beq.n	80052ec <HAL_DMA_Abort_IT+0x17c>
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	4a23      	ldr	r2, [pc, #140]	@ (8005330 <HAL_DMA_Abort_IT+0x1c0>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d022      	beq.n	80052ec <HAL_DMA_Abort_IT+0x17c>
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	4a22      	ldr	r2, [pc, #136]	@ (8005334 <HAL_DMA_Abort_IT+0x1c4>)
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d01d      	beq.n	80052ec <HAL_DMA_Abort_IT+0x17c>
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	4a20      	ldr	r2, [pc, #128]	@ (8005338 <HAL_DMA_Abort_IT+0x1c8>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d018      	beq.n	80052ec <HAL_DMA_Abort_IT+0x17c>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	4a1f      	ldr	r2, [pc, #124]	@ (800533c <HAL_DMA_Abort_IT+0x1cc>)
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d013      	beq.n	80052ec <HAL_DMA_Abort_IT+0x17c>
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	4a1d      	ldr	r2, [pc, #116]	@ (8005340 <HAL_DMA_Abort_IT+0x1d0>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d00e      	beq.n	80052ec <HAL_DMA_Abort_IT+0x17c>
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	4a1c      	ldr	r2, [pc, #112]	@ (8005344 <HAL_DMA_Abort_IT+0x1d4>)
 80052d4:	4293      	cmp	r3, r2
 80052d6:	d009      	beq.n	80052ec <HAL_DMA_Abort_IT+0x17c>
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	4a1a      	ldr	r2, [pc, #104]	@ (8005348 <HAL_DMA_Abort_IT+0x1d8>)
 80052de:	4293      	cmp	r3, r2
 80052e0:	d004      	beq.n	80052ec <HAL_DMA_Abort_IT+0x17c>
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	4a19      	ldr	r2, [pc, #100]	@ (800534c <HAL_DMA_Abort_IT+0x1dc>)
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d108      	bne.n	80052fe <HAL_DMA_Abort_IT+0x18e>
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	681a      	ldr	r2, [r3, #0]
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f022 0201 	bic.w	r2, r2, #1
 80052fa:	601a      	str	r2, [r3, #0]
 80052fc:	e178      	b.n	80055f0 <HAL_DMA_Abort_IT+0x480>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	681a      	ldr	r2, [r3, #0]
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f022 0201 	bic.w	r2, r2, #1
 800530c:	601a      	str	r2, [r3, #0]
 800530e:	e16f      	b.n	80055f0 <HAL_DMA_Abort_IT+0x480>
 8005310:	40020010 	.word	0x40020010
 8005314:	40020028 	.word	0x40020028
 8005318:	40020040 	.word	0x40020040
 800531c:	40020058 	.word	0x40020058
 8005320:	40020070 	.word	0x40020070
 8005324:	40020088 	.word	0x40020088
 8005328:	400200a0 	.word	0x400200a0
 800532c:	400200b8 	.word	0x400200b8
 8005330:	40020410 	.word	0x40020410
 8005334:	40020428 	.word	0x40020428
 8005338:	40020440 	.word	0x40020440
 800533c:	40020458 	.word	0x40020458
 8005340:	40020470 	.word	0x40020470
 8005344:	40020488 	.word	0x40020488
 8005348:	400204a0 	.word	0x400204a0
 800534c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	681a      	ldr	r2, [r3, #0]
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f022 020e 	bic.w	r2, r2, #14
 800535e:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	4a6c      	ldr	r2, [pc, #432]	@ (8005518 <HAL_DMA_Abort_IT+0x3a8>)
 8005366:	4293      	cmp	r3, r2
 8005368:	d04a      	beq.n	8005400 <HAL_DMA_Abort_IT+0x290>
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	4a6b      	ldr	r2, [pc, #428]	@ (800551c <HAL_DMA_Abort_IT+0x3ac>)
 8005370:	4293      	cmp	r3, r2
 8005372:	d045      	beq.n	8005400 <HAL_DMA_Abort_IT+0x290>
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	4a69      	ldr	r2, [pc, #420]	@ (8005520 <HAL_DMA_Abort_IT+0x3b0>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d040      	beq.n	8005400 <HAL_DMA_Abort_IT+0x290>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	4a68      	ldr	r2, [pc, #416]	@ (8005524 <HAL_DMA_Abort_IT+0x3b4>)
 8005384:	4293      	cmp	r3, r2
 8005386:	d03b      	beq.n	8005400 <HAL_DMA_Abort_IT+0x290>
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	4a66      	ldr	r2, [pc, #408]	@ (8005528 <HAL_DMA_Abort_IT+0x3b8>)
 800538e:	4293      	cmp	r3, r2
 8005390:	d036      	beq.n	8005400 <HAL_DMA_Abort_IT+0x290>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	4a65      	ldr	r2, [pc, #404]	@ (800552c <HAL_DMA_Abort_IT+0x3bc>)
 8005398:	4293      	cmp	r3, r2
 800539a:	d031      	beq.n	8005400 <HAL_DMA_Abort_IT+0x290>
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	4a63      	ldr	r2, [pc, #396]	@ (8005530 <HAL_DMA_Abort_IT+0x3c0>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d02c      	beq.n	8005400 <HAL_DMA_Abort_IT+0x290>
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	4a62      	ldr	r2, [pc, #392]	@ (8005534 <HAL_DMA_Abort_IT+0x3c4>)
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d027      	beq.n	8005400 <HAL_DMA_Abort_IT+0x290>
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	4a60      	ldr	r2, [pc, #384]	@ (8005538 <HAL_DMA_Abort_IT+0x3c8>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d022      	beq.n	8005400 <HAL_DMA_Abort_IT+0x290>
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	4a5f      	ldr	r2, [pc, #380]	@ (800553c <HAL_DMA_Abort_IT+0x3cc>)
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d01d      	beq.n	8005400 <HAL_DMA_Abort_IT+0x290>
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	4a5d      	ldr	r2, [pc, #372]	@ (8005540 <HAL_DMA_Abort_IT+0x3d0>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d018      	beq.n	8005400 <HAL_DMA_Abort_IT+0x290>
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	4a5c      	ldr	r2, [pc, #368]	@ (8005544 <HAL_DMA_Abort_IT+0x3d4>)
 80053d4:	4293      	cmp	r3, r2
 80053d6:	d013      	beq.n	8005400 <HAL_DMA_Abort_IT+0x290>
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	4a5a      	ldr	r2, [pc, #360]	@ (8005548 <HAL_DMA_Abort_IT+0x3d8>)
 80053de:	4293      	cmp	r3, r2
 80053e0:	d00e      	beq.n	8005400 <HAL_DMA_Abort_IT+0x290>
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	4a59      	ldr	r2, [pc, #356]	@ (800554c <HAL_DMA_Abort_IT+0x3dc>)
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d009      	beq.n	8005400 <HAL_DMA_Abort_IT+0x290>
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	4a57      	ldr	r2, [pc, #348]	@ (8005550 <HAL_DMA_Abort_IT+0x3e0>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d004      	beq.n	8005400 <HAL_DMA_Abort_IT+0x290>
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	4a56      	ldr	r2, [pc, #344]	@ (8005554 <HAL_DMA_Abort_IT+0x3e4>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d108      	bne.n	8005412 <HAL_DMA_Abort_IT+0x2a2>
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	681a      	ldr	r2, [r3, #0]
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f022 0201 	bic.w	r2, r2, #1
 800540e:	601a      	str	r2, [r3, #0]
 8005410:	e007      	b.n	8005422 <HAL_DMA_Abort_IT+0x2b2>
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	681a      	ldr	r2, [r3, #0]
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f022 0201 	bic.w	r2, r2, #1
 8005420:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	4a3c      	ldr	r2, [pc, #240]	@ (8005518 <HAL_DMA_Abort_IT+0x3a8>)
 8005428:	4293      	cmp	r3, r2
 800542a:	d072      	beq.n	8005512 <HAL_DMA_Abort_IT+0x3a2>
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	4a3a      	ldr	r2, [pc, #232]	@ (800551c <HAL_DMA_Abort_IT+0x3ac>)
 8005432:	4293      	cmp	r3, r2
 8005434:	d06d      	beq.n	8005512 <HAL_DMA_Abort_IT+0x3a2>
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	4a39      	ldr	r2, [pc, #228]	@ (8005520 <HAL_DMA_Abort_IT+0x3b0>)
 800543c:	4293      	cmp	r3, r2
 800543e:	d068      	beq.n	8005512 <HAL_DMA_Abort_IT+0x3a2>
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	4a37      	ldr	r2, [pc, #220]	@ (8005524 <HAL_DMA_Abort_IT+0x3b4>)
 8005446:	4293      	cmp	r3, r2
 8005448:	d063      	beq.n	8005512 <HAL_DMA_Abort_IT+0x3a2>
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	4a36      	ldr	r2, [pc, #216]	@ (8005528 <HAL_DMA_Abort_IT+0x3b8>)
 8005450:	4293      	cmp	r3, r2
 8005452:	d05e      	beq.n	8005512 <HAL_DMA_Abort_IT+0x3a2>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	4a34      	ldr	r2, [pc, #208]	@ (800552c <HAL_DMA_Abort_IT+0x3bc>)
 800545a:	4293      	cmp	r3, r2
 800545c:	d059      	beq.n	8005512 <HAL_DMA_Abort_IT+0x3a2>
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	4a33      	ldr	r2, [pc, #204]	@ (8005530 <HAL_DMA_Abort_IT+0x3c0>)
 8005464:	4293      	cmp	r3, r2
 8005466:	d054      	beq.n	8005512 <HAL_DMA_Abort_IT+0x3a2>
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	4a31      	ldr	r2, [pc, #196]	@ (8005534 <HAL_DMA_Abort_IT+0x3c4>)
 800546e:	4293      	cmp	r3, r2
 8005470:	d04f      	beq.n	8005512 <HAL_DMA_Abort_IT+0x3a2>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	4a30      	ldr	r2, [pc, #192]	@ (8005538 <HAL_DMA_Abort_IT+0x3c8>)
 8005478:	4293      	cmp	r3, r2
 800547a:	d04a      	beq.n	8005512 <HAL_DMA_Abort_IT+0x3a2>
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	4a2e      	ldr	r2, [pc, #184]	@ (800553c <HAL_DMA_Abort_IT+0x3cc>)
 8005482:	4293      	cmp	r3, r2
 8005484:	d045      	beq.n	8005512 <HAL_DMA_Abort_IT+0x3a2>
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	4a2d      	ldr	r2, [pc, #180]	@ (8005540 <HAL_DMA_Abort_IT+0x3d0>)
 800548c:	4293      	cmp	r3, r2
 800548e:	d040      	beq.n	8005512 <HAL_DMA_Abort_IT+0x3a2>
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	4a2b      	ldr	r2, [pc, #172]	@ (8005544 <HAL_DMA_Abort_IT+0x3d4>)
 8005496:	4293      	cmp	r3, r2
 8005498:	d03b      	beq.n	8005512 <HAL_DMA_Abort_IT+0x3a2>
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	4a2a      	ldr	r2, [pc, #168]	@ (8005548 <HAL_DMA_Abort_IT+0x3d8>)
 80054a0:	4293      	cmp	r3, r2
 80054a2:	d036      	beq.n	8005512 <HAL_DMA_Abort_IT+0x3a2>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	4a28      	ldr	r2, [pc, #160]	@ (800554c <HAL_DMA_Abort_IT+0x3dc>)
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d031      	beq.n	8005512 <HAL_DMA_Abort_IT+0x3a2>
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	4a27      	ldr	r2, [pc, #156]	@ (8005550 <HAL_DMA_Abort_IT+0x3e0>)
 80054b4:	4293      	cmp	r3, r2
 80054b6:	d02c      	beq.n	8005512 <HAL_DMA_Abort_IT+0x3a2>
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	4a25      	ldr	r2, [pc, #148]	@ (8005554 <HAL_DMA_Abort_IT+0x3e4>)
 80054be:	4293      	cmp	r3, r2
 80054c0:	d027      	beq.n	8005512 <HAL_DMA_Abort_IT+0x3a2>
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	4a24      	ldr	r2, [pc, #144]	@ (8005558 <HAL_DMA_Abort_IT+0x3e8>)
 80054c8:	4293      	cmp	r3, r2
 80054ca:	d022      	beq.n	8005512 <HAL_DMA_Abort_IT+0x3a2>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	4a22      	ldr	r2, [pc, #136]	@ (800555c <HAL_DMA_Abort_IT+0x3ec>)
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d01d      	beq.n	8005512 <HAL_DMA_Abort_IT+0x3a2>
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	4a21      	ldr	r2, [pc, #132]	@ (8005560 <HAL_DMA_Abort_IT+0x3f0>)
 80054dc:	4293      	cmp	r3, r2
 80054de:	d018      	beq.n	8005512 <HAL_DMA_Abort_IT+0x3a2>
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	4a1f      	ldr	r2, [pc, #124]	@ (8005564 <HAL_DMA_Abort_IT+0x3f4>)
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d013      	beq.n	8005512 <HAL_DMA_Abort_IT+0x3a2>
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	4a1e      	ldr	r2, [pc, #120]	@ (8005568 <HAL_DMA_Abort_IT+0x3f8>)
 80054f0:	4293      	cmp	r3, r2
 80054f2:	d00e      	beq.n	8005512 <HAL_DMA_Abort_IT+0x3a2>
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	4a1c      	ldr	r2, [pc, #112]	@ (800556c <HAL_DMA_Abort_IT+0x3fc>)
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d009      	beq.n	8005512 <HAL_DMA_Abort_IT+0x3a2>
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	4a1b      	ldr	r2, [pc, #108]	@ (8005570 <HAL_DMA_Abort_IT+0x400>)
 8005504:	4293      	cmp	r3, r2
 8005506:	d004      	beq.n	8005512 <HAL_DMA_Abort_IT+0x3a2>
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	4a19      	ldr	r2, [pc, #100]	@ (8005574 <HAL_DMA_Abort_IT+0x404>)
 800550e:	4293      	cmp	r3, r2
 8005510:	d132      	bne.n	8005578 <HAL_DMA_Abort_IT+0x408>
 8005512:	2301      	movs	r3, #1
 8005514:	e031      	b.n	800557a <HAL_DMA_Abort_IT+0x40a>
 8005516:	bf00      	nop
 8005518:	40020010 	.word	0x40020010
 800551c:	40020028 	.word	0x40020028
 8005520:	40020040 	.word	0x40020040
 8005524:	40020058 	.word	0x40020058
 8005528:	40020070 	.word	0x40020070
 800552c:	40020088 	.word	0x40020088
 8005530:	400200a0 	.word	0x400200a0
 8005534:	400200b8 	.word	0x400200b8
 8005538:	40020410 	.word	0x40020410
 800553c:	40020428 	.word	0x40020428
 8005540:	40020440 	.word	0x40020440
 8005544:	40020458 	.word	0x40020458
 8005548:	40020470 	.word	0x40020470
 800554c:	40020488 	.word	0x40020488
 8005550:	400204a0 	.word	0x400204a0
 8005554:	400204b8 	.word	0x400204b8
 8005558:	58025408 	.word	0x58025408
 800555c:	5802541c 	.word	0x5802541c
 8005560:	58025430 	.word	0x58025430
 8005564:	58025444 	.word	0x58025444
 8005568:	58025458 	.word	0x58025458
 800556c:	5802546c 	.word	0x5802546c
 8005570:	58025480 	.word	0x58025480
 8005574:	58025494 	.word	0x58025494
 8005578:	2300      	movs	r3, #0
 800557a:	2b00      	cmp	r3, #0
 800557c:	d028      	beq.n	80055d0 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005582:	681a      	ldr	r2, [r3, #0]
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005588:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800558c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005592:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005598:	f003 031f 	and.w	r3, r3, #31
 800559c:	2201      	movs	r2, #1
 800559e:	409a      	lsls	r2, r3
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80055a8:	687a      	ldr	r2, [r7, #4]
 80055aa:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80055ac:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d00c      	beq.n	80055d0 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80055ba:	681a      	ldr	r2, [r3, #0]
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80055c0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80055c4:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055ca:	687a      	ldr	r2, [r7, #4]
 80055cc:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80055ce:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2201      	movs	r2, #1
 80055d4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2200      	movs	r2, #0
 80055dc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d003      	beq.n	80055f0 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80055ec:	6878      	ldr	r0, [r7, #4]
 80055ee:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80055f0:	2300      	movs	r3, #0
}
 80055f2:	4618      	mov	r0, r3
 80055f4:	3710      	adds	r7, #16
 80055f6:	46bd      	mov	sp, r7
 80055f8:	bd80      	pop	{r7, pc}
 80055fa:	bf00      	nop

080055fc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b08a      	sub	sp, #40	@ 0x28
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8005604:	2300      	movs	r3, #0
 8005606:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005608:	4b67      	ldr	r3, [pc, #412]	@ (80057a8 <HAL_DMA_IRQHandler+0x1ac>)
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	4a67      	ldr	r2, [pc, #412]	@ (80057ac <HAL_DMA_IRQHandler+0x1b0>)
 800560e:	fba2 2303 	umull	r2, r3, r2, r3
 8005612:	0a9b      	lsrs	r3, r3, #10
 8005614:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800561a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005620:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8005622:	6a3b      	ldr	r3, [r7, #32]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8005628:	69fb      	ldr	r3, [r7, #28]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	4a5f      	ldr	r2, [pc, #380]	@ (80057b0 <HAL_DMA_IRQHandler+0x1b4>)
 8005634:	4293      	cmp	r3, r2
 8005636:	d04a      	beq.n	80056ce <HAL_DMA_IRQHandler+0xd2>
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	4a5d      	ldr	r2, [pc, #372]	@ (80057b4 <HAL_DMA_IRQHandler+0x1b8>)
 800563e:	4293      	cmp	r3, r2
 8005640:	d045      	beq.n	80056ce <HAL_DMA_IRQHandler+0xd2>
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	4a5c      	ldr	r2, [pc, #368]	@ (80057b8 <HAL_DMA_IRQHandler+0x1bc>)
 8005648:	4293      	cmp	r3, r2
 800564a:	d040      	beq.n	80056ce <HAL_DMA_IRQHandler+0xd2>
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	4a5a      	ldr	r2, [pc, #360]	@ (80057bc <HAL_DMA_IRQHandler+0x1c0>)
 8005652:	4293      	cmp	r3, r2
 8005654:	d03b      	beq.n	80056ce <HAL_DMA_IRQHandler+0xd2>
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	4a59      	ldr	r2, [pc, #356]	@ (80057c0 <HAL_DMA_IRQHandler+0x1c4>)
 800565c:	4293      	cmp	r3, r2
 800565e:	d036      	beq.n	80056ce <HAL_DMA_IRQHandler+0xd2>
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	4a57      	ldr	r2, [pc, #348]	@ (80057c4 <HAL_DMA_IRQHandler+0x1c8>)
 8005666:	4293      	cmp	r3, r2
 8005668:	d031      	beq.n	80056ce <HAL_DMA_IRQHandler+0xd2>
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	4a56      	ldr	r2, [pc, #344]	@ (80057c8 <HAL_DMA_IRQHandler+0x1cc>)
 8005670:	4293      	cmp	r3, r2
 8005672:	d02c      	beq.n	80056ce <HAL_DMA_IRQHandler+0xd2>
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	4a54      	ldr	r2, [pc, #336]	@ (80057cc <HAL_DMA_IRQHandler+0x1d0>)
 800567a:	4293      	cmp	r3, r2
 800567c:	d027      	beq.n	80056ce <HAL_DMA_IRQHandler+0xd2>
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	4a53      	ldr	r2, [pc, #332]	@ (80057d0 <HAL_DMA_IRQHandler+0x1d4>)
 8005684:	4293      	cmp	r3, r2
 8005686:	d022      	beq.n	80056ce <HAL_DMA_IRQHandler+0xd2>
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	4a51      	ldr	r2, [pc, #324]	@ (80057d4 <HAL_DMA_IRQHandler+0x1d8>)
 800568e:	4293      	cmp	r3, r2
 8005690:	d01d      	beq.n	80056ce <HAL_DMA_IRQHandler+0xd2>
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	4a50      	ldr	r2, [pc, #320]	@ (80057d8 <HAL_DMA_IRQHandler+0x1dc>)
 8005698:	4293      	cmp	r3, r2
 800569a:	d018      	beq.n	80056ce <HAL_DMA_IRQHandler+0xd2>
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	4a4e      	ldr	r2, [pc, #312]	@ (80057dc <HAL_DMA_IRQHandler+0x1e0>)
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d013      	beq.n	80056ce <HAL_DMA_IRQHandler+0xd2>
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	4a4d      	ldr	r2, [pc, #308]	@ (80057e0 <HAL_DMA_IRQHandler+0x1e4>)
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d00e      	beq.n	80056ce <HAL_DMA_IRQHandler+0xd2>
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	4a4b      	ldr	r2, [pc, #300]	@ (80057e4 <HAL_DMA_IRQHandler+0x1e8>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d009      	beq.n	80056ce <HAL_DMA_IRQHandler+0xd2>
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	4a4a      	ldr	r2, [pc, #296]	@ (80057e8 <HAL_DMA_IRQHandler+0x1ec>)
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d004      	beq.n	80056ce <HAL_DMA_IRQHandler+0xd2>
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	4a48      	ldr	r2, [pc, #288]	@ (80057ec <HAL_DMA_IRQHandler+0x1f0>)
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d101      	bne.n	80056d2 <HAL_DMA_IRQHandler+0xd6>
 80056ce:	2301      	movs	r3, #1
 80056d0:	e000      	b.n	80056d4 <HAL_DMA_IRQHandler+0xd8>
 80056d2:	2300      	movs	r3, #0
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	f000 842b 	beq.w	8005f30 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80056de:	f003 031f 	and.w	r3, r3, #31
 80056e2:	2208      	movs	r2, #8
 80056e4:	409a      	lsls	r2, r3
 80056e6:	69bb      	ldr	r3, [r7, #24]
 80056e8:	4013      	ands	r3, r2
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	f000 80a2 	beq.w	8005834 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	4a2e      	ldr	r2, [pc, #184]	@ (80057b0 <HAL_DMA_IRQHandler+0x1b4>)
 80056f6:	4293      	cmp	r3, r2
 80056f8:	d04a      	beq.n	8005790 <HAL_DMA_IRQHandler+0x194>
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	4a2d      	ldr	r2, [pc, #180]	@ (80057b4 <HAL_DMA_IRQHandler+0x1b8>)
 8005700:	4293      	cmp	r3, r2
 8005702:	d045      	beq.n	8005790 <HAL_DMA_IRQHandler+0x194>
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	4a2b      	ldr	r2, [pc, #172]	@ (80057b8 <HAL_DMA_IRQHandler+0x1bc>)
 800570a:	4293      	cmp	r3, r2
 800570c:	d040      	beq.n	8005790 <HAL_DMA_IRQHandler+0x194>
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	4a2a      	ldr	r2, [pc, #168]	@ (80057bc <HAL_DMA_IRQHandler+0x1c0>)
 8005714:	4293      	cmp	r3, r2
 8005716:	d03b      	beq.n	8005790 <HAL_DMA_IRQHandler+0x194>
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	4a28      	ldr	r2, [pc, #160]	@ (80057c0 <HAL_DMA_IRQHandler+0x1c4>)
 800571e:	4293      	cmp	r3, r2
 8005720:	d036      	beq.n	8005790 <HAL_DMA_IRQHandler+0x194>
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	4a27      	ldr	r2, [pc, #156]	@ (80057c4 <HAL_DMA_IRQHandler+0x1c8>)
 8005728:	4293      	cmp	r3, r2
 800572a:	d031      	beq.n	8005790 <HAL_DMA_IRQHandler+0x194>
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	4a25      	ldr	r2, [pc, #148]	@ (80057c8 <HAL_DMA_IRQHandler+0x1cc>)
 8005732:	4293      	cmp	r3, r2
 8005734:	d02c      	beq.n	8005790 <HAL_DMA_IRQHandler+0x194>
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	4a24      	ldr	r2, [pc, #144]	@ (80057cc <HAL_DMA_IRQHandler+0x1d0>)
 800573c:	4293      	cmp	r3, r2
 800573e:	d027      	beq.n	8005790 <HAL_DMA_IRQHandler+0x194>
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	4a22      	ldr	r2, [pc, #136]	@ (80057d0 <HAL_DMA_IRQHandler+0x1d4>)
 8005746:	4293      	cmp	r3, r2
 8005748:	d022      	beq.n	8005790 <HAL_DMA_IRQHandler+0x194>
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	4a21      	ldr	r2, [pc, #132]	@ (80057d4 <HAL_DMA_IRQHandler+0x1d8>)
 8005750:	4293      	cmp	r3, r2
 8005752:	d01d      	beq.n	8005790 <HAL_DMA_IRQHandler+0x194>
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	4a1f      	ldr	r2, [pc, #124]	@ (80057d8 <HAL_DMA_IRQHandler+0x1dc>)
 800575a:	4293      	cmp	r3, r2
 800575c:	d018      	beq.n	8005790 <HAL_DMA_IRQHandler+0x194>
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	4a1e      	ldr	r2, [pc, #120]	@ (80057dc <HAL_DMA_IRQHandler+0x1e0>)
 8005764:	4293      	cmp	r3, r2
 8005766:	d013      	beq.n	8005790 <HAL_DMA_IRQHandler+0x194>
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	4a1c      	ldr	r2, [pc, #112]	@ (80057e0 <HAL_DMA_IRQHandler+0x1e4>)
 800576e:	4293      	cmp	r3, r2
 8005770:	d00e      	beq.n	8005790 <HAL_DMA_IRQHandler+0x194>
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	4a1b      	ldr	r2, [pc, #108]	@ (80057e4 <HAL_DMA_IRQHandler+0x1e8>)
 8005778:	4293      	cmp	r3, r2
 800577a:	d009      	beq.n	8005790 <HAL_DMA_IRQHandler+0x194>
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	4a19      	ldr	r2, [pc, #100]	@ (80057e8 <HAL_DMA_IRQHandler+0x1ec>)
 8005782:	4293      	cmp	r3, r2
 8005784:	d004      	beq.n	8005790 <HAL_DMA_IRQHandler+0x194>
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	4a18      	ldr	r2, [pc, #96]	@ (80057ec <HAL_DMA_IRQHandler+0x1f0>)
 800578c:	4293      	cmp	r3, r2
 800578e:	d12f      	bne.n	80057f0 <HAL_DMA_IRQHandler+0x1f4>
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f003 0304 	and.w	r3, r3, #4
 800579a:	2b00      	cmp	r3, #0
 800579c:	bf14      	ite	ne
 800579e:	2301      	movne	r3, #1
 80057a0:	2300      	moveq	r3, #0
 80057a2:	b2db      	uxtb	r3, r3
 80057a4:	e02e      	b.n	8005804 <HAL_DMA_IRQHandler+0x208>
 80057a6:	bf00      	nop
 80057a8:	24000000 	.word	0x24000000
 80057ac:	1b4e81b5 	.word	0x1b4e81b5
 80057b0:	40020010 	.word	0x40020010
 80057b4:	40020028 	.word	0x40020028
 80057b8:	40020040 	.word	0x40020040
 80057bc:	40020058 	.word	0x40020058
 80057c0:	40020070 	.word	0x40020070
 80057c4:	40020088 	.word	0x40020088
 80057c8:	400200a0 	.word	0x400200a0
 80057cc:	400200b8 	.word	0x400200b8
 80057d0:	40020410 	.word	0x40020410
 80057d4:	40020428 	.word	0x40020428
 80057d8:	40020440 	.word	0x40020440
 80057dc:	40020458 	.word	0x40020458
 80057e0:	40020470 	.word	0x40020470
 80057e4:	40020488 	.word	0x40020488
 80057e8:	400204a0 	.word	0x400204a0
 80057ec:	400204b8 	.word	0x400204b8
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f003 0308 	and.w	r3, r3, #8
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	bf14      	ite	ne
 80057fe:	2301      	movne	r3, #1
 8005800:	2300      	moveq	r3, #0
 8005802:	b2db      	uxtb	r3, r3
 8005804:	2b00      	cmp	r3, #0
 8005806:	d015      	beq.n	8005834 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	681a      	ldr	r2, [r3, #0]
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f022 0204 	bic.w	r2, r2, #4
 8005816:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800581c:	f003 031f 	and.w	r3, r3, #31
 8005820:	2208      	movs	r2, #8
 8005822:	409a      	lsls	r2, r3
 8005824:	6a3b      	ldr	r3, [r7, #32]
 8005826:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800582c:	f043 0201 	orr.w	r2, r3, #1
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005838:	f003 031f 	and.w	r3, r3, #31
 800583c:	69ba      	ldr	r2, [r7, #24]
 800583e:	fa22 f303 	lsr.w	r3, r2, r3
 8005842:	f003 0301 	and.w	r3, r3, #1
 8005846:	2b00      	cmp	r3, #0
 8005848:	d06e      	beq.n	8005928 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	4a69      	ldr	r2, [pc, #420]	@ (80059f4 <HAL_DMA_IRQHandler+0x3f8>)
 8005850:	4293      	cmp	r3, r2
 8005852:	d04a      	beq.n	80058ea <HAL_DMA_IRQHandler+0x2ee>
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	4a67      	ldr	r2, [pc, #412]	@ (80059f8 <HAL_DMA_IRQHandler+0x3fc>)
 800585a:	4293      	cmp	r3, r2
 800585c:	d045      	beq.n	80058ea <HAL_DMA_IRQHandler+0x2ee>
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	4a66      	ldr	r2, [pc, #408]	@ (80059fc <HAL_DMA_IRQHandler+0x400>)
 8005864:	4293      	cmp	r3, r2
 8005866:	d040      	beq.n	80058ea <HAL_DMA_IRQHandler+0x2ee>
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	4a64      	ldr	r2, [pc, #400]	@ (8005a00 <HAL_DMA_IRQHandler+0x404>)
 800586e:	4293      	cmp	r3, r2
 8005870:	d03b      	beq.n	80058ea <HAL_DMA_IRQHandler+0x2ee>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	4a63      	ldr	r2, [pc, #396]	@ (8005a04 <HAL_DMA_IRQHandler+0x408>)
 8005878:	4293      	cmp	r3, r2
 800587a:	d036      	beq.n	80058ea <HAL_DMA_IRQHandler+0x2ee>
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	4a61      	ldr	r2, [pc, #388]	@ (8005a08 <HAL_DMA_IRQHandler+0x40c>)
 8005882:	4293      	cmp	r3, r2
 8005884:	d031      	beq.n	80058ea <HAL_DMA_IRQHandler+0x2ee>
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	4a60      	ldr	r2, [pc, #384]	@ (8005a0c <HAL_DMA_IRQHandler+0x410>)
 800588c:	4293      	cmp	r3, r2
 800588e:	d02c      	beq.n	80058ea <HAL_DMA_IRQHandler+0x2ee>
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	4a5e      	ldr	r2, [pc, #376]	@ (8005a10 <HAL_DMA_IRQHandler+0x414>)
 8005896:	4293      	cmp	r3, r2
 8005898:	d027      	beq.n	80058ea <HAL_DMA_IRQHandler+0x2ee>
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	4a5d      	ldr	r2, [pc, #372]	@ (8005a14 <HAL_DMA_IRQHandler+0x418>)
 80058a0:	4293      	cmp	r3, r2
 80058a2:	d022      	beq.n	80058ea <HAL_DMA_IRQHandler+0x2ee>
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	4a5b      	ldr	r2, [pc, #364]	@ (8005a18 <HAL_DMA_IRQHandler+0x41c>)
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d01d      	beq.n	80058ea <HAL_DMA_IRQHandler+0x2ee>
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	4a5a      	ldr	r2, [pc, #360]	@ (8005a1c <HAL_DMA_IRQHandler+0x420>)
 80058b4:	4293      	cmp	r3, r2
 80058b6:	d018      	beq.n	80058ea <HAL_DMA_IRQHandler+0x2ee>
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	4a58      	ldr	r2, [pc, #352]	@ (8005a20 <HAL_DMA_IRQHandler+0x424>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d013      	beq.n	80058ea <HAL_DMA_IRQHandler+0x2ee>
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	4a57      	ldr	r2, [pc, #348]	@ (8005a24 <HAL_DMA_IRQHandler+0x428>)
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d00e      	beq.n	80058ea <HAL_DMA_IRQHandler+0x2ee>
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	4a55      	ldr	r2, [pc, #340]	@ (8005a28 <HAL_DMA_IRQHandler+0x42c>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d009      	beq.n	80058ea <HAL_DMA_IRQHandler+0x2ee>
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	4a54      	ldr	r2, [pc, #336]	@ (8005a2c <HAL_DMA_IRQHandler+0x430>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d004      	beq.n	80058ea <HAL_DMA_IRQHandler+0x2ee>
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	4a52      	ldr	r2, [pc, #328]	@ (8005a30 <HAL_DMA_IRQHandler+0x434>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d10a      	bne.n	8005900 <HAL_DMA_IRQHandler+0x304>
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	695b      	ldr	r3, [r3, #20]
 80058f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	bf14      	ite	ne
 80058f8:	2301      	movne	r3, #1
 80058fa:	2300      	moveq	r3, #0
 80058fc:	b2db      	uxtb	r3, r3
 80058fe:	e003      	b.n	8005908 <HAL_DMA_IRQHandler+0x30c>
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	2300      	movs	r3, #0
 8005908:	2b00      	cmp	r3, #0
 800590a:	d00d      	beq.n	8005928 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005910:	f003 031f 	and.w	r3, r3, #31
 8005914:	2201      	movs	r2, #1
 8005916:	409a      	lsls	r2, r3
 8005918:	6a3b      	ldr	r3, [r7, #32]
 800591a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005920:	f043 0202 	orr.w	r2, r3, #2
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800592c:	f003 031f 	and.w	r3, r3, #31
 8005930:	2204      	movs	r2, #4
 8005932:	409a      	lsls	r2, r3
 8005934:	69bb      	ldr	r3, [r7, #24]
 8005936:	4013      	ands	r3, r2
 8005938:	2b00      	cmp	r3, #0
 800593a:	f000 808f 	beq.w	8005a5c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	4a2c      	ldr	r2, [pc, #176]	@ (80059f4 <HAL_DMA_IRQHandler+0x3f8>)
 8005944:	4293      	cmp	r3, r2
 8005946:	d04a      	beq.n	80059de <HAL_DMA_IRQHandler+0x3e2>
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	4a2a      	ldr	r2, [pc, #168]	@ (80059f8 <HAL_DMA_IRQHandler+0x3fc>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d045      	beq.n	80059de <HAL_DMA_IRQHandler+0x3e2>
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	4a29      	ldr	r2, [pc, #164]	@ (80059fc <HAL_DMA_IRQHandler+0x400>)
 8005958:	4293      	cmp	r3, r2
 800595a:	d040      	beq.n	80059de <HAL_DMA_IRQHandler+0x3e2>
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	4a27      	ldr	r2, [pc, #156]	@ (8005a00 <HAL_DMA_IRQHandler+0x404>)
 8005962:	4293      	cmp	r3, r2
 8005964:	d03b      	beq.n	80059de <HAL_DMA_IRQHandler+0x3e2>
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	4a26      	ldr	r2, [pc, #152]	@ (8005a04 <HAL_DMA_IRQHandler+0x408>)
 800596c:	4293      	cmp	r3, r2
 800596e:	d036      	beq.n	80059de <HAL_DMA_IRQHandler+0x3e2>
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	4a24      	ldr	r2, [pc, #144]	@ (8005a08 <HAL_DMA_IRQHandler+0x40c>)
 8005976:	4293      	cmp	r3, r2
 8005978:	d031      	beq.n	80059de <HAL_DMA_IRQHandler+0x3e2>
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	4a23      	ldr	r2, [pc, #140]	@ (8005a0c <HAL_DMA_IRQHandler+0x410>)
 8005980:	4293      	cmp	r3, r2
 8005982:	d02c      	beq.n	80059de <HAL_DMA_IRQHandler+0x3e2>
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	4a21      	ldr	r2, [pc, #132]	@ (8005a10 <HAL_DMA_IRQHandler+0x414>)
 800598a:	4293      	cmp	r3, r2
 800598c:	d027      	beq.n	80059de <HAL_DMA_IRQHandler+0x3e2>
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	4a20      	ldr	r2, [pc, #128]	@ (8005a14 <HAL_DMA_IRQHandler+0x418>)
 8005994:	4293      	cmp	r3, r2
 8005996:	d022      	beq.n	80059de <HAL_DMA_IRQHandler+0x3e2>
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	4a1e      	ldr	r2, [pc, #120]	@ (8005a18 <HAL_DMA_IRQHandler+0x41c>)
 800599e:	4293      	cmp	r3, r2
 80059a0:	d01d      	beq.n	80059de <HAL_DMA_IRQHandler+0x3e2>
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	4a1d      	ldr	r2, [pc, #116]	@ (8005a1c <HAL_DMA_IRQHandler+0x420>)
 80059a8:	4293      	cmp	r3, r2
 80059aa:	d018      	beq.n	80059de <HAL_DMA_IRQHandler+0x3e2>
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	4a1b      	ldr	r2, [pc, #108]	@ (8005a20 <HAL_DMA_IRQHandler+0x424>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d013      	beq.n	80059de <HAL_DMA_IRQHandler+0x3e2>
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	4a1a      	ldr	r2, [pc, #104]	@ (8005a24 <HAL_DMA_IRQHandler+0x428>)
 80059bc:	4293      	cmp	r3, r2
 80059be:	d00e      	beq.n	80059de <HAL_DMA_IRQHandler+0x3e2>
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	4a18      	ldr	r2, [pc, #96]	@ (8005a28 <HAL_DMA_IRQHandler+0x42c>)
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d009      	beq.n	80059de <HAL_DMA_IRQHandler+0x3e2>
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	4a17      	ldr	r2, [pc, #92]	@ (8005a2c <HAL_DMA_IRQHandler+0x430>)
 80059d0:	4293      	cmp	r3, r2
 80059d2:	d004      	beq.n	80059de <HAL_DMA_IRQHandler+0x3e2>
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	4a15      	ldr	r2, [pc, #84]	@ (8005a30 <HAL_DMA_IRQHandler+0x434>)
 80059da:	4293      	cmp	r3, r2
 80059dc:	d12a      	bne.n	8005a34 <HAL_DMA_IRQHandler+0x438>
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f003 0302 	and.w	r3, r3, #2
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	bf14      	ite	ne
 80059ec:	2301      	movne	r3, #1
 80059ee:	2300      	moveq	r3, #0
 80059f0:	b2db      	uxtb	r3, r3
 80059f2:	e023      	b.n	8005a3c <HAL_DMA_IRQHandler+0x440>
 80059f4:	40020010 	.word	0x40020010
 80059f8:	40020028 	.word	0x40020028
 80059fc:	40020040 	.word	0x40020040
 8005a00:	40020058 	.word	0x40020058
 8005a04:	40020070 	.word	0x40020070
 8005a08:	40020088 	.word	0x40020088
 8005a0c:	400200a0 	.word	0x400200a0
 8005a10:	400200b8 	.word	0x400200b8
 8005a14:	40020410 	.word	0x40020410
 8005a18:	40020428 	.word	0x40020428
 8005a1c:	40020440 	.word	0x40020440
 8005a20:	40020458 	.word	0x40020458
 8005a24:	40020470 	.word	0x40020470
 8005a28:	40020488 	.word	0x40020488
 8005a2c:	400204a0 	.word	0x400204a0
 8005a30:	400204b8 	.word	0x400204b8
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d00d      	beq.n	8005a5c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a44:	f003 031f 	and.w	r3, r3, #31
 8005a48:	2204      	movs	r2, #4
 8005a4a:	409a      	lsls	r2, r3
 8005a4c:	6a3b      	ldr	r3, [r7, #32]
 8005a4e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a54:	f043 0204 	orr.w	r2, r3, #4
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a60:	f003 031f 	and.w	r3, r3, #31
 8005a64:	2210      	movs	r2, #16
 8005a66:	409a      	lsls	r2, r3
 8005a68:	69bb      	ldr	r3, [r7, #24]
 8005a6a:	4013      	ands	r3, r2
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	f000 80a6 	beq.w	8005bbe <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	4a85      	ldr	r2, [pc, #532]	@ (8005c8c <HAL_DMA_IRQHandler+0x690>)
 8005a78:	4293      	cmp	r3, r2
 8005a7a:	d04a      	beq.n	8005b12 <HAL_DMA_IRQHandler+0x516>
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	4a83      	ldr	r2, [pc, #524]	@ (8005c90 <HAL_DMA_IRQHandler+0x694>)
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d045      	beq.n	8005b12 <HAL_DMA_IRQHandler+0x516>
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	4a82      	ldr	r2, [pc, #520]	@ (8005c94 <HAL_DMA_IRQHandler+0x698>)
 8005a8c:	4293      	cmp	r3, r2
 8005a8e:	d040      	beq.n	8005b12 <HAL_DMA_IRQHandler+0x516>
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	4a80      	ldr	r2, [pc, #512]	@ (8005c98 <HAL_DMA_IRQHandler+0x69c>)
 8005a96:	4293      	cmp	r3, r2
 8005a98:	d03b      	beq.n	8005b12 <HAL_DMA_IRQHandler+0x516>
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	4a7f      	ldr	r2, [pc, #508]	@ (8005c9c <HAL_DMA_IRQHandler+0x6a0>)
 8005aa0:	4293      	cmp	r3, r2
 8005aa2:	d036      	beq.n	8005b12 <HAL_DMA_IRQHandler+0x516>
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	4a7d      	ldr	r2, [pc, #500]	@ (8005ca0 <HAL_DMA_IRQHandler+0x6a4>)
 8005aaa:	4293      	cmp	r3, r2
 8005aac:	d031      	beq.n	8005b12 <HAL_DMA_IRQHandler+0x516>
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	4a7c      	ldr	r2, [pc, #496]	@ (8005ca4 <HAL_DMA_IRQHandler+0x6a8>)
 8005ab4:	4293      	cmp	r3, r2
 8005ab6:	d02c      	beq.n	8005b12 <HAL_DMA_IRQHandler+0x516>
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	4a7a      	ldr	r2, [pc, #488]	@ (8005ca8 <HAL_DMA_IRQHandler+0x6ac>)
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	d027      	beq.n	8005b12 <HAL_DMA_IRQHandler+0x516>
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	4a79      	ldr	r2, [pc, #484]	@ (8005cac <HAL_DMA_IRQHandler+0x6b0>)
 8005ac8:	4293      	cmp	r3, r2
 8005aca:	d022      	beq.n	8005b12 <HAL_DMA_IRQHandler+0x516>
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	4a77      	ldr	r2, [pc, #476]	@ (8005cb0 <HAL_DMA_IRQHandler+0x6b4>)
 8005ad2:	4293      	cmp	r3, r2
 8005ad4:	d01d      	beq.n	8005b12 <HAL_DMA_IRQHandler+0x516>
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	4a76      	ldr	r2, [pc, #472]	@ (8005cb4 <HAL_DMA_IRQHandler+0x6b8>)
 8005adc:	4293      	cmp	r3, r2
 8005ade:	d018      	beq.n	8005b12 <HAL_DMA_IRQHandler+0x516>
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	4a74      	ldr	r2, [pc, #464]	@ (8005cb8 <HAL_DMA_IRQHandler+0x6bc>)
 8005ae6:	4293      	cmp	r3, r2
 8005ae8:	d013      	beq.n	8005b12 <HAL_DMA_IRQHandler+0x516>
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	4a73      	ldr	r2, [pc, #460]	@ (8005cbc <HAL_DMA_IRQHandler+0x6c0>)
 8005af0:	4293      	cmp	r3, r2
 8005af2:	d00e      	beq.n	8005b12 <HAL_DMA_IRQHandler+0x516>
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	4a71      	ldr	r2, [pc, #452]	@ (8005cc0 <HAL_DMA_IRQHandler+0x6c4>)
 8005afa:	4293      	cmp	r3, r2
 8005afc:	d009      	beq.n	8005b12 <HAL_DMA_IRQHandler+0x516>
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	4a70      	ldr	r2, [pc, #448]	@ (8005cc4 <HAL_DMA_IRQHandler+0x6c8>)
 8005b04:	4293      	cmp	r3, r2
 8005b06:	d004      	beq.n	8005b12 <HAL_DMA_IRQHandler+0x516>
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	4a6e      	ldr	r2, [pc, #440]	@ (8005cc8 <HAL_DMA_IRQHandler+0x6cc>)
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	d10a      	bne.n	8005b28 <HAL_DMA_IRQHandler+0x52c>
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f003 0308 	and.w	r3, r3, #8
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	bf14      	ite	ne
 8005b20:	2301      	movne	r3, #1
 8005b22:	2300      	moveq	r3, #0
 8005b24:	b2db      	uxtb	r3, r3
 8005b26:	e009      	b.n	8005b3c <HAL_DMA_IRQHandler+0x540>
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f003 0304 	and.w	r3, r3, #4
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	bf14      	ite	ne
 8005b36:	2301      	movne	r3, #1
 8005b38:	2300      	moveq	r3, #0
 8005b3a:	b2db      	uxtb	r3, r3
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d03e      	beq.n	8005bbe <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b44:	f003 031f 	and.w	r3, r3, #31
 8005b48:	2210      	movs	r2, #16
 8005b4a:	409a      	lsls	r2, r3
 8005b4c:	6a3b      	ldr	r3, [r7, #32]
 8005b4e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d018      	beq.n	8005b90 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d108      	bne.n	8005b7e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d024      	beq.n	8005bbe <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b78:	6878      	ldr	r0, [r7, #4]
 8005b7a:	4798      	blx	r3
 8005b7c:	e01f      	b.n	8005bbe <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d01b      	beq.n	8005bbe <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005b8a:	6878      	ldr	r0, [r7, #4]
 8005b8c:	4798      	blx	r3
 8005b8e:	e016      	b.n	8005bbe <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d107      	bne.n	8005bae <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	681a      	ldr	r2, [r3, #0]
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f022 0208 	bic.w	r2, r2, #8
 8005bac:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d003      	beq.n	8005bbe <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bba:	6878      	ldr	r0, [r7, #4]
 8005bbc:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005bc2:	f003 031f 	and.w	r3, r3, #31
 8005bc6:	2220      	movs	r2, #32
 8005bc8:	409a      	lsls	r2, r3
 8005bca:	69bb      	ldr	r3, [r7, #24]
 8005bcc:	4013      	ands	r3, r2
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	f000 8110 	beq.w	8005df4 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	4a2c      	ldr	r2, [pc, #176]	@ (8005c8c <HAL_DMA_IRQHandler+0x690>)
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d04a      	beq.n	8005c74 <HAL_DMA_IRQHandler+0x678>
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	4a2b      	ldr	r2, [pc, #172]	@ (8005c90 <HAL_DMA_IRQHandler+0x694>)
 8005be4:	4293      	cmp	r3, r2
 8005be6:	d045      	beq.n	8005c74 <HAL_DMA_IRQHandler+0x678>
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	4a29      	ldr	r2, [pc, #164]	@ (8005c94 <HAL_DMA_IRQHandler+0x698>)
 8005bee:	4293      	cmp	r3, r2
 8005bf0:	d040      	beq.n	8005c74 <HAL_DMA_IRQHandler+0x678>
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	4a28      	ldr	r2, [pc, #160]	@ (8005c98 <HAL_DMA_IRQHandler+0x69c>)
 8005bf8:	4293      	cmp	r3, r2
 8005bfa:	d03b      	beq.n	8005c74 <HAL_DMA_IRQHandler+0x678>
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	4a26      	ldr	r2, [pc, #152]	@ (8005c9c <HAL_DMA_IRQHandler+0x6a0>)
 8005c02:	4293      	cmp	r3, r2
 8005c04:	d036      	beq.n	8005c74 <HAL_DMA_IRQHandler+0x678>
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	4a25      	ldr	r2, [pc, #148]	@ (8005ca0 <HAL_DMA_IRQHandler+0x6a4>)
 8005c0c:	4293      	cmp	r3, r2
 8005c0e:	d031      	beq.n	8005c74 <HAL_DMA_IRQHandler+0x678>
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	4a23      	ldr	r2, [pc, #140]	@ (8005ca4 <HAL_DMA_IRQHandler+0x6a8>)
 8005c16:	4293      	cmp	r3, r2
 8005c18:	d02c      	beq.n	8005c74 <HAL_DMA_IRQHandler+0x678>
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	4a22      	ldr	r2, [pc, #136]	@ (8005ca8 <HAL_DMA_IRQHandler+0x6ac>)
 8005c20:	4293      	cmp	r3, r2
 8005c22:	d027      	beq.n	8005c74 <HAL_DMA_IRQHandler+0x678>
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	4a20      	ldr	r2, [pc, #128]	@ (8005cac <HAL_DMA_IRQHandler+0x6b0>)
 8005c2a:	4293      	cmp	r3, r2
 8005c2c:	d022      	beq.n	8005c74 <HAL_DMA_IRQHandler+0x678>
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	4a1f      	ldr	r2, [pc, #124]	@ (8005cb0 <HAL_DMA_IRQHandler+0x6b4>)
 8005c34:	4293      	cmp	r3, r2
 8005c36:	d01d      	beq.n	8005c74 <HAL_DMA_IRQHandler+0x678>
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	4a1d      	ldr	r2, [pc, #116]	@ (8005cb4 <HAL_DMA_IRQHandler+0x6b8>)
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	d018      	beq.n	8005c74 <HAL_DMA_IRQHandler+0x678>
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	4a1c      	ldr	r2, [pc, #112]	@ (8005cb8 <HAL_DMA_IRQHandler+0x6bc>)
 8005c48:	4293      	cmp	r3, r2
 8005c4a:	d013      	beq.n	8005c74 <HAL_DMA_IRQHandler+0x678>
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	4a1a      	ldr	r2, [pc, #104]	@ (8005cbc <HAL_DMA_IRQHandler+0x6c0>)
 8005c52:	4293      	cmp	r3, r2
 8005c54:	d00e      	beq.n	8005c74 <HAL_DMA_IRQHandler+0x678>
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	4a19      	ldr	r2, [pc, #100]	@ (8005cc0 <HAL_DMA_IRQHandler+0x6c4>)
 8005c5c:	4293      	cmp	r3, r2
 8005c5e:	d009      	beq.n	8005c74 <HAL_DMA_IRQHandler+0x678>
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	4a17      	ldr	r2, [pc, #92]	@ (8005cc4 <HAL_DMA_IRQHandler+0x6c8>)
 8005c66:	4293      	cmp	r3, r2
 8005c68:	d004      	beq.n	8005c74 <HAL_DMA_IRQHandler+0x678>
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	4a16      	ldr	r2, [pc, #88]	@ (8005cc8 <HAL_DMA_IRQHandler+0x6cc>)
 8005c70:	4293      	cmp	r3, r2
 8005c72:	d12b      	bne.n	8005ccc <HAL_DMA_IRQHandler+0x6d0>
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f003 0310 	and.w	r3, r3, #16
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	bf14      	ite	ne
 8005c82:	2301      	movne	r3, #1
 8005c84:	2300      	moveq	r3, #0
 8005c86:	b2db      	uxtb	r3, r3
 8005c88:	e02a      	b.n	8005ce0 <HAL_DMA_IRQHandler+0x6e4>
 8005c8a:	bf00      	nop
 8005c8c:	40020010 	.word	0x40020010
 8005c90:	40020028 	.word	0x40020028
 8005c94:	40020040 	.word	0x40020040
 8005c98:	40020058 	.word	0x40020058
 8005c9c:	40020070 	.word	0x40020070
 8005ca0:	40020088 	.word	0x40020088
 8005ca4:	400200a0 	.word	0x400200a0
 8005ca8:	400200b8 	.word	0x400200b8
 8005cac:	40020410 	.word	0x40020410
 8005cb0:	40020428 	.word	0x40020428
 8005cb4:	40020440 	.word	0x40020440
 8005cb8:	40020458 	.word	0x40020458
 8005cbc:	40020470 	.word	0x40020470
 8005cc0:	40020488 	.word	0x40020488
 8005cc4:	400204a0 	.word	0x400204a0
 8005cc8:	400204b8 	.word	0x400204b8
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f003 0302 	and.w	r3, r3, #2
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	bf14      	ite	ne
 8005cda:	2301      	movne	r3, #1
 8005cdc:	2300      	moveq	r3, #0
 8005cde:	b2db      	uxtb	r3, r3
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	f000 8087 	beq.w	8005df4 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005cea:	f003 031f 	and.w	r3, r3, #31
 8005cee:	2220      	movs	r2, #32
 8005cf0:	409a      	lsls	r2, r3
 8005cf2:	6a3b      	ldr	r3, [r7, #32]
 8005cf4:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005cfc:	b2db      	uxtb	r3, r3
 8005cfe:	2b04      	cmp	r3, #4
 8005d00:	d139      	bne.n	8005d76 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	681a      	ldr	r2, [r3, #0]
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f022 0216 	bic.w	r2, r2, #22
 8005d10:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	695a      	ldr	r2, [r3, #20]
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005d20:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d103      	bne.n	8005d32 <HAL_DMA_IRQHandler+0x736>
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d007      	beq.n	8005d42 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	681a      	ldr	r2, [r3, #0]
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f022 0208 	bic.w	r2, r2, #8
 8005d40:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d46:	f003 031f 	and.w	r3, r3, #31
 8005d4a:	223f      	movs	r2, #63	@ 0x3f
 8005d4c:	409a      	lsls	r2, r3
 8005d4e:	6a3b      	ldr	r3, [r7, #32]
 8005d50:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	2201      	movs	r2, #1
 8005d56:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	2200      	movs	r2, #0
 8005d5e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	f000 834a 	beq.w	8006400 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d70:	6878      	ldr	r0, [r7, #4]
 8005d72:	4798      	blx	r3
          }
          return;
 8005d74:	e344      	b.n	8006400 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d018      	beq.n	8005db6 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d108      	bne.n	8005da4 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d02c      	beq.n	8005df4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d9e:	6878      	ldr	r0, [r7, #4]
 8005da0:	4798      	blx	r3
 8005da2:	e027      	b.n	8005df4 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d023      	beq.n	8005df4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005db0:	6878      	ldr	r0, [r7, #4]
 8005db2:	4798      	blx	r3
 8005db4:	e01e      	b.n	8005df4 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d10f      	bne.n	8005de4 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	681a      	ldr	r2, [r3, #0]
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f022 0210 	bic.w	r2, r2, #16
 8005dd2:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2201      	movs	r2, #1
 8005dd8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2200      	movs	r2, #0
 8005de0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d003      	beq.n	8005df4 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005df0:	6878      	ldr	r0, [r7, #4]
 8005df2:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	f000 8306 	beq.w	800640a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e02:	f003 0301 	and.w	r3, r3, #1
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	f000 8088 	beq.w	8005f1c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2204      	movs	r2, #4
 8005e10:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	4a7a      	ldr	r2, [pc, #488]	@ (8006004 <HAL_DMA_IRQHandler+0xa08>)
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	d04a      	beq.n	8005eb4 <HAL_DMA_IRQHandler+0x8b8>
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	4a79      	ldr	r2, [pc, #484]	@ (8006008 <HAL_DMA_IRQHandler+0xa0c>)
 8005e24:	4293      	cmp	r3, r2
 8005e26:	d045      	beq.n	8005eb4 <HAL_DMA_IRQHandler+0x8b8>
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	4a77      	ldr	r2, [pc, #476]	@ (800600c <HAL_DMA_IRQHandler+0xa10>)
 8005e2e:	4293      	cmp	r3, r2
 8005e30:	d040      	beq.n	8005eb4 <HAL_DMA_IRQHandler+0x8b8>
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	4a76      	ldr	r2, [pc, #472]	@ (8006010 <HAL_DMA_IRQHandler+0xa14>)
 8005e38:	4293      	cmp	r3, r2
 8005e3a:	d03b      	beq.n	8005eb4 <HAL_DMA_IRQHandler+0x8b8>
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	4a74      	ldr	r2, [pc, #464]	@ (8006014 <HAL_DMA_IRQHandler+0xa18>)
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d036      	beq.n	8005eb4 <HAL_DMA_IRQHandler+0x8b8>
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	4a73      	ldr	r2, [pc, #460]	@ (8006018 <HAL_DMA_IRQHandler+0xa1c>)
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	d031      	beq.n	8005eb4 <HAL_DMA_IRQHandler+0x8b8>
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	4a71      	ldr	r2, [pc, #452]	@ (800601c <HAL_DMA_IRQHandler+0xa20>)
 8005e56:	4293      	cmp	r3, r2
 8005e58:	d02c      	beq.n	8005eb4 <HAL_DMA_IRQHandler+0x8b8>
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	4a70      	ldr	r2, [pc, #448]	@ (8006020 <HAL_DMA_IRQHandler+0xa24>)
 8005e60:	4293      	cmp	r3, r2
 8005e62:	d027      	beq.n	8005eb4 <HAL_DMA_IRQHandler+0x8b8>
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	4a6e      	ldr	r2, [pc, #440]	@ (8006024 <HAL_DMA_IRQHandler+0xa28>)
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d022      	beq.n	8005eb4 <HAL_DMA_IRQHandler+0x8b8>
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	4a6d      	ldr	r2, [pc, #436]	@ (8006028 <HAL_DMA_IRQHandler+0xa2c>)
 8005e74:	4293      	cmp	r3, r2
 8005e76:	d01d      	beq.n	8005eb4 <HAL_DMA_IRQHandler+0x8b8>
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	4a6b      	ldr	r2, [pc, #428]	@ (800602c <HAL_DMA_IRQHandler+0xa30>)
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d018      	beq.n	8005eb4 <HAL_DMA_IRQHandler+0x8b8>
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	4a6a      	ldr	r2, [pc, #424]	@ (8006030 <HAL_DMA_IRQHandler+0xa34>)
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	d013      	beq.n	8005eb4 <HAL_DMA_IRQHandler+0x8b8>
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	4a68      	ldr	r2, [pc, #416]	@ (8006034 <HAL_DMA_IRQHandler+0xa38>)
 8005e92:	4293      	cmp	r3, r2
 8005e94:	d00e      	beq.n	8005eb4 <HAL_DMA_IRQHandler+0x8b8>
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	4a67      	ldr	r2, [pc, #412]	@ (8006038 <HAL_DMA_IRQHandler+0xa3c>)
 8005e9c:	4293      	cmp	r3, r2
 8005e9e:	d009      	beq.n	8005eb4 <HAL_DMA_IRQHandler+0x8b8>
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	4a65      	ldr	r2, [pc, #404]	@ (800603c <HAL_DMA_IRQHandler+0xa40>)
 8005ea6:	4293      	cmp	r3, r2
 8005ea8:	d004      	beq.n	8005eb4 <HAL_DMA_IRQHandler+0x8b8>
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	4a64      	ldr	r2, [pc, #400]	@ (8006040 <HAL_DMA_IRQHandler+0xa44>)
 8005eb0:	4293      	cmp	r3, r2
 8005eb2:	d108      	bne.n	8005ec6 <HAL_DMA_IRQHandler+0x8ca>
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	681a      	ldr	r2, [r3, #0]
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f022 0201 	bic.w	r2, r2, #1
 8005ec2:	601a      	str	r2, [r3, #0]
 8005ec4:	e007      	b.n	8005ed6 <HAL_DMA_IRQHandler+0x8da>
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	681a      	ldr	r2, [r3, #0]
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f022 0201 	bic.w	r2, r2, #1
 8005ed4:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	3301      	adds	r3, #1
 8005eda:	60fb      	str	r3, [r7, #12]
 8005edc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ede:	429a      	cmp	r2, r3
 8005ee0:	d307      	bcc.n	8005ef2 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f003 0301 	and.w	r3, r3, #1
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d1f2      	bne.n	8005ed6 <HAL_DMA_IRQHandler+0x8da>
 8005ef0:	e000      	b.n	8005ef4 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8005ef2:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f003 0301 	and.w	r3, r3, #1
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d004      	beq.n	8005f0c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	2203      	movs	r2, #3
 8005f06:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8005f0a:	e003      	b.n	8005f14 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2201      	movs	r2, #1
 8005f10:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2200      	movs	r2, #0
 8005f18:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	f000 8272 	beq.w	800640a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005f2a:	6878      	ldr	r0, [r7, #4]
 8005f2c:	4798      	blx	r3
 8005f2e:	e26c      	b.n	800640a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	4a43      	ldr	r2, [pc, #268]	@ (8006044 <HAL_DMA_IRQHandler+0xa48>)
 8005f36:	4293      	cmp	r3, r2
 8005f38:	d022      	beq.n	8005f80 <HAL_DMA_IRQHandler+0x984>
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	4a42      	ldr	r2, [pc, #264]	@ (8006048 <HAL_DMA_IRQHandler+0xa4c>)
 8005f40:	4293      	cmp	r3, r2
 8005f42:	d01d      	beq.n	8005f80 <HAL_DMA_IRQHandler+0x984>
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	4a40      	ldr	r2, [pc, #256]	@ (800604c <HAL_DMA_IRQHandler+0xa50>)
 8005f4a:	4293      	cmp	r3, r2
 8005f4c:	d018      	beq.n	8005f80 <HAL_DMA_IRQHandler+0x984>
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	4a3f      	ldr	r2, [pc, #252]	@ (8006050 <HAL_DMA_IRQHandler+0xa54>)
 8005f54:	4293      	cmp	r3, r2
 8005f56:	d013      	beq.n	8005f80 <HAL_DMA_IRQHandler+0x984>
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	4a3d      	ldr	r2, [pc, #244]	@ (8006054 <HAL_DMA_IRQHandler+0xa58>)
 8005f5e:	4293      	cmp	r3, r2
 8005f60:	d00e      	beq.n	8005f80 <HAL_DMA_IRQHandler+0x984>
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	4a3c      	ldr	r2, [pc, #240]	@ (8006058 <HAL_DMA_IRQHandler+0xa5c>)
 8005f68:	4293      	cmp	r3, r2
 8005f6a:	d009      	beq.n	8005f80 <HAL_DMA_IRQHandler+0x984>
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	4a3a      	ldr	r2, [pc, #232]	@ (800605c <HAL_DMA_IRQHandler+0xa60>)
 8005f72:	4293      	cmp	r3, r2
 8005f74:	d004      	beq.n	8005f80 <HAL_DMA_IRQHandler+0x984>
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	4a39      	ldr	r2, [pc, #228]	@ (8006060 <HAL_DMA_IRQHandler+0xa64>)
 8005f7c:	4293      	cmp	r3, r2
 8005f7e:	d101      	bne.n	8005f84 <HAL_DMA_IRQHandler+0x988>
 8005f80:	2301      	movs	r3, #1
 8005f82:	e000      	b.n	8005f86 <HAL_DMA_IRQHandler+0x98a>
 8005f84:	2300      	movs	r3, #0
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	f000 823f 	beq.w	800640a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f98:	f003 031f 	and.w	r3, r3, #31
 8005f9c:	2204      	movs	r2, #4
 8005f9e:	409a      	lsls	r2, r3
 8005fa0:	697b      	ldr	r3, [r7, #20]
 8005fa2:	4013      	ands	r3, r2
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	f000 80cd 	beq.w	8006144 <HAL_DMA_IRQHandler+0xb48>
 8005faa:	693b      	ldr	r3, [r7, #16]
 8005fac:	f003 0304 	and.w	r3, r3, #4
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	f000 80c7 	beq.w	8006144 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005fba:	f003 031f 	and.w	r3, r3, #31
 8005fbe:	2204      	movs	r2, #4
 8005fc0:	409a      	lsls	r2, r3
 8005fc2:	69fb      	ldr	r3, [r7, #28]
 8005fc4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005fc6:	693b      	ldr	r3, [r7, #16]
 8005fc8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d049      	beq.n	8006064 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005fd0:	693b      	ldr	r3, [r7, #16]
 8005fd2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d109      	bne.n	8005fee <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	f000 8210 	beq.w	8006404 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005fe8:	6878      	ldr	r0, [r7, #4]
 8005fea:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005fec:	e20a      	b.n	8006404 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	f000 8206 	beq.w	8006404 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ffc:	6878      	ldr	r0, [r7, #4]
 8005ffe:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006000:	e200      	b.n	8006404 <HAL_DMA_IRQHandler+0xe08>
 8006002:	bf00      	nop
 8006004:	40020010 	.word	0x40020010
 8006008:	40020028 	.word	0x40020028
 800600c:	40020040 	.word	0x40020040
 8006010:	40020058 	.word	0x40020058
 8006014:	40020070 	.word	0x40020070
 8006018:	40020088 	.word	0x40020088
 800601c:	400200a0 	.word	0x400200a0
 8006020:	400200b8 	.word	0x400200b8
 8006024:	40020410 	.word	0x40020410
 8006028:	40020428 	.word	0x40020428
 800602c:	40020440 	.word	0x40020440
 8006030:	40020458 	.word	0x40020458
 8006034:	40020470 	.word	0x40020470
 8006038:	40020488 	.word	0x40020488
 800603c:	400204a0 	.word	0x400204a0
 8006040:	400204b8 	.word	0x400204b8
 8006044:	58025408 	.word	0x58025408
 8006048:	5802541c 	.word	0x5802541c
 800604c:	58025430 	.word	0x58025430
 8006050:	58025444 	.word	0x58025444
 8006054:	58025458 	.word	0x58025458
 8006058:	5802546c 	.word	0x5802546c
 800605c:	58025480 	.word	0x58025480
 8006060:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006064:	693b      	ldr	r3, [r7, #16]
 8006066:	f003 0320 	and.w	r3, r3, #32
 800606a:	2b00      	cmp	r3, #0
 800606c:	d160      	bne.n	8006130 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	4a7f      	ldr	r2, [pc, #508]	@ (8006270 <HAL_DMA_IRQHandler+0xc74>)
 8006074:	4293      	cmp	r3, r2
 8006076:	d04a      	beq.n	800610e <HAL_DMA_IRQHandler+0xb12>
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	4a7d      	ldr	r2, [pc, #500]	@ (8006274 <HAL_DMA_IRQHandler+0xc78>)
 800607e:	4293      	cmp	r3, r2
 8006080:	d045      	beq.n	800610e <HAL_DMA_IRQHandler+0xb12>
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	4a7c      	ldr	r2, [pc, #496]	@ (8006278 <HAL_DMA_IRQHandler+0xc7c>)
 8006088:	4293      	cmp	r3, r2
 800608a:	d040      	beq.n	800610e <HAL_DMA_IRQHandler+0xb12>
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	4a7a      	ldr	r2, [pc, #488]	@ (800627c <HAL_DMA_IRQHandler+0xc80>)
 8006092:	4293      	cmp	r3, r2
 8006094:	d03b      	beq.n	800610e <HAL_DMA_IRQHandler+0xb12>
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	4a79      	ldr	r2, [pc, #484]	@ (8006280 <HAL_DMA_IRQHandler+0xc84>)
 800609c:	4293      	cmp	r3, r2
 800609e:	d036      	beq.n	800610e <HAL_DMA_IRQHandler+0xb12>
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	4a77      	ldr	r2, [pc, #476]	@ (8006284 <HAL_DMA_IRQHandler+0xc88>)
 80060a6:	4293      	cmp	r3, r2
 80060a8:	d031      	beq.n	800610e <HAL_DMA_IRQHandler+0xb12>
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	4a76      	ldr	r2, [pc, #472]	@ (8006288 <HAL_DMA_IRQHandler+0xc8c>)
 80060b0:	4293      	cmp	r3, r2
 80060b2:	d02c      	beq.n	800610e <HAL_DMA_IRQHandler+0xb12>
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	4a74      	ldr	r2, [pc, #464]	@ (800628c <HAL_DMA_IRQHandler+0xc90>)
 80060ba:	4293      	cmp	r3, r2
 80060bc:	d027      	beq.n	800610e <HAL_DMA_IRQHandler+0xb12>
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	4a73      	ldr	r2, [pc, #460]	@ (8006290 <HAL_DMA_IRQHandler+0xc94>)
 80060c4:	4293      	cmp	r3, r2
 80060c6:	d022      	beq.n	800610e <HAL_DMA_IRQHandler+0xb12>
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	4a71      	ldr	r2, [pc, #452]	@ (8006294 <HAL_DMA_IRQHandler+0xc98>)
 80060ce:	4293      	cmp	r3, r2
 80060d0:	d01d      	beq.n	800610e <HAL_DMA_IRQHandler+0xb12>
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	4a70      	ldr	r2, [pc, #448]	@ (8006298 <HAL_DMA_IRQHandler+0xc9c>)
 80060d8:	4293      	cmp	r3, r2
 80060da:	d018      	beq.n	800610e <HAL_DMA_IRQHandler+0xb12>
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	4a6e      	ldr	r2, [pc, #440]	@ (800629c <HAL_DMA_IRQHandler+0xca0>)
 80060e2:	4293      	cmp	r3, r2
 80060e4:	d013      	beq.n	800610e <HAL_DMA_IRQHandler+0xb12>
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	4a6d      	ldr	r2, [pc, #436]	@ (80062a0 <HAL_DMA_IRQHandler+0xca4>)
 80060ec:	4293      	cmp	r3, r2
 80060ee:	d00e      	beq.n	800610e <HAL_DMA_IRQHandler+0xb12>
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	4a6b      	ldr	r2, [pc, #428]	@ (80062a4 <HAL_DMA_IRQHandler+0xca8>)
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d009      	beq.n	800610e <HAL_DMA_IRQHandler+0xb12>
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	4a6a      	ldr	r2, [pc, #424]	@ (80062a8 <HAL_DMA_IRQHandler+0xcac>)
 8006100:	4293      	cmp	r3, r2
 8006102:	d004      	beq.n	800610e <HAL_DMA_IRQHandler+0xb12>
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	4a68      	ldr	r2, [pc, #416]	@ (80062ac <HAL_DMA_IRQHandler+0xcb0>)
 800610a:	4293      	cmp	r3, r2
 800610c:	d108      	bne.n	8006120 <HAL_DMA_IRQHandler+0xb24>
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	681a      	ldr	r2, [r3, #0]
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f022 0208 	bic.w	r2, r2, #8
 800611c:	601a      	str	r2, [r3, #0]
 800611e:	e007      	b.n	8006130 <HAL_DMA_IRQHandler+0xb34>
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	681a      	ldr	r2, [r3, #0]
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f022 0204 	bic.w	r2, r2, #4
 800612e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006134:	2b00      	cmp	r3, #0
 8006136:	f000 8165 	beq.w	8006404 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800613e:	6878      	ldr	r0, [r7, #4]
 8006140:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006142:	e15f      	b.n	8006404 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006148:	f003 031f 	and.w	r3, r3, #31
 800614c:	2202      	movs	r2, #2
 800614e:	409a      	lsls	r2, r3
 8006150:	697b      	ldr	r3, [r7, #20]
 8006152:	4013      	ands	r3, r2
 8006154:	2b00      	cmp	r3, #0
 8006156:	f000 80c5 	beq.w	80062e4 <HAL_DMA_IRQHandler+0xce8>
 800615a:	693b      	ldr	r3, [r7, #16]
 800615c:	f003 0302 	and.w	r3, r3, #2
 8006160:	2b00      	cmp	r3, #0
 8006162:	f000 80bf 	beq.w	80062e4 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800616a:	f003 031f 	and.w	r3, r3, #31
 800616e:	2202      	movs	r2, #2
 8006170:	409a      	lsls	r2, r3
 8006172:	69fb      	ldr	r3, [r7, #28]
 8006174:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006176:	693b      	ldr	r3, [r7, #16]
 8006178:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800617c:	2b00      	cmp	r3, #0
 800617e:	d018      	beq.n	80061b2 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006180:	693b      	ldr	r3, [r7, #16]
 8006182:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006186:	2b00      	cmp	r3, #0
 8006188:	d109      	bne.n	800619e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800618e:	2b00      	cmp	r3, #0
 8006190:	f000 813a 	beq.w	8006408 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006198:	6878      	ldr	r0, [r7, #4]
 800619a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800619c:	e134      	b.n	8006408 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	f000 8130 	beq.w	8006408 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061ac:	6878      	ldr	r0, [r7, #4]
 80061ae:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80061b0:	e12a      	b.n	8006408 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80061b2:	693b      	ldr	r3, [r7, #16]
 80061b4:	f003 0320 	and.w	r3, r3, #32
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	f040 8089 	bne.w	80062d0 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	4a2b      	ldr	r2, [pc, #172]	@ (8006270 <HAL_DMA_IRQHandler+0xc74>)
 80061c4:	4293      	cmp	r3, r2
 80061c6:	d04a      	beq.n	800625e <HAL_DMA_IRQHandler+0xc62>
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	4a29      	ldr	r2, [pc, #164]	@ (8006274 <HAL_DMA_IRQHandler+0xc78>)
 80061ce:	4293      	cmp	r3, r2
 80061d0:	d045      	beq.n	800625e <HAL_DMA_IRQHandler+0xc62>
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	4a28      	ldr	r2, [pc, #160]	@ (8006278 <HAL_DMA_IRQHandler+0xc7c>)
 80061d8:	4293      	cmp	r3, r2
 80061da:	d040      	beq.n	800625e <HAL_DMA_IRQHandler+0xc62>
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	4a26      	ldr	r2, [pc, #152]	@ (800627c <HAL_DMA_IRQHandler+0xc80>)
 80061e2:	4293      	cmp	r3, r2
 80061e4:	d03b      	beq.n	800625e <HAL_DMA_IRQHandler+0xc62>
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	4a25      	ldr	r2, [pc, #148]	@ (8006280 <HAL_DMA_IRQHandler+0xc84>)
 80061ec:	4293      	cmp	r3, r2
 80061ee:	d036      	beq.n	800625e <HAL_DMA_IRQHandler+0xc62>
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	4a23      	ldr	r2, [pc, #140]	@ (8006284 <HAL_DMA_IRQHandler+0xc88>)
 80061f6:	4293      	cmp	r3, r2
 80061f8:	d031      	beq.n	800625e <HAL_DMA_IRQHandler+0xc62>
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	4a22      	ldr	r2, [pc, #136]	@ (8006288 <HAL_DMA_IRQHandler+0xc8c>)
 8006200:	4293      	cmp	r3, r2
 8006202:	d02c      	beq.n	800625e <HAL_DMA_IRQHandler+0xc62>
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	4a20      	ldr	r2, [pc, #128]	@ (800628c <HAL_DMA_IRQHandler+0xc90>)
 800620a:	4293      	cmp	r3, r2
 800620c:	d027      	beq.n	800625e <HAL_DMA_IRQHandler+0xc62>
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	4a1f      	ldr	r2, [pc, #124]	@ (8006290 <HAL_DMA_IRQHandler+0xc94>)
 8006214:	4293      	cmp	r3, r2
 8006216:	d022      	beq.n	800625e <HAL_DMA_IRQHandler+0xc62>
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	4a1d      	ldr	r2, [pc, #116]	@ (8006294 <HAL_DMA_IRQHandler+0xc98>)
 800621e:	4293      	cmp	r3, r2
 8006220:	d01d      	beq.n	800625e <HAL_DMA_IRQHandler+0xc62>
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	4a1c      	ldr	r2, [pc, #112]	@ (8006298 <HAL_DMA_IRQHandler+0xc9c>)
 8006228:	4293      	cmp	r3, r2
 800622a:	d018      	beq.n	800625e <HAL_DMA_IRQHandler+0xc62>
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	4a1a      	ldr	r2, [pc, #104]	@ (800629c <HAL_DMA_IRQHandler+0xca0>)
 8006232:	4293      	cmp	r3, r2
 8006234:	d013      	beq.n	800625e <HAL_DMA_IRQHandler+0xc62>
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	4a19      	ldr	r2, [pc, #100]	@ (80062a0 <HAL_DMA_IRQHandler+0xca4>)
 800623c:	4293      	cmp	r3, r2
 800623e:	d00e      	beq.n	800625e <HAL_DMA_IRQHandler+0xc62>
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	4a17      	ldr	r2, [pc, #92]	@ (80062a4 <HAL_DMA_IRQHandler+0xca8>)
 8006246:	4293      	cmp	r3, r2
 8006248:	d009      	beq.n	800625e <HAL_DMA_IRQHandler+0xc62>
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	4a16      	ldr	r2, [pc, #88]	@ (80062a8 <HAL_DMA_IRQHandler+0xcac>)
 8006250:	4293      	cmp	r3, r2
 8006252:	d004      	beq.n	800625e <HAL_DMA_IRQHandler+0xc62>
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	4a14      	ldr	r2, [pc, #80]	@ (80062ac <HAL_DMA_IRQHandler+0xcb0>)
 800625a:	4293      	cmp	r3, r2
 800625c:	d128      	bne.n	80062b0 <HAL_DMA_IRQHandler+0xcb4>
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	681a      	ldr	r2, [r3, #0]
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f022 0214 	bic.w	r2, r2, #20
 800626c:	601a      	str	r2, [r3, #0]
 800626e:	e027      	b.n	80062c0 <HAL_DMA_IRQHandler+0xcc4>
 8006270:	40020010 	.word	0x40020010
 8006274:	40020028 	.word	0x40020028
 8006278:	40020040 	.word	0x40020040
 800627c:	40020058 	.word	0x40020058
 8006280:	40020070 	.word	0x40020070
 8006284:	40020088 	.word	0x40020088
 8006288:	400200a0 	.word	0x400200a0
 800628c:	400200b8 	.word	0x400200b8
 8006290:	40020410 	.word	0x40020410
 8006294:	40020428 	.word	0x40020428
 8006298:	40020440 	.word	0x40020440
 800629c:	40020458 	.word	0x40020458
 80062a0:	40020470 	.word	0x40020470
 80062a4:	40020488 	.word	0x40020488
 80062a8:	400204a0 	.word	0x400204a0
 80062ac:	400204b8 	.word	0x400204b8
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	681a      	ldr	r2, [r3, #0]
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f022 020a 	bic.w	r2, r2, #10
 80062be:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2201      	movs	r2, #1
 80062c4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2200      	movs	r2, #0
 80062cc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	f000 8097 	beq.w	8006408 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062de:	6878      	ldr	r0, [r7, #4]
 80062e0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80062e2:	e091      	b.n	8006408 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80062e8:	f003 031f 	and.w	r3, r3, #31
 80062ec:	2208      	movs	r2, #8
 80062ee:	409a      	lsls	r2, r3
 80062f0:	697b      	ldr	r3, [r7, #20]
 80062f2:	4013      	ands	r3, r2
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	f000 8088 	beq.w	800640a <HAL_DMA_IRQHandler+0xe0e>
 80062fa:	693b      	ldr	r3, [r7, #16]
 80062fc:	f003 0308 	and.w	r3, r3, #8
 8006300:	2b00      	cmp	r3, #0
 8006302:	f000 8082 	beq.w	800640a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	4a41      	ldr	r2, [pc, #260]	@ (8006410 <HAL_DMA_IRQHandler+0xe14>)
 800630c:	4293      	cmp	r3, r2
 800630e:	d04a      	beq.n	80063a6 <HAL_DMA_IRQHandler+0xdaa>
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	4a3f      	ldr	r2, [pc, #252]	@ (8006414 <HAL_DMA_IRQHandler+0xe18>)
 8006316:	4293      	cmp	r3, r2
 8006318:	d045      	beq.n	80063a6 <HAL_DMA_IRQHandler+0xdaa>
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	4a3e      	ldr	r2, [pc, #248]	@ (8006418 <HAL_DMA_IRQHandler+0xe1c>)
 8006320:	4293      	cmp	r3, r2
 8006322:	d040      	beq.n	80063a6 <HAL_DMA_IRQHandler+0xdaa>
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	4a3c      	ldr	r2, [pc, #240]	@ (800641c <HAL_DMA_IRQHandler+0xe20>)
 800632a:	4293      	cmp	r3, r2
 800632c:	d03b      	beq.n	80063a6 <HAL_DMA_IRQHandler+0xdaa>
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	4a3b      	ldr	r2, [pc, #236]	@ (8006420 <HAL_DMA_IRQHandler+0xe24>)
 8006334:	4293      	cmp	r3, r2
 8006336:	d036      	beq.n	80063a6 <HAL_DMA_IRQHandler+0xdaa>
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	4a39      	ldr	r2, [pc, #228]	@ (8006424 <HAL_DMA_IRQHandler+0xe28>)
 800633e:	4293      	cmp	r3, r2
 8006340:	d031      	beq.n	80063a6 <HAL_DMA_IRQHandler+0xdaa>
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	4a38      	ldr	r2, [pc, #224]	@ (8006428 <HAL_DMA_IRQHandler+0xe2c>)
 8006348:	4293      	cmp	r3, r2
 800634a:	d02c      	beq.n	80063a6 <HAL_DMA_IRQHandler+0xdaa>
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	4a36      	ldr	r2, [pc, #216]	@ (800642c <HAL_DMA_IRQHandler+0xe30>)
 8006352:	4293      	cmp	r3, r2
 8006354:	d027      	beq.n	80063a6 <HAL_DMA_IRQHandler+0xdaa>
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	4a35      	ldr	r2, [pc, #212]	@ (8006430 <HAL_DMA_IRQHandler+0xe34>)
 800635c:	4293      	cmp	r3, r2
 800635e:	d022      	beq.n	80063a6 <HAL_DMA_IRQHandler+0xdaa>
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	4a33      	ldr	r2, [pc, #204]	@ (8006434 <HAL_DMA_IRQHandler+0xe38>)
 8006366:	4293      	cmp	r3, r2
 8006368:	d01d      	beq.n	80063a6 <HAL_DMA_IRQHandler+0xdaa>
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	4a32      	ldr	r2, [pc, #200]	@ (8006438 <HAL_DMA_IRQHandler+0xe3c>)
 8006370:	4293      	cmp	r3, r2
 8006372:	d018      	beq.n	80063a6 <HAL_DMA_IRQHandler+0xdaa>
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	4a30      	ldr	r2, [pc, #192]	@ (800643c <HAL_DMA_IRQHandler+0xe40>)
 800637a:	4293      	cmp	r3, r2
 800637c:	d013      	beq.n	80063a6 <HAL_DMA_IRQHandler+0xdaa>
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	4a2f      	ldr	r2, [pc, #188]	@ (8006440 <HAL_DMA_IRQHandler+0xe44>)
 8006384:	4293      	cmp	r3, r2
 8006386:	d00e      	beq.n	80063a6 <HAL_DMA_IRQHandler+0xdaa>
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	4a2d      	ldr	r2, [pc, #180]	@ (8006444 <HAL_DMA_IRQHandler+0xe48>)
 800638e:	4293      	cmp	r3, r2
 8006390:	d009      	beq.n	80063a6 <HAL_DMA_IRQHandler+0xdaa>
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	4a2c      	ldr	r2, [pc, #176]	@ (8006448 <HAL_DMA_IRQHandler+0xe4c>)
 8006398:	4293      	cmp	r3, r2
 800639a:	d004      	beq.n	80063a6 <HAL_DMA_IRQHandler+0xdaa>
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	4a2a      	ldr	r2, [pc, #168]	@ (800644c <HAL_DMA_IRQHandler+0xe50>)
 80063a2:	4293      	cmp	r3, r2
 80063a4:	d108      	bne.n	80063b8 <HAL_DMA_IRQHandler+0xdbc>
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	681a      	ldr	r2, [r3, #0]
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	f022 021c 	bic.w	r2, r2, #28
 80063b4:	601a      	str	r2, [r3, #0]
 80063b6:	e007      	b.n	80063c8 <HAL_DMA_IRQHandler+0xdcc>
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	681a      	ldr	r2, [r3, #0]
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f022 020e 	bic.w	r2, r2, #14
 80063c6:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80063cc:	f003 031f 	and.w	r3, r3, #31
 80063d0:	2201      	movs	r2, #1
 80063d2:	409a      	lsls	r2, r3
 80063d4:	69fb      	ldr	r3, [r7, #28]
 80063d6:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2201      	movs	r2, #1
 80063dc:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	2201      	movs	r2, #1
 80063e2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	2200      	movs	r2, #0
 80063ea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d009      	beq.n	800640a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80063fa:	6878      	ldr	r0, [r7, #4]
 80063fc:	4798      	blx	r3
 80063fe:	e004      	b.n	800640a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8006400:	bf00      	nop
 8006402:	e002      	b.n	800640a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006404:	bf00      	nop
 8006406:	e000      	b.n	800640a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006408:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800640a:	3728      	adds	r7, #40	@ 0x28
 800640c:	46bd      	mov	sp, r7
 800640e:	bd80      	pop	{r7, pc}
 8006410:	40020010 	.word	0x40020010
 8006414:	40020028 	.word	0x40020028
 8006418:	40020040 	.word	0x40020040
 800641c:	40020058 	.word	0x40020058
 8006420:	40020070 	.word	0x40020070
 8006424:	40020088 	.word	0x40020088
 8006428:	400200a0 	.word	0x400200a0
 800642c:	400200b8 	.word	0x400200b8
 8006430:	40020410 	.word	0x40020410
 8006434:	40020428 	.word	0x40020428
 8006438:	40020440 	.word	0x40020440
 800643c:	40020458 	.word	0x40020458
 8006440:	40020470 	.word	0x40020470
 8006444:	40020488 	.word	0x40020488
 8006448:	400204a0 	.word	0x400204a0
 800644c:	400204b8 	.word	0x400204b8

08006450 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006450:	b480      	push	{r7}
 8006452:	b085      	sub	sp, #20
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	4a42      	ldr	r2, [pc, #264]	@ (8006568 <DMA_CalcBaseAndBitshift+0x118>)
 800645e:	4293      	cmp	r3, r2
 8006460:	d04a      	beq.n	80064f8 <DMA_CalcBaseAndBitshift+0xa8>
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	4a41      	ldr	r2, [pc, #260]	@ (800656c <DMA_CalcBaseAndBitshift+0x11c>)
 8006468:	4293      	cmp	r3, r2
 800646a:	d045      	beq.n	80064f8 <DMA_CalcBaseAndBitshift+0xa8>
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	4a3f      	ldr	r2, [pc, #252]	@ (8006570 <DMA_CalcBaseAndBitshift+0x120>)
 8006472:	4293      	cmp	r3, r2
 8006474:	d040      	beq.n	80064f8 <DMA_CalcBaseAndBitshift+0xa8>
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	4a3e      	ldr	r2, [pc, #248]	@ (8006574 <DMA_CalcBaseAndBitshift+0x124>)
 800647c:	4293      	cmp	r3, r2
 800647e:	d03b      	beq.n	80064f8 <DMA_CalcBaseAndBitshift+0xa8>
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	4a3c      	ldr	r2, [pc, #240]	@ (8006578 <DMA_CalcBaseAndBitshift+0x128>)
 8006486:	4293      	cmp	r3, r2
 8006488:	d036      	beq.n	80064f8 <DMA_CalcBaseAndBitshift+0xa8>
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	4a3b      	ldr	r2, [pc, #236]	@ (800657c <DMA_CalcBaseAndBitshift+0x12c>)
 8006490:	4293      	cmp	r3, r2
 8006492:	d031      	beq.n	80064f8 <DMA_CalcBaseAndBitshift+0xa8>
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	4a39      	ldr	r2, [pc, #228]	@ (8006580 <DMA_CalcBaseAndBitshift+0x130>)
 800649a:	4293      	cmp	r3, r2
 800649c:	d02c      	beq.n	80064f8 <DMA_CalcBaseAndBitshift+0xa8>
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	4a38      	ldr	r2, [pc, #224]	@ (8006584 <DMA_CalcBaseAndBitshift+0x134>)
 80064a4:	4293      	cmp	r3, r2
 80064a6:	d027      	beq.n	80064f8 <DMA_CalcBaseAndBitshift+0xa8>
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	4a36      	ldr	r2, [pc, #216]	@ (8006588 <DMA_CalcBaseAndBitshift+0x138>)
 80064ae:	4293      	cmp	r3, r2
 80064b0:	d022      	beq.n	80064f8 <DMA_CalcBaseAndBitshift+0xa8>
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	4a35      	ldr	r2, [pc, #212]	@ (800658c <DMA_CalcBaseAndBitshift+0x13c>)
 80064b8:	4293      	cmp	r3, r2
 80064ba:	d01d      	beq.n	80064f8 <DMA_CalcBaseAndBitshift+0xa8>
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	4a33      	ldr	r2, [pc, #204]	@ (8006590 <DMA_CalcBaseAndBitshift+0x140>)
 80064c2:	4293      	cmp	r3, r2
 80064c4:	d018      	beq.n	80064f8 <DMA_CalcBaseAndBitshift+0xa8>
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	4a32      	ldr	r2, [pc, #200]	@ (8006594 <DMA_CalcBaseAndBitshift+0x144>)
 80064cc:	4293      	cmp	r3, r2
 80064ce:	d013      	beq.n	80064f8 <DMA_CalcBaseAndBitshift+0xa8>
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	4a30      	ldr	r2, [pc, #192]	@ (8006598 <DMA_CalcBaseAndBitshift+0x148>)
 80064d6:	4293      	cmp	r3, r2
 80064d8:	d00e      	beq.n	80064f8 <DMA_CalcBaseAndBitshift+0xa8>
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	4a2f      	ldr	r2, [pc, #188]	@ (800659c <DMA_CalcBaseAndBitshift+0x14c>)
 80064e0:	4293      	cmp	r3, r2
 80064e2:	d009      	beq.n	80064f8 <DMA_CalcBaseAndBitshift+0xa8>
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	4a2d      	ldr	r2, [pc, #180]	@ (80065a0 <DMA_CalcBaseAndBitshift+0x150>)
 80064ea:	4293      	cmp	r3, r2
 80064ec:	d004      	beq.n	80064f8 <DMA_CalcBaseAndBitshift+0xa8>
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	4a2c      	ldr	r2, [pc, #176]	@ (80065a4 <DMA_CalcBaseAndBitshift+0x154>)
 80064f4:	4293      	cmp	r3, r2
 80064f6:	d101      	bne.n	80064fc <DMA_CalcBaseAndBitshift+0xac>
 80064f8:	2301      	movs	r3, #1
 80064fa:	e000      	b.n	80064fe <DMA_CalcBaseAndBitshift+0xae>
 80064fc:	2300      	movs	r3, #0
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d024      	beq.n	800654c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	b2db      	uxtb	r3, r3
 8006508:	3b10      	subs	r3, #16
 800650a:	4a27      	ldr	r2, [pc, #156]	@ (80065a8 <DMA_CalcBaseAndBitshift+0x158>)
 800650c:	fba2 2303 	umull	r2, r3, r2, r3
 8006510:	091b      	lsrs	r3, r3, #4
 8006512:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	f003 0307 	and.w	r3, r3, #7
 800651a:	4a24      	ldr	r2, [pc, #144]	@ (80065ac <DMA_CalcBaseAndBitshift+0x15c>)
 800651c:	5cd3      	ldrb	r3, [r2, r3]
 800651e:	461a      	mov	r2, r3
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	2b03      	cmp	r3, #3
 8006528:	d908      	bls.n	800653c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	461a      	mov	r2, r3
 8006530:	4b1f      	ldr	r3, [pc, #124]	@ (80065b0 <DMA_CalcBaseAndBitshift+0x160>)
 8006532:	4013      	ands	r3, r2
 8006534:	1d1a      	adds	r2, r3, #4
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	659a      	str	r2, [r3, #88]	@ 0x58
 800653a:	e00d      	b.n	8006558 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	461a      	mov	r2, r3
 8006542:	4b1b      	ldr	r3, [pc, #108]	@ (80065b0 <DMA_CalcBaseAndBitshift+0x160>)
 8006544:	4013      	ands	r3, r2
 8006546:	687a      	ldr	r2, [r7, #4]
 8006548:	6593      	str	r3, [r2, #88]	@ 0x58
 800654a:	e005      	b.n	8006558 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800655c:	4618      	mov	r0, r3
 800655e:	3714      	adds	r7, #20
 8006560:	46bd      	mov	sp, r7
 8006562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006566:	4770      	bx	lr
 8006568:	40020010 	.word	0x40020010
 800656c:	40020028 	.word	0x40020028
 8006570:	40020040 	.word	0x40020040
 8006574:	40020058 	.word	0x40020058
 8006578:	40020070 	.word	0x40020070
 800657c:	40020088 	.word	0x40020088
 8006580:	400200a0 	.word	0x400200a0
 8006584:	400200b8 	.word	0x400200b8
 8006588:	40020410 	.word	0x40020410
 800658c:	40020428 	.word	0x40020428
 8006590:	40020440 	.word	0x40020440
 8006594:	40020458 	.word	0x40020458
 8006598:	40020470 	.word	0x40020470
 800659c:	40020488 	.word	0x40020488
 80065a0:	400204a0 	.word	0x400204a0
 80065a4:	400204b8 	.word	0x400204b8
 80065a8:	aaaaaaab 	.word	0xaaaaaaab
 80065ac:	08013ad0 	.word	0x08013ad0
 80065b0:	fffffc00 	.word	0xfffffc00

080065b4 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80065b4:	b480      	push	{r7}
 80065b6:	b085      	sub	sp, #20
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80065bc:	2300      	movs	r3, #0
 80065be:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	699b      	ldr	r3, [r3, #24]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d120      	bne.n	800660a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065cc:	2b03      	cmp	r3, #3
 80065ce:	d858      	bhi.n	8006682 <DMA_CheckFifoParam+0xce>
 80065d0:	a201      	add	r2, pc, #4	@ (adr r2, 80065d8 <DMA_CheckFifoParam+0x24>)
 80065d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065d6:	bf00      	nop
 80065d8:	080065e9 	.word	0x080065e9
 80065dc:	080065fb 	.word	0x080065fb
 80065e0:	080065e9 	.word	0x080065e9
 80065e4:	08006683 	.word	0x08006683
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065ec:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d048      	beq.n	8006686 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80065f4:	2301      	movs	r3, #1
 80065f6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80065f8:	e045      	b.n	8006686 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065fe:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006602:	d142      	bne.n	800668a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8006604:	2301      	movs	r3, #1
 8006606:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006608:	e03f      	b.n	800668a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	699b      	ldr	r3, [r3, #24]
 800660e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006612:	d123      	bne.n	800665c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006618:	2b03      	cmp	r3, #3
 800661a:	d838      	bhi.n	800668e <DMA_CheckFifoParam+0xda>
 800661c:	a201      	add	r2, pc, #4	@ (adr r2, 8006624 <DMA_CheckFifoParam+0x70>)
 800661e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006622:	bf00      	nop
 8006624:	08006635 	.word	0x08006635
 8006628:	0800663b 	.word	0x0800663b
 800662c:	08006635 	.word	0x08006635
 8006630:	0800664d 	.word	0x0800664d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8006634:	2301      	movs	r3, #1
 8006636:	73fb      	strb	r3, [r7, #15]
        break;
 8006638:	e030      	b.n	800669c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800663e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006642:	2b00      	cmp	r3, #0
 8006644:	d025      	beq.n	8006692 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8006646:	2301      	movs	r3, #1
 8006648:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800664a:	e022      	b.n	8006692 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006650:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006654:	d11f      	bne.n	8006696 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8006656:	2301      	movs	r3, #1
 8006658:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800665a:	e01c      	b.n	8006696 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006660:	2b02      	cmp	r3, #2
 8006662:	d902      	bls.n	800666a <DMA_CheckFifoParam+0xb6>
 8006664:	2b03      	cmp	r3, #3
 8006666:	d003      	beq.n	8006670 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8006668:	e018      	b.n	800669c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800666a:	2301      	movs	r3, #1
 800666c:	73fb      	strb	r3, [r7, #15]
        break;
 800666e:	e015      	b.n	800669c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006674:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006678:	2b00      	cmp	r3, #0
 800667a:	d00e      	beq.n	800669a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800667c:	2301      	movs	r3, #1
 800667e:	73fb      	strb	r3, [r7, #15]
    break;
 8006680:	e00b      	b.n	800669a <DMA_CheckFifoParam+0xe6>
        break;
 8006682:	bf00      	nop
 8006684:	e00a      	b.n	800669c <DMA_CheckFifoParam+0xe8>
        break;
 8006686:	bf00      	nop
 8006688:	e008      	b.n	800669c <DMA_CheckFifoParam+0xe8>
        break;
 800668a:	bf00      	nop
 800668c:	e006      	b.n	800669c <DMA_CheckFifoParam+0xe8>
        break;
 800668e:	bf00      	nop
 8006690:	e004      	b.n	800669c <DMA_CheckFifoParam+0xe8>
        break;
 8006692:	bf00      	nop
 8006694:	e002      	b.n	800669c <DMA_CheckFifoParam+0xe8>
        break;
 8006696:	bf00      	nop
 8006698:	e000      	b.n	800669c <DMA_CheckFifoParam+0xe8>
    break;
 800669a:	bf00      	nop
    }
  }

  return status;
 800669c:	7bfb      	ldrb	r3, [r7, #15]
}
 800669e:	4618      	mov	r0, r3
 80066a0:	3714      	adds	r7, #20
 80066a2:	46bd      	mov	sp, r7
 80066a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a8:	4770      	bx	lr
 80066aa:	bf00      	nop

080066ac <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80066ac:	b480      	push	{r7}
 80066ae:	b085      	sub	sp, #20
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	4a38      	ldr	r2, [pc, #224]	@ (80067a0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80066c0:	4293      	cmp	r3, r2
 80066c2:	d022      	beq.n	800670a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	4a36      	ldr	r2, [pc, #216]	@ (80067a4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80066ca:	4293      	cmp	r3, r2
 80066cc:	d01d      	beq.n	800670a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	4a35      	ldr	r2, [pc, #212]	@ (80067a8 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80066d4:	4293      	cmp	r3, r2
 80066d6:	d018      	beq.n	800670a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	4a33      	ldr	r2, [pc, #204]	@ (80067ac <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80066de:	4293      	cmp	r3, r2
 80066e0:	d013      	beq.n	800670a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	4a32      	ldr	r2, [pc, #200]	@ (80067b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80066e8:	4293      	cmp	r3, r2
 80066ea:	d00e      	beq.n	800670a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	4a30      	ldr	r2, [pc, #192]	@ (80067b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80066f2:	4293      	cmp	r3, r2
 80066f4:	d009      	beq.n	800670a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	4a2f      	ldr	r2, [pc, #188]	@ (80067b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80066fc:	4293      	cmp	r3, r2
 80066fe:	d004      	beq.n	800670a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	4a2d      	ldr	r2, [pc, #180]	@ (80067bc <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8006706:	4293      	cmp	r3, r2
 8006708:	d101      	bne.n	800670e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800670a:	2301      	movs	r3, #1
 800670c:	e000      	b.n	8006710 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800670e:	2300      	movs	r3, #0
 8006710:	2b00      	cmp	r3, #0
 8006712:	d01a      	beq.n	800674a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	b2db      	uxtb	r3, r3
 800671a:	3b08      	subs	r3, #8
 800671c:	4a28      	ldr	r2, [pc, #160]	@ (80067c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800671e:	fba2 2303 	umull	r2, r3, r2, r3
 8006722:	091b      	lsrs	r3, r3, #4
 8006724:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8006726:	68fa      	ldr	r2, [r7, #12]
 8006728:	4b26      	ldr	r3, [pc, #152]	@ (80067c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800672a:	4413      	add	r3, r2
 800672c:	009b      	lsls	r3, r3, #2
 800672e:	461a      	mov	r2, r3
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	4a24      	ldr	r2, [pc, #144]	@ (80067c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8006738:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	f003 031f 	and.w	r3, r3, #31
 8006740:	2201      	movs	r2, #1
 8006742:	409a      	lsls	r2, r3
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8006748:	e024      	b.n	8006794 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	b2db      	uxtb	r3, r3
 8006750:	3b10      	subs	r3, #16
 8006752:	4a1e      	ldr	r2, [pc, #120]	@ (80067cc <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8006754:	fba2 2303 	umull	r2, r3, r2, r3
 8006758:	091b      	lsrs	r3, r3, #4
 800675a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800675c:	68bb      	ldr	r3, [r7, #8]
 800675e:	4a1c      	ldr	r2, [pc, #112]	@ (80067d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8006760:	4293      	cmp	r3, r2
 8006762:	d806      	bhi.n	8006772 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8006764:	68bb      	ldr	r3, [r7, #8]
 8006766:	4a1b      	ldr	r2, [pc, #108]	@ (80067d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8006768:	4293      	cmp	r3, r2
 800676a:	d902      	bls.n	8006772 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	3308      	adds	r3, #8
 8006770:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8006772:	68fa      	ldr	r2, [r7, #12]
 8006774:	4b18      	ldr	r3, [pc, #96]	@ (80067d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8006776:	4413      	add	r3, r2
 8006778:	009b      	lsls	r3, r3, #2
 800677a:	461a      	mov	r2, r3
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	4a16      	ldr	r2, [pc, #88]	@ (80067dc <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8006784:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	f003 031f 	and.w	r3, r3, #31
 800678c:	2201      	movs	r2, #1
 800678e:	409a      	lsls	r2, r3
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006794:	bf00      	nop
 8006796:	3714      	adds	r7, #20
 8006798:	46bd      	mov	sp, r7
 800679a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679e:	4770      	bx	lr
 80067a0:	58025408 	.word	0x58025408
 80067a4:	5802541c 	.word	0x5802541c
 80067a8:	58025430 	.word	0x58025430
 80067ac:	58025444 	.word	0x58025444
 80067b0:	58025458 	.word	0x58025458
 80067b4:	5802546c 	.word	0x5802546c
 80067b8:	58025480 	.word	0x58025480
 80067bc:	58025494 	.word	0x58025494
 80067c0:	cccccccd 	.word	0xcccccccd
 80067c4:	16009600 	.word	0x16009600
 80067c8:	58025880 	.word	0x58025880
 80067cc:	aaaaaaab 	.word	0xaaaaaaab
 80067d0:	400204b8 	.word	0x400204b8
 80067d4:	4002040f 	.word	0x4002040f
 80067d8:	10008200 	.word	0x10008200
 80067dc:	40020880 	.word	0x40020880

080067e0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80067e0:	b480      	push	{r7}
 80067e2:	b085      	sub	sp, #20
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	685b      	ldr	r3, [r3, #4]
 80067ec:	b2db      	uxtb	r3, r3
 80067ee:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d04a      	beq.n	800688c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	2b08      	cmp	r3, #8
 80067fa:	d847      	bhi.n	800688c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	4a25      	ldr	r2, [pc, #148]	@ (8006898 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8006802:	4293      	cmp	r3, r2
 8006804:	d022      	beq.n	800684c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	4a24      	ldr	r2, [pc, #144]	@ (800689c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800680c:	4293      	cmp	r3, r2
 800680e:	d01d      	beq.n	800684c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	4a22      	ldr	r2, [pc, #136]	@ (80068a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8006816:	4293      	cmp	r3, r2
 8006818:	d018      	beq.n	800684c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	4a21      	ldr	r2, [pc, #132]	@ (80068a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8006820:	4293      	cmp	r3, r2
 8006822:	d013      	beq.n	800684c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	4a1f      	ldr	r2, [pc, #124]	@ (80068a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800682a:	4293      	cmp	r3, r2
 800682c:	d00e      	beq.n	800684c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	4a1e      	ldr	r2, [pc, #120]	@ (80068ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8006834:	4293      	cmp	r3, r2
 8006836:	d009      	beq.n	800684c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	4a1c      	ldr	r2, [pc, #112]	@ (80068b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800683e:	4293      	cmp	r3, r2
 8006840:	d004      	beq.n	800684c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	4a1b      	ldr	r2, [pc, #108]	@ (80068b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8006848:	4293      	cmp	r3, r2
 800684a:	d101      	bne.n	8006850 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800684c:	2301      	movs	r3, #1
 800684e:	e000      	b.n	8006852 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8006850:	2300      	movs	r3, #0
 8006852:	2b00      	cmp	r3, #0
 8006854:	d00a      	beq.n	800686c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8006856:	68fa      	ldr	r2, [r7, #12]
 8006858:	4b17      	ldr	r3, [pc, #92]	@ (80068b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800685a:	4413      	add	r3, r2
 800685c:	009b      	lsls	r3, r3, #2
 800685e:	461a      	mov	r2, r3
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	4a15      	ldr	r2, [pc, #84]	@ (80068bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8006868:	671a      	str	r2, [r3, #112]	@ 0x70
 800686a:	e009      	b.n	8006880 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800686c:	68fa      	ldr	r2, [r7, #12]
 800686e:	4b14      	ldr	r3, [pc, #80]	@ (80068c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8006870:	4413      	add	r3, r2
 8006872:	009b      	lsls	r3, r3, #2
 8006874:	461a      	mov	r2, r3
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	4a11      	ldr	r2, [pc, #68]	@ (80068c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800687e:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	3b01      	subs	r3, #1
 8006884:	2201      	movs	r2, #1
 8006886:	409a      	lsls	r2, r3
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 800688c:	bf00      	nop
 800688e:	3714      	adds	r7, #20
 8006890:	46bd      	mov	sp, r7
 8006892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006896:	4770      	bx	lr
 8006898:	58025408 	.word	0x58025408
 800689c:	5802541c 	.word	0x5802541c
 80068a0:	58025430 	.word	0x58025430
 80068a4:	58025444 	.word	0x58025444
 80068a8:	58025458 	.word	0x58025458
 80068ac:	5802546c 	.word	0x5802546c
 80068b0:	58025480 	.word	0x58025480
 80068b4:	58025494 	.word	0x58025494
 80068b8:	1600963f 	.word	0x1600963f
 80068bc:	58025940 	.word	0x58025940
 80068c0:	1000823f 	.word	0x1000823f
 80068c4:	40020940 	.word	0x40020940

080068c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80068c8:	b480      	push	{r7}
 80068ca:	b089      	sub	sp, #36	@ 0x24
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
 80068d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80068d2:	2300      	movs	r3, #0
 80068d4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80068d6:	4b89      	ldr	r3, [pc, #548]	@ (8006afc <HAL_GPIO_Init+0x234>)
 80068d8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80068da:	e194      	b.n	8006c06 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80068dc:	683b      	ldr	r3, [r7, #0]
 80068de:	681a      	ldr	r2, [r3, #0]
 80068e0:	2101      	movs	r1, #1
 80068e2:	69fb      	ldr	r3, [r7, #28]
 80068e4:	fa01 f303 	lsl.w	r3, r1, r3
 80068e8:	4013      	ands	r3, r2
 80068ea:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80068ec:	693b      	ldr	r3, [r7, #16]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	f000 8186 	beq.w	8006c00 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80068f4:	683b      	ldr	r3, [r7, #0]
 80068f6:	685b      	ldr	r3, [r3, #4]
 80068f8:	f003 0303 	and.w	r3, r3, #3
 80068fc:	2b01      	cmp	r3, #1
 80068fe:	d005      	beq.n	800690c <HAL_GPIO_Init+0x44>
 8006900:	683b      	ldr	r3, [r7, #0]
 8006902:	685b      	ldr	r3, [r3, #4]
 8006904:	f003 0303 	and.w	r3, r3, #3
 8006908:	2b02      	cmp	r3, #2
 800690a:	d130      	bne.n	800696e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	689b      	ldr	r3, [r3, #8]
 8006910:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006912:	69fb      	ldr	r3, [r7, #28]
 8006914:	005b      	lsls	r3, r3, #1
 8006916:	2203      	movs	r2, #3
 8006918:	fa02 f303 	lsl.w	r3, r2, r3
 800691c:	43db      	mvns	r3, r3
 800691e:	69ba      	ldr	r2, [r7, #24]
 8006920:	4013      	ands	r3, r2
 8006922:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006924:	683b      	ldr	r3, [r7, #0]
 8006926:	68da      	ldr	r2, [r3, #12]
 8006928:	69fb      	ldr	r3, [r7, #28]
 800692a:	005b      	lsls	r3, r3, #1
 800692c:	fa02 f303 	lsl.w	r3, r2, r3
 8006930:	69ba      	ldr	r2, [r7, #24]
 8006932:	4313      	orrs	r3, r2
 8006934:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	69ba      	ldr	r2, [r7, #24]
 800693a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	685b      	ldr	r3, [r3, #4]
 8006940:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006942:	2201      	movs	r2, #1
 8006944:	69fb      	ldr	r3, [r7, #28]
 8006946:	fa02 f303 	lsl.w	r3, r2, r3
 800694a:	43db      	mvns	r3, r3
 800694c:	69ba      	ldr	r2, [r7, #24]
 800694e:	4013      	ands	r3, r2
 8006950:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006952:	683b      	ldr	r3, [r7, #0]
 8006954:	685b      	ldr	r3, [r3, #4]
 8006956:	091b      	lsrs	r3, r3, #4
 8006958:	f003 0201 	and.w	r2, r3, #1
 800695c:	69fb      	ldr	r3, [r7, #28]
 800695e:	fa02 f303 	lsl.w	r3, r2, r3
 8006962:	69ba      	ldr	r2, [r7, #24]
 8006964:	4313      	orrs	r3, r2
 8006966:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	69ba      	ldr	r2, [r7, #24]
 800696c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800696e:	683b      	ldr	r3, [r7, #0]
 8006970:	685b      	ldr	r3, [r3, #4]
 8006972:	f003 0303 	and.w	r3, r3, #3
 8006976:	2b03      	cmp	r3, #3
 8006978:	d017      	beq.n	80069aa <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	68db      	ldr	r3, [r3, #12]
 800697e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006980:	69fb      	ldr	r3, [r7, #28]
 8006982:	005b      	lsls	r3, r3, #1
 8006984:	2203      	movs	r2, #3
 8006986:	fa02 f303 	lsl.w	r3, r2, r3
 800698a:	43db      	mvns	r3, r3
 800698c:	69ba      	ldr	r2, [r7, #24]
 800698e:	4013      	ands	r3, r2
 8006990:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006992:	683b      	ldr	r3, [r7, #0]
 8006994:	689a      	ldr	r2, [r3, #8]
 8006996:	69fb      	ldr	r3, [r7, #28]
 8006998:	005b      	lsls	r3, r3, #1
 800699a:	fa02 f303 	lsl.w	r3, r2, r3
 800699e:	69ba      	ldr	r2, [r7, #24]
 80069a0:	4313      	orrs	r3, r2
 80069a2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	69ba      	ldr	r2, [r7, #24]
 80069a8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80069aa:	683b      	ldr	r3, [r7, #0]
 80069ac:	685b      	ldr	r3, [r3, #4]
 80069ae:	f003 0303 	and.w	r3, r3, #3
 80069b2:	2b02      	cmp	r3, #2
 80069b4:	d123      	bne.n	80069fe <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80069b6:	69fb      	ldr	r3, [r7, #28]
 80069b8:	08da      	lsrs	r2, r3, #3
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	3208      	adds	r2, #8
 80069be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80069c4:	69fb      	ldr	r3, [r7, #28]
 80069c6:	f003 0307 	and.w	r3, r3, #7
 80069ca:	009b      	lsls	r3, r3, #2
 80069cc:	220f      	movs	r2, #15
 80069ce:	fa02 f303 	lsl.w	r3, r2, r3
 80069d2:	43db      	mvns	r3, r3
 80069d4:	69ba      	ldr	r2, [r7, #24]
 80069d6:	4013      	ands	r3, r2
 80069d8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	691a      	ldr	r2, [r3, #16]
 80069de:	69fb      	ldr	r3, [r7, #28]
 80069e0:	f003 0307 	and.w	r3, r3, #7
 80069e4:	009b      	lsls	r3, r3, #2
 80069e6:	fa02 f303 	lsl.w	r3, r2, r3
 80069ea:	69ba      	ldr	r2, [r7, #24]
 80069ec:	4313      	orrs	r3, r2
 80069ee:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80069f0:	69fb      	ldr	r3, [r7, #28]
 80069f2:	08da      	lsrs	r2, r3, #3
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	3208      	adds	r2, #8
 80069f8:	69b9      	ldr	r1, [r7, #24]
 80069fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006a04:	69fb      	ldr	r3, [r7, #28]
 8006a06:	005b      	lsls	r3, r3, #1
 8006a08:	2203      	movs	r2, #3
 8006a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8006a0e:	43db      	mvns	r3, r3
 8006a10:	69ba      	ldr	r2, [r7, #24]
 8006a12:	4013      	ands	r3, r2
 8006a14:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006a16:	683b      	ldr	r3, [r7, #0]
 8006a18:	685b      	ldr	r3, [r3, #4]
 8006a1a:	f003 0203 	and.w	r2, r3, #3
 8006a1e:	69fb      	ldr	r3, [r7, #28]
 8006a20:	005b      	lsls	r3, r3, #1
 8006a22:	fa02 f303 	lsl.w	r3, r2, r3
 8006a26:	69ba      	ldr	r2, [r7, #24]
 8006a28:	4313      	orrs	r3, r2
 8006a2a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	69ba      	ldr	r2, [r7, #24]
 8006a30:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006a32:	683b      	ldr	r3, [r7, #0]
 8006a34:	685b      	ldr	r3, [r3, #4]
 8006a36:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	f000 80e0 	beq.w	8006c00 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006a40:	4b2f      	ldr	r3, [pc, #188]	@ (8006b00 <HAL_GPIO_Init+0x238>)
 8006a42:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006a46:	4a2e      	ldr	r2, [pc, #184]	@ (8006b00 <HAL_GPIO_Init+0x238>)
 8006a48:	f043 0302 	orr.w	r3, r3, #2
 8006a4c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8006a50:	4b2b      	ldr	r3, [pc, #172]	@ (8006b00 <HAL_GPIO_Init+0x238>)
 8006a52:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006a56:	f003 0302 	and.w	r3, r3, #2
 8006a5a:	60fb      	str	r3, [r7, #12]
 8006a5c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006a5e:	4a29      	ldr	r2, [pc, #164]	@ (8006b04 <HAL_GPIO_Init+0x23c>)
 8006a60:	69fb      	ldr	r3, [r7, #28]
 8006a62:	089b      	lsrs	r3, r3, #2
 8006a64:	3302      	adds	r3, #2
 8006a66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006a6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006a6c:	69fb      	ldr	r3, [r7, #28]
 8006a6e:	f003 0303 	and.w	r3, r3, #3
 8006a72:	009b      	lsls	r3, r3, #2
 8006a74:	220f      	movs	r2, #15
 8006a76:	fa02 f303 	lsl.w	r3, r2, r3
 8006a7a:	43db      	mvns	r3, r3
 8006a7c:	69ba      	ldr	r2, [r7, #24]
 8006a7e:	4013      	ands	r3, r2
 8006a80:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	4a20      	ldr	r2, [pc, #128]	@ (8006b08 <HAL_GPIO_Init+0x240>)
 8006a86:	4293      	cmp	r3, r2
 8006a88:	d052      	beq.n	8006b30 <HAL_GPIO_Init+0x268>
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	4a1f      	ldr	r2, [pc, #124]	@ (8006b0c <HAL_GPIO_Init+0x244>)
 8006a8e:	4293      	cmp	r3, r2
 8006a90:	d031      	beq.n	8006af6 <HAL_GPIO_Init+0x22e>
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	4a1e      	ldr	r2, [pc, #120]	@ (8006b10 <HAL_GPIO_Init+0x248>)
 8006a96:	4293      	cmp	r3, r2
 8006a98:	d02b      	beq.n	8006af2 <HAL_GPIO_Init+0x22a>
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	4a1d      	ldr	r2, [pc, #116]	@ (8006b14 <HAL_GPIO_Init+0x24c>)
 8006a9e:	4293      	cmp	r3, r2
 8006aa0:	d025      	beq.n	8006aee <HAL_GPIO_Init+0x226>
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	4a1c      	ldr	r2, [pc, #112]	@ (8006b18 <HAL_GPIO_Init+0x250>)
 8006aa6:	4293      	cmp	r3, r2
 8006aa8:	d01f      	beq.n	8006aea <HAL_GPIO_Init+0x222>
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	4a1b      	ldr	r2, [pc, #108]	@ (8006b1c <HAL_GPIO_Init+0x254>)
 8006aae:	4293      	cmp	r3, r2
 8006ab0:	d019      	beq.n	8006ae6 <HAL_GPIO_Init+0x21e>
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	4a1a      	ldr	r2, [pc, #104]	@ (8006b20 <HAL_GPIO_Init+0x258>)
 8006ab6:	4293      	cmp	r3, r2
 8006ab8:	d013      	beq.n	8006ae2 <HAL_GPIO_Init+0x21a>
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	4a19      	ldr	r2, [pc, #100]	@ (8006b24 <HAL_GPIO_Init+0x25c>)
 8006abe:	4293      	cmp	r3, r2
 8006ac0:	d00d      	beq.n	8006ade <HAL_GPIO_Init+0x216>
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	4a18      	ldr	r2, [pc, #96]	@ (8006b28 <HAL_GPIO_Init+0x260>)
 8006ac6:	4293      	cmp	r3, r2
 8006ac8:	d007      	beq.n	8006ada <HAL_GPIO_Init+0x212>
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	4a17      	ldr	r2, [pc, #92]	@ (8006b2c <HAL_GPIO_Init+0x264>)
 8006ace:	4293      	cmp	r3, r2
 8006ad0:	d101      	bne.n	8006ad6 <HAL_GPIO_Init+0x20e>
 8006ad2:	2309      	movs	r3, #9
 8006ad4:	e02d      	b.n	8006b32 <HAL_GPIO_Init+0x26a>
 8006ad6:	230a      	movs	r3, #10
 8006ad8:	e02b      	b.n	8006b32 <HAL_GPIO_Init+0x26a>
 8006ada:	2308      	movs	r3, #8
 8006adc:	e029      	b.n	8006b32 <HAL_GPIO_Init+0x26a>
 8006ade:	2307      	movs	r3, #7
 8006ae0:	e027      	b.n	8006b32 <HAL_GPIO_Init+0x26a>
 8006ae2:	2306      	movs	r3, #6
 8006ae4:	e025      	b.n	8006b32 <HAL_GPIO_Init+0x26a>
 8006ae6:	2305      	movs	r3, #5
 8006ae8:	e023      	b.n	8006b32 <HAL_GPIO_Init+0x26a>
 8006aea:	2304      	movs	r3, #4
 8006aec:	e021      	b.n	8006b32 <HAL_GPIO_Init+0x26a>
 8006aee:	2303      	movs	r3, #3
 8006af0:	e01f      	b.n	8006b32 <HAL_GPIO_Init+0x26a>
 8006af2:	2302      	movs	r3, #2
 8006af4:	e01d      	b.n	8006b32 <HAL_GPIO_Init+0x26a>
 8006af6:	2301      	movs	r3, #1
 8006af8:	e01b      	b.n	8006b32 <HAL_GPIO_Init+0x26a>
 8006afa:	bf00      	nop
 8006afc:	58000080 	.word	0x58000080
 8006b00:	58024400 	.word	0x58024400
 8006b04:	58000400 	.word	0x58000400
 8006b08:	58020000 	.word	0x58020000
 8006b0c:	58020400 	.word	0x58020400
 8006b10:	58020800 	.word	0x58020800
 8006b14:	58020c00 	.word	0x58020c00
 8006b18:	58021000 	.word	0x58021000
 8006b1c:	58021400 	.word	0x58021400
 8006b20:	58021800 	.word	0x58021800
 8006b24:	58021c00 	.word	0x58021c00
 8006b28:	58022000 	.word	0x58022000
 8006b2c:	58022400 	.word	0x58022400
 8006b30:	2300      	movs	r3, #0
 8006b32:	69fa      	ldr	r2, [r7, #28]
 8006b34:	f002 0203 	and.w	r2, r2, #3
 8006b38:	0092      	lsls	r2, r2, #2
 8006b3a:	4093      	lsls	r3, r2
 8006b3c:	69ba      	ldr	r2, [r7, #24]
 8006b3e:	4313      	orrs	r3, r2
 8006b40:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006b42:	4938      	ldr	r1, [pc, #224]	@ (8006c24 <HAL_GPIO_Init+0x35c>)
 8006b44:	69fb      	ldr	r3, [r7, #28]
 8006b46:	089b      	lsrs	r3, r3, #2
 8006b48:	3302      	adds	r3, #2
 8006b4a:	69ba      	ldr	r2, [r7, #24]
 8006b4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006b50:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006b58:	693b      	ldr	r3, [r7, #16]
 8006b5a:	43db      	mvns	r3, r3
 8006b5c:	69ba      	ldr	r2, [r7, #24]
 8006b5e:	4013      	ands	r3, r2
 8006b60:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006b62:	683b      	ldr	r3, [r7, #0]
 8006b64:	685b      	ldr	r3, [r3, #4]
 8006b66:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d003      	beq.n	8006b76 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8006b6e:	69ba      	ldr	r2, [r7, #24]
 8006b70:	693b      	ldr	r3, [r7, #16]
 8006b72:	4313      	orrs	r3, r2
 8006b74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8006b76:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006b7a:	69bb      	ldr	r3, [r7, #24]
 8006b7c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8006b7e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006b82:	685b      	ldr	r3, [r3, #4]
 8006b84:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006b86:	693b      	ldr	r3, [r7, #16]
 8006b88:	43db      	mvns	r3, r3
 8006b8a:	69ba      	ldr	r2, [r7, #24]
 8006b8c:	4013      	ands	r3, r2
 8006b8e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006b90:	683b      	ldr	r3, [r7, #0]
 8006b92:	685b      	ldr	r3, [r3, #4]
 8006b94:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d003      	beq.n	8006ba4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8006b9c:	69ba      	ldr	r2, [r7, #24]
 8006b9e:	693b      	ldr	r3, [r7, #16]
 8006ba0:	4313      	orrs	r3, r2
 8006ba2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8006ba4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006ba8:	69bb      	ldr	r3, [r7, #24]
 8006baa:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8006bac:	697b      	ldr	r3, [r7, #20]
 8006bae:	685b      	ldr	r3, [r3, #4]
 8006bb0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006bb2:	693b      	ldr	r3, [r7, #16]
 8006bb4:	43db      	mvns	r3, r3
 8006bb6:	69ba      	ldr	r2, [r7, #24]
 8006bb8:	4013      	ands	r3, r2
 8006bba:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006bbc:	683b      	ldr	r3, [r7, #0]
 8006bbe:	685b      	ldr	r3, [r3, #4]
 8006bc0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d003      	beq.n	8006bd0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8006bc8:	69ba      	ldr	r2, [r7, #24]
 8006bca:	693b      	ldr	r3, [r7, #16]
 8006bcc:	4313      	orrs	r3, r2
 8006bce:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8006bd0:	697b      	ldr	r3, [r7, #20]
 8006bd2:	69ba      	ldr	r2, [r7, #24]
 8006bd4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8006bd6:	697b      	ldr	r3, [r7, #20]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006bdc:	693b      	ldr	r3, [r7, #16]
 8006bde:	43db      	mvns	r3, r3
 8006be0:	69ba      	ldr	r2, [r7, #24]
 8006be2:	4013      	ands	r3, r2
 8006be4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006be6:	683b      	ldr	r3, [r7, #0]
 8006be8:	685b      	ldr	r3, [r3, #4]
 8006bea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d003      	beq.n	8006bfa <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8006bf2:	69ba      	ldr	r2, [r7, #24]
 8006bf4:	693b      	ldr	r3, [r7, #16]
 8006bf6:	4313      	orrs	r3, r2
 8006bf8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8006bfa:	697b      	ldr	r3, [r7, #20]
 8006bfc:	69ba      	ldr	r2, [r7, #24]
 8006bfe:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8006c00:	69fb      	ldr	r3, [r7, #28]
 8006c02:	3301      	adds	r3, #1
 8006c04:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006c06:	683b      	ldr	r3, [r7, #0]
 8006c08:	681a      	ldr	r2, [r3, #0]
 8006c0a:	69fb      	ldr	r3, [r7, #28]
 8006c0c:	fa22 f303 	lsr.w	r3, r2, r3
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	f47f ae63 	bne.w	80068dc <HAL_GPIO_Init+0x14>
  }
}
 8006c16:	bf00      	nop
 8006c18:	bf00      	nop
 8006c1a:	3724      	adds	r7, #36	@ 0x24
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c22:	4770      	bx	lr
 8006c24:	58000400 	.word	0x58000400

08006c28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006c28:	b480      	push	{r7}
 8006c2a:	b083      	sub	sp, #12
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
 8006c30:	460b      	mov	r3, r1
 8006c32:	807b      	strh	r3, [r7, #2]
 8006c34:	4613      	mov	r3, r2
 8006c36:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006c38:	787b      	ldrb	r3, [r7, #1]
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d003      	beq.n	8006c46 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006c3e:	887a      	ldrh	r2, [r7, #2]
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8006c44:	e003      	b.n	8006c4e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8006c46:	887b      	ldrh	r3, [r7, #2]
 8006c48:	041a      	lsls	r2, r3, #16
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	619a      	str	r2, [r3, #24]
}
 8006c4e:	bf00      	nop
 8006c50:	370c      	adds	r7, #12
 8006c52:	46bd      	mov	sp, r7
 8006c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c58:	4770      	bx	lr

08006c5a <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006c5a:	b580      	push	{r7, lr}
 8006c5c:	b082      	sub	sp, #8
 8006c5e:	af00      	add	r7, sp, #0
 8006c60:	4603      	mov	r3, r0
 8006c62:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8006c64:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006c68:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8006c6c:	88fb      	ldrh	r3, [r7, #6]
 8006c6e:	4013      	ands	r3, r2
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d008      	beq.n	8006c86 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006c74:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006c78:	88fb      	ldrh	r3, [r7, #6]
 8006c7a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006c7e:	88fb      	ldrh	r3, [r7, #6]
 8006c80:	4618      	mov	r0, r3
 8006c82:	f7fa ffeb 	bl	8001c5c <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8006c86:	bf00      	nop
 8006c88:	3708      	adds	r7, #8
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	bd80      	pop	{r7, pc}
	...

08006c90 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8006c90:	b480      	push	{r7}
 8006c92:	b083      	sub	sp, #12
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8006c98:	4a08      	ldr	r2, [pc, #32]	@ (8006cbc <HAL_HSEM_FastTake+0x2c>)
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	3320      	adds	r3, #32
 8006c9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006ca2:	4a07      	ldr	r2, [pc, #28]	@ (8006cc0 <HAL_HSEM_FastTake+0x30>)
 8006ca4:	4293      	cmp	r3, r2
 8006ca6:	d101      	bne.n	8006cac <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8006ca8:	2300      	movs	r3, #0
 8006caa:	e000      	b.n	8006cae <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8006cac:	2301      	movs	r3, #1
}
 8006cae:	4618      	mov	r0, r3
 8006cb0:	370c      	adds	r7, #12
 8006cb2:	46bd      	mov	sp, r7
 8006cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb8:	4770      	bx	lr
 8006cba:	bf00      	nop
 8006cbc:	58026400 	.word	0x58026400
 8006cc0:	80000300 	.word	0x80000300

08006cc4 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8006cc4:	b480      	push	{r7}
 8006cc6:	b083      	sub	sp, #12
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
 8006ccc:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8006cce:	4906      	ldr	r1, [pc, #24]	@ (8006ce8 <HAL_HSEM_Release+0x24>)
 8006cd0:	683b      	ldr	r3, [r7, #0]
 8006cd2:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8006cdc:	bf00      	nop
 8006cde:	370c      	adds	r7, #12
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce6:	4770      	bx	lr
 8006ce8:	58026400 	.word	0x58026400

08006cec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006cec:	b580      	push	{r7, lr}
 8006cee:	b082      	sub	sp, #8
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d101      	bne.n	8006cfe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006cfa:	2301      	movs	r3, #1
 8006cfc:	e08b      	b.n	8006e16 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006d04:	b2db      	uxtb	r3, r3
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d106      	bne.n	8006d18 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006d12:	6878      	ldr	r0, [r7, #4]
 8006d14:	f7fa fa7a 	bl	800120c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	2224      	movs	r2, #36	@ 0x24
 8006d1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	681a      	ldr	r2, [r3, #0]
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	f022 0201 	bic.w	r2, r2, #1
 8006d2e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	685a      	ldr	r2, [r3, #4]
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8006d3c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	689a      	ldr	r2, [r3, #8]
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006d4c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	68db      	ldr	r3, [r3, #12]
 8006d52:	2b01      	cmp	r3, #1
 8006d54:	d107      	bne.n	8006d66 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	689a      	ldr	r2, [r3, #8]
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006d62:	609a      	str	r2, [r3, #8]
 8006d64:	e006      	b.n	8006d74 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	689a      	ldr	r2, [r3, #8]
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8006d72:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	68db      	ldr	r3, [r3, #12]
 8006d78:	2b02      	cmp	r3, #2
 8006d7a:	d108      	bne.n	8006d8e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	685a      	ldr	r2, [r3, #4]
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006d8a:	605a      	str	r2, [r3, #4]
 8006d8c:	e007      	b.n	8006d9e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	685a      	ldr	r2, [r3, #4]
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006d9c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	6859      	ldr	r1, [r3, #4]
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681a      	ldr	r2, [r3, #0]
 8006da8:	4b1d      	ldr	r3, [pc, #116]	@ (8006e20 <HAL_I2C_Init+0x134>)
 8006daa:	430b      	orrs	r3, r1
 8006dac:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	68da      	ldr	r2, [r3, #12]
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006dbc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	691a      	ldr	r2, [r3, #16]
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	695b      	ldr	r3, [r3, #20]
 8006dc6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	699b      	ldr	r3, [r3, #24]
 8006dce:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	430a      	orrs	r2, r1
 8006dd6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	69d9      	ldr	r1, [r3, #28]
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	6a1a      	ldr	r2, [r3, #32]
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	430a      	orrs	r2, r1
 8006de6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	681a      	ldr	r2, [r3, #0]
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	f042 0201 	orr.w	r2, r2, #1
 8006df6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	2220      	movs	r2, #32
 8006e02:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	2200      	movs	r2, #0
 8006e0a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2200      	movs	r2, #0
 8006e10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8006e14:	2300      	movs	r3, #0
}
 8006e16:	4618      	mov	r0, r3
 8006e18:	3708      	adds	r7, #8
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	bd80      	pop	{r7, pc}
 8006e1e:	bf00      	nop
 8006e20:	02008000 	.word	0x02008000

08006e24 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8006e24:	b580      	push	{r7, lr}
 8006e26:	b088      	sub	sp, #32
 8006e28:	af02      	add	r7, sp, #8
 8006e2a:	60f8      	str	r0, [r7, #12]
 8006e2c:	607a      	str	r2, [r7, #4]
 8006e2e:	461a      	mov	r2, r3
 8006e30:	460b      	mov	r3, r1
 8006e32:	817b      	strh	r3, [r7, #10]
 8006e34:	4613      	mov	r3, r2
 8006e36:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006e3e:	b2db      	uxtb	r3, r3
 8006e40:	2b20      	cmp	r3, #32
 8006e42:	f040 80fd 	bne.w	8007040 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006e4c:	2b01      	cmp	r3, #1
 8006e4e:	d101      	bne.n	8006e54 <HAL_I2C_Master_Transmit+0x30>
 8006e50:	2302      	movs	r3, #2
 8006e52:	e0f6      	b.n	8007042 <HAL_I2C_Master_Transmit+0x21e>
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	2201      	movs	r2, #1
 8006e58:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006e5c:	f7fb fe7c 	bl	8002b58 <HAL_GetTick>
 8006e60:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006e62:	693b      	ldr	r3, [r7, #16]
 8006e64:	9300      	str	r3, [sp, #0]
 8006e66:	2319      	movs	r3, #25
 8006e68:	2201      	movs	r2, #1
 8006e6a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006e6e:	68f8      	ldr	r0, [r7, #12]
 8006e70:	f000 fa0a 	bl	8007288 <I2C_WaitOnFlagUntilTimeout>
 8006e74:	4603      	mov	r3, r0
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d001      	beq.n	8006e7e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8006e7a:	2301      	movs	r3, #1
 8006e7c:	e0e1      	b.n	8007042 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	2221      	movs	r2, #33	@ 0x21
 8006e82:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	2210      	movs	r2, #16
 8006e8a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	2200      	movs	r2, #0
 8006e92:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	687a      	ldr	r2, [r7, #4]
 8006e98:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	893a      	ldrh	r2, [r7, #8]
 8006e9e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006eaa:	b29b      	uxth	r3, r3
 8006eac:	2bff      	cmp	r3, #255	@ 0xff
 8006eae:	d906      	bls.n	8006ebe <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	22ff      	movs	r2, #255	@ 0xff
 8006eb4:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8006eb6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006eba:	617b      	str	r3, [r7, #20]
 8006ebc:	e007      	b.n	8006ece <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006ec2:	b29a      	uxth	r2, r3
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8006ec8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006ecc:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d024      	beq.n	8006f20 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006eda:	781a      	ldrb	r2, [r3, #0]
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ee6:	1c5a      	adds	r2, r3, #1
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006ef0:	b29b      	uxth	r3, r3
 8006ef2:	3b01      	subs	r3, #1
 8006ef4:	b29a      	uxth	r2, r3
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006efe:	3b01      	subs	r3, #1
 8006f00:	b29a      	uxth	r2, r3
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006f0a:	b2db      	uxtb	r3, r3
 8006f0c:	3301      	adds	r3, #1
 8006f0e:	b2da      	uxtb	r2, r3
 8006f10:	8979      	ldrh	r1, [r7, #10]
 8006f12:	4b4e      	ldr	r3, [pc, #312]	@ (800704c <HAL_I2C_Master_Transmit+0x228>)
 8006f14:	9300      	str	r3, [sp, #0]
 8006f16:	697b      	ldr	r3, [r7, #20]
 8006f18:	68f8      	ldr	r0, [r7, #12]
 8006f1a:	f000 fc05 	bl	8007728 <I2C_TransferConfig>
 8006f1e:	e066      	b.n	8006fee <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006f24:	b2da      	uxtb	r2, r3
 8006f26:	8979      	ldrh	r1, [r7, #10]
 8006f28:	4b48      	ldr	r3, [pc, #288]	@ (800704c <HAL_I2C_Master_Transmit+0x228>)
 8006f2a:	9300      	str	r3, [sp, #0]
 8006f2c:	697b      	ldr	r3, [r7, #20]
 8006f2e:	68f8      	ldr	r0, [r7, #12]
 8006f30:	f000 fbfa 	bl	8007728 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8006f34:	e05b      	b.n	8006fee <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006f36:	693a      	ldr	r2, [r7, #16]
 8006f38:	6a39      	ldr	r1, [r7, #32]
 8006f3a:	68f8      	ldr	r0, [r7, #12]
 8006f3c:	f000 f9fd 	bl	800733a <I2C_WaitOnTXISFlagUntilTimeout>
 8006f40:	4603      	mov	r3, r0
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d001      	beq.n	8006f4a <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8006f46:	2301      	movs	r3, #1
 8006f48:	e07b      	b.n	8007042 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f4e:	781a      	ldrb	r2, [r3, #0]
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f5a:	1c5a      	adds	r2, r3, #1
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006f64:	b29b      	uxth	r3, r3
 8006f66:	3b01      	subs	r3, #1
 8006f68:	b29a      	uxth	r2, r3
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006f72:	3b01      	subs	r3, #1
 8006f74:	b29a      	uxth	r2, r3
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006f7e:	b29b      	uxth	r3, r3
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d034      	beq.n	8006fee <HAL_I2C_Master_Transmit+0x1ca>
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d130      	bne.n	8006fee <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006f8c:	693b      	ldr	r3, [r7, #16]
 8006f8e:	9300      	str	r3, [sp, #0]
 8006f90:	6a3b      	ldr	r3, [r7, #32]
 8006f92:	2200      	movs	r2, #0
 8006f94:	2180      	movs	r1, #128	@ 0x80
 8006f96:	68f8      	ldr	r0, [r7, #12]
 8006f98:	f000 f976 	bl	8007288 <I2C_WaitOnFlagUntilTimeout>
 8006f9c:	4603      	mov	r3, r0
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d001      	beq.n	8006fa6 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8006fa2:	2301      	movs	r3, #1
 8006fa4:	e04d      	b.n	8007042 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006faa:	b29b      	uxth	r3, r3
 8006fac:	2bff      	cmp	r3, #255	@ 0xff
 8006fae:	d90e      	bls.n	8006fce <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	22ff      	movs	r2, #255	@ 0xff
 8006fb4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006fba:	b2da      	uxtb	r2, r3
 8006fbc:	8979      	ldrh	r1, [r7, #10]
 8006fbe:	2300      	movs	r3, #0
 8006fc0:	9300      	str	r3, [sp, #0]
 8006fc2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006fc6:	68f8      	ldr	r0, [r7, #12]
 8006fc8:	f000 fbae 	bl	8007728 <I2C_TransferConfig>
 8006fcc:	e00f      	b.n	8006fee <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006fd2:	b29a      	uxth	r2, r3
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006fdc:	b2da      	uxtb	r2, r3
 8006fde:	8979      	ldrh	r1, [r7, #10]
 8006fe0:	2300      	movs	r3, #0
 8006fe2:	9300      	str	r3, [sp, #0]
 8006fe4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006fe8:	68f8      	ldr	r0, [r7, #12]
 8006fea:	f000 fb9d 	bl	8007728 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006ff2:	b29b      	uxth	r3, r3
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d19e      	bne.n	8006f36 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006ff8:	693a      	ldr	r2, [r7, #16]
 8006ffa:	6a39      	ldr	r1, [r7, #32]
 8006ffc:	68f8      	ldr	r0, [r7, #12]
 8006ffe:	f000 f9e3 	bl	80073c8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007002:	4603      	mov	r3, r0
 8007004:	2b00      	cmp	r3, #0
 8007006:	d001      	beq.n	800700c <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8007008:	2301      	movs	r3, #1
 800700a:	e01a      	b.n	8007042 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	2220      	movs	r2, #32
 8007012:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	6859      	ldr	r1, [r3, #4]
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	681a      	ldr	r2, [r3, #0]
 800701e:	4b0c      	ldr	r3, [pc, #48]	@ (8007050 <HAL_I2C_Master_Transmit+0x22c>)
 8007020:	400b      	ands	r3, r1
 8007022:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	2220      	movs	r2, #32
 8007028:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	2200      	movs	r2, #0
 8007030:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	2200      	movs	r2, #0
 8007038:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800703c:	2300      	movs	r3, #0
 800703e:	e000      	b.n	8007042 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8007040:	2302      	movs	r3, #2
  }
}
 8007042:	4618      	mov	r0, r3
 8007044:	3718      	adds	r7, #24
 8007046:	46bd      	mov	sp, r7
 8007048:	bd80      	pop	{r7, pc}
 800704a:	bf00      	nop
 800704c:	80002000 	.word	0x80002000
 8007050:	fe00e800 	.word	0xfe00e800

08007054 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8007054:	b580      	push	{r7, lr}
 8007056:	b088      	sub	sp, #32
 8007058:	af02      	add	r7, sp, #8
 800705a:	60f8      	str	r0, [r7, #12]
 800705c:	607a      	str	r2, [r7, #4]
 800705e:	461a      	mov	r2, r3
 8007060:	460b      	mov	r3, r1
 8007062:	817b      	strh	r3, [r7, #10]
 8007064:	4613      	mov	r3, r2
 8007066:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800706e:	b2db      	uxtb	r3, r3
 8007070:	2b20      	cmp	r3, #32
 8007072:	f040 80db 	bne.w	800722c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800707c:	2b01      	cmp	r3, #1
 800707e:	d101      	bne.n	8007084 <HAL_I2C_Master_Receive+0x30>
 8007080:	2302      	movs	r3, #2
 8007082:	e0d4      	b.n	800722e <HAL_I2C_Master_Receive+0x1da>
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	2201      	movs	r2, #1
 8007088:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800708c:	f7fb fd64 	bl	8002b58 <HAL_GetTick>
 8007090:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007092:	697b      	ldr	r3, [r7, #20]
 8007094:	9300      	str	r3, [sp, #0]
 8007096:	2319      	movs	r3, #25
 8007098:	2201      	movs	r2, #1
 800709a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800709e:	68f8      	ldr	r0, [r7, #12]
 80070a0:	f000 f8f2 	bl	8007288 <I2C_WaitOnFlagUntilTimeout>
 80070a4:	4603      	mov	r3, r0
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d001      	beq.n	80070ae <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80070aa:	2301      	movs	r3, #1
 80070ac:	e0bf      	b.n	800722e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	2222      	movs	r2, #34	@ 0x22
 80070b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	2210      	movs	r2, #16
 80070ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	2200      	movs	r2, #0
 80070c2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	687a      	ldr	r2, [r7, #4]
 80070c8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	893a      	ldrh	r2, [r7, #8]
 80070ce:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	2200      	movs	r2, #0
 80070d4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80070da:	b29b      	uxth	r3, r3
 80070dc:	2bff      	cmp	r3, #255	@ 0xff
 80070de:	d90e      	bls.n	80070fe <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	22ff      	movs	r2, #255	@ 0xff
 80070e4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80070ea:	b2da      	uxtb	r2, r3
 80070ec:	8979      	ldrh	r1, [r7, #10]
 80070ee:	4b52      	ldr	r3, [pc, #328]	@ (8007238 <HAL_I2C_Master_Receive+0x1e4>)
 80070f0:	9300      	str	r3, [sp, #0]
 80070f2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80070f6:	68f8      	ldr	r0, [r7, #12]
 80070f8:	f000 fb16 	bl	8007728 <I2C_TransferConfig>
 80070fc:	e06d      	b.n	80071da <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007102:	b29a      	uxth	r2, r3
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800710c:	b2da      	uxtb	r2, r3
 800710e:	8979      	ldrh	r1, [r7, #10]
 8007110:	4b49      	ldr	r3, [pc, #292]	@ (8007238 <HAL_I2C_Master_Receive+0x1e4>)
 8007112:	9300      	str	r3, [sp, #0]
 8007114:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007118:	68f8      	ldr	r0, [r7, #12]
 800711a:	f000 fb05 	bl	8007728 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800711e:	e05c      	b.n	80071da <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007120:	697a      	ldr	r2, [r7, #20]
 8007122:	6a39      	ldr	r1, [r7, #32]
 8007124:	68f8      	ldr	r0, [r7, #12]
 8007126:	f000 f993 	bl	8007450 <I2C_WaitOnRXNEFlagUntilTimeout>
 800712a:	4603      	mov	r3, r0
 800712c:	2b00      	cmp	r3, #0
 800712e:	d001      	beq.n	8007134 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8007130:	2301      	movs	r3, #1
 8007132:	e07c      	b.n	800722e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800713e:	b2d2      	uxtb	r2, r2
 8007140:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007146:	1c5a      	adds	r2, r3, #1
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007150:	3b01      	subs	r3, #1
 8007152:	b29a      	uxth	r2, r3
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800715c:	b29b      	uxth	r3, r3
 800715e:	3b01      	subs	r3, #1
 8007160:	b29a      	uxth	r2, r3
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800716a:	b29b      	uxth	r3, r3
 800716c:	2b00      	cmp	r3, #0
 800716e:	d034      	beq.n	80071da <HAL_I2C_Master_Receive+0x186>
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007174:	2b00      	cmp	r3, #0
 8007176:	d130      	bne.n	80071da <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007178:	697b      	ldr	r3, [r7, #20]
 800717a:	9300      	str	r3, [sp, #0]
 800717c:	6a3b      	ldr	r3, [r7, #32]
 800717e:	2200      	movs	r2, #0
 8007180:	2180      	movs	r1, #128	@ 0x80
 8007182:	68f8      	ldr	r0, [r7, #12]
 8007184:	f000 f880 	bl	8007288 <I2C_WaitOnFlagUntilTimeout>
 8007188:	4603      	mov	r3, r0
 800718a:	2b00      	cmp	r3, #0
 800718c:	d001      	beq.n	8007192 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800718e:	2301      	movs	r3, #1
 8007190:	e04d      	b.n	800722e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007196:	b29b      	uxth	r3, r3
 8007198:	2bff      	cmp	r3, #255	@ 0xff
 800719a:	d90e      	bls.n	80071ba <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	22ff      	movs	r2, #255	@ 0xff
 80071a0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80071a6:	b2da      	uxtb	r2, r3
 80071a8:	8979      	ldrh	r1, [r7, #10]
 80071aa:	2300      	movs	r3, #0
 80071ac:	9300      	str	r3, [sp, #0]
 80071ae:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80071b2:	68f8      	ldr	r0, [r7, #12]
 80071b4:	f000 fab8 	bl	8007728 <I2C_TransferConfig>
 80071b8:	e00f      	b.n	80071da <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80071be:	b29a      	uxth	r2, r3
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80071c8:	b2da      	uxtb	r2, r3
 80071ca:	8979      	ldrh	r1, [r7, #10]
 80071cc:	2300      	movs	r3, #0
 80071ce:	9300      	str	r3, [sp, #0]
 80071d0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80071d4:	68f8      	ldr	r0, [r7, #12]
 80071d6:	f000 faa7 	bl	8007728 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80071de:	b29b      	uxth	r3, r3
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d19d      	bne.n	8007120 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80071e4:	697a      	ldr	r2, [r7, #20]
 80071e6:	6a39      	ldr	r1, [r7, #32]
 80071e8:	68f8      	ldr	r0, [r7, #12]
 80071ea:	f000 f8ed 	bl	80073c8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80071ee:	4603      	mov	r3, r0
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d001      	beq.n	80071f8 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80071f4:	2301      	movs	r3, #1
 80071f6:	e01a      	b.n	800722e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	2220      	movs	r2, #32
 80071fe:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	6859      	ldr	r1, [r3, #4]
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	681a      	ldr	r2, [r3, #0]
 800720a:	4b0c      	ldr	r3, [pc, #48]	@ (800723c <HAL_I2C_Master_Receive+0x1e8>)
 800720c:	400b      	ands	r3, r1
 800720e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	2220      	movs	r2, #32
 8007214:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	2200      	movs	r2, #0
 800721c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	2200      	movs	r2, #0
 8007224:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007228:	2300      	movs	r3, #0
 800722a:	e000      	b.n	800722e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800722c:	2302      	movs	r3, #2
  }
}
 800722e:	4618      	mov	r0, r3
 8007230:	3718      	adds	r7, #24
 8007232:	46bd      	mov	sp, r7
 8007234:	bd80      	pop	{r7, pc}
 8007236:	bf00      	nop
 8007238:	80002400 	.word	0x80002400
 800723c:	fe00e800 	.word	0xfe00e800

08007240 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8007240:	b480      	push	{r7}
 8007242:	b083      	sub	sp, #12
 8007244:	af00      	add	r7, sp, #0
 8007246:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	699b      	ldr	r3, [r3, #24]
 800724e:	f003 0302 	and.w	r3, r3, #2
 8007252:	2b02      	cmp	r3, #2
 8007254:	d103      	bne.n	800725e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	2200      	movs	r2, #0
 800725c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	699b      	ldr	r3, [r3, #24]
 8007264:	f003 0301 	and.w	r3, r3, #1
 8007268:	2b01      	cmp	r3, #1
 800726a:	d007      	beq.n	800727c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	699a      	ldr	r2, [r3, #24]
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	f042 0201 	orr.w	r2, r2, #1
 800727a:	619a      	str	r2, [r3, #24]
  }
}
 800727c:	bf00      	nop
 800727e:	370c      	adds	r7, #12
 8007280:	46bd      	mov	sp, r7
 8007282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007286:	4770      	bx	lr

08007288 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8007288:	b580      	push	{r7, lr}
 800728a:	b084      	sub	sp, #16
 800728c:	af00      	add	r7, sp, #0
 800728e:	60f8      	str	r0, [r7, #12]
 8007290:	60b9      	str	r1, [r7, #8]
 8007292:	603b      	str	r3, [r7, #0]
 8007294:	4613      	mov	r3, r2
 8007296:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007298:	e03b      	b.n	8007312 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800729a:	69ba      	ldr	r2, [r7, #24]
 800729c:	6839      	ldr	r1, [r7, #0]
 800729e:	68f8      	ldr	r0, [r7, #12]
 80072a0:	f000 f962 	bl	8007568 <I2C_IsErrorOccurred>
 80072a4:	4603      	mov	r3, r0
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d001      	beq.n	80072ae <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80072aa:	2301      	movs	r3, #1
 80072ac:	e041      	b.n	8007332 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80072ae:	683b      	ldr	r3, [r7, #0]
 80072b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072b4:	d02d      	beq.n	8007312 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80072b6:	f7fb fc4f 	bl	8002b58 <HAL_GetTick>
 80072ba:	4602      	mov	r2, r0
 80072bc:	69bb      	ldr	r3, [r7, #24]
 80072be:	1ad3      	subs	r3, r2, r3
 80072c0:	683a      	ldr	r2, [r7, #0]
 80072c2:	429a      	cmp	r2, r3
 80072c4:	d302      	bcc.n	80072cc <I2C_WaitOnFlagUntilTimeout+0x44>
 80072c6:	683b      	ldr	r3, [r7, #0]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d122      	bne.n	8007312 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	699a      	ldr	r2, [r3, #24]
 80072d2:	68bb      	ldr	r3, [r7, #8]
 80072d4:	4013      	ands	r3, r2
 80072d6:	68ba      	ldr	r2, [r7, #8]
 80072d8:	429a      	cmp	r2, r3
 80072da:	bf0c      	ite	eq
 80072dc:	2301      	moveq	r3, #1
 80072de:	2300      	movne	r3, #0
 80072e0:	b2db      	uxtb	r3, r3
 80072e2:	461a      	mov	r2, r3
 80072e4:	79fb      	ldrb	r3, [r7, #7]
 80072e6:	429a      	cmp	r2, r3
 80072e8:	d113      	bne.n	8007312 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80072ee:	f043 0220 	orr.w	r2, r3, #32
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	2220      	movs	r2, #32
 80072fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	2200      	movs	r2, #0
 8007302:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	2200      	movs	r2, #0
 800730a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800730e:	2301      	movs	r3, #1
 8007310:	e00f      	b.n	8007332 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	699a      	ldr	r2, [r3, #24]
 8007318:	68bb      	ldr	r3, [r7, #8]
 800731a:	4013      	ands	r3, r2
 800731c:	68ba      	ldr	r2, [r7, #8]
 800731e:	429a      	cmp	r2, r3
 8007320:	bf0c      	ite	eq
 8007322:	2301      	moveq	r3, #1
 8007324:	2300      	movne	r3, #0
 8007326:	b2db      	uxtb	r3, r3
 8007328:	461a      	mov	r2, r3
 800732a:	79fb      	ldrb	r3, [r7, #7]
 800732c:	429a      	cmp	r2, r3
 800732e:	d0b4      	beq.n	800729a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007330:	2300      	movs	r3, #0
}
 8007332:	4618      	mov	r0, r3
 8007334:	3710      	adds	r7, #16
 8007336:	46bd      	mov	sp, r7
 8007338:	bd80      	pop	{r7, pc}

0800733a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800733a:	b580      	push	{r7, lr}
 800733c:	b084      	sub	sp, #16
 800733e:	af00      	add	r7, sp, #0
 8007340:	60f8      	str	r0, [r7, #12]
 8007342:	60b9      	str	r1, [r7, #8]
 8007344:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007346:	e033      	b.n	80073b0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007348:	687a      	ldr	r2, [r7, #4]
 800734a:	68b9      	ldr	r1, [r7, #8]
 800734c:	68f8      	ldr	r0, [r7, #12]
 800734e:	f000 f90b 	bl	8007568 <I2C_IsErrorOccurred>
 8007352:	4603      	mov	r3, r0
 8007354:	2b00      	cmp	r3, #0
 8007356:	d001      	beq.n	800735c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007358:	2301      	movs	r3, #1
 800735a:	e031      	b.n	80073c0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800735c:	68bb      	ldr	r3, [r7, #8]
 800735e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007362:	d025      	beq.n	80073b0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007364:	f7fb fbf8 	bl	8002b58 <HAL_GetTick>
 8007368:	4602      	mov	r2, r0
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	1ad3      	subs	r3, r2, r3
 800736e:	68ba      	ldr	r2, [r7, #8]
 8007370:	429a      	cmp	r2, r3
 8007372:	d302      	bcc.n	800737a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8007374:	68bb      	ldr	r3, [r7, #8]
 8007376:	2b00      	cmp	r3, #0
 8007378:	d11a      	bne.n	80073b0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	699b      	ldr	r3, [r3, #24]
 8007380:	f003 0302 	and.w	r3, r3, #2
 8007384:	2b02      	cmp	r3, #2
 8007386:	d013      	beq.n	80073b0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800738c:	f043 0220 	orr.w	r2, r3, #32
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	2220      	movs	r2, #32
 8007398:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	2200      	movs	r2, #0
 80073a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	2200      	movs	r2, #0
 80073a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80073ac:	2301      	movs	r3, #1
 80073ae:	e007      	b.n	80073c0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	699b      	ldr	r3, [r3, #24]
 80073b6:	f003 0302 	and.w	r3, r3, #2
 80073ba:	2b02      	cmp	r3, #2
 80073bc:	d1c4      	bne.n	8007348 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80073be:	2300      	movs	r3, #0
}
 80073c0:	4618      	mov	r0, r3
 80073c2:	3710      	adds	r7, #16
 80073c4:	46bd      	mov	sp, r7
 80073c6:	bd80      	pop	{r7, pc}

080073c8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80073c8:	b580      	push	{r7, lr}
 80073ca:	b084      	sub	sp, #16
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	60f8      	str	r0, [r7, #12]
 80073d0:	60b9      	str	r1, [r7, #8]
 80073d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80073d4:	e02f      	b.n	8007436 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80073d6:	687a      	ldr	r2, [r7, #4]
 80073d8:	68b9      	ldr	r1, [r7, #8]
 80073da:	68f8      	ldr	r0, [r7, #12]
 80073dc:	f000 f8c4 	bl	8007568 <I2C_IsErrorOccurred>
 80073e0:	4603      	mov	r3, r0
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d001      	beq.n	80073ea <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80073e6:	2301      	movs	r3, #1
 80073e8:	e02d      	b.n	8007446 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80073ea:	f7fb fbb5 	bl	8002b58 <HAL_GetTick>
 80073ee:	4602      	mov	r2, r0
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	1ad3      	subs	r3, r2, r3
 80073f4:	68ba      	ldr	r2, [r7, #8]
 80073f6:	429a      	cmp	r2, r3
 80073f8:	d302      	bcc.n	8007400 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80073fa:	68bb      	ldr	r3, [r7, #8]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d11a      	bne.n	8007436 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	699b      	ldr	r3, [r3, #24]
 8007406:	f003 0320 	and.w	r3, r3, #32
 800740a:	2b20      	cmp	r3, #32
 800740c:	d013      	beq.n	8007436 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007412:	f043 0220 	orr.w	r2, r3, #32
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	2220      	movs	r2, #32
 800741e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	2200      	movs	r2, #0
 8007426:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	2200      	movs	r2, #0
 800742e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8007432:	2301      	movs	r3, #1
 8007434:	e007      	b.n	8007446 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	699b      	ldr	r3, [r3, #24]
 800743c:	f003 0320 	and.w	r3, r3, #32
 8007440:	2b20      	cmp	r3, #32
 8007442:	d1c8      	bne.n	80073d6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007444:	2300      	movs	r3, #0
}
 8007446:	4618      	mov	r0, r3
 8007448:	3710      	adds	r7, #16
 800744a:	46bd      	mov	sp, r7
 800744c:	bd80      	pop	{r7, pc}
	...

08007450 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007450:	b580      	push	{r7, lr}
 8007452:	b086      	sub	sp, #24
 8007454:	af00      	add	r7, sp, #0
 8007456:	60f8      	str	r0, [r7, #12]
 8007458:	60b9      	str	r1, [r7, #8]
 800745a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800745c:	2300      	movs	r3, #0
 800745e:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8007460:	e071      	b.n	8007546 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007462:	687a      	ldr	r2, [r7, #4]
 8007464:	68b9      	ldr	r1, [r7, #8]
 8007466:	68f8      	ldr	r0, [r7, #12]
 8007468:	f000 f87e 	bl	8007568 <I2C_IsErrorOccurred>
 800746c:	4603      	mov	r3, r0
 800746e:	2b00      	cmp	r3, #0
 8007470:	d001      	beq.n	8007476 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8007472:	2301      	movs	r3, #1
 8007474:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	699b      	ldr	r3, [r3, #24]
 800747c:	f003 0320 	and.w	r3, r3, #32
 8007480:	2b20      	cmp	r3, #32
 8007482:	d13b      	bne.n	80074fc <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8007484:	7dfb      	ldrb	r3, [r7, #23]
 8007486:	2b00      	cmp	r3, #0
 8007488:	d138      	bne.n	80074fc <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	699b      	ldr	r3, [r3, #24]
 8007490:	f003 0304 	and.w	r3, r3, #4
 8007494:	2b04      	cmp	r3, #4
 8007496:	d105      	bne.n	80074a4 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800749c:	2b00      	cmp	r3, #0
 800749e:	d001      	beq.n	80074a4 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 80074a0:	2300      	movs	r3, #0
 80074a2:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	699b      	ldr	r3, [r3, #24]
 80074aa:	f003 0310 	and.w	r3, r3, #16
 80074ae:	2b10      	cmp	r3, #16
 80074b0:	d121      	bne.n	80074f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	2210      	movs	r2, #16
 80074b8:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	2204      	movs	r2, #4
 80074be:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	2220      	movs	r2, #32
 80074c6:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	6859      	ldr	r1, [r3, #4]
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	681a      	ldr	r2, [r3, #0]
 80074d2:	4b24      	ldr	r3, [pc, #144]	@ (8007564 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 80074d4:	400b      	ands	r3, r1
 80074d6:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	2220      	movs	r2, #32
 80074dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	2200      	movs	r2, #0
 80074e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	2200      	movs	r2, #0
 80074ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 80074f0:	2301      	movs	r3, #1
 80074f2:	75fb      	strb	r3, [r7, #23]
 80074f4:	e002      	b.n	80074fc <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	2200      	movs	r2, #0
 80074fa:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 80074fc:	f7fb fb2c 	bl	8002b58 <HAL_GetTick>
 8007500:	4602      	mov	r2, r0
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	1ad3      	subs	r3, r2, r3
 8007506:	68ba      	ldr	r2, [r7, #8]
 8007508:	429a      	cmp	r2, r3
 800750a:	d302      	bcc.n	8007512 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 800750c:	68bb      	ldr	r3, [r7, #8]
 800750e:	2b00      	cmp	r3, #0
 8007510:	d119      	bne.n	8007546 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8007512:	7dfb      	ldrb	r3, [r7, #23]
 8007514:	2b00      	cmp	r3, #0
 8007516:	d116      	bne.n	8007546 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	699b      	ldr	r3, [r3, #24]
 800751e:	f003 0304 	and.w	r3, r3, #4
 8007522:	2b04      	cmp	r3, #4
 8007524:	d00f      	beq.n	8007546 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800752a:	f043 0220 	orr.w	r2, r3, #32
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	2220      	movs	r2, #32
 8007536:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	2200      	movs	r2, #0
 800753e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8007542:	2301      	movs	r3, #1
 8007544:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	699b      	ldr	r3, [r3, #24]
 800754c:	f003 0304 	and.w	r3, r3, #4
 8007550:	2b04      	cmp	r3, #4
 8007552:	d002      	beq.n	800755a <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8007554:	7dfb      	ldrb	r3, [r7, #23]
 8007556:	2b00      	cmp	r3, #0
 8007558:	d083      	beq.n	8007462 <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 800755a:	7dfb      	ldrb	r3, [r7, #23]
}
 800755c:	4618      	mov	r0, r3
 800755e:	3718      	adds	r7, #24
 8007560:	46bd      	mov	sp, r7
 8007562:	bd80      	pop	{r7, pc}
 8007564:	fe00e800 	.word	0xfe00e800

08007568 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007568:	b580      	push	{r7, lr}
 800756a:	b08a      	sub	sp, #40	@ 0x28
 800756c:	af00      	add	r7, sp, #0
 800756e:	60f8      	str	r0, [r7, #12]
 8007570:	60b9      	str	r1, [r7, #8]
 8007572:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007574:	2300      	movs	r3, #0
 8007576:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	699b      	ldr	r3, [r3, #24]
 8007580:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8007582:	2300      	movs	r3, #0
 8007584:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800758a:	69bb      	ldr	r3, [r7, #24]
 800758c:	f003 0310 	and.w	r3, r3, #16
 8007590:	2b00      	cmp	r3, #0
 8007592:	d068      	beq.n	8007666 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	2210      	movs	r2, #16
 800759a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800759c:	e049      	b.n	8007632 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800759e:	68bb      	ldr	r3, [r7, #8]
 80075a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075a4:	d045      	beq.n	8007632 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80075a6:	f7fb fad7 	bl	8002b58 <HAL_GetTick>
 80075aa:	4602      	mov	r2, r0
 80075ac:	69fb      	ldr	r3, [r7, #28]
 80075ae:	1ad3      	subs	r3, r2, r3
 80075b0:	68ba      	ldr	r2, [r7, #8]
 80075b2:	429a      	cmp	r2, r3
 80075b4:	d302      	bcc.n	80075bc <I2C_IsErrorOccurred+0x54>
 80075b6:	68bb      	ldr	r3, [r7, #8]
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d13a      	bne.n	8007632 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	685b      	ldr	r3, [r3, #4]
 80075c2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80075c6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80075ce:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	699b      	ldr	r3, [r3, #24]
 80075d6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80075da:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80075de:	d121      	bne.n	8007624 <I2C_IsErrorOccurred+0xbc>
 80075e0:	697b      	ldr	r3, [r7, #20]
 80075e2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80075e6:	d01d      	beq.n	8007624 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80075e8:	7cfb      	ldrb	r3, [r7, #19]
 80075ea:	2b20      	cmp	r3, #32
 80075ec:	d01a      	beq.n	8007624 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	685a      	ldr	r2, [r3, #4]
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80075fc:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80075fe:	f7fb faab 	bl	8002b58 <HAL_GetTick>
 8007602:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007604:	e00e      	b.n	8007624 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8007606:	f7fb faa7 	bl	8002b58 <HAL_GetTick>
 800760a:	4602      	mov	r2, r0
 800760c:	69fb      	ldr	r3, [r7, #28]
 800760e:	1ad3      	subs	r3, r2, r3
 8007610:	2b19      	cmp	r3, #25
 8007612:	d907      	bls.n	8007624 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8007614:	6a3b      	ldr	r3, [r7, #32]
 8007616:	f043 0320 	orr.w	r3, r3, #32
 800761a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800761c:	2301      	movs	r3, #1
 800761e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8007622:	e006      	b.n	8007632 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	699b      	ldr	r3, [r3, #24]
 800762a:	f003 0320 	and.w	r3, r3, #32
 800762e:	2b20      	cmp	r3, #32
 8007630:	d1e9      	bne.n	8007606 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	699b      	ldr	r3, [r3, #24]
 8007638:	f003 0320 	and.w	r3, r3, #32
 800763c:	2b20      	cmp	r3, #32
 800763e:	d003      	beq.n	8007648 <I2C_IsErrorOccurred+0xe0>
 8007640:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007644:	2b00      	cmp	r3, #0
 8007646:	d0aa      	beq.n	800759e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8007648:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800764c:	2b00      	cmp	r3, #0
 800764e:	d103      	bne.n	8007658 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	2220      	movs	r2, #32
 8007656:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8007658:	6a3b      	ldr	r3, [r7, #32]
 800765a:	f043 0304 	orr.w	r3, r3, #4
 800765e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8007660:	2301      	movs	r3, #1
 8007662:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	699b      	ldr	r3, [r3, #24]
 800766c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800766e:	69bb      	ldr	r3, [r7, #24]
 8007670:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007674:	2b00      	cmp	r3, #0
 8007676:	d00b      	beq.n	8007690 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8007678:	6a3b      	ldr	r3, [r7, #32]
 800767a:	f043 0301 	orr.w	r3, r3, #1
 800767e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007688:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800768a:	2301      	movs	r3, #1
 800768c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8007690:	69bb      	ldr	r3, [r7, #24]
 8007692:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007696:	2b00      	cmp	r3, #0
 8007698:	d00b      	beq.n	80076b2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800769a:	6a3b      	ldr	r3, [r7, #32]
 800769c:	f043 0308 	orr.w	r3, r3, #8
 80076a0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80076aa:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80076ac:	2301      	movs	r3, #1
 80076ae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80076b2:	69bb      	ldr	r3, [r7, #24]
 80076b4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d00b      	beq.n	80076d4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80076bc:	6a3b      	ldr	r3, [r7, #32]
 80076be:	f043 0302 	orr.w	r3, r3, #2
 80076c2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80076cc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80076ce:	2301      	movs	r3, #1
 80076d0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80076d4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d01c      	beq.n	8007716 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80076dc:	68f8      	ldr	r0, [r7, #12]
 80076de:	f7ff fdaf 	bl	8007240 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	6859      	ldr	r1, [r3, #4]
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	681a      	ldr	r2, [r3, #0]
 80076ec:	4b0d      	ldr	r3, [pc, #52]	@ (8007724 <I2C_IsErrorOccurred+0x1bc>)
 80076ee:	400b      	ands	r3, r1
 80076f0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80076f6:	6a3b      	ldr	r3, [r7, #32]
 80076f8:	431a      	orrs	r2, r3
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	2220      	movs	r2, #32
 8007702:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	2200      	movs	r2, #0
 800770a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	2200      	movs	r2, #0
 8007712:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8007716:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800771a:	4618      	mov	r0, r3
 800771c:	3728      	adds	r7, #40	@ 0x28
 800771e:	46bd      	mov	sp, r7
 8007720:	bd80      	pop	{r7, pc}
 8007722:	bf00      	nop
 8007724:	fe00e800 	.word	0xfe00e800

08007728 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007728:	b480      	push	{r7}
 800772a:	b087      	sub	sp, #28
 800772c:	af00      	add	r7, sp, #0
 800772e:	60f8      	str	r0, [r7, #12]
 8007730:	607b      	str	r3, [r7, #4]
 8007732:	460b      	mov	r3, r1
 8007734:	817b      	strh	r3, [r7, #10]
 8007736:	4613      	mov	r3, r2
 8007738:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800773a:	897b      	ldrh	r3, [r7, #10]
 800773c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007740:	7a7b      	ldrb	r3, [r7, #9]
 8007742:	041b      	lsls	r3, r3, #16
 8007744:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007748:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800774e:	6a3b      	ldr	r3, [r7, #32]
 8007750:	4313      	orrs	r3, r2
 8007752:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007756:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	685a      	ldr	r2, [r3, #4]
 800775e:	6a3b      	ldr	r3, [r7, #32]
 8007760:	0d5b      	lsrs	r3, r3, #21
 8007762:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8007766:	4b08      	ldr	r3, [pc, #32]	@ (8007788 <I2C_TransferConfig+0x60>)
 8007768:	430b      	orrs	r3, r1
 800776a:	43db      	mvns	r3, r3
 800776c:	ea02 0103 	and.w	r1, r2, r3
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	697a      	ldr	r2, [r7, #20]
 8007776:	430a      	orrs	r2, r1
 8007778:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800777a:	bf00      	nop
 800777c:	371c      	adds	r7, #28
 800777e:	46bd      	mov	sp, r7
 8007780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007784:	4770      	bx	lr
 8007786:	bf00      	nop
 8007788:	03ff63ff 	.word	0x03ff63ff

0800778c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800778c:	b480      	push	{r7}
 800778e:	b083      	sub	sp, #12
 8007790:	af00      	add	r7, sp, #0
 8007792:	6078      	str	r0, [r7, #4]
 8007794:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800779c:	b2db      	uxtb	r3, r3
 800779e:	2b20      	cmp	r3, #32
 80077a0:	d138      	bne.n	8007814 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80077a8:	2b01      	cmp	r3, #1
 80077aa:	d101      	bne.n	80077b0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80077ac:	2302      	movs	r3, #2
 80077ae:	e032      	b.n	8007816 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	2201      	movs	r2, #1
 80077b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	2224      	movs	r2, #36	@ 0x24
 80077bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	681a      	ldr	r2, [r3, #0]
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	f022 0201 	bic.w	r2, r2, #1
 80077ce:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	681a      	ldr	r2, [r3, #0]
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80077de:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	6819      	ldr	r1, [r3, #0]
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	683a      	ldr	r2, [r7, #0]
 80077ec:	430a      	orrs	r2, r1
 80077ee:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	681a      	ldr	r2, [r3, #0]
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	f042 0201 	orr.w	r2, r2, #1
 80077fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	2220      	movs	r2, #32
 8007804:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	2200      	movs	r2, #0
 800780c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007810:	2300      	movs	r3, #0
 8007812:	e000      	b.n	8007816 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007814:	2302      	movs	r3, #2
  }
}
 8007816:	4618      	mov	r0, r3
 8007818:	370c      	adds	r7, #12
 800781a:	46bd      	mov	sp, r7
 800781c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007820:	4770      	bx	lr

08007822 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007822:	b480      	push	{r7}
 8007824:	b085      	sub	sp, #20
 8007826:	af00      	add	r7, sp, #0
 8007828:	6078      	str	r0, [r7, #4]
 800782a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007832:	b2db      	uxtb	r3, r3
 8007834:	2b20      	cmp	r3, #32
 8007836:	d139      	bne.n	80078ac <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800783e:	2b01      	cmp	r3, #1
 8007840:	d101      	bne.n	8007846 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007842:	2302      	movs	r3, #2
 8007844:	e033      	b.n	80078ae <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	2201      	movs	r2, #1
 800784a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	2224      	movs	r2, #36	@ 0x24
 8007852:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	681a      	ldr	r2, [r3, #0]
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	f022 0201 	bic.w	r2, r2, #1
 8007864:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8007874:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007876:	683b      	ldr	r3, [r7, #0]
 8007878:	021b      	lsls	r3, r3, #8
 800787a:	68fa      	ldr	r2, [r7, #12]
 800787c:	4313      	orrs	r3, r2
 800787e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	68fa      	ldr	r2, [r7, #12]
 8007886:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	681a      	ldr	r2, [r3, #0]
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	f042 0201 	orr.w	r2, r2, #1
 8007896:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	2220      	movs	r2, #32
 800789c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	2200      	movs	r2, #0
 80078a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80078a8:	2300      	movs	r3, #0
 80078aa:	e000      	b.n	80078ae <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80078ac:	2302      	movs	r3, #2
  }
}
 80078ae:	4618      	mov	r0, r3
 80078b0:	3714      	adds	r7, #20
 80078b2:	46bd      	mov	sp, r7
 80078b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b8:	4770      	bx	lr
	...

080078bc <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80078bc:	b580      	push	{r7, lr}
 80078be:	b084      	sub	sp, #16
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80078c4:	4b29      	ldr	r3, [pc, #164]	@ (800796c <HAL_PWREx_ConfigSupply+0xb0>)
 80078c6:	68db      	ldr	r3, [r3, #12]
 80078c8:	f003 0307 	and.w	r3, r3, #7
 80078cc:	2b06      	cmp	r3, #6
 80078ce:	d00a      	beq.n	80078e6 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80078d0:	4b26      	ldr	r3, [pc, #152]	@ (800796c <HAL_PWREx_ConfigSupply+0xb0>)
 80078d2:	68db      	ldr	r3, [r3, #12]
 80078d4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80078d8:	687a      	ldr	r2, [r7, #4]
 80078da:	429a      	cmp	r2, r3
 80078dc:	d001      	beq.n	80078e2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80078de:	2301      	movs	r3, #1
 80078e0:	e040      	b.n	8007964 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80078e2:	2300      	movs	r3, #0
 80078e4:	e03e      	b.n	8007964 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80078e6:	4b21      	ldr	r3, [pc, #132]	@ (800796c <HAL_PWREx_ConfigSupply+0xb0>)
 80078e8:	68db      	ldr	r3, [r3, #12]
 80078ea:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 80078ee:	491f      	ldr	r1, [pc, #124]	@ (800796c <HAL_PWREx_ConfigSupply+0xb0>)
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	4313      	orrs	r3, r2
 80078f4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80078f6:	f7fb f92f 	bl	8002b58 <HAL_GetTick>
 80078fa:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80078fc:	e009      	b.n	8007912 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80078fe:	f7fb f92b 	bl	8002b58 <HAL_GetTick>
 8007902:	4602      	mov	r2, r0
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	1ad3      	subs	r3, r2, r3
 8007908:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800790c:	d901      	bls.n	8007912 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800790e:	2301      	movs	r3, #1
 8007910:	e028      	b.n	8007964 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007912:	4b16      	ldr	r3, [pc, #88]	@ (800796c <HAL_PWREx_ConfigSupply+0xb0>)
 8007914:	685b      	ldr	r3, [r3, #4]
 8007916:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800791a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800791e:	d1ee      	bne.n	80078fe <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	2b1e      	cmp	r3, #30
 8007924:	d008      	beq.n	8007938 <HAL_PWREx_ConfigSupply+0x7c>
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	2b2e      	cmp	r3, #46	@ 0x2e
 800792a:	d005      	beq.n	8007938 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	2b1d      	cmp	r3, #29
 8007930:	d002      	beq.n	8007938 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	2b2d      	cmp	r3, #45	@ 0x2d
 8007936:	d114      	bne.n	8007962 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8007938:	f7fb f90e 	bl	8002b58 <HAL_GetTick>
 800793c:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800793e:	e009      	b.n	8007954 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8007940:	f7fb f90a 	bl	8002b58 <HAL_GetTick>
 8007944:	4602      	mov	r2, r0
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	1ad3      	subs	r3, r2, r3
 800794a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800794e:	d901      	bls.n	8007954 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8007950:	2301      	movs	r3, #1
 8007952:	e007      	b.n	8007964 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8007954:	4b05      	ldr	r3, [pc, #20]	@ (800796c <HAL_PWREx_ConfigSupply+0xb0>)
 8007956:	68db      	ldr	r3, [r3, #12]
 8007958:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800795c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007960:	d1ee      	bne.n	8007940 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8007962:	2300      	movs	r3, #0
}
 8007964:	4618      	mov	r0, r3
 8007966:	3710      	adds	r7, #16
 8007968:	46bd      	mov	sp, r7
 800796a:	bd80      	pop	{r7, pc}
 800796c:	58024800 	.word	0x58024800

08007970 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007970:	b580      	push	{r7, lr}
 8007972:	b08c      	sub	sp, #48	@ 0x30
 8007974:	af00      	add	r7, sp, #0
 8007976:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	2b00      	cmp	r3, #0
 800797c:	d102      	bne.n	8007984 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800797e:	2301      	movs	r3, #1
 8007980:	f000 bc48 	b.w	8008214 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	f003 0301 	and.w	r3, r3, #1
 800798c:	2b00      	cmp	r3, #0
 800798e:	f000 8088 	beq.w	8007aa2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007992:	4b99      	ldr	r3, [pc, #612]	@ (8007bf8 <HAL_RCC_OscConfig+0x288>)
 8007994:	691b      	ldr	r3, [r3, #16]
 8007996:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800799a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800799c:	4b96      	ldr	r3, [pc, #600]	@ (8007bf8 <HAL_RCC_OscConfig+0x288>)
 800799e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079a0:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80079a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079a4:	2b10      	cmp	r3, #16
 80079a6:	d007      	beq.n	80079b8 <HAL_RCC_OscConfig+0x48>
 80079a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079aa:	2b18      	cmp	r3, #24
 80079ac:	d111      	bne.n	80079d2 <HAL_RCC_OscConfig+0x62>
 80079ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079b0:	f003 0303 	and.w	r3, r3, #3
 80079b4:	2b02      	cmp	r3, #2
 80079b6:	d10c      	bne.n	80079d2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80079b8:	4b8f      	ldr	r3, [pc, #572]	@ (8007bf8 <HAL_RCC_OscConfig+0x288>)
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d06d      	beq.n	8007aa0 <HAL_RCC_OscConfig+0x130>
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	685b      	ldr	r3, [r3, #4]
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d169      	bne.n	8007aa0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80079cc:	2301      	movs	r3, #1
 80079ce:	f000 bc21 	b.w	8008214 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	685b      	ldr	r3, [r3, #4]
 80079d6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80079da:	d106      	bne.n	80079ea <HAL_RCC_OscConfig+0x7a>
 80079dc:	4b86      	ldr	r3, [pc, #536]	@ (8007bf8 <HAL_RCC_OscConfig+0x288>)
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	4a85      	ldr	r2, [pc, #532]	@ (8007bf8 <HAL_RCC_OscConfig+0x288>)
 80079e2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80079e6:	6013      	str	r3, [r2, #0]
 80079e8:	e02e      	b.n	8007a48 <HAL_RCC_OscConfig+0xd8>
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	685b      	ldr	r3, [r3, #4]
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d10c      	bne.n	8007a0c <HAL_RCC_OscConfig+0x9c>
 80079f2:	4b81      	ldr	r3, [pc, #516]	@ (8007bf8 <HAL_RCC_OscConfig+0x288>)
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	4a80      	ldr	r2, [pc, #512]	@ (8007bf8 <HAL_RCC_OscConfig+0x288>)
 80079f8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80079fc:	6013      	str	r3, [r2, #0]
 80079fe:	4b7e      	ldr	r3, [pc, #504]	@ (8007bf8 <HAL_RCC_OscConfig+0x288>)
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	4a7d      	ldr	r2, [pc, #500]	@ (8007bf8 <HAL_RCC_OscConfig+0x288>)
 8007a04:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007a08:	6013      	str	r3, [r2, #0]
 8007a0a:	e01d      	b.n	8007a48 <HAL_RCC_OscConfig+0xd8>
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	685b      	ldr	r3, [r3, #4]
 8007a10:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007a14:	d10c      	bne.n	8007a30 <HAL_RCC_OscConfig+0xc0>
 8007a16:	4b78      	ldr	r3, [pc, #480]	@ (8007bf8 <HAL_RCC_OscConfig+0x288>)
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	4a77      	ldr	r2, [pc, #476]	@ (8007bf8 <HAL_RCC_OscConfig+0x288>)
 8007a1c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007a20:	6013      	str	r3, [r2, #0]
 8007a22:	4b75      	ldr	r3, [pc, #468]	@ (8007bf8 <HAL_RCC_OscConfig+0x288>)
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	4a74      	ldr	r2, [pc, #464]	@ (8007bf8 <HAL_RCC_OscConfig+0x288>)
 8007a28:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007a2c:	6013      	str	r3, [r2, #0]
 8007a2e:	e00b      	b.n	8007a48 <HAL_RCC_OscConfig+0xd8>
 8007a30:	4b71      	ldr	r3, [pc, #452]	@ (8007bf8 <HAL_RCC_OscConfig+0x288>)
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	4a70      	ldr	r2, [pc, #448]	@ (8007bf8 <HAL_RCC_OscConfig+0x288>)
 8007a36:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007a3a:	6013      	str	r3, [r2, #0]
 8007a3c:	4b6e      	ldr	r3, [pc, #440]	@ (8007bf8 <HAL_RCC_OscConfig+0x288>)
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	4a6d      	ldr	r2, [pc, #436]	@ (8007bf8 <HAL_RCC_OscConfig+0x288>)
 8007a42:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007a46:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	685b      	ldr	r3, [r3, #4]
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d013      	beq.n	8007a78 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a50:	f7fb f882 	bl	8002b58 <HAL_GetTick>
 8007a54:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007a56:	e008      	b.n	8007a6a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007a58:	f7fb f87e 	bl	8002b58 <HAL_GetTick>
 8007a5c:	4602      	mov	r2, r0
 8007a5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a60:	1ad3      	subs	r3, r2, r3
 8007a62:	2b64      	cmp	r3, #100	@ 0x64
 8007a64:	d901      	bls.n	8007a6a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007a66:	2303      	movs	r3, #3
 8007a68:	e3d4      	b.n	8008214 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007a6a:	4b63      	ldr	r3, [pc, #396]	@ (8007bf8 <HAL_RCC_OscConfig+0x288>)
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d0f0      	beq.n	8007a58 <HAL_RCC_OscConfig+0xe8>
 8007a76:	e014      	b.n	8007aa2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a78:	f7fb f86e 	bl	8002b58 <HAL_GetTick>
 8007a7c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007a7e:	e008      	b.n	8007a92 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007a80:	f7fb f86a 	bl	8002b58 <HAL_GetTick>
 8007a84:	4602      	mov	r2, r0
 8007a86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a88:	1ad3      	subs	r3, r2, r3
 8007a8a:	2b64      	cmp	r3, #100	@ 0x64
 8007a8c:	d901      	bls.n	8007a92 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8007a8e:	2303      	movs	r3, #3
 8007a90:	e3c0      	b.n	8008214 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007a92:	4b59      	ldr	r3, [pc, #356]	@ (8007bf8 <HAL_RCC_OscConfig+0x288>)
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d1f0      	bne.n	8007a80 <HAL_RCC_OscConfig+0x110>
 8007a9e:	e000      	b.n	8007aa2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007aa0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	f003 0302 	and.w	r3, r3, #2
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	f000 80ca 	beq.w	8007c44 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007ab0:	4b51      	ldr	r3, [pc, #324]	@ (8007bf8 <HAL_RCC_OscConfig+0x288>)
 8007ab2:	691b      	ldr	r3, [r3, #16]
 8007ab4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007ab8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007aba:	4b4f      	ldr	r3, [pc, #316]	@ (8007bf8 <HAL_RCC_OscConfig+0x288>)
 8007abc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007abe:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8007ac0:	6a3b      	ldr	r3, [r7, #32]
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d007      	beq.n	8007ad6 <HAL_RCC_OscConfig+0x166>
 8007ac6:	6a3b      	ldr	r3, [r7, #32]
 8007ac8:	2b18      	cmp	r3, #24
 8007aca:	d156      	bne.n	8007b7a <HAL_RCC_OscConfig+0x20a>
 8007acc:	69fb      	ldr	r3, [r7, #28]
 8007ace:	f003 0303 	and.w	r3, r3, #3
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d151      	bne.n	8007b7a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007ad6:	4b48      	ldr	r3, [pc, #288]	@ (8007bf8 <HAL_RCC_OscConfig+0x288>)
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	f003 0304 	and.w	r3, r3, #4
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d005      	beq.n	8007aee <HAL_RCC_OscConfig+0x17e>
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	68db      	ldr	r3, [r3, #12]
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d101      	bne.n	8007aee <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8007aea:	2301      	movs	r3, #1
 8007aec:	e392      	b.n	8008214 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007aee:	4b42      	ldr	r3, [pc, #264]	@ (8007bf8 <HAL_RCC_OscConfig+0x288>)
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	f023 0219 	bic.w	r2, r3, #25
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	68db      	ldr	r3, [r3, #12]
 8007afa:	493f      	ldr	r1, [pc, #252]	@ (8007bf8 <HAL_RCC_OscConfig+0x288>)
 8007afc:	4313      	orrs	r3, r2
 8007afe:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b00:	f7fb f82a 	bl	8002b58 <HAL_GetTick>
 8007b04:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007b06:	e008      	b.n	8007b1a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007b08:	f7fb f826 	bl	8002b58 <HAL_GetTick>
 8007b0c:	4602      	mov	r2, r0
 8007b0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b10:	1ad3      	subs	r3, r2, r3
 8007b12:	2b02      	cmp	r3, #2
 8007b14:	d901      	bls.n	8007b1a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8007b16:	2303      	movs	r3, #3
 8007b18:	e37c      	b.n	8008214 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007b1a:	4b37      	ldr	r3, [pc, #220]	@ (8007bf8 <HAL_RCC_OscConfig+0x288>)
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	f003 0304 	and.w	r3, r3, #4
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d0f0      	beq.n	8007b08 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007b26:	f7fb f847 	bl	8002bb8 <HAL_GetREVID>
 8007b2a:	4603      	mov	r3, r0
 8007b2c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8007b30:	4293      	cmp	r3, r2
 8007b32:	d817      	bhi.n	8007b64 <HAL_RCC_OscConfig+0x1f4>
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	691b      	ldr	r3, [r3, #16]
 8007b38:	2b40      	cmp	r3, #64	@ 0x40
 8007b3a:	d108      	bne.n	8007b4e <HAL_RCC_OscConfig+0x1de>
 8007b3c:	4b2e      	ldr	r3, [pc, #184]	@ (8007bf8 <HAL_RCC_OscConfig+0x288>)
 8007b3e:	685b      	ldr	r3, [r3, #4]
 8007b40:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8007b44:	4a2c      	ldr	r2, [pc, #176]	@ (8007bf8 <HAL_RCC_OscConfig+0x288>)
 8007b46:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007b4a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007b4c:	e07a      	b.n	8007c44 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007b4e:	4b2a      	ldr	r3, [pc, #168]	@ (8007bf8 <HAL_RCC_OscConfig+0x288>)
 8007b50:	685b      	ldr	r3, [r3, #4]
 8007b52:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	691b      	ldr	r3, [r3, #16]
 8007b5a:	031b      	lsls	r3, r3, #12
 8007b5c:	4926      	ldr	r1, [pc, #152]	@ (8007bf8 <HAL_RCC_OscConfig+0x288>)
 8007b5e:	4313      	orrs	r3, r2
 8007b60:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007b62:	e06f      	b.n	8007c44 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007b64:	4b24      	ldr	r3, [pc, #144]	@ (8007bf8 <HAL_RCC_OscConfig+0x288>)
 8007b66:	685b      	ldr	r3, [r3, #4]
 8007b68:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	691b      	ldr	r3, [r3, #16]
 8007b70:	061b      	lsls	r3, r3, #24
 8007b72:	4921      	ldr	r1, [pc, #132]	@ (8007bf8 <HAL_RCC_OscConfig+0x288>)
 8007b74:	4313      	orrs	r3, r2
 8007b76:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007b78:	e064      	b.n	8007c44 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	68db      	ldr	r3, [r3, #12]
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d047      	beq.n	8007c12 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007b82:	4b1d      	ldr	r3, [pc, #116]	@ (8007bf8 <HAL_RCC_OscConfig+0x288>)
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	f023 0219 	bic.w	r2, r3, #25
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	68db      	ldr	r3, [r3, #12]
 8007b8e:	491a      	ldr	r1, [pc, #104]	@ (8007bf8 <HAL_RCC_OscConfig+0x288>)
 8007b90:	4313      	orrs	r3, r2
 8007b92:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b94:	f7fa ffe0 	bl	8002b58 <HAL_GetTick>
 8007b98:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007b9a:	e008      	b.n	8007bae <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007b9c:	f7fa ffdc 	bl	8002b58 <HAL_GetTick>
 8007ba0:	4602      	mov	r2, r0
 8007ba2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ba4:	1ad3      	subs	r3, r2, r3
 8007ba6:	2b02      	cmp	r3, #2
 8007ba8:	d901      	bls.n	8007bae <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8007baa:	2303      	movs	r3, #3
 8007bac:	e332      	b.n	8008214 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007bae:	4b12      	ldr	r3, [pc, #72]	@ (8007bf8 <HAL_RCC_OscConfig+0x288>)
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	f003 0304 	and.w	r3, r3, #4
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d0f0      	beq.n	8007b9c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007bba:	f7fa fffd 	bl	8002bb8 <HAL_GetREVID>
 8007bbe:	4603      	mov	r3, r0
 8007bc0:	f241 0203 	movw	r2, #4099	@ 0x1003
 8007bc4:	4293      	cmp	r3, r2
 8007bc6:	d819      	bhi.n	8007bfc <HAL_RCC_OscConfig+0x28c>
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	691b      	ldr	r3, [r3, #16]
 8007bcc:	2b40      	cmp	r3, #64	@ 0x40
 8007bce:	d108      	bne.n	8007be2 <HAL_RCC_OscConfig+0x272>
 8007bd0:	4b09      	ldr	r3, [pc, #36]	@ (8007bf8 <HAL_RCC_OscConfig+0x288>)
 8007bd2:	685b      	ldr	r3, [r3, #4]
 8007bd4:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8007bd8:	4a07      	ldr	r2, [pc, #28]	@ (8007bf8 <HAL_RCC_OscConfig+0x288>)
 8007bda:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007bde:	6053      	str	r3, [r2, #4]
 8007be0:	e030      	b.n	8007c44 <HAL_RCC_OscConfig+0x2d4>
 8007be2:	4b05      	ldr	r3, [pc, #20]	@ (8007bf8 <HAL_RCC_OscConfig+0x288>)
 8007be4:	685b      	ldr	r3, [r3, #4]
 8007be6:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	691b      	ldr	r3, [r3, #16]
 8007bee:	031b      	lsls	r3, r3, #12
 8007bf0:	4901      	ldr	r1, [pc, #4]	@ (8007bf8 <HAL_RCC_OscConfig+0x288>)
 8007bf2:	4313      	orrs	r3, r2
 8007bf4:	604b      	str	r3, [r1, #4]
 8007bf6:	e025      	b.n	8007c44 <HAL_RCC_OscConfig+0x2d4>
 8007bf8:	58024400 	.word	0x58024400
 8007bfc:	4b9a      	ldr	r3, [pc, #616]	@ (8007e68 <HAL_RCC_OscConfig+0x4f8>)
 8007bfe:	685b      	ldr	r3, [r3, #4]
 8007c00:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	691b      	ldr	r3, [r3, #16]
 8007c08:	061b      	lsls	r3, r3, #24
 8007c0a:	4997      	ldr	r1, [pc, #604]	@ (8007e68 <HAL_RCC_OscConfig+0x4f8>)
 8007c0c:	4313      	orrs	r3, r2
 8007c0e:	604b      	str	r3, [r1, #4]
 8007c10:	e018      	b.n	8007c44 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007c12:	4b95      	ldr	r3, [pc, #596]	@ (8007e68 <HAL_RCC_OscConfig+0x4f8>)
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	4a94      	ldr	r2, [pc, #592]	@ (8007e68 <HAL_RCC_OscConfig+0x4f8>)
 8007c18:	f023 0301 	bic.w	r3, r3, #1
 8007c1c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c1e:	f7fa ff9b 	bl	8002b58 <HAL_GetTick>
 8007c22:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007c24:	e008      	b.n	8007c38 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007c26:	f7fa ff97 	bl	8002b58 <HAL_GetTick>
 8007c2a:	4602      	mov	r2, r0
 8007c2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c2e:	1ad3      	subs	r3, r2, r3
 8007c30:	2b02      	cmp	r3, #2
 8007c32:	d901      	bls.n	8007c38 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8007c34:	2303      	movs	r3, #3
 8007c36:	e2ed      	b.n	8008214 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007c38:	4b8b      	ldr	r3, [pc, #556]	@ (8007e68 <HAL_RCC_OscConfig+0x4f8>)
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	f003 0304 	and.w	r3, r3, #4
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d1f0      	bne.n	8007c26 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	f003 0310 	and.w	r3, r3, #16
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	f000 80a9 	beq.w	8007da4 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007c52:	4b85      	ldr	r3, [pc, #532]	@ (8007e68 <HAL_RCC_OscConfig+0x4f8>)
 8007c54:	691b      	ldr	r3, [r3, #16]
 8007c56:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007c5a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007c5c:	4b82      	ldr	r3, [pc, #520]	@ (8007e68 <HAL_RCC_OscConfig+0x4f8>)
 8007c5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c60:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8007c62:	69bb      	ldr	r3, [r7, #24]
 8007c64:	2b08      	cmp	r3, #8
 8007c66:	d007      	beq.n	8007c78 <HAL_RCC_OscConfig+0x308>
 8007c68:	69bb      	ldr	r3, [r7, #24]
 8007c6a:	2b18      	cmp	r3, #24
 8007c6c:	d13a      	bne.n	8007ce4 <HAL_RCC_OscConfig+0x374>
 8007c6e:	697b      	ldr	r3, [r7, #20]
 8007c70:	f003 0303 	and.w	r3, r3, #3
 8007c74:	2b01      	cmp	r3, #1
 8007c76:	d135      	bne.n	8007ce4 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007c78:	4b7b      	ldr	r3, [pc, #492]	@ (8007e68 <HAL_RCC_OscConfig+0x4f8>)
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d005      	beq.n	8007c90 <HAL_RCC_OscConfig+0x320>
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	69db      	ldr	r3, [r3, #28]
 8007c88:	2b80      	cmp	r3, #128	@ 0x80
 8007c8a:	d001      	beq.n	8007c90 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8007c8c:	2301      	movs	r3, #1
 8007c8e:	e2c1      	b.n	8008214 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007c90:	f7fa ff92 	bl	8002bb8 <HAL_GetREVID>
 8007c94:	4603      	mov	r3, r0
 8007c96:	f241 0203 	movw	r2, #4099	@ 0x1003
 8007c9a:	4293      	cmp	r3, r2
 8007c9c:	d817      	bhi.n	8007cce <HAL_RCC_OscConfig+0x35e>
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	6a1b      	ldr	r3, [r3, #32]
 8007ca2:	2b20      	cmp	r3, #32
 8007ca4:	d108      	bne.n	8007cb8 <HAL_RCC_OscConfig+0x348>
 8007ca6:	4b70      	ldr	r3, [pc, #448]	@ (8007e68 <HAL_RCC_OscConfig+0x4f8>)
 8007ca8:	685b      	ldr	r3, [r3, #4]
 8007caa:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8007cae:	4a6e      	ldr	r2, [pc, #440]	@ (8007e68 <HAL_RCC_OscConfig+0x4f8>)
 8007cb0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007cb4:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007cb6:	e075      	b.n	8007da4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007cb8:	4b6b      	ldr	r3, [pc, #428]	@ (8007e68 <HAL_RCC_OscConfig+0x4f8>)
 8007cba:	685b      	ldr	r3, [r3, #4]
 8007cbc:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	6a1b      	ldr	r3, [r3, #32]
 8007cc4:	069b      	lsls	r3, r3, #26
 8007cc6:	4968      	ldr	r1, [pc, #416]	@ (8007e68 <HAL_RCC_OscConfig+0x4f8>)
 8007cc8:	4313      	orrs	r3, r2
 8007cca:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007ccc:	e06a      	b.n	8007da4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007cce:	4b66      	ldr	r3, [pc, #408]	@ (8007e68 <HAL_RCC_OscConfig+0x4f8>)
 8007cd0:	68db      	ldr	r3, [r3, #12]
 8007cd2:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	6a1b      	ldr	r3, [r3, #32]
 8007cda:	061b      	lsls	r3, r3, #24
 8007cdc:	4962      	ldr	r1, [pc, #392]	@ (8007e68 <HAL_RCC_OscConfig+0x4f8>)
 8007cde:	4313      	orrs	r3, r2
 8007ce0:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007ce2:	e05f      	b.n	8007da4 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	69db      	ldr	r3, [r3, #28]
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d042      	beq.n	8007d72 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8007cec:	4b5e      	ldr	r3, [pc, #376]	@ (8007e68 <HAL_RCC_OscConfig+0x4f8>)
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	4a5d      	ldr	r2, [pc, #372]	@ (8007e68 <HAL_RCC_OscConfig+0x4f8>)
 8007cf2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007cf6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007cf8:	f7fa ff2e 	bl	8002b58 <HAL_GetTick>
 8007cfc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007cfe:	e008      	b.n	8007d12 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8007d00:	f7fa ff2a 	bl	8002b58 <HAL_GetTick>
 8007d04:	4602      	mov	r2, r0
 8007d06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d08:	1ad3      	subs	r3, r2, r3
 8007d0a:	2b02      	cmp	r3, #2
 8007d0c:	d901      	bls.n	8007d12 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8007d0e:	2303      	movs	r3, #3
 8007d10:	e280      	b.n	8008214 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007d12:	4b55      	ldr	r3, [pc, #340]	@ (8007e68 <HAL_RCC_OscConfig+0x4f8>)
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d0f0      	beq.n	8007d00 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007d1e:	f7fa ff4b 	bl	8002bb8 <HAL_GetREVID>
 8007d22:	4603      	mov	r3, r0
 8007d24:	f241 0203 	movw	r2, #4099	@ 0x1003
 8007d28:	4293      	cmp	r3, r2
 8007d2a:	d817      	bhi.n	8007d5c <HAL_RCC_OscConfig+0x3ec>
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	6a1b      	ldr	r3, [r3, #32]
 8007d30:	2b20      	cmp	r3, #32
 8007d32:	d108      	bne.n	8007d46 <HAL_RCC_OscConfig+0x3d6>
 8007d34:	4b4c      	ldr	r3, [pc, #304]	@ (8007e68 <HAL_RCC_OscConfig+0x4f8>)
 8007d36:	685b      	ldr	r3, [r3, #4]
 8007d38:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8007d3c:	4a4a      	ldr	r2, [pc, #296]	@ (8007e68 <HAL_RCC_OscConfig+0x4f8>)
 8007d3e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007d42:	6053      	str	r3, [r2, #4]
 8007d44:	e02e      	b.n	8007da4 <HAL_RCC_OscConfig+0x434>
 8007d46:	4b48      	ldr	r3, [pc, #288]	@ (8007e68 <HAL_RCC_OscConfig+0x4f8>)
 8007d48:	685b      	ldr	r3, [r3, #4]
 8007d4a:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	6a1b      	ldr	r3, [r3, #32]
 8007d52:	069b      	lsls	r3, r3, #26
 8007d54:	4944      	ldr	r1, [pc, #272]	@ (8007e68 <HAL_RCC_OscConfig+0x4f8>)
 8007d56:	4313      	orrs	r3, r2
 8007d58:	604b      	str	r3, [r1, #4]
 8007d5a:	e023      	b.n	8007da4 <HAL_RCC_OscConfig+0x434>
 8007d5c:	4b42      	ldr	r3, [pc, #264]	@ (8007e68 <HAL_RCC_OscConfig+0x4f8>)
 8007d5e:	68db      	ldr	r3, [r3, #12]
 8007d60:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	6a1b      	ldr	r3, [r3, #32]
 8007d68:	061b      	lsls	r3, r3, #24
 8007d6a:	493f      	ldr	r1, [pc, #252]	@ (8007e68 <HAL_RCC_OscConfig+0x4f8>)
 8007d6c:	4313      	orrs	r3, r2
 8007d6e:	60cb      	str	r3, [r1, #12]
 8007d70:	e018      	b.n	8007da4 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8007d72:	4b3d      	ldr	r3, [pc, #244]	@ (8007e68 <HAL_RCC_OscConfig+0x4f8>)
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	4a3c      	ldr	r2, [pc, #240]	@ (8007e68 <HAL_RCC_OscConfig+0x4f8>)
 8007d78:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007d7c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d7e:	f7fa feeb 	bl	8002b58 <HAL_GetTick>
 8007d82:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007d84:	e008      	b.n	8007d98 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8007d86:	f7fa fee7 	bl	8002b58 <HAL_GetTick>
 8007d8a:	4602      	mov	r2, r0
 8007d8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d8e:	1ad3      	subs	r3, r2, r3
 8007d90:	2b02      	cmp	r3, #2
 8007d92:	d901      	bls.n	8007d98 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007d94:	2303      	movs	r3, #3
 8007d96:	e23d      	b.n	8008214 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007d98:	4b33      	ldr	r3, [pc, #204]	@ (8007e68 <HAL_RCC_OscConfig+0x4f8>)
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d1f0      	bne.n	8007d86 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	f003 0308 	and.w	r3, r3, #8
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d036      	beq.n	8007e1e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	695b      	ldr	r3, [r3, #20]
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d019      	beq.n	8007dec <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007db8:	4b2b      	ldr	r3, [pc, #172]	@ (8007e68 <HAL_RCC_OscConfig+0x4f8>)
 8007dba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007dbc:	4a2a      	ldr	r2, [pc, #168]	@ (8007e68 <HAL_RCC_OscConfig+0x4f8>)
 8007dbe:	f043 0301 	orr.w	r3, r3, #1
 8007dc2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007dc4:	f7fa fec8 	bl	8002b58 <HAL_GetTick>
 8007dc8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007dca:	e008      	b.n	8007dde <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007dcc:	f7fa fec4 	bl	8002b58 <HAL_GetTick>
 8007dd0:	4602      	mov	r2, r0
 8007dd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dd4:	1ad3      	subs	r3, r2, r3
 8007dd6:	2b02      	cmp	r3, #2
 8007dd8:	d901      	bls.n	8007dde <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8007dda:	2303      	movs	r3, #3
 8007ddc:	e21a      	b.n	8008214 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007dde:	4b22      	ldr	r3, [pc, #136]	@ (8007e68 <HAL_RCC_OscConfig+0x4f8>)
 8007de0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007de2:	f003 0302 	and.w	r3, r3, #2
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d0f0      	beq.n	8007dcc <HAL_RCC_OscConfig+0x45c>
 8007dea:	e018      	b.n	8007e1e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007dec:	4b1e      	ldr	r3, [pc, #120]	@ (8007e68 <HAL_RCC_OscConfig+0x4f8>)
 8007dee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007df0:	4a1d      	ldr	r2, [pc, #116]	@ (8007e68 <HAL_RCC_OscConfig+0x4f8>)
 8007df2:	f023 0301 	bic.w	r3, r3, #1
 8007df6:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007df8:	f7fa feae 	bl	8002b58 <HAL_GetTick>
 8007dfc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007dfe:	e008      	b.n	8007e12 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007e00:	f7fa feaa 	bl	8002b58 <HAL_GetTick>
 8007e04:	4602      	mov	r2, r0
 8007e06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e08:	1ad3      	subs	r3, r2, r3
 8007e0a:	2b02      	cmp	r3, #2
 8007e0c:	d901      	bls.n	8007e12 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8007e0e:	2303      	movs	r3, #3
 8007e10:	e200      	b.n	8008214 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007e12:	4b15      	ldr	r3, [pc, #84]	@ (8007e68 <HAL_RCC_OscConfig+0x4f8>)
 8007e14:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007e16:	f003 0302 	and.w	r3, r3, #2
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d1f0      	bne.n	8007e00 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	f003 0320 	and.w	r3, r3, #32
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d039      	beq.n	8007e9e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	699b      	ldr	r3, [r3, #24]
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d01c      	beq.n	8007e6c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007e32:	4b0d      	ldr	r3, [pc, #52]	@ (8007e68 <HAL_RCC_OscConfig+0x4f8>)
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	4a0c      	ldr	r2, [pc, #48]	@ (8007e68 <HAL_RCC_OscConfig+0x4f8>)
 8007e38:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8007e3c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007e3e:	f7fa fe8b 	bl	8002b58 <HAL_GetTick>
 8007e42:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007e44:	e008      	b.n	8007e58 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007e46:	f7fa fe87 	bl	8002b58 <HAL_GetTick>
 8007e4a:	4602      	mov	r2, r0
 8007e4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e4e:	1ad3      	subs	r3, r2, r3
 8007e50:	2b02      	cmp	r3, #2
 8007e52:	d901      	bls.n	8007e58 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8007e54:	2303      	movs	r3, #3
 8007e56:	e1dd      	b.n	8008214 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007e58:	4b03      	ldr	r3, [pc, #12]	@ (8007e68 <HAL_RCC_OscConfig+0x4f8>)
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d0f0      	beq.n	8007e46 <HAL_RCC_OscConfig+0x4d6>
 8007e64:	e01b      	b.n	8007e9e <HAL_RCC_OscConfig+0x52e>
 8007e66:	bf00      	nop
 8007e68:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007e6c:	4b9b      	ldr	r3, [pc, #620]	@ (80080dc <HAL_RCC_OscConfig+0x76c>)
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	4a9a      	ldr	r2, [pc, #616]	@ (80080dc <HAL_RCC_OscConfig+0x76c>)
 8007e72:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007e76:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007e78:	f7fa fe6e 	bl	8002b58 <HAL_GetTick>
 8007e7c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007e7e:	e008      	b.n	8007e92 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007e80:	f7fa fe6a 	bl	8002b58 <HAL_GetTick>
 8007e84:	4602      	mov	r2, r0
 8007e86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e88:	1ad3      	subs	r3, r2, r3
 8007e8a:	2b02      	cmp	r3, #2
 8007e8c:	d901      	bls.n	8007e92 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8007e8e:	2303      	movs	r3, #3
 8007e90:	e1c0      	b.n	8008214 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007e92:	4b92      	ldr	r3, [pc, #584]	@ (80080dc <HAL_RCC_OscConfig+0x76c>)
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d1f0      	bne.n	8007e80 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	f003 0304 	and.w	r3, r3, #4
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	f000 8081 	beq.w	8007fae <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007eac:	4b8c      	ldr	r3, [pc, #560]	@ (80080e0 <HAL_RCC_OscConfig+0x770>)
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	4a8b      	ldr	r2, [pc, #556]	@ (80080e0 <HAL_RCC_OscConfig+0x770>)
 8007eb2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007eb6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007eb8:	f7fa fe4e 	bl	8002b58 <HAL_GetTick>
 8007ebc:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007ebe:	e008      	b.n	8007ed2 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007ec0:	f7fa fe4a 	bl	8002b58 <HAL_GetTick>
 8007ec4:	4602      	mov	r2, r0
 8007ec6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ec8:	1ad3      	subs	r3, r2, r3
 8007eca:	2b64      	cmp	r3, #100	@ 0x64
 8007ecc:	d901      	bls.n	8007ed2 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8007ece:	2303      	movs	r3, #3
 8007ed0:	e1a0      	b.n	8008214 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007ed2:	4b83      	ldr	r3, [pc, #524]	@ (80080e0 <HAL_RCC_OscConfig+0x770>)
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d0f0      	beq.n	8007ec0 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	689b      	ldr	r3, [r3, #8]
 8007ee2:	2b01      	cmp	r3, #1
 8007ee4:	d106      	bne.n	8007ef4 <HAL_RCC_OscConfig+0x584>
 8007ee6:	4b7d      	ldr	r3, [pc, #500]	@ (80080dc <HAL_RCC_OscConfig+0x76c>)
 8007ee8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007eea:	4a7c      	ldr	r2, [pc, #496]	@ (80080dc <HAL_RCC_OscConfig+0x76c>)
 8007eec:	f043 0301 	orr.w	r3, r3, #1
 8007ef0:	6713      	str	r3, [r2, #112]	@ 0x70
 8007ef2:	e02d      	b.n	8007f50 <HAL_RCC_OscConfig+0x5e0>
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	689b      	ldr	r3, [r3, #8]
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d10c      	bne.n	8007f16 <HAL_RCC_OscConfig+0x5a6>
 8007efc:	4b77      	ldr	r3, [pc, #476]	@ (80080dc <HAL_RCC_OscConfig+0x76c>)
 8007efe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007f00:	4a76      	ldr	r2, [pc, #472]	@ (80080dc <HAL_RCC_OscConfig+0x76c>)
 8007f02:	f023 0301 	bic.w	r3, r3, #1
 8007f06:	6713      	str	r3, [r2, #112]	@ 0x70
 8007f08:	4b74      	ldr	r3, [pc, #464]	@ (80080dc <HAL_RCC_OscConfig+0x76c>)
 8007f0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007f0c:	4a73      	ldr	r2, [pc, #460]	@ (80080dc <HAL_RCC_OscConfig+0x76c>)
 8007f0e:	f023 0304 	bic.w	r3, r3, #4
 8007f12:	6713      	str	r3, [r2, #112]	@ 0x70
 8007f14:	e01c      	b.n	8007f50 <HAL_RCC_OscConfig+0x5e0>
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	689b      	ldr	r3, [r3, #8]
 8007f1a:	2b05      	cmp	r3, #5
 8007f1c:	d10c      	bne.n	8007f38 <HAL_RCC_OscConfig+0x5c8>
 8007f1e:	4b6f      	ldr	r3, [pc, #444]	@ (80080dc <HAL_RCC_OscConfig+0x76c>)
 8007f20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007f22:	4a6e      	ldr	r2, [pc, #440]	@ (80080dc <HAL_RCC_OscConfig+0x76c>)
 8007f24:	f043 0304 	orr.w	r3, r3, #4
 8007f28:	6713      	str	r3, [r2, #112]	@ 0x70
 8007f2a:	4b6c      	ldr	r3, [pc, #432]	@ (80080dc <HAL_RCC_OscConfig+0x76c>)
 8007f2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007f2e:	4a6b      	ldr	r2, [pc, #428]	@ (80080dc <HAL_RCC_OscConfig+0x76c>)
 8007f30:	f043 0301 	orr.w	r3, r3, #1
 8007f34:	6713      	str	r3, [r2, #112]	@ 0x70
 8007f36:	e00b      	b.n	8007f50 <HAL_RCC_OscConfig+0x5e0>
 8007f38:	4b68      	ldr	r3, [pc, #416]	@ (80080dc <HAL_RCC_OscConfig+0x76c>)
 8007f3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007f3c:	4a67      	ldr	r2, [pc, #412]	@ (80080dc <HAL_RCC_OscConfig+0x76c>)
 8007f3e:	f023 0301 	bic.w	r3, r3, #1
 8007f42:	6713      	str	r3, [r2, #112]	@ 0x70
 8007f44:	4b65      	ldr	r3, [pc, #404]	@ (80080dc <HAL_RCC_OscConfig+0x76c>)
 8007f46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007f48:	4a64      	ldr	r2, [pc, #400]	@ (80080dc <HAL_RCC_OscConfig+0x76c>)
 8007f4a:	f023 0304 	bic.w	r3, r3, #4
 8007f4e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	689b      	ldr	r3, [r3, #8]
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d015      	beq.n	8007f84 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007f58:	f7fa fdfe 	bl	8002b58 <HAL_GetTick>
 8007f5c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007f5e:	e00a      	b.n	8007f76 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007f60:	f7fa fdfa 	bl	8002b58 <HAL_GetTick>
 8007f64:	4602      	mov	r2, r0
 8007f66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f68:	1ad3      	subs	r3, r2, r3
 8007f6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007f6e:	4293      	cmp	r3, r2
 8007f70:	d901      	bls.n	8007f76 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8007f72:	2303      	movs	r3, #3
 8007f74:	e14e      	b.n	8008214 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007f76:	4b59      	ldr	r3, [pc, #356]	@ (80080dc <HAL_RCC_OscConfig+0x76c>)
 8007f78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007f7a:	f003 0302 	and.w	r3, r3, #2
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d0ee      	beq.n	8007f60 <HAL_RCC_OscConfig+0x5f0>
 8007f82:	e014      	b.n	8007fae <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007f84:	f7fa fde8 	bl	8002b58 <HAL_GetTick>
 8007f88:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007f8a:	e00a      	b.n	8007fa2 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007f8c:	f7fa fde4 	bl	8002b58 <HAL_GetTick>
 8007f90:	4602      	mov	r2, r0
 8007f92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f94:	1ad3      	subs	r3, r2, r3
 8007f96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007f9a:	4293      	cmp	r3, r2
 8007f9c:	d901      	bls.n	8007fa2 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8007f9e:	2303      	movs	r3, #3
 8007fa0:	e138      	b.n	8008214 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007fa2:	4b4e      	ldr	r3, [pc, #312]	@ (80080dc <HAL_RCC_OscConfig+0x76c>)
 8007fa4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007fa6:	f003 0302 	and.w	r3, r3, #2
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d1ee      	bne.n	8007f8c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	f000 812d 	beq.w	8008212 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8007fb8:	4b48      	ldr	r3, [pc, #288]	@ (80080dc <HAL_RCC_OscConfig+0x76c>)
 8007fba:	691b      	ldr	r3, [r3, #16]
 8007fbc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007fc0:	2b18      	cmp	r3, #24
 8007fc2:	f000 80bd 	beq.w	8008140 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007fca:	2b02      	cmp	r3, #2
 8007fcc:	f040 809e 	bne.w	800810c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007fd0:	4b42      	ldr	r3, [pc, #264]	@ (80080dc <HAL_RCC_OscConfig+0x76c>)
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	4a41      	ldr	r2, [pc, #260]	@ (80080dc <HAL_RCC_OscConfig+0x76c>)
 8007fd6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007fda:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007fdc:	f7fa fdbc 	bl	8002b58 <HAL_GetTick>
 8007fe0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007fe2:	e008      	b.n	8007ff6 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007fe4:	f7fa fdb8 	bl	8002b58 <HAL_GetTick>
 8007fe8:	4602      	mov	r2, r0
 8007fea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fec:	1ad3      	subs	r3, r2, r3
 8007fee:	2b02      	cmp	r3, #2
 8007ff0:	d901      	bls.n	8007ff6 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8007ff2:	2303      	movs	r3, #3
 8007ff4:	e10e      	b.n	8008214 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007ff6:	4b39      	ldr	r3, [pc, #228]	@ (80080dc <HAL_RCC_OscConfig+0x76c>)
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d1f0      	bne.n	8007fe4 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008002:	4b36      	ldr	r3, [pc, #216]	@ (80080dc <HAL_RCC_OscConfig+0x76c>)
 8008004:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008006:	4b37      	ldr	r3, [pc, #220]	@ (80080e4 <HAL_RCC_OscConfig+0x774>)
 8008008:	4013      	ands	r3, r2
 800800a:	687a      	ldr	r2, [r7, #4]
 800800c:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800800e:	687a      	ldr	r2, [r7, #4]
 8008010:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8008012:	0112      	lsls	r2, r2, #4
 8008014:	430a      	orrs	r2, r1
 8008016:	4931      	ldr	r1, [pc, #196]	@ (80080dc <HAL_RCC_OscConfig+0x76c>)
 8008018:	4313      	orrs	r3, r2
 800801a:	628b      	str	r3, [r1, #40]	@ 0x28
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008020:	3b01      	subs	r3, #1
 8008022:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800802a:	3b01      	subs	r3, #1
 800802c:	025b      	lsls	r3, r3, #9
 800802e:	b29b      	uxth	r3, r3
 8008030:	431a      	orrs	r2, r3
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008036:	3b01      	subs	r3, #1
 8008038:	041b      	lsls	r3, r3, #16
 800803a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800803e:	431a      	orrs	r2, r3
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008044:	3b01      	subs	r3, #1
 8008046:	061b      	lsls	r3, r3, #24
 8008048:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800804c:	4923      	ldr	r1, [pc, #140]	@ (80080dc <HAL_RCC_OscConfig+0x76c>)
 800804e:	4313      	orrs	r3, r2
 8008050:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8008052:	4b22      	ldr	r3, [pc, #136]	@ (80080dc <HAL_RCC_OscConfig+0x76c>)
 8008054:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008056:	4a21      	ldr	r2, [pc, #132]	@ (80080dc <HAL_RCC_OscConfig+0x76c>)
 8008058:	f023 0301 	bic.w	r3, r3, #1
 800805c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800805e:	4b1f      	ldr	r3, [pc, #124]	@ (80080dc <HAL_RCC_OscConfig+0x76c>)
 8008060:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008062:	4b21      	ldr	r3, [pc, #132]	@ (80080e8 <HAL_RCC_OscConfig+0x778>)
 8008064:	4013      	ands	r3, r2
 8008066:	687a      	ldr	r2, [r7, #4]
 8008068:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800806a:	00d2      	lsls	r2, r2, #3
 800806c:	491b      	ldr	r1, [pc, #108]	@ (80080dc <HAL_RCC_OscConfig+0x76c>)
 800806e:	4313      	orrs	r3, r2
 8008070:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8008072:	4b1a      	ldr	r3, [pc, #104]	@ (80080dc <HAL_RCC_OscConfig+0x76c>)
 8008074:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008076:	f023 020c 	bic.w	r2, r3, #12
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800807e:	4917      	ldr	r1, [pc, #92]	@ (80080dc <HAL_RCC_OscConfig+0x76c>)
 8008080:	4313      	orrs	r3, r2
 8008082:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8008084:	4b15      	ldr	r3, [pc, #84]	@ (80080dc <HAL_RCC_OscConfig+0x76c>)
 8008086:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008088:	f023 0202 	bic.w	r2, r3, #2
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008090:	4912      	ldr	r1, [pc, #72]	@ (80080dc <HAL_RCC_OscConfig+0x76c>)
 8008092:	4313      	orrs	r3, r2
 8008094:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008096:	4b11      	ldr	r3, [pc, #68]	@ (80080dc <HAL_RCC_OscConfig+0x76c>)
 8008098:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800809a:	4a10      	ldr	r2, [pc, #64]	@ (80080dc <HAL_RCC_OscConfig+0x76c>)
 800809c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80080a0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80080a2:	4b0e      	ldr	r3, [pc, #56]	@ (80080dc <HAL_RCC_OscConfig+0x76c>)
 80080a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080a6:	4a0d      	ldr	r2, [pc, #52]	@ (80080dc <HAL_RCC_OscConfig+0x76c>)
 80080a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80080ac:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80080ae:	4b0b      	ldr	r3, [pc, #44]	@ (80080dc <HAL_RCC_OscConfig+0x76c>)
 80080b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080b2:	4a0a      	ldr	r2, [pc, #40]	@ (80080dc <HAL_RCC_OscConfig+0x76c>)
 80080b4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80080b8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80080ba:	4b08      	ldr	r3, [pc, #32]	@ (80080dc <HAL_RCC_OscConfig+0x76c>)
 80080bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080be:	4a07      	ldr	r2, [pc, #28]	@ (80080dc <HAL_RCC_OscConfig+0x76c>)
 80080c0:	f043 0301 	orr.w	r3, r3, #1
 80080c4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80080c6:	4b05      	ldr	r3, [pc, #20]	@ (80080dc <HAL_RCC_OscConfig+0x76c>)
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	4a04      	ldr	r2, [pc, #16]	@ (80080dc <HAL_RCC_OscConfig+0x76c>)
 80080cc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80080d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80080d2:	f7fa fd41 	bl	8002b58 <HAL_GetTick>
 80080d6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80080d8:	e011      	b.n	80080fe <HAL_RCC_OscConfig+0x78e>
 80080da:	bf00      	nop
 80080dc:	58024400 	.word	0x58024400
 80080e0:	58024800 	.word	0x58024800
 80080e4:	fffffc0c 	.word	0xfffffc0c
 80080e8:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80080ec:	f7fa fd34 	bl	8002b58 <HAL_GetTick>
 80080f0:	4602      	mov	r2, r0
 80080f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080f4:	1ad3      	subs	r3, r2, r3
 80080f6:	2b02      	cmp	r3, #2
 80080f8:	d901      	bls.n	80080fe <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80080fa:	2303      	movs	r3, #3
 80080fc:	e08a      	b.n	8008214 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80080fe:	4b47      	ldr	r3, [pc, #284]	@ (800821c <HAL_RCC_OscConfig+0x8ac>)
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008106:	2b00      	cmp	r3, #0
 8008108:	d0f0      	beq.n	80080ec <HAL_RCC_OscConfig+0x77c>
 800810a:	e082      	b.n	8008212 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800810c:	4b43      	ldr	r3, [pc, #268]	@ (800821c <HAL_RCC_OscConfig+0x8ac>)
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	4a42      	ldr	r2, [pc, #264]	@ (800821c <HAL_RCC_OscConfig+0x8ac>)
 8008112:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008116:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008118:	f7fa fd1e 	bl	8002b58 <HAL_GetTick>
 800811c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800811e:	e008      	b.n	8008132 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008120:	f7fa fd1a 	bl	8002b58 <HAL_GetTick>
 8008124:	4602      	mov	r2, r0
 8008126:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008128:	1ad3      	subs	r3, r2, r3
 800812a:	2b02      	cmp	r3, #2
 800812c:	d901      	bls.n	8008132 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800812e:	2303      	movs	r3, #3
 8008130:	e070      	b.n	8008214 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008132:	4b3a      	ldr	r3, [pc, #232]	@ (800821c <HAL_RCC_OscConfig+0x8ac>)
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800813a:	2b00      	cmp	r3, #0
 800813c:	d1f0      	bne.n	8008120 <HAL_RCC_OscConfig+0x7b0>
 800813e:	e068      	b.n	8008212 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8008140:	4b36      	ldr	r3, [pc, #216]	@ (800821c <HAL_RCC_OscConfig+0x8ac>)
 8008142:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008144:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8008146:	4b35      	ldr	r3, [pc, #212]	@ (800821c <HAL_RCC_OscConfig+0x8ac>)
 8008148:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800814a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008150:	2b01      	cmp	r3, #1
 8008152:	d031      	beq.n	80081b8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008154:	693b      	ldr	r3, [r7, #16]
 8008156:	f003 0203 	and.w	r2, r3, #3
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800815e:	429a      	cmp	r2, r3
 8008160:	d12a      	bne.n	80081b8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008162:	693b      	ldr	r3, [r7, #16]
 8008164:	091b      	lsrs	r3, r3, #4
 8008166:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800816e:	429a      	cmp	r2, r3
 8008170:	d122      	bne.n	80081b8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800817c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800817e:	429a      	cmp	r2, r3
 8008180:	d11a      	bne.n	80081b8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	0a5b      	lsrs	r3, r3, #9
 8008186:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800818e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008190:	429a      	cmp	r2, r3
 8008192:	d111      	bne.n	80081b8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	0c1b      	lsrs	r3, r3, #16
 8008198:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081a0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80081a2:	429a      	cmp	r2, r3
 80081a4:	d108      	bne.n	80081b8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	0e1b      	lsrs	r3, r3, #24
 80081aa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80081b2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80081b4:	429a      	cmp	r2, r3
 80081b6:	d001      	beq.n	80081bc <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80081b8:	2301      	movs	r3, #1
 80081ba:	e02b      	b.n	8008214 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80081bc:	4b17      	ldr	r3, [pc, #92]	@ (800821c <HAL_RCC_OscConfig+0x8ac>)
 80081be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80081c0:	08db      	lsrs	r3, r3, #3
 80081c2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80081c6:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80081cc:	693a      	ldr	r2, [r7, #16]
 80081ce:	429a      	cmp	r2, r3
 80081d0:	d01f      	beq.n	8008212 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80081d2:	4b12      	ldr	r3, [pc, #72]	@ (800821c <HAL_RCC_OscConfig+0x8ac>)
 80081d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081d6:	4a11      	ldr	r2, [pc, #68]	@ (800821c <HAL_RCC_OscConfig+0x8ac>)
 80081d8:	f023 0301 	bic.w	r3, r3, #1
 80081dc:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80081de:	f7fa fcbb 	bl	8002b58 <HAL_GetTick>
 80081e2:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80081e4:	bf00      	nop
 80081e6:	f7fa fcb7 	bl	8002b58 <HAL_GetTick>
 80081ea:	4602      	mov	r2, r0
 80081ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081ee:	4293      	cmp	r3, r2
 80081f0:	d0f9      	beq.n	80081e6 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80081f2:	4b0a      	ldr	r3, [pc, #40]	@ (800821c <HAL_RCC_OscConfig+0x8ac>)
 80081f4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80081f6:	4b0a      	ldr	r3, [pc, #40]	@ (8008220 <HAL_RCC_OscConfig+0x8b0>)
 80081f8:	4013      	ands	r3, r2
 80081fa:	687a      	ldr	r2, [r7, #4]
 80081fc:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80081fe:	00d2      	lsls	r2, r2, #3
 8008200:	4906      	ldr	r1, [pc, #24]	@ (800821c <HAL_RCC_OscConfig+0x8ac>)
 8008202:	4313      	orrs	r3, r2
 8008204:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8008206:	4b05      	ldr	r3, [pc, #20]	@ (800821c <HAL_RCC_OscConfig+0x8ac>)
 8008208:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800820a:	4a04      	ldr	r2, [pc, #16]	@ (800821c <HAL_RCC_OscConfig+0x8ac>)
 800820c:	f043 0301 	orr.w	r3, r3, #1
 8008210:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8008212:	2300      	movs	r3, #0
}
 8008214:	4618      	mov	r0, r3
 8008216:	3730      	adds	r7, #48	@ 0x30
 8008218:	46bd      	mov	sp, r7
 800821a:	bd80      	pop	{r7, pc}
 800821c:	58024400 	.word	0x58024400
 8008220:	ffff0007 	.word	0xffff0007

08008224 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008224:	b580      	push	{r7, lr}
 8008226:	b086      	sub	sp, #24
 8008228:	af00      	add	r7, sp, #0
 800822a:	6078      	str	r0, [r7, #4]
 800822c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	2b00      	cmp	r3, #0
 8008232:	d101      	bne.n	8008238 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008234:	2301      	movs	r3, #1
 8008236:	e19c      	b.n	8008572 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008238:	4b8a      	ldr	r3, [pc, #552]	@ (8008464 <HAL_RCC_ClockConfig+0x240>)
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	f003 030f 	and.w	r3, r3, #15
 8008240:	683a      	ldr	r2, [r7, #0]
 8008242:	429a      	cmp	r2, r3
 8008244:	d910      	bls.n	8008268 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008246:	4b87      	ldr	r3, [pc, #540]	@ (8008464 <HAL_RCC_ClockConfig+0x240>)
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	f023 020f 	bic.w	r2, r3, #15
 800824e:	4985      	ldr	r1, [pc, #532]	@ (8008464 <HAL_RCC_ClockConfig+0x240>)
 8008250:	683b      	ldr	r3, [r7, #0]
 8008252:	4313      	orrs	r3, r2
 8008254:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008256:	4b83      	ldr	r3, [pc, #524]	@ (8008464 <HAL_RCC_ClockConfig+0x240>)
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	f003 030f 	and.w	r3, r3, #15
 800825e:	683a      	ldr	r2, [r7, #0]
 8008260:	429a      	cmp	r2, r3
 8008262:	d001      	beq.n	8008268 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008264:	2301      	movs	r3, #1
 8008266:	e184      	b.n	8008572 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	f003 0304 	and.w	r3, r3, #4
 8008270:	2b00      	cmp	r3, #0
 8008272:	d010      	beq.n	8008296 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	691a      	ldr	r2, [r3, #16]
 8008278:	4b7b      	ldr	r3, [pc, #492]	@ (8008468 <HAL_RCC_ClockConfig+0x244>)
 800827a:	699b      	ldr	r3, [r3, #24]
 800827c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008280:	429a      	cmp	r2, r3
 8008282:	d908      	bls.n	8008296 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008284:	4b78      	ldr	r3, [pc, #480]	@ (8008468 <HAL_RCC_ClockConfig+0x244>)
 8008286:	699b      	ldr	r3, [r3, #24]
 8008288:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	691b      	ldr	r3, [r3, #16]
 8008290:	4975      	ldr	r1, [pc, #468]	@ (8008468 <HAL_RCC_ClockConfig+0x244>)
 8008292:	4313      	orrs	r3, r2
 8008294:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	f003 0308 	and.w	r3, r3, #8
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d010      	beq.n	80082c4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	695a      	ldr	r2, [r3, #20]
 80082a6:	4b70      	ldr	r3, [pc, #448]	@ (8008468 <HAL_RCC_ClockConfig+0x244>)
 80082a8:	69db      	ldr	r3, [r3, #28]
 80082aa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80082ae:	429a      	cmp	r2, r3
 80082b0:	d908      	bls.n	80082c4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80082b2:	4b6d      	ldr	r3, [pc, #436]	@ (8008468 <HAL_RCC_ClockConfig+0x244>)
 80082b4:	69db      	ldr	r3, [r3, #28]
 80082b6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	695b      	ldr	r3, [r3, #20]
 80082be:	496a      	ldr	r1, [pc, #424]	@ (8008468 <HAL_RCC_ClockConfig+0x244>)
 80082c0:	4313      	orrs	r3, r2
 80082c2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	f003 0310 	and.w	r3, r3, #16
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d010      	beq.n	80082f2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	699a      	ldr	r2, [r3, #24]
 80082d4:	4b64      	ldr	r3, [pc, #400]	@ (8008468 <HAL_RCC_ClockConfig+0x244>)
 80082d6:	69db      	ldr	r3, [r3, #28]
 80082d8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80082dc:	429a      	cmp	r2, r3
 80082de:	d908      	bls.n	80082f2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80082e0:	4b61      	ldr	r3, [pc, #388]	@ (8008468 <HAL_RCC_ClockConfig+0x244>)
 80082e2:	69db      	ldr	r3, [r3, #28]
 80082e4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	699b      	ldr	r3, [r3, #24]
 80082ec:	495e      	ldr	r1, [pc, #376]	@ (8008468 <HAL_RCC_ClockConfig+0x244>)
 80082ee:	4313      	orrs	r3, r2
 80082f0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	f003 0320 	and.w	r3, r3, #32
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d010      	beq.n	8008320 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	69da      	ldr	r2, [r3, #28]
 8008302:	4b59      	ldr	r3, [pc, #356]	@ (8008468 <HAL_RCC_ClockConfig+0x244>)
 8008304:	6a1b      	ldr	r3, [r3, #32]
 8008306:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800830a:	429a      	cmp	r2, r3
 800830c:	d908      	bls.n	8008320 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800830e:	4b56      	ldr	r3, [pc, #344]	@ (8008468 <HAL_RCC_ClockConfig+0x244>)
 8008310:	6a1b      	ldr	r3, [r3, #32]
 8008312:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	69db      	ldr	r3, [r3, #28]
 800831a:	4953      	ldr	r1, [pc, #332]	@ (8008468 <HAL_RCC_ClockConfig+0x244>)
 800831c:	4313      	orrs	r3, r2
 800831e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	f003 0302 	and.w	r3, r3, #2
 8008328:	2b00      	cmp	r3, #0
 800832a:	d010      	beq.n	800834e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	68da      	ldr	r2, [r3, #12]
 8008330:	4b4d      	ldr	r3, [pc, #308]	@ (8008468 <HAL_RCC_ClockConfig+0x244>)
 8008332:	699b      	ldr	r3, [r3, #24]
 8008334:	f003 030f 	and.w	r3, r3, #15
 8008338:	429a      	cmp	r2, r3
 800833a:	d908      	bls.n	800834e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800833c:	4b4a      	ldr	r3, [pc, #296]	@ (8008468 <HAL_RCC_ClockConfig+0x244>)
 800833e:	699b      	ldr	r3, [r3, #24]
 8008340:	f023 020f 	bic.w	r2, r3, #15
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	68db      	ldr	r3, [r3, #12]
 8008348:	4947      	ldr	r1, [pc, #284]	@ (8008468 <HAL_RCC_ClockConfig+0x244>)
 800834a:	4313      	orrs	r3, r2
 800834c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	f003 0301 	and.w	r3, r3, #1
 8008356:	2b00      	cmp	r3, #0
 8008358:	d055      	beq.n	8008406 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800835a:	4b43      	ldr	r3, [pc, #268]	@ (8008468 <HAL_RCC_ClockConfig+0x244>)
 800835c:	699b      	ldr	r3, [r3, #24]
 800835e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	689b      	ldr	r3, [r3, #8]
 8008366:	4940      	ldr	r1, [pc, #256]	@ (8008468 <HAL_RCC_ClockConfig+0x244>)
 8008368:	4313      	orrs	r3, r2
 800836a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	685b      	ldr	r3, [r3, #4]
 8008370:	2b02      	cmp	r3, #2
 8008372:	d107      	bne.n	8008384 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008374:	4b3c      	ldr	r3, [pc, #240]	@ (8008468 <HAL_RCC_ClockConfig+0x244>)
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800837c:	2b00      	cmp	r3, #0
 800837e:	d121      	bne.n	80083c4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008380:	2301      	movs	r3, #1
 8008382:	e0f6      	b.n	8008572 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	685b      	ldr	r3, [r3, #4]
 8008388:	2b03      	cmp	r3, #3
 800838a:	d107      	bne.n	800839c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800838c:	4b36      	ldr	r3, [pc, #216]	@ (8008468 <HAL_RCC_ClockConfig+0x244>)
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008394:	2b00      	cmp	r3, #0
 8008396:	d115      	bne.n	80083c4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008398:	2301      	movs	r3, #1
 800839a:	e0ea      	b.n	8008572 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	685b      	ldr	r3, [r3, #4]
 80083a0:	2b01      	cmp	r3, #1
 80083a2:	d107      	bne.n	80083b4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80083a4:	4b30      	ldr	r3, [pc, #192]	@ (8008468 <HAL_RCC_ClockConfig+0x244>)
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d109      	bne.n	80083c4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80083b0:	2301      	movs	r3, #1
 80083b2:	e0de      	b.n	8008572 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80083b4:	4b2c      	ldr	r3, [pc, #176]	@ (8008468 <HAL_RCC_ClockConfig+0x244>)
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	f003 0304 	and.w	r3, r3, #4
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d101      	bne.n	80083c4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80083c0:	2301      	movs	r3, #1
 80083c2:	e0d6      	b.n	8008572 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80083c4:	4b28      	ldr	r3, [pc, #160]	@ (8008468 <HAL_RCC_ClockConfig+0x244>)
 80083c6:	691b      	ldr	r3, [r3, #16]
 80083c8:	f023 0207 	bic.w	r2, r3, #7
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	685b      	ldr	r3, [r3, #4]
 80083d0:	4925      	ldr	r1, [pc, #148]	@ (8008468 <HAL_RCC_ClockConfig+0x244>)
 80083d2:	4313      	orrs	r3, r2
 80083d4:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80083d6:	f7fa fbbf 	bl	8002b58 <HAL_GetTick>
 80083da:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80083dc:	e00a      	b.n	80083f4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80083de:	f7fa fbbb 	bl	8002b58 <HAL_GetTick>
 80083e2:	4602      	mov	r2, r0
 80083e4:	697b      	ldr	r3, [r7, #20]
 80083e6:	1ad3      	subs	r3, r2, r3
 80083e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80083ec:	4293      	cmp	r3, r2
 80083ee:	d901      	bls.n	80083f4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80083f0:	2303      	movs	r3, #3
 80083f2:	e0be      	b.n	8008572 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80083f4:	4b1c      	ldr	r3, [pc, #112]	@ (8008468 <HAL_RCC_ClockConfig+0x244>)
 80083f6:	691b      	ldr	r3, [r3, #16]
 80083f8:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	685b      	ldr	r3, [r3, #4]
 8008400:	00db      	lsls	r3, r3, #3
 8008402:	429a      	cmp	r2, r3
 8008404:	d1eb      	bne.n	80083de <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	f003 0302 	and.w	r3, r3, #2
 800840e:	2b00      	cmp	r3, #0
 8008410:	d010      	beq.n	8008434 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	68da      	ldr	r2, [r3, #12]
 8008416:	4b14      	ldr	r3, [pc, #80]	@ (8008468 <HAL_RCC_ClockConfig+0x244>)
 8008418:	699b      	ldr	r3, [r3, #24]
 800841a:	f003 030f 	and.w	r3, r3, #15
 800841e:	429a      	cmp	r2, r3
 8008420:	d208      	bcs.n	8008434 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008422:	4b11      	ldr	r3, [pc, #68]	@ (8008468 <HAL_RCC_ClockConfig+0x244>)
 8008424:	699b      	ldr	r3, [r3, #24]
 8008426:	f023 020f 	bic.w	r2, r3, #15
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	68db      	ldr	r3, [r3, #12]
 800842e:	490e      	ldr	r1, [pc, #56]	@ (8008468 <HAL_RCC_ClockConfig+0x244>)
 8008430:	4313      	orrs	r3, r2
 8008432:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008434:	4b0b      	ldr	r3, [pc, #44]	@ (8008464 <HAL_RCC_ClockConfig+0x240>)
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	f003 030f 	and.w	r3, r3, #15
 800843c:	683a      	ldr	r2, [r7, #0]
 800843e:	429a      	cmp	r2, r3
 8008440:	d214      	bcs.n	800846c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008442:	4b08      	ldr	r3, [pc, #32]	@ (8008464 <HAL_RCC_ClockConfig+0x240>)
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	f023 020f 	bic.w	r2, r3, #15
 800844a:	4906      	ldr	r1, [pc, #24]	@ (8008464 <HAL_RCC_ClockConfig+0x240>)
 800844c:	683b      	ldr	r3, [r7, #0]
 800844e:	4313      	orrs	r3, r2
 8008450:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008452:	4b04      	ldr	r3, [pc, #16]	@ (8008464 <HAL_RCC_ClockConfig+0x240>)
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	f003 030f 	and.w	r3, r3, #15
 800845a:	683a      	ldr	r2, [r7, #0]
 800845c:	429a      	cmp	r2, r3
 800845e:	d005      	beq.n	800846c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8008460:	2301      	movs	r3, #1
 8008462:	e086      	b.n	8008572 <HAL_RCC_ClockConfig+0x34e>
 8008464:	52002000 	.word	0x52002000
 8008468:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	f003 0304 	and.w	r3, r3, #4
 8008474:	2b00      	cmp	r3, #0
 8008476:	d010      	beq.n	800849a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	691a      	ldr	r2, [r3, #16]
 800847c:	4b3f      	ldr	r3, [pc, #252]	@ (800857c <HAL_RCC_ClockConfig+0x358>)
 800847e:	699b      	ldr	r3, [r3, #24]
 8008480:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008484:	429a      	cmp	r2, r3
 8008486:	d208      	bcs.n	800849a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008488:	4b3c      	ldr	r3, [pc, #240]	@ (800857c <HAL_RCC_ClockConfig+0x358>)
 800848a:	699b      	ldr	r3, [r3, #24]
 800848c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	691b      	ldr	r3, [r3, #16]
 8008494:	4939      	ldr	r1, [pc, #228]	@ (800857c <HAL_RCC_ClockConfig+0x358>)
 8008496:	4313      	orrs	r3, r2
 8008498:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	f003 0308 	and.w	r3, r3, #8
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d010      	beq.n	80084c8 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	695a      	ldr	r2, [r3, #20]
 80084aa:	4b34      	ldr	r3, [pc, #208]	@ (800857c <HAL_RCC_ClockConfig+0x358>)
 80084ac:	69db      	ldr	r3, [r3, #28]
 80084ae:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80084b2:	429a      	cmp	r2, r3
 80084b4:	d208      	bcs.n	80084c8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80084b6:	4b31      	ldr	r3, [pc, #196]	@ (800857c <HAL_RCC_ClockConfig+0x358>)
 80084b8:	69db      	ldr	r3, [r3, #28]
 80084ba:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	695b      	ldr	r3, [r3, #20]
 80084c2:	492e      	ldr	r1, [pc, #184]	@ (800857c <HAL_RCC_ClockConfig+0x358>)
 80084c4:	4313      	orrs	r3, r2
 80084c6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	f003 0310 	and.w	r3, r3, #16
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d010      	beq.n	80084f6 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	699a      	ldr	r2, [r3, #24]
 80084d8:	4b28      	ldr	r3, [pc, #160]	@ (800857c <HAL_RCC_ClockConfig+0x358>)
 80084da:	69db      	ldr	r3, [r3, #28]
 80084dc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80084e0:	429a      	cmp	r2, r3
 80084e2:	d208      	bcs.n	80084f6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80084e4:	4b25      	ldr	r3, [pc, #148]	@ (800857c <HAL_RCC_ClockConfig+0x358>)
 80084e6:	69db      	ldr	r3, [r3, #28]
 80084e8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	699b      	ldr	r3, [r3, #24]
 80084f0:	4922      	ldr	r1, [pc, #136]	@ (800857c <HAL_RCC_ClockConfig+0x358>)
 80084f2:	4313      	orrs	r3, r2
 80084f4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	f003 0320 	and.w	r3, r3, #32
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d010      	beq.n	8008524 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	69da      	ldr	r2, [r3, #28]
 8008506:	4b1d      	ldr	r3, [pc, #116]	@ (800857c <HAL_RCC_ClockConfig+0x358>)
 8008508:	6a1b      	ldr	r3, [r3, #32]
 800850a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800850e:	429a      	cmp	r2, r3
 8008510:	d208      	bcs.n	8008524 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8008512:	4b1a      	ldr	r3, [pc, #104]	@ (800857c <HAL_RCC_ClockConfig+0x358>)
 8008514:	6a1b      	ldr	r3, [r3, #32]
 8008516:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	69db      	ldr	r3, [r3, #28]
 800851e:	4917      	ldr	r1, [pc, #92]	@ (800857c <HAL_RCC_ClockConfig+0x358>)
 8008520:	4313      	orrs	r3, r2
 8008522:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008524:	f000 f834 	bl	8008590 <HAL_RCC_GetSysClockFreq>
 8008528:	4602      	mov	r2, r0
 800852a:	4b14      	ldr	r3, [pc, #80]	@ (800857c <HAL_RCC_ClockConfig+0x358>)
 800852c:	699b      	ldr	r3, [r3, #24]
 800852e:	0a1b      	lsrs	r3, r3, #8
 8008530:	f003 030f 	and.w	r3, r3, #15
 8008534:	4912      	ldr	r1, [pc, #72]	@ (8008580 <HAL_RCC_ClockConfig+0x35c>)
 8008536:	5ccb      	ldrb	r3, [r1, r3]
 8008538:	f003 031f 	and.w	r3, r3, #31
 800853c:	fa22 f303 	lsr.w	r3, r2, r3
 8008540:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008542:	4b0e      	ldr	r3, [pc, #56]	@ (800857c <HAL_RCC_ClockConfig+0x358>)
 8008544:	699b      	ldr	r3, [r3, #24]
 8008546:	f003 030f 	and.w	r3, r3, #15
 800854a:	4a0d      	ldr	r2, [pc, #52]	@ (8008580 <HAL_RCC_ClockConfig+0x35c>)
 800854c:	5cd3      	ldrb	r3, [r2, r3]
 800854e:	f003 031f 	and.w	r3, r3, #31
 8008552:	693a      	ldr	r2, [r7, #16]
 8008554:	fa22 f303 	lsr.w	r3, r2, r3
 8008558:	4a0a      	ldr	r2, [pc, #40]	@ (8008584 <HAL_RCC_ClockConfig+0x360>)
 800855a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800855c:	4a0a      	ldr	r2, [pc, #40]	@ (8008588 <HAL_RCC_ClockConfig+0x364>)
 800855e:	693b      	ldr	r3, [r7, #16]
 8008560:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8008562:	4b0a      	ldr	r3, [pc, #40]	@ (800858c <HAL_RCC_ClockConfig+0x368>)
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	4618      	mov	r0, r3
 8008568:	f7fa faac 	bl	8002ac4 <HAL_InitTick>
 800856c:	4603      	mov	r3, r0
 800856e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8008570:	7bfb      	ldrb	r3, [r7, #15]
}
 8008572:	4618      	mov	r0, r3
 8008574:	3718      	adds	r7, #24
 8008576:	46bd      	mov	sp, r7
 8008578:	bd80      	pop	{r7, pc}
 800857a:	bf00      	nop
 800857c:	58024400 	.word	0x58024400
 8008580:	08013ac0 	.word	0x08013ac0
 8008584:	24000004 	.word	0x24000004
 8008588:	24000000 	.word	0x24000000
 800858c:	24000018 	.word	0x24000018

08008590 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008590:	b480      	push	{r7}
 8008592:	b089      	sub	sp, #36	@ 0x24
 8008594:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008596:	4bb3      	ldr	r3, [pc, #716]	@ (8008864 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008598:	691b      	ldr	r3, [r3, #16]
 800859a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800859e:	2b18      	cmp	r3, #24
 80085a0:	f200 8155 	bhi.w	800884e <HAL_RCC_GetSysClockFreq+0x2be>
 80085a4:	a201      	add	r2, pc, #4	@ (adr r2, 80085ac <HAL_RCC_GetSysClockFreq+0x1c>)
 80085a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085aa:	bf00      	nop
 80085ac:	08008611 	.word	0x08008611
 80085b0:	0800884f 	.word	0x0800884f
 80085b4:	0800884f 	.word	0x0800884f
 80085b8:	0800884f 	.word	0x0800884f
 80085bc:	0800884f 	.word	0x0800884f
 80085c0:	0800884f 	.word	0x0800884f
 80085c4:	0800884f 	.word	0x0800884f
 80085c8:	0800884f 	.word	0x0800884f
 80085cc:	08008637 	.word	0x08008637
 80085d0:	0800884f 	.word	0x0800884f
 80085d4:	0800884f 	.word	0x0800884f
 80085d8:	0800884f 	.word	0x0800884f
 80085dc:	0800884f 	.word	0x0800884f
 80085e0:	0800884f 	.word	0x0800884f
 80085e4:	0800884f 	.word	0x0800884f
 80085e8:	0800884f 	.word	0x0800884f
 80085ec:	0800863d 	.word	0x0800863d
 80085f0:	0800884f 	.word	0x0800884f
 80085f4:	0800884f 	.word	0x0800884f
 80085f8:	0800884f 	.word	0x0800884f
 80085fc:	0800884f 	.word	0x0800884f
 8008600:	0800884f 	.word	0x0800884f
 8008604:	0800884f 	.word	0x0800884f
 8008608:	0800884f 	.word	0x0800884f
 800860c:	08008643 	.word	0x08008643
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008610:	4b94      	ldr	r3, [pc, #592]	@ (8008864 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	f003 0320 	and.w	r3, r3, #32
 8008618:	2b00      	cmp	r3, #0
 800861a:	d009      	beq.n	8008630 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800861c:	4b91      	ldr	r3, [pc, #580]	@ (8008864 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	08db      	lsrs	r3, r3, #3
 8008622:	f003 0303 	and.w	r3, r3, #3
 8008626:	4a90      	ldr	r2, [pc, #576]	@ (8008868 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008628:	fa22 f303 	lsr.w	r3, r2, r3
 800862c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800862e:	e111      	b.n	8008854 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8008630:	4b8d      	ldr	r3, [pc, #564]	@ (8008868 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008632:	61bb      	str	r3, [r7, #24]
      break;
 8008634:	e10e      	b.n	8008854 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8008636:	4b8d      	ldr	r3, [pc, #564]	@ (800886c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008638:	61bb      	str	r3, [r7, #24]
      break;
 800863a:	e10b      	b.n	8008854 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800863c:	4b8c      	ldr	r3, [pc, #560]	@ (8008870 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800863e:	61bb      	str	r3, [r7, #24]
      break;
 8008640:	e108      	b.n	8008854 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008642:	4b88      	ldr	r3, [pc, #544]	@ (8008864 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008644:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008646:	f003 0303 	and.w	r3, r3, #3
 800864a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800864c:	4b85      	ldr	r3, [pc, #532]	@ (8008864 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800864e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008650:	091b      	lsrs	r3, r3, #4
 8008652:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008656:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008658:	4b82      	ldr	r3, [pc, #520]	@ (8008864 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800865a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800865c:	f003 0301 	and.w	r3, r3, #1
 8008660:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8008662:	4b80      	ldr	r3, [pc, #512]	@ (8008864 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008664:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008666:	08db      	lsrs	r3, r3, #3
 8008668:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800866c:	68fa      	ldr	r2, [r7, #12]
 800866e:	fb02 f303 	mul.w	r3, r2, r3
 8008672:	ee07 3a90 	vmov	s15, r3
 8008676:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800867a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800867e:	693b      	ldr	r3, [r7, #16]
 8008680:	2b00      	cmp	r3, #0
 8008682:	f000 80e1 	beq.w	8008848 <HAL_RCC_GetSysClockFreq+0x2b8>
 8008686:	697b      	ldr	r3, [r7, #20]
 8008688:	2b02      	cmp	r3, #2
 800868a:	f000 8083 	beq.w	8008794 <HAL_RCC_GetSysClockFreq+0x204>
 800868e:	697b      	ldr	r3, [r7, #20]
 8008690:	2b02      	cmp	r3, #2
 8008692:	f200 80a1 	bhi.w	80087d8 <HAL_RCC_GetSysClockFreq+0x248>
 8008696:	697b      	ldr	r3, [r7, #20]
 8008698:	2b00      	cmp	r3, #0
 800869a:	d003      	beq.n	80086a4 <HAL_RCC_GetSysClockFreq+0x114>
 800869c:	697b      	ldr	r3, [r7, #20]
 800869e:	2b01      	cmp	r3, #1
 80086a0:	d056      	beq.n	8008750 <HAL_RCC_GetSysClockFreq+0x1c0>
 80086a2:	e099      	b.n	80087d8 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80086a4:	4b6f      	ldr	r3, [pc, #444]	@ (8008864 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	f003 0320 	and.w	r3, r3, #32
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d02d      	beq.n	800870c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80086b0:	4b6c      	ldr	r3, [pc, #432]	@ (8008864 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	08db      	lsrs	r3, r3, #3
 80086b6:	f003 0303 	and.w	r3, r3, #3
 80086ba:	4a6b      	ldr	r2, [pc, #428]	@ (8008868 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80086bc:	fa22 f303 	lsr.w	r3, r2, r3
 80086c0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	ee07 3a90 	vmov	s15, r3
 80086c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80086cc:	693b      	ldr	r3, [r7, #16]
 80086ce:	ee07 3a90 	vmov	s15, r3
 80086d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80086da:	4b62      	ldr	r3, [pc, #392]	@ (8008864 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80086dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80086de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80086e2:	ee07 3a90 	vmov	s15, r3
 80086e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80086ea:	ed97 6a02 	vldr	s12, [r7, #8]
 80086ee:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8008874 <HAL_RCC_GetSysClockFreq+0x2e4>
 80086f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80086f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80086fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80086fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008702:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008706:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800870a:	e087      	b.n	800881c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800870c:	693b      	ldr	r3, [r7, #16]
 800870e:	ee07 3a90 	vmov	s15, r3
 8008712:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008716:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8008878 <HAL_RCC_GetSysClockFreq+0x2e8>
 800871a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800871e:	4b51      	ldr	r3, [pc, #324]	@ (8008864 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008720:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008722:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008726:	ee07 3a90 	vmov	s15, r3
 800872a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800872e:	ed97 6a02 	vldr	s12, [r7, #8]
 8008732:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8008874 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008736:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800873a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800873e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008742:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008746:	ee67 7a27 	vmul.f32	s15, s14, s15
 800874a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800874e:	e065      	b.n	800881c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008750:	693b      	ldr	r3, [r7, #16]
 8008752:	ee07 3a90 	vmov	s15, r3
 8008756:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800875a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800887c <HAL_RCC_GetSysClockFreq+0x2ec>
 800875e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008762:	4b40      	ldr	r3, [pc, #256]	@ (8008864 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008766:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800876a:	ee07 3a90 	vmov	s15, r3
 800876e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008772:	ed97 6a02 	vldr	s12, [r7, #8]
 8008776:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8008874 <HAL_RCC_GetSysClockFreq+0x2e4>
 800877a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800877e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008782:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008786:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800878a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800878e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008792:	e043      	b.n	800881c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008794:	693b      	ldr	r3, [r7, #16]
 8008796:	ee07 3a90 	vmov	s15, r3
 800879a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800879e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8008880 <HAL_RCC_GetSysClockFreq+0x2f0>
 80087a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80087a6:	4b2f      	ldr	r3, [pc, #188]	@ (8008864 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80087a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80087aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80087ae:	ee07 3a90 	vmov	s15, r3
 80087b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80087b6:	ed97 6a02 	vldr	s12, [r7, #8]
 80087ba:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8008874 <HAL_RCC_GetSysClockFreq+0x2e4>
 80087be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80087c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80087c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80087ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80087ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80087d2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80087d6:	e021      	b.n	800881c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80087d8:	693b      	ldr	r3, [r7, #16]
 80087da:	ee07 3a90 	vmov	s15, r3
 80087de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087e2:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800887c <HAL_RCC_GetSysClockFreq+0x2ec>
 80087e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80087ea:	4b1e      	ldr	r3, [pc, #120]	@ (8008864 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80087ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80087ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80087f2:	ee07 3a90 	vmov	s15, r3
 80087f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80087fa:	ed97 6a02 	vldr	s12, [r7, #8]
 80087fe:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8008874 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008802:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008806:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800880a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800880e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008812:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008816:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800881a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800881c:	4b11      	ldr	r3, [pc, #68]	@ (8008864 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800881e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008820:	0a5b      	lsrs	r3, r3, #9
 8008822:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008826:	3301      	adds	r3, #1
 8008828:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800882a:	683b      	ldr	r3, [r7, #0]
 800882c:	ee07 3a90 	vmov	s15, r3
 8008830:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008834:	edd7 6a07 	vldr	s13, [r7, #28]
 8008838:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800883c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008840:	ee17 3a90 	vmov	r3, s15
 8008844:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8008846:	e005      	b.n	8008854 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8008848:	2300      	movs	r3, #0
 800884a:	61bb      	str	r3, [r7, #24]
      break;
 800884c:	e002      	b.n	8008854 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800884e:	4b07      	ldr	r3, [pc, #28]	@ (800886c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008850:	61bb      	str	r3, [r7, #24]
      break;
 8008852:	bf00      	nop
  }

  return sysclockfreq;
 8008854:	69bb      	ldr	r3, [r7, #24]
}
 8008856:	4618      	mov	r0, r3
 8008858:	3724      	adds	r7, #36	@ 0x24
 800885a:	46bd      	mov	sp, r7
 800885c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008860:	4770      	bx	lr
 8008862:	bf00      	nop
 8008864:	58024400 	.word	0x58024400
 8008868:	03d09000 	.word	0x03d09000
 800886c:	003d0900 	.word	0x003d0900
 8008870:	017d7840 	.word	0x017d7840
 8008874:	46000000 	.word	0x46000000
 8008878:	4c742400 	.word	0x4c742400
 800887c:	4a742400 	.word	0x4a742400
 8008880:	4bbebc20 	.word	0x4bbebc20

08008884 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008884:	b580      	push	{r7, lr}
 8008886:	b082      	sub	sp, #8
 8008888:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800888a:	f7ff fe81 	bl	8008590 <HAL_RCC_GetSysClockFreq>
 800888e:	4602      	mov	r2, r0
 8008890:	4b10      	ldr	r3, [pc, #64]	@ (80088d4 <HAL_RCC_GetHCLKFreq+0x50>)
 8008892:	699b      	ldr	r3, [r3, #24]
 8008894:	0a1b      	lsrs	r3, r3, #8
 8008896:	f003 030f 	and.w	r3, r3, #15
 800889a:	490f      	ldr	r1, [pc, #60]	@ (80088d8 <HAL_RCC_GetHCLKFreq+0x54>)
 800889c:	5ccb      	ldrb	r3, [r1, r3]
 800889e:	f003 031f 	and.w	r3, r3, #31
 80088a2:	fa22 f303 	lsr.w	r3, r2, r3
 80088a6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80088a8:	4b0a      	ldr	r3, [pc, #40]	@ (80088d4 <HAL_RCC_GetHCLKFreq+0x50>)
 80088aa:	699b      	ldr	r3, [r3, #24]
 80088ac:	f003 030f 	and.w	r3, r3, #15
 80088b0:	4a09      	ldr	r2, [pc, #36]	@ (80088d8 <HAL_RCC_GetHCLKFreq+0x54>)
 80088b2:	5cd3      	ldrb	r3, [r2, r3]
 80088b4:	f003 031f 	and.w	r3, r3, #31
 80088b8:	687a      	ldr	r2, [r7, #4]
 80088ba:	fa22 f303 	lsr.w	r3, r2, r3
 80088be:	4a07      	ldr	r2, [pc, #28]	@ (80088dc <HAL_RCC_GetHCLKFreq+0x58>)
 80088c0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80088c2:	4a07      	ldr	r2, [pc, #28]	@ (80088e0 <HAL_RCC_GetHCLKFreq+0x5c>)
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80088c8:	4b04      	ldr	r3, [pc, #16]	@ (80088dc <HAL_RCC_GetHCLKFreq+0x58>)
 80088ca:	681b      	ldr	r3, [r3, #0]
}
 80088cc:	4618      	mov	r0, r3
 80088ce:	3708      	adds	r7, #8
 80088d0:	46bd      	mov	sp, r7
 80088d2:	bd80      	pop	{r7, pc}
 80088d4:	58024400 	.word	0x58024400
 80088d8:	08013ac0 	.word	0x08013ac0
 80088dc:	24000004 	.word	0x24000004
 80088e0:	24000000 	.word	0x24000000

080088e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80088e4:	b580      	push	{r7, lr}
 80088e6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80088e8:	f7ff ffcc 	bl	8008884 <HAL_RCC_GetHCLKFreq>
 80088ec:	4602      	mov	r2, r0
 80088ee:	4b06      	ldr	r3, [pc, #24]	@ (8008908 <HAL_RCC_GetPCLK1Freq+0x24>)
 80088f0:	69db      	ldr	r3, [r3, #28]
 80088f2:	091b      	lsrs	r3, r3, #4
 80088f4:	f003 0307 	and.w	r3, r3, #7
 80088f8:	4904      	ldr	r1, [pc, #16]	@ (800890c <HAL_RCC_GetPCLK1Freq+0x28>)
 80088fa:	5ccb      	ldrb	r3, [r1, r3]
 80088fc:	f003 031f 	and.w	r3, r3, #31
 8008900:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8008904:	4618      	mov	r0, r3
 8008906:	bd80      	pop	{r7, pc}
 8008908:	58024400 	.word	0x58024400
 800890c:	08013ac0 	.word	0x08013ac0

08008910 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008910:	b580      	push	{r7, lr}
 8008912:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8008914:	f7ff ffb6 	bl	8008884 <HAL_RCC_GetHCLKFreq>
 8008918:	4602      	mov	r2, r0
 800891a:	4b06      	ldr	r3, [pc, #24]	@ (8008934 <HAL_RCC_GetPCLK2Freq+0x24>)
 800891c:	69db      	ldr	r3, [r3, #28]
 800891e:	0a1b      	lsrs	r3, r3, #8
 8008920:	f003 0307 	and.w	r3, r3, #7
 8008924:	4904      	ldr	r1, [pc, #16]	@ (8008938 <HAL_RCC_GetPCLK2Freq+0x28>)
 8008926:	5ccb      	ldrb	r3, [r1, r3]
 8008928:	f003 031f 	and.w	r3, r3, #31
 800892c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8008930:	4618      	mov	r0, r3
 8008932:	bd80      	pop	{r7, pc}
 8008934:	58024400 	.word	0x58024400
 8008938:	08013ac0 	.word	0x08013ac0

0800893c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800893c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008940:	b0ca      	sub	sp, #296	@ 0x128
 8008942:	af00      	add	r7, sp, #0
 8008944:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008948:	2300      	movs	r3, #0
 800894a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800894e:	2300      	movs	r3, #0
 8008950:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008954:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008958:	e9d3 2300 	ldrd	r2, r3, [r3]
 800895c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8008960:	2500      	movs	r5, #0
 8008962:	ea54 0305 	orrs.w	r3, r4, r5
 8008966:	d049      	beq.n	80089fc <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8008968:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800896c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800896e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008972:	d02f      	beq.n	80089d4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8008974:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008978:	d828      	bhi.n	80089cc <HAL_RCCEx_PeriphCLKConfig+0x90>
 800897a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800897e:	d01a      	beq.n	80089b6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8008980:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008984:	d822      	bhi.n	80089cc <HAL_RCCEx_PeriphCLKConfig+0x90>
 8008986:	2b00      	cmp	r3, #0
 8008988:	d003      	beq.n	8008992 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800898a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800898e:	d007      	beq.n	80089a0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8008990:	e01c      	b.n	80089cc <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008992:	4bb8      	ldr	r3, [pc, #736]	@ (8008c74 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008994:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008996:	4ab7      	ldr	r2, [pc, #732]	@ (8008c74 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008998:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800899c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800899e:	e01a      	b.n	80089d6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80089a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80089a4:	3308      	adds	r3, #8
 80089a6:	2102      	movs	r1, #2
 80089a8:	4618      	mov	r0, r3
 80089aa:	f002 fb61 	bl	800b070 <RCCEx_PLL2_Config>
 80089ae:	4603      	mov	r3, r0
 80089b0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80089b4:	e00f      	b.n	80089d6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80089b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80089ba:	3328      	adds	r3, #40	@ 0x28
 80089bc:	2102      	movs	r1, #2
 80089be:	4618      	mov	r0, r3
 80089c0:	f002 fc08 	bl	800b1d4 <RCCEx_PLL3_Config>
 80089c4:	4603      	mov	r3, r0
 80089c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80089ca:	e004      	b.n	80089d6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80089cc:	2301      	movs	r3, #1
 80089ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80089d2:	e000      	b.n	80089d6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80089d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80089d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d10a      	bne.n	80089f4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80089de:	4ba5      	ldr	r3, [pc, #660]	@ (8008c74 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80089e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80089e2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80089e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80089ea:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80089ec:	4aa1      	ldr	r2, [pc, #644]	@ (8008c74 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80089ee:	430b      	orrs	r3, r1
 80089f0:	6513      	str	r3, [r2, #80]	@ 0x50
 80089f2:	e003      	b.n	80089fc <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80089f4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80089f8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80089fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a04:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8008a08:	f04f 0900 	mov.w	r9, #0
 8008a0c:	ea58 0309 	orrs.w	r3, r8, r9
 8008a10:	d047      	beq.n	8008aa2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8008a12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008a18:	2b04      	cmp	r3, #4
 8008a1a:	d82a      	bhi.n	8008a72 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8008a1c:	a201      	add	r2, pc, #4	@ (adr r2, 8008a24 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8008a1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a22:	bf00      	nop
 8008a24:	08008a39 	.word	0x08008a39
 8008a28:	08008a47 	.word	0x08008a47
 8008a2c:	08008a5d 	.word	0x08008a5d
 8008a30:	08008a7b 	.word	0x08008a7b
 8008a34:	08008a7b 	.word	0x08008a7b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008a38:	4b8e      	ldr	r3, [pc, #568]	@ (8008c74 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008a3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a3c:	4a8d      	ldr	r2, [pc, #564]	@ (8008c74 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008a3e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008a42:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008a44:	e01a      	b.n	8008a7c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008a46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a4a:	3308      	adds	r3, #8
 8008a4c:	2100      	movs	r1, #0
 8008a4e:	4618      	mov	r0, r3
 8008a50:	f002 fb0e 	bl	800b070 <RCCEx_PLL2_Config>
 8008a54:	4603      	mov	r3, r0
 8008a56:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008a5a:	e00f      	b.n	8008a7c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008a5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a60:	3328      	adds	r3, #40	@ 0x28
 8008a62:	2100      	movs	r1, #0
 8008a64:	4618      	mov	r0, r3
 8008a66:	f002 fbb5 	bl	800b1d4 <RCCEx_PLL3_Config>
 8008a6a:	4603      	mov	r3, r0
 8008a6c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008a70:	e004      	b.n	8008a7c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008a72:	2301      	movs	r3, #1
 8008a74:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008a78:	e000      	b.n	8008a7c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8008a7a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008a7c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d10a      	bne.n	8008a9a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008a84:	4b7b      	ldr	r3, [pc, #492]	@ (8008c74 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008a86:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008a88:	f023 0107 	bic.w	r1, r3, #7
 8008a8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008a92:	4a78      	ldr	r2, [pc, #480]	@ (8008c74 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008a94:	430b      	orrs	r3, r1
 8008a96:	6513      	str	r3, [r2, #80]	@ 0x50
 8008a98:	e003      	b.n	8008aa2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a9a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008a9e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8008aa2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008aa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008aaa:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8008aae:	f04f 0b00 	mov.w	fp, #0
 8008ab2:	ea5a 030b 	orrs.w	r3, sl, fp
 8008ab6:	d04c      	beq.n	8008b52 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8008ab8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008abc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008abe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008ac2:	d030      	beq.n	8008b26 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8008ac4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008ac8:	d829      	bhi.n	8008b1e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8008aca:	2bc0      	cmp	r3, #192	@ 0xc0
 8008acc:	d02d      	beq.n	8008b2a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8008ace:	2bc0      	cmp	r3, #192	@ 0xc0
 8008ad0:	d825      	bhi.n	8008b1e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8008ad2:	2b80      	cmp	r3, #128	@ 0x80
 8008ad4:	d018      	beq.n	8008b08 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8008ad6:	2b80      	cmp	r3, #128	@ 0x80
 8008ad8:	d821      	bhi.n	8008b1e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d002      	beq.n	8008ae4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8008ade:	2b40      	cmp	r3, #64	@ 0x40
 8008ae0:	d007      	beq.n	8008af2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8008ae2:	e01c      	b.n	8008b1e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008ae4:	4b63      	ldr	r3, [pc, #396]	@ (8008c74 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008ae6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ae8:	4a62      	ldr	r2, [pc, #392]	@ (8008c74 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008aea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008aee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8008af0:	e01c      	b.n	8008b2c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008af2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008af6:	3308      	adds	r3, #8
 8008af8:	2100      	movs	r1, #0
 8008afa:	4618      	mov	r0, r3
 8008afc:	f002 fab8 	bl	800b070 <RCCEx_PLL2_Config>
 8008b00:	4603      	mov	r3, r0
 8008b02:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8008b06:	e011      	b.n	8008b2c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008b08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b0c:	3328      	adds	r3, #40	@ 0x28
 8008b0e:	2100      	movs	r1, #0
 8008b10:	4618      	mov	r0, r3
 8008b12:	f002 fb5f 	bl	800b1d4 <RCCEx_PLL3_Config>
 8008b16:	4603      	mov	r3, r0
 8008b18:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8008b1c:	e006      	b.n	8008b2c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008b1e:	2301      	movs	r3, #1
 8008b20:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008b24:	e002      	b.n	8008b2c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8008b26:	bf00      	nop
 8008b28:	e000      	b.n	8008b2c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8008b2a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008b2c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d10a      	bne.n	8008b4a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8008b34:	4b4f      	ldr	r3, [pc, #316]	@ (8008c74 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008b36:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008b38:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8008b3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008b42:	4a4c      	ldr	r2, [pc, #304]	@ (8008c74 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008b44:	430b      	orrs	r3, r1
 8008b46:	6513      	str	r3, [r2, #80]	@ 0x50
 8008b48:	e003      	b.n	8008b52 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b4a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008b4e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8008b52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b5a:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8008b5e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8008b62:	2300      	movs	r3, #0
 8008b64:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8008b68:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8008b6c:	460b      	mov	r3, r1
 8008b6e:	4313      	orrs	r3, r2
 8008b70:	d053      	beq.n	8008c1a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8008b72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b76:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8008b7a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008b7e:	d035      	beq.n	8008bec <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8008b80:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008b84:	d82e      	bhi.n	8008be4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8008b86:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8008b8a:	d031      	beq.n	8008bf0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8008b8c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8008b90:	d828      	bhi.n	8008be4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8008b92:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008b96:	d01a      	beq.n	8008bce <HAL_RCCEx_PeriphCLKConfig+0x292>
 8008b98:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008b9c:	d822      	bhi.n	8008be4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d003      	beq.n	8008baa <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8008ba2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008ba6:	d007      	beq.n	8008bb8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8008ba8:	e01c      	b.n	8008be4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008baa:	4b32      	ldr	r3, [pc, #200]	@ (8008c74 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008bac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bae:	4a31      	ldr	r2, [pc, #196]	@ (8008c74 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008bb0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008bb4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008bb6:	e01c      	b.n	8008bf2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008bb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008bbc:	3308      	adds	r3, #8
 8008bbe:	2100      	movs	r1, #0
 8008bc0:	4618      	mov	r0, r3
 8008bc2:	f002 fa55 	bl	800b070 <RCCEx_PLL2_Config>
 8008bc6:	4603      	mov	r3, r0
 8008bc8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8008bcc:	e011      	b.n	8008bf2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008bce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008bd2:	3328      	adds	r3, #40	@ 0x28
 8008bd4:	2100      	movs	r1, #0
 8008bd6:	4618      	mov	r0, r3
 8008bd8:	f002 fafc 	bl	800b1d4 <RCCEx_PLL3_Config>
 8008bdc:	4603      	mov	r3, r0
 8008bde:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008be2:	e006      	b.n	8008bf2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8008be4:	2301      	movs	r3, #1
 8008be6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008bea:	e002      	b.n	8008bf2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8008bec:	bf00      	nop
 8008bee:	e000      	b.n	8008bf2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8008bf0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008bf2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d10b      	bne.n	8008c12 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8008bfa:	4b1e      	ldr	r3, [pc, #120]	@ (8008c74 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008bfc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008bfe:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8008c02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c06:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8008c0a:	4a1a      	ldr	r2, [pc, #104]	@ (8008c74 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008c0c:	430b      	orrs	r3, r1
 8008c0e:	6593      	str	r3, [r2, #88]	@ 0x58
 8008c10:	e003      	b.n	8008c1a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c12:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008c16:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8008c1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c22:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8008c26:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8008c2a:	2300      	movs	r3, #0
 8008c2c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8008c30:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8008c34:	460b      	mov	r3, r1
 8008c36:	4313      	orrs	r3, r2
 8008c38:	d056      	beq.n	8008ce8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8008c3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c3e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8008c42:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008c46:	d038      	beq.n	8008cba <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8008c48:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008c4c:	d831      	bhi.n	8008cb2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8008c4e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008c52:	d034      	beq.n	8008cbe <HAL_RCCEx_PeriphCLKConfig+0x382>
 8008c54:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008c58:	d82b      	bhi.n	8008cb2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8008c5a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008c5e:	d01d      	beq.n	8008c9c <HAL_RCCEx_PeriphCLKConfig+0x360>
 8008c60:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008c64:	d825      	bhi.n	8008cb2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d006      	beq.n	8008c78 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8008c6a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008c6e:	d00a      	beq.n	8008c86 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8008c70:	e01f      	b.n	8008cb2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8008c72:	bf00      	nop
 8008c74:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008c78:	4ba2      	ldr	r3, [pc, #648]	@ (8008f04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008c7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c7c:	4aa1      	ldr	r2, [pc, #644]	@ (8008f04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008c7e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008c82:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008c84:	e01c      	b.n	8008cc0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008c86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c8a:	3308      	adds	r3, #8
 8008c8c:	2100      	movs	r1, #0
 8008c8e:	4618      	mov	r0, r3
 8008c90:	f002 f9ee 	bl	800b070 <RCCEx_PLL2_Config>
 8008c94:	4603      	mov	r3, r0
 8008c96:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8008c9a:	e011      	b.n	8008cc0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008c9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ca0:	3328      	adds	r3, #40	@ 0x28
 8008ca2:	2100      	movs	r1, #0
 8008ca4:	4618      	mov	r0, r3
 8008ca6:	f002 fa95 	bl	800b1d4 <RCCEx_PLL3_Config>
 8008caa:	4603      	mov	r3, r0
 8008cac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008cb0:	e006      	b.n	8008cc0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8008cb2:	2301      	movs	r3, #1
 8008cb4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008cb8:	e002      	b.n	8008cc0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8008cba:	bf00      	nop
 8008cbc:	e000      	b.n	8008cc0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8008cbe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008cc0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d10b      	bne.n	8008ce0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8008cc8:	4b8e      	ldr	r3, [pc, #568]	@ (8008f04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008cca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008ccc:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8008cd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008cd4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8008cd8:	4a8a      	ldr	r2, [pc, #552]	@ (8008f04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008cda:	430b      	orrs	r3, r1
 8008cdc:	6593      	str	r3, [r2, #88]	@ 0x58
 8008cde:	e003      	b.n	8008ce8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ce0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008ce4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8008ce8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008cec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cf0:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8008cf4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8008cf8:	2300      	movs	r3, #0
 8008cfa:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8008cfe:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8008d02:	460b      	mov	r3, r1
 8008d04:	4313      	orrs	r3, r2
 8008d06:	d03a      	beq.n	8008d7e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8008d08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008d0e:	2b30      	cmp	r3, #48	@ 0x30
 8008d10:	d01f      	beq.n	8008d52 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8008d12:	2b30      	cmp	r3, #48	@ 0x30
 8008d14:	d819      	bhi.n	8008d4a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8008d16:	2b20      	cmp	r3, #32
 8008d18:	d00c      	beq.n	8008d34 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8008d1a:	2b20      	cmp	r3, #32
 8008d1c:	d815      	bhi.n	8008d4a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d019      	beq.n	8008d56 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8008d22:	2b10      	cmp	r3, #16
 8008d24:	d111      	bne.n	8008d4a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008d26:	4b77      	ldr	r3, [pc, #476]	@ (8008f04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008d28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d2a:	4a76      	ldr	r2, [pc, #472]	@ (8008f04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008d2c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008d30:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8008d32:	e011      	b.n	8008d58 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008d34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d38:	3308      	adds	r3, #8
 8008d3a:	2102      	movs	r1, #2
 8008d3c:	4618      	mov	r0, r3
 8008d3e:	f002 f997 	bl	800b070 <RCCEx_PLL2_Config>
 8008d42:	4603      	mov	r3, r0
 8008d44:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8008d48:	e006      	b.n	8008d58 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8008d4a:	2301      	movs	r3, #1
 8008d4c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008d50:	e002      	b.n	8008d58 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8008d52:	bf00      	nop
 8008d54:	e000      	b.n	8008d58 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8008d56:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008d58:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d10a      	bne.n	8008d76 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8008d60:	4b68      	ldr	r3, [pc, #416]	@ (8008f04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008d62:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008d64:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8008d68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008d6e:	4a65      	ldr	r2, [pc, #404]	@ (8008f04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008d70:	430b      	orrs	r3, r1
 8008d72:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008d74:	e003      	b.n	8008d7e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d76:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008d7a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8008d7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d86:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8008d8a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8008d8e:	2300      	movs	r3, #0
 8008d90:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8008d94:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8008d98:	460b      	mov	r3, r1
 8008d9a:	4313      	orrs	r3, r2
 8008d9c:	d051      	beq.n	8008e42 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8008d9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008da2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008da4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008da8:	d035      	beq.n	8008e16 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8008daa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008dae:	d82e      	bhi.n	8008e0e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8008db0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008db4:	d031      	beq.n	8008e1a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8008db6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008dba:	d828      	bhi.n	8008e0e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8008dbc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008dc0:	d01a      	beq.n	8008df8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8008dc2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008dc6:	d822      	bhi.n	8008e0e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d003      	beq.n	8008dd4 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8008dcc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008dd0:	d007      	beq.n	8008de2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8008dd2:	e01c      	b.n	8008e0e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008dd4:	4b4b      	ldr	r3, [pc, #300]	@ (8008f04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008dd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008dd8:	4a4a      	ldr	r2, [pc, #296]	@ (8008f04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008dda:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008dde:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008de0:	e01c      	b.n	8008e1c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008de2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008de6:	3308      	adds	r3, #8
 8008de8:	2100      	movs	r1, #0
 8008dea:	4618      	mov	r0, r3
 8008dec:	f002 f940 	bl	800b070 <RCCEx_PLL2_Config>
 8008df0:	4603      	mov	r3, r0
 8008df2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008df6:	e011      	b.n	8008e1c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008df8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008dfc:	3328      	adds	r3, #40	@ 0x28
 8008dfe:	2100      	movs	r1, #0
 8008e00:	4618      	mov	r0, r3
 8008e02:	f002 f9e7 	bl	800b1d4 <RCCEx_PLL3_Config>
 8008e06:	4603      	mov	r3, r0
 8008e08:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008e0c:	e006      	b.n	8008e1c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008e0e:	2301      	movs	r3, #1
 8008e10:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008e14:	e002      	b.n	8008e1c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8008e16:	bf00      	nop
 8008e18:	e000      	b.n	8008e1c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8008e1a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008e1c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d10a      	bne.n	8008e3a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8008e24:	4b37      	ldr	r3, [pc, #220]	@ (8008f04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008e26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008e28:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8008e2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008e32:	4a34      	ldr	r2, [pc, #208]	@ (8008f04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008e34:	430b      	orrs	r3, r1
 8008e36:	6513      	str	r3, [r2, #80]	@ 0x50
 8008e38:	e003      	b.n	8008e42 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e3a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008e3e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8008e42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e4a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8008e4e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008e52:	2300      	movs	r3, #0
 8008e54:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8008e58:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8008e5c:	460b      	mov	r3, r1
 8008e5e:	4313      	orrs	r3, r2
 8008e60:	d056      	beq.n	8008f10 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8008e62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e66:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008e68:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008e6c:	d033      	beq.n	8008ed6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8008e6e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008e72:	d82c      	bhi.n	8008ece <HAL_RCCEx_PeriphCLKConfig+0x592>
 8008e74:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008e78:	d02f      	beq.n	8008eda <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8008e7a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008e7e:	d826      	bhi.n	8008ece <HAL_RCCEx_PeriphCLKConfig+0x592>
 8008e80:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008e84:	d02b      	beq.n	8008ede <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8008e86:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008e8a:	d820      	bhi.n	8008ece <HAL_RCCEx_PeriphCLKConfig+0x592>
 8008e8c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008e90:	d012      	beq.n	8008eb8 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8008e92:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008e96:	d81a      	bhi.n	8008ece <HAL_RCCEx_PeriphCLKConfig+0x592>
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d022      	beq.n	8008ee2 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8008e9c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008ea0:	d115      	bne.n	8008ece <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008ea2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ea6:	3308      	adds	r3, #8
 8008ea8:	2101      	movs	r1, #1
 8008eaa:	4618      	mov	r0, r3
 8008eac:	f002 f8e0 	bl	800b070 <RCCEx_PLL2_Config>
 8008eb0:	4603      	mov	r3, r0
 8008eb2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8008eb6:	e015      	b.n	8008ee4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008eb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ebc:	3328      	adds	r3, #40	@ 0x28
 8008ebe:	2101      	movs	r1, #1
 8008ec0:	4618      	mov	r0, r3
 8008ec2:	f002 f987 	bl	800b1d4 <RCCEx_PLL3_Config>
 8008ec6:	4603      	mov	r3, r0
 8008ec8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8008ecc:	e00a      	b.n	8008ee4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008ece:	2301      	movs	r3, #1
 8008ed0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008ed4:	e006      	b.n	8008ee4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8008ed6:	bf00      	nop
 8008ed8:	e004      	b.n	8008ee4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8008eda:	bf00      	nop
 8008edc:	e002      	b.n	8008ee4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8008ede:	bf00      	nop
 8008ee0:	e000      	b.n	8008ee4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8008ee2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008ee4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d10d      	bne.n	8008f08 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8008eec:	4b05      	ldr	r3, [pc, #20]	@ (8008f04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008eee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008ef0:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8008ef4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ef8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008efa:	4a02      	ldr	r2, [pc, #8]	@ (8008f04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008efc:	430b      	orrs	r3, r1
 8008efe:	6513      	str	r3, [r2, #80]	@ 0x50
 8008f00:	e006      	b.n	8008f10 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8008f02:	bf00      	nop
 8008f04:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f08:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008f0c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8008f10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f18:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8008f1c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008f20:	2300      	movs	r3, #0
 8008f22:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008f26:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8008f2a:	460b      	mov	r3, r1
 8008f2c:	4313      	orrs	r3, r2
 8008f2e:	d055      	beq.n	8008fdc <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8008f30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f34:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8008f38:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008f3c:	d033      	beq.n	8008fa6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8008f3e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008f42:	d82c      	bhi.n	8008f9e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008f44:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008f48:	d02f      	beq.n	8008faa <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8008f4a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008f4e:	d826      	bhi.n	8008f9e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008f50:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008f54:	d02b      	beq.n	8008fae <HAL_RCCEx_PeriphCLKConfig+0x672>
 8008f56:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008f5a:	d820      	bhi.n	8008f9e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008f5c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008f60:	d012      	beq.n	8008f88 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8008f62:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008f66:	d81a      	bhi.n	8008f9e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d022      	beq.n	8008fb2 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8008f6c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008f70:	d115      	bne.n	8008f9e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008f72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f76:	3308      	adds	r3, #8
 8008f78:	2101      	movs	r1, #1
 8008f7a:	4618      	mov	r0, r3
 8008f7c:	f002 f878 	bl	800b070 <RCCEx_PLL2_Config>
 8008f80:	4603      	mov	r3, r0
 8008f82:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8008f86:	e015      	b.n	8008fb4 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008f88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f8c:	3328      	adds	r3, #40	@ 0x28
 8008f8e:	2101      	movs	r1, #1
 8008f90:	4618      	mov	r0, r3
 8008f92:	f002 f91f 	bl	800b1d4 <RCCEx_PLL3_Config>
 8008f96:	4603      	mov	r3, r0
 8008f98:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8008f9c:	e00a      	b.n	8008fb4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8008f9e:	2301      	movs	r3, #1
 8008fa0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008fa4:	e006      	b.n	8008fb4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8008fa6:	bf00      	nop
 8008fa8:	e004      	b.n	8008fb4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8008faa:	bf00      	nop
 8008fac:	e002      	b.n	8008fb4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8008fae:	bf00      	nop
 8008fb0:	e000      	b.n	8008fb4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8008fb2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008fb4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d10b      	bne.n	8008fd4 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8008fbc:	4ba3      	ldr	r3, [pc, #652]	@ (800924c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008fbe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008fc0:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8008fc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008fc8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8008fcc:	4a9f      	ldr	r2, [pc, #636]	@ (800924c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008fce:	430b      	orrs	r3, r1
 8008fd0:	6593      	str	r3, [r2, #88]	@ 0x58
 8008fd2:	e003      	b.n	8008fdc <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008fd4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008fd8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008fdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fe4:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8008fe8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008fec:	2300      	movs	r3, #0
 8008fee:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8008ff2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8008ff6:	460b      	mov	r3, r1
 8008ff8:	4313      	orrs	r3, r2
 8008ffa:	d037      	beq.n	800906c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8008ffc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009000:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009002:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009006:	d00e      	beq.n	8009026 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8009008:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800900c:	d816      	bhi.n	800903c <HAL_RCCEx_PeriphCLKConfig+0x700>
 800900e:	2b00      	cmp	r3, #0
 8009010:	d018      	beq.n	8009044 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8009012:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009016:	d111      	bne.n	800903c <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009018:	4b8c      	ldr	r3, [pc, #560]	@ (800924c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800901a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800901c:	4a8b      	ldr	r2, [pc, #556]	@ (800924c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800901e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009022:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8009024:	e00f      	b.n	8009046 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009026:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800902a:	3308      	adds	r3, #8
 800902c:	2101      	movs	r1, #1
 800902e:	4618      	mov	r0, r3
 8009030:	f002 f81e 	bl	800b070 <RCCEx_PLL2_Config>
 8009034:	4603      	mov	r3, r0
 8009036:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800903a:	e004      	b.n	8009046 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800903c:	2301      	movs	r3, #1
 800903e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009042:	e000      	b.n	8009046 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8009044:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009046:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800904a:	2b00      	cmp	r3, #0
 800904c:	d10a      	bne.n	8009064 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800904e:	4b7f      	ldr	r3, [pc, #508]	@ (800924c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009050:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009052:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8009056:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800905a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800905c:	4a7b      	ldr	r2, [pc, #492]	@ (800924c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800905e:	430b      	orrs	r3, r1
 8009060:	6513      	str	r3, [r2, #80]	@ 0x50
 8009062:	e003      	b.n	800906c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009064:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009068:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800906c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009070:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009074:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8009078:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800907c:	2300      	movs	r3, #0
 800907e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8009082:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8009086:	460b      	mov	r3, r1
 8009088:	4313      	orrs	r3, r2
 800908a:	d039      	beq.n	8009100 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800908c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009090:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009092:	2b03      	cmp	r3, #3
 8009094:	d81c      	bhi.n	80090d0 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8009096:	a201      	add	r2, pc, #4	@ (adr r2, 800909c <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8009098:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800909c:	080090d9 	.word	0x080090d9
 80090a0:	080090ad 	.word	0x080090ad
 80090a4:	080090bb 	.word	0x080090bb
 80090a8:	080090d9 	.word	0x080090d9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80090ac:	4b67      	ldr	r3, [pc, #412]	@ (800924c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80090ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090b0:	4a66      	ldr	r2, [pc, #408]	@ (800924c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80090b2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80090b6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80090b8:	e00f      	b.n	80090da <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80090ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80090be:	3308      	adds	r3, #8
 80090c0:	2102      	movs	r1, #2
 80090c2:	4618      	mov	r0, r3
 80090c4:	f001 ffd4 	bl	800b070 <RCCEx_PLL2_Config>
 80090c8:	4603      	mov	r3, r0
 80090ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80090ce:	e004      	b.n	80090da <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80090d0:	2301      	movs	r3, #1
 80090d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80090d6:	e000      	b.n	80090da <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80090d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80090da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d10a      	bne.n	80090f8 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80090e2:	4b5a      	ldr	r3, [pc, #360]	@ (800924c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80090e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80090e6:	f023 0103 	bic.w	r1, r3, #3
 80090ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80090ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80090f0:	4a56      	ldr	r2, [pc, #344]	@ (800924c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80090f2:	430b      	orrs	r3, r1
 80090f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80090f6:	e003      	b.n	8009100 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80090f8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80090fc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009100:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009104:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009108:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800910c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009110:	2300      	movs	r3, #0
 8009112:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8009116:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800911a:	460b      	mov	r3, r1
 800911c:	4313      	orrs	r3, r2
 800911e:	f000 809f 	beq.w	8009260 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009122:	4b4b      	ldr	r3, [pc, #300]	@ (8009250 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	4a4a      	ldr	r2, [pc, #296]	@ (8009250 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8009128:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800912c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800912e:	f7f9 fd13 	bl	8002b58 <HAL_GetTick>
 8009132:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009136:	e00b      	b.n	8009150 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009138:	f7f9 fd0e 	bl	8002b58 <HAL_GetTick>
 800913c:	4602      	mov	r2, r0
 800913e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8009142:	1ad3      	subs	r3, r2, r3
 8009144:	2b64      	cmp	r3, #100	@ 0x64
 8009146:	d903      	bls.n	8009150 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8009148:	2303      	movs	r3, #3
 800914a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800914e:	e005      	b.n	800915c <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009150:	4b3f      	ldr	r3, [pc, #252]	@ (8009250 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009158:	2b00      	cmp	r3, #0
 800915a:	d0ed      	beq.n	8009138 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800915c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009160:	2b00      	cmp	r3, #0
 8009162:	d179      	bne.n	8009258 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8009164:	4b39      	ldr	r3, [pc, #228]	@ (800924c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009166:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8009168:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800916c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009170:	4053      	eors	r3, r2
 8009172:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009176:	2b00      	cmp	r3, #0
 8009178:	d015      	beq.n	80091a6 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800917a:	4b34      	ldr	r3, [pc, #208]	@ (800924c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800917c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800917e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009182:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009186:	4b31      	ldr	r3, [pc, #196]	@ (800924c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009188:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800918a:	4a30      	ldr	r2, [pc, #192]	@ (800924c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800918c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009190:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009192:	4b2e      	ldr	r3, [pc, #184]	@ (800924c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009194:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009196:	4a2d      	ldr	r2, [pc, #180]	@ (800924c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009198:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800919c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800919e:	4a2b      	ldr	r2, [pc, #172]	@ (800924c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80091a0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80091a4:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80091a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80091aa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80091ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80091b2:	d118      	bne.n	80091e6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80091b4:	f7f9 fcd0 	bl	8002b58 <HAL_GetTick>
 80091b8:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80091bc:	e00d      	b.n	80091da <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80091be:	f7f9 fccb 	bl	8002b58 <HAL_GetTick>
 80091c2:	4602      	mov	r2, r0
 80091c4:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80091c8:	1ad2      	subs	r2, r2, r3
 80091ca:	f241 3388 	movw	r3, #5000	@ 0x1388
 80091ce:	429a      	cmp	r2, r3
 80091d0:	d903      	bls.n	80091da <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80091d2:	2303      	movs	r3, #3
 80091d4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 80091d8:	e005      	b.n	80091e6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80091da:	4b1c      	ldr	r3, [pc, #112]	@ (800924c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80091dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80091de:	f003 0302 	and.w	r3, r3, #2
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d0eb      	beq.n	80091be <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 80091e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d129      	bne.n	8009242 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80091ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80091f2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80091f6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80091fa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80091fe:	d10e      	bne.n	800921e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8009200:	4b12      	ldr	r3, [pc, #72]	@ (800924c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009202:	691b      	ldr	r3, [r3, #16]
 8009204:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8009208:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800920c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009210:	091a      	lsrs	r2, r3, #4
 8009212:	4b10      	ldr	r3, [pc, #64]	@ (8009254 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8009214:	4013      	ands	r3, r2
 8009216:	4a0d      	ldr	r2, [pc, #52]	@ (800924c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009218:	430b      	orrs	r3, r1
 800921a:	6113      	str	r3, [r2, #16]
 800921c:	e005      	b.n	800922a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800921e:	4b0b      	ldr	r3, [pc, #44]	@ (800924c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009220:	691b      	ldr	r3, [r3, #16]
 8009222:	4a0a      	ldr	r2, [pc, #40]	@ (800924c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009224:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8009228:	6113      	str	r3, [r2, #16]
 800922a:	4b08      	ldr	r3, [pc, #32]	@ (800924c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800922c:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800922e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009232:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009236:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800923a:	4a04      	ldr	r2, [pc, #16]	@ (800924c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800923c:	430b      	orrs	r3, r1
 800923e:	6713      	str	r3, [r2, #112]	@ 0x70
 8009240:	e00e      	b.n	8009260 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009242:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009246:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 800924a:	e009      	b.n	8009260 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800924c:	58024400 	.word	0x58024400
 8009250:	58024800 	.word	0x58024800
 8009254:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009258:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800925c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8009260:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009264:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009268:	f002 0301 	and.w	r3, r2, #1
 800926c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009270:	2300      	movs	r3, #0
 8009272:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009276:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800927a:	460b      	mov	r3, r1
 800927c:	4313      	orrs	r3, r2
 800927e:	f000 8089 	beq.w	8009394 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8009282:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009286:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009288:	2b28      	cmp	r3, #40	@ 0x28
 800928a:	d86b      	bhi.n	8009364 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800928c:	a201      	add	r2, pc, #4	@ (adr r2, 8009294 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800928e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009292:	bf00      	nop
 8009294:	0800936d 	.word	0x0800936d
 8009298:	08009365 	.word	0x08009365
 800929c:	08009365 	.word	0x08009365
 80092a0:	08009365 	.word	0x08009365
 80092a4:	08009365 	.word	0x08009365
 80092a8:	08009365 	.word	0x08009365
 80092ac:	08009365 	.word	0x08009365
 80092b0:	08009365 	.word	0x08009365
 80092b4:	08009339 	.word	0x08009339
 80092b8:	08009365 	.word	0x08009365
 80092bc:	08009365 	.word	0x08009365
 80092c0:	08009365 	.word	0x08009365
 80092c4:	08009365 	.word	0x08009365
 80092c8:	08009365 	.word	0x08009365
 80092cc:	08009365 	.word	0x08009365
 80092d0:	08009365 	.word	0x08009365
 80092d4:	0800934f 	.word	0x0800934f
 80092d8:	08009365 	.word	0x08009365
 80092dc:	08009365 	.word	0x08009365
 80092e0:	08009365 	.word	0x08009365
 80092e4:	08009365 	.word	0x08009365
 80092e8:	08009365 	.word	0x08009365
 80092ec:	08009365 	.word	0x08009365
 80092f0:	08009365 	.word	0x08009365
 80092f4:	0800936d 	.word	0x0800936d
 80092f8:	08009365 	.word	0x08009365
 80092fc:	08009365 	.word	0x08009365
 8009300:	08009365 	.word	0x08009365
 8009304:	08009365 	.word	0x08009365
 8009308:	08009365 	.word	0x08009365
 800930c:	08009365 	.word	0x08009365
 8009310:	08009365 	.word	0x08009365
 8009314:	0800936d 	.word	0x0800936d
 8009318:	08009365 	.word	0x08009365
 800931c:	08009365 	.word	0x08009365
 8009320:	08009365 	.word	0x08009365
 8009324:	08009365 	.word	0x08009365
 8009328:	08009365 	.word	0x08009365
 800932c:	08009365 	.word	0x08009365
 8009330:	08009365 	.word	0x08009365
 8009334:	0800936d 	.word	0x0800936d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009338:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800933c:	3308      	adds	r3, #8
 800933e:	2101      	movs	r1, #1
 8009340:	4618      	mov	r0, r3
 8009342:	f001 fe95 	bl	800b070 <RCCEx_PLL2_Config>
 8009346:	4603      	mov	r3, r0
 8009348:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800934c:	e00f      	b.n	800936e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800934e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009352:	3328      	adds	r3, #40	@ 0x28
 8009354:	2101      	movs	r1, #1
 8009356:	4618      	mov	r0, r3
 8009358:	f001 ff3c 	bl	800b1d4 <RCCEx_PLL3_Config>
 800935c:	4603      	mov	r3, r0
 800935e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8009362:	e004      	b.n	800936e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009364:	2301      	movs	r3, #1
 8009366:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800936a:	e000      	b.n	800936e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800936c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800936e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009372:	2b00      	cmp	r3, #0
 8009374:	d10a      	bne.n	800938c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8009376:	4bbf      	ldr	r3, [pc, #764]	@ (8009674 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009378:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800937a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800937e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009382:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009384:	4abb      	ldr	r2, [pc, #748]	@ (8009674 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009386:	430b      	orrs	r3, r1
 8009388:	6553      	str	r3, [r2, #84]	@ 0x54
 800938a:	e003      	b.n	8009394 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800938c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009390:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8009394:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800939c:	f002 0302 	and.w	r3, r2, #2
 80093a0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80093a4:	2300      	movs	r3, #0
 80093a6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80093aa:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80093ae:	460b      	mov	r3, r1
 80093b0:	4313      	orrs	r3, r2
 80093b2:	d041      	beq.n	8009438 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80093b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80093b8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80093ba:	2b05      	cmp	r3, #5
 80093bc:	d824      	bhi.n	8009408 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80093be:	a201      	add	r2, pc, #4	@ (adr r2, 80093c4 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80093c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093c4:	08009411 	.word	0x08009411
 80093c8:	080093dd 	.word	0x080093dd
 80093cc:	080093f3 	.word	0x080093f3
 80093d0:	08009411 	.word	0x08009411
 80093d4:	08009411 	.word	0x08009411
 80093d8:	08009411 	.word	0x08009411
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80093dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80093e0:	3308      	adds	r3, #8
 80093e2:	2101      	movs	r1, #1
 80093e4:	4618      	mov	r0, r3
 80093e6:	f001 fe43 	bl	800b070 <RCCEx_PLL2_Config>
 80093ea:	4603      	mov	r3, r0
 80093ec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80093f0:	e00f      	b.n	8009412 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80093f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80093f6:	3328      	adds	r3, #40	@ 0x28
 80093f8:	2101      	movs	r1, #1
 80093fa:	4618      	mov	r0, r3
 80093fc:	f001 feea 	bl	800b1d4 <RCCEx_PLL3_Config>
 8009400:	4603      	mov	r3, r0
 8009402:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8009406:	e004      	b.n	8009412 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009408:	2301      	movs	r3, #1
 800940a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800940e:	e000      	b.n	8009412 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8009410:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009412:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009416:	2b00      	cmp	r3, #0
 8009418:	d10a      	bne.n	8009430 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800941a:	4b96      	ldr	r3, [pc, #600]	@ (8009674 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800941c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800941e:	f023 0107 	bic.w	r1, r3, #7
 8009422:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009426:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009428:	4a92      	ldr	r2, [pc, #584]	@ (8009674 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800942a:	430b      	orrs	r3, r1
 800942c:	6553      	str	r3, [r2, #84]	@ 0x54
 800942e:	e003      	b.n	8009438 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009430:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009434:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009438:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800943c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009440:	f002 0304 	and.w	r3, r2, #4
 8009444:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009448:	2300      	movs	r3, #0
 800944a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800944e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8009452:	460b      	mov	r3, r1
 8009454:	4313      	orrs	r3, r2
 8009456:	d044      	beq.n	80094e2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8009458:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800945c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009460:	2b05      	cmp	r3, #5
 8009462:	d825      	bhi.n	80094b0 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8009464:	a201      	add	r2, pc, #4	@ (adr r2, 800946c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8009466:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800946a:	bf00      	nop
 800946c:	080094b9 	.word	0x080094b9
 8009470:	08009485 	.word	0x08009485
 8009474:	0800949b 	.word	0x0800949b
 8009478:	080094b9 	.word	0x080094b9
 800947c:	080094b9 	.word	0x080094b9
 8009480:	080094b9 	.word	0x080094b9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009484:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009488:	3308      	adds	r3, #8
 800948a:	2101      	movs	r1, #1
 800948c:	4618      	mov	r0, r3
 800948e:	f001 fdef 	bl	800b070 <RCCEx_PLL2_Config>
 8009492:	4603      	mov	r3, r0
 8009494:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8009498:	e00f      	b.n	80094ba <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800949a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800949e:	3328      	adds	r3, #40	@ 0x28
 80094a0:	2101      	movs	r1, #1
 80094a2:	4618      	mov	r0, r3
 80094a4:	f001 fe96 	bl	800b1d4 <RCCEx_PLL3_Config>
 80094a8:	4603      	mov	r3, r0
 80094aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80094ae:	e004      	b.n	80094ba <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80094b0:	2301      	movs	r3, #1
 80094b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80094b6:	e000      	b.n	80094ba <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80094b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80094ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d10b      	bne.n	80094da <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80094c2:	4b6c      	ldr	r3, [pc, #432]	@ (8009674 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80094c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80094c6:	f023 0107 	bic.w	r1, r3, #7
 80094ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80094ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80094d2:	4a68      	ldr	r2, [pc, #416]	@ (8009674 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80094d4:	430b      	orrs	r3, r1
 80094d6:	6593      	str	r3, [r2, #88]	@ 0x58
 80094d8:	e003      	b.n	80094e2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80094da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80094de:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80094e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80094e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094ea:	f002 0320 	and.w	r3, r2, #32
 80094ee:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80094f2:	2300      	movs	r3, #0
 80094f4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80094f8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80094fc:	460b      	mov	r3, r1
 80094fe:	4313      	orrs	r3, r2
 8009500:	d055      	beq.n	80095ae <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8009502:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009506:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800950a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800950e:	d033      	beq.n	8009578 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8009510:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009514:	d82c      	bhi.n	8009570 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8009516:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800951a:	d02f      	beq.n	800957c <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800951c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009520:	d826      	bhi.n	8009570 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8009522:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009526:	d02b      	beq.n	8009580 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8009528:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800952c:	d820      	bhi.n	8009570 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800952e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009532:	d012      	beq.n	800955a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8009534:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009538:	d81a      	bhi.n	8009570 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800953a:	2b00      	cmp	r3, #0
 800953c:	d022      	beq.n	8009584 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800953e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009542:	d115      	bne.n	8009570 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009544:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009548:	3308      	adds	r3, #8
 800954a:	2100      	movs	r1, #0
 800954c:	4618      	mov	r0, r3
 800954e:	f001 fd8f 	bl	800b070 <RCCEx_PLL2_Config>
 8009552:	4603      	mov	r3, r0
 8009554:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8009558:	e015      	b.n	8009586 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800955a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800955e:	3328      	adds	r3, #40	@ 0x28
 8009560:	2102      	movs	r1, #2
 8009562:	4618      	mov	r0, r3
 8009564:	f001 fe36 	bl	800b1d4 <RCCEx_PLL3_Config>
 8009568:	4603      	mov	r3, r0
 800956a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800956e:	e00a      	b.n	8009586 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009570:	2301      	movs	r3, #1
 8009572:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009576:	e006      	b.n	8009586 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009578:	bf00      	nop
 800957a:	e004      	b.n	8009586 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800957c:	bf00      	nop
 800957e:	e002      	b.n	8009586 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009580:	bf00      	nop
 8009582:	e000      	b.n	8009586 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009584:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009586:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800958a:	2b00      	cmp	r3, #0
 800958c:	d10b      	bne.n	80095a6 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800958e:	4b39      	ldr	r3, [pc, #228]	@ (8009674 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009590:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009592:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8009596:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800959a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800959e:	4a35      	ldr	r2, [pc, #212]	@ (8009674 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80095a0:	430b      	orrs	r3, r1
 80095a2:	6553      	str	r3, [r2, #84]	@ 0x54
 80095a4:	e003      	b.n	80095ae <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80095a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80095aa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80095ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80095b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095b6:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80095ba:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80095be:	2300      	movs	r3, #0
 80095c0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80095c4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80095c8:	460b      	mov	r3, r1
 80095ca:	4313      	orrs	r3, r2
 80095cc:	d058      	beq.n	8009680 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80095ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80095d2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80095d6:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80095da:	d033      	beq.n	8009644 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80095dc:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80095e0:	d82c      	bhi.n	800963c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80095e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80095e6:	d02f      	beq.n	8009648 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80095e8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80095ec:	d826      	bhi.n	800963c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80095ee:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80095f2:	d02b      	beq.n	800964c <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80095f4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80095f8:	d820      	bhi.n	800963c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80095fa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80095fe:	d012      	beq.n	8009626 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8009600:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009604:	d81a      	bhi.n	800963c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009606:	2b00      	cmp	r3, #0
 8009608:	d022      	beq.n	8009650 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800960a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800960e:	d115      	bne.n	800963c <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009610:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009614:	3308      	adds	r3, #8
 8009616:	2100      	movs	r1, #0
 8009618:	4618      	mov	r0, r3
 800961a:	f001 fd29 	bl	800b070 <RCCEx_PLL2_Config>
 800961e:	4603      	mov	r3, r0
 8009620:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8009624:	e015      	b.n	8009652 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009626:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800962a:	3328      	adds	r3, #40	@ 0x28
 800962c:	2102      	movs	r1, #2
 800962e:	4618      	mov	r0, r3
 8009630:	f001 fdd0 	bl	800b1d4 <RCCEx_PLL3_Config>
 8009634:	4603      	mov	r3, r0
 8009636:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800963a:	e00a      	b.n	8009652 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800963c:	2301      	movs	r3, #1
 800963e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009642:	e006      	b.n	8009652 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009644:	bf00      	nop
 8009646:	e004      	b.n	8009652 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009648:	bf00      	nop
 800964a:	e002      	b.n	8009652 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800964c:	bf00      	nop
 800964e:	e000      	b.n	8009652 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009650:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009652:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009656:	2b00      	cmp	r3, #0
 8009658:	d10e      	bne.n	8009678 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800965a:	4b06      	ldr	r3, [pc, #24]	@ (8009674 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800965c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800965e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8009662:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009666:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800966a:	4a02      	ldr	r2, [pc, #8]	@ (8009674 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800966c:	430b      	orrs	r3, r1
 800966e:	6593      	str	r3, [r2, #88]	@ 0x58
 8009670:	e006      	b.n	8009680 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8009672:	bf00      	nop
 8009674:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009678:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800967c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8009680:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009684:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009688:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800968c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009690:	2300      	movs	r3, #0
 8009692:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009696:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800969a:	460b      	mov	r3, r1
 800969c:	4313      	orrs	r3, r2
 800969e:	d055      	beq.n	800974c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80096a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80096a4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80096a8:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80096ac:	d033      	beq.n	8009716 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80096ae:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80096b2:	d82c      	bhi.n	800970e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80096b4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80096b8:	d02f      	beq.n	800971a <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80096ba:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80096be:	d826      	bhi.n	800970e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80096c0:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80096c4:	d02b      	beq.n	800971e <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80096c6:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80096ca:	d820      	bhi.n	800970e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80096cc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80096d0:	d012      	beq.n	80096f8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80096d2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80096d6:	d81a      	bhi.n	800970e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d022      	beq.n	8009722 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80096dc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80096e0:	d115      	bne.n	800970e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80096e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80096e6:	3308      	adds	r3, #8
 80096e8:	2100      	movs	r1, #0
 80096ea:	4618      	mov	r0, r3
 80096ec:	f001 fcc0 	bl	800b070 <RCCEx_PLL2_Config>
 80096f0:	4603      	mov	r3, r0
 80096f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80096f6:	e015      	b.n	8009724 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80096f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80096fc:	3328      	adds	r3, #40	@ 0x28
 80096fe:	2102      	movs	r1, #2
 8009700:	4618      	mov	r0, r3
 8009702:	f001 fd67 	bl	800b1d4 <RCCEx_PLL3_Config>
 8009706:	4603      	mov	r3, r0
 8009708:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800970c:	e00a      	b.n	8009724 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800970e:	2301      	movs	r3, #1
 8009710:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009714:	e006      	b.n	8009724 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009716:	bf00      	nop
 8009718:	e004      	b.n	8009724 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800971a:	bf00      	nop
 800971c:	e002      	b.n	8009724 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800971e:	bf00      	nop
 8009720:	e000      	b.n	8009724 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009722:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009724:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009728:	2b00      	cmp	r3, #0
 800972a:	d10b      	bne.n	8009744 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800972c:	4ba1      	ldr	r3, [pc, #644]	@ (80099b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800972e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009730:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8009734:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009738:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800973c:	4a9d      	ldr	r2, [pc, #628]	@ (80099b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800973e:	430b      	orrs	r3, r1
 8009740:	6593      	str	r3, [r2, #88]	@ 0x58
 8009742:	e003      	b.n	800974c <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009744:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009748:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800974c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009750:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009754:	f002 0308 	and.w	r3, r2, #8
 8009758:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800975c:	2300      	movs	r3, #0
 800975e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009762:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8009766:	460b      	mov	r3, r1
 8009768:	4313      	orrs	r3, r2
 800976a:	d01e      	beq.n	80097aa <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800976c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009770:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009774:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009778:	d10c      	bne.n	8009794 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800977a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800977e:	3328      	adds	r3, #40	@ 0x28
 8009780:	2102      	movs	r1, #2
 8009782:	4618      	mov	r0, r3
 8009784:	f001 fd26 	bl	800b1d4 <RCCEx_PLL3_Config>
 8009788:	4603      	mov	r3, r0
 800978a:	2b00      	cmp	r3, #0
 800978c:	d002      	beq.n	8009794 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800978e:	2301      	movs	r3, #1
 8009790:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8009794:	4b87      	ldr	r3, [pc, #540]	@ (80099b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009796:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009798:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800979c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80097a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80097a4:	4a83      	ldr	r2, [pc, #524]	@ (80099b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80097a6:	430b      	orrs	r3, r1
 80097a8:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80097aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80097ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097b2:	f002 0310 	and.w	r3, r2, #16
 80097b6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80097ba:	2300      	movs	r3, #0
 80097bc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80097c0:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80097c4:	460b      	mov	r3, r1
 80097c6:	4313      	orrs	r3, r2
 80097c8:	d01e      	beq.n	8009808 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80097ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80097ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80097d2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80097d6:	d10c      	bne.n	80097f2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80097d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80097dc:	3328      	adds	r3, #40	@ 0x28
 80097de:	2102      	movs	r1, #2
 80097e0:	4618      	mov	r0, r3
 80097e2:	f001 fcf7 	bl	800b1d4 <RCCEx_PLL3_Config>
 80097e6:	4603      	mov	r3, r0
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d002      	beq.n	80097f2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80097ec:	2301      	movs	r3, #1
 80097ee:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80097f2:	4b70      	ldr	r3, [pc, #448]	@ (80099b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80097f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80097f6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80097fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80097fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009802:	4a6c      	ldr	r2, [pc, #432]	@ (80099b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009804:	430b      	orrs	r3, r1
 8009806:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009808:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800980c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009810:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8009814:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009818:	2300      	movs	r3, #0
 800981a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800981e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8009822:	460b      	mov	r3, r1
 8009824:	4313      	orrs	r3, r2
 8009826:	d03e      	beq.n	80098a6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8009828:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800982c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009830:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009834:	d022      	beq.n	800987c <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8009836:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800983a:	d81b      	bhi.n	8009874 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800983c:	2b00      	cmp	r3, #0
 800983e:	d003      	beq.n	8009848 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8009840:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009844:	d00b      	beq.n	800985e <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8009846:	e015      	b.n	8009874 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009848:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800984c:	3308      	adds	r3, #8
 800984e:	2100      	movs	r1, #0
 8009850:	4618      	mov	r0, r3
 8009852:	f001 fc0d 	bl	800b070 <RCCEx_PLL2_Config>
 8009856:	4603      	mov	r3, r0
 8009858:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800985c:	e00f      	b.n	800987e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800985e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009862:	3328      	adds	r3, #40	@ 0x28
 8009864:	2102      	movs	r1, #2
 8009866:	4618      	mov	r0, r3
 8009868:	f001 fcb4 	bl	800b1d4 <RCCEx_PLL3_Config>
 800986c:	4603      	mov	r3, r0
 800986e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8009872:	e004      	b.n	800987e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009874:	2301      	movs	r3, #1
 8009876:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800987a:	e000      	b.n	800987e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800987c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800987e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009882:	2b00      	cmp	r3, #0
 8009884:	d10b      	bne.n	800989e <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009886:	4b4b      	ldr	r3, [pc, #300]	@ (80099b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009888:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800988a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800988e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009892:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009896:	4a47      	ldr	r2, [pc, #284]	@ (80099b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009898:	430b      	orrs	r3, r1
 800989a:	6593      	str	r3, [r2, #88]	@ 0x58
 800989c:	e003      	b.n	80098a6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800989e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80098a2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80098a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80098aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098ae:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80098b2:	67bb      	str	r3, [r7, #120]	@ 0x78
 80098b4:	2300      	movs	r3, #0
 80098b6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80098b8:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80098bc:	460b      	mov	r3, r1
 80098be:	4313      	orrs	r3, r2
 80098c0:	d03b      	beq.n	800993a <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80098c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80098c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80098ca:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80098ce:	d01f      	beq.n	8009910 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80098d0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80098d4:	d818      	bhi.n	8009908 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80098d6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80098da:	d003      	beq.n	80098e4 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80098dc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80098e0:	d007      	beq.n	80098f2 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80098e2:	e011      	b.n	8009908 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80098e4:	4b33      	ldr	r3, [pc, #204]	@ (80099b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80098e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098e8:	4a32      	ldr	r2, [pc, #200]	@ (80099b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80098ea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80098ee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80098f0:	e00f      	b.n	8009912 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80098f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80098f6:	3328      	adds	r3, #40	@ 0x28
 80098f8:	2101      	movs	r1, #1
 80098fa:	4618      	mov	r0, r3
 80098fc:	f001 fc6a 	bl	800b1d4 <RCCEx_PLL3_Config>
 8009900:	4603      	mov	r3, r0
 8009902:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8009906:	e004      	b.n	8009912 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009908:	2301      	movs	r3, #1
 800990a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800990e:	e000      	b.n	8009912 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8009910:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009912:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009916:	2b00      	cmp	r3, #0
 8009918:	d10b      	bne.n	8009932 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800991a:	4b26      	ldr	r3, [pc, #152]	@ (80099b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800991c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800991e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8009922:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009926:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800992a:	4a22      	ldr	r2, [pc, #136]	@ (80099b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800992c:	430b      	orrs	r3, r1
 800992e:	6553      	str	r3, [r2, #84]	@ 0x54
 8009930:	e003      	b.n	800993a <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009932:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009936:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800993a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800993e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009942:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8009946:	673b      	str	r3, [r7, #112]	@ 0x70
 8009948:	2300      	movs	r3, #0
 800994a:	677b      	str	r3, [r7, #116]	@ 0x74
 800994c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8009950:	460b      	mov	r3, r1
 8009952:	4313      	orrs	r3, r2
 8009954:	d034      	beq.n	80099c0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8009956:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800995a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800995c:	2b00      	cmp	r3, #0
 800995e:	d003      	beq.n	8009968 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8009960:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009964:	d007      	beq.n	8009976 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8009966:	e011      	b.n	800998c <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009968:	4b12      	ldr	r3, [pc, #72]	@ (80099b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800996a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800996c:	4a11      	ldr	r2, [pc, #68]	@ (80099b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800996e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009972:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8009974:	e00e      	b.n	8009994 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009976:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800997a:	3308      	adds	r3, #8
 800997c:	2102      	movs	r1, #2
 800997e:	4618      	mov	r0, r3
 8009980:	f001 fb76 	bl	800b070 <RCCEx_PLL2_Config>
 8009984:	4603      	mov	r3, r0
 8009986:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800998a:	e003      	b.n	8009994 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800998c:	2301      	movs	r3, #1
 800998e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009992:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009994:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009998:	2b00      	cmp	r3, #0
 800999a:	d10d      	bne.n	80099b8 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800999c:	4b05      	ldr	r3, [pc, #20]	@ (80099b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800999e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80099a0:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80099a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80099a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80099aa:	4a02      	ldr	r2, [pc, #8]	@ (80099b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80099ac:	430b      	orrs	r3, r1
 80099ae:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80099b0:	e006      	b.n	80099c0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80099b2:	bf00      	nop
 80099b4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80099b8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80099bc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80099c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80099c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099c8:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80099cc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80099ce:	2300      	movs	r3, #0
 80099d0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80099d2:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80099d6:	460b      	mov	r3, r1
 80099d8:	4313      	orrs	r3, r2
 80099da:	d00c      	beq.n	80099f6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80099dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80099e0:	3328      	adds	r3, #40	@ 0x28
 80099e2:	2102      	movs	r1, #2
 80099e4:	4618      	mov	r0, r3
 80099e6:	f001 fbf5 	bl	800b1d4 <RCCEx_PLL3_Config>
 80099ea:	4603      	mov	r3, r0
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d002      	beq.n	80099f6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80099f0:	2301      	movs	r3, #1
 80099f2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80099f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80099fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099fe:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8009a02:	663b      	str	r3, [r7, #96]	@ 0x60
 8009a04:	2300      	movs	r3, #0
 8009a06:	667b      	str	r3, [r7, #100]	@ 0x64
 8009a08:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8009a0c:	460b      	mov	r3, r1
 8009a0e:	4313      	orrs	r3, r2
 8009a10:	d038      	beq.n	8009a84 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8009a12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a16:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009a1a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009a1e:	d018      	beq.n	8009a52 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8009a20:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009a24:	d811      	bhi.n	8009a4a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8009a26:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009a2a:	d014      	beq.n	8009a56 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8009a2c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009a30:	d80b      	bhi.n	8009a4a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d011      	beq.n	8009a5a <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8009a36:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009a3a:	d106      	bne.n	8009a4a <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009a3c:	4bc3      	ldr	r3, [pc, #780]	@ (8009d4c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009a3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a40:	4ac2      	ldr	r2, [pc, #776]	@ (8009d4c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009a42:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009a46:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8009a48:	e008      	b.n	8009a5c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009a4a:	2301      	movs	r3, #1
 8009a4c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009a50:	e004      	b.n	8009a5c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8009a52:	bf00      	nop
 8009a54:	e002      	b.n	8009a5c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8009a56:	bf00      	nop
 8009a58:	e000      	b.n	8009a5c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8009a5a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009a5c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d10b      	bne.n	8009a7c <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009a64:	4bb9      	ldr	r3, [pc, #740]	@ (8009d4c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009a66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009a68:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8009a6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a70:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009a74:	4ab5      	ldr	r2, [pc, #724]	@ (8009d4c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009a76:	430b      	orrs	r3, r1
 8009a78:	6553      	str	r3, [r2, #84]	@ 0x54
 8009a7a:	e003      	b.n	8009a84 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a7c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009a80:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009a84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a8c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8009a90:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009a92:	2300      	movs	r3, #0
 8009a94:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009a96:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8009a9a:	460b      	mov	r3, r1
 8009a9c:	4313      	orrs	r3, r2
 8009a9e:	d009      	beq.n	8009ab4 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8009aa0:	4baa      	ldr	r3, [pc, #680]	@ (8009d4c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009aa2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009aa4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8009aa8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009aac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009aae:	4aa7      	ldr	r2, [pc, #668]	@ (8009d4c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009ab0:	430b      	orrs	r3, r1
 8009ab2:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8009ab4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009abc:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8009ac0:	653b      	str	r3, [r7, #80]	@ 0x50
 8009ac2:	2300      	movs	r3, #0
 8009ac4:	657b      	str	r3, [r7, #84]	@ 0x54
 8009ac6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8009aca:	460b      	mov	r3, r1
 8009acc:	4313      	orrs	r3, r2
 8009ace:	d00a      	beq.n	8009ae6 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8009ad0:	4b9e      	ldr	r3, [pc, #632]	@ (8009d4c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009ad2:	691b      	ldr	r3, [r3, #16]
 8009ad4:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8009ad8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009adc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8009ae0:	4a9a      	ldr	r2, [pc, #616]	@ (8009d4c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009ae2:	430b      	orrs	r3, r1
 8009ae4:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009ae6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009aea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009aee:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8009af2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009af4:	2300      	movs	r3, #0
 8009af6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009af8:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8009afc:	460b      	mov	r3, r1
 8009afe:	4313      	orrs	r3, r2
 8009b00:	d009      	beq.n	8009b16 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009b02:	4b92      	ldr	r3, [pc, #584]	@ (8009d4c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009b04:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009b06:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8009b0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b0e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009b10:	4a8e      	ldr	r2, [pc, #568]	@ (8009d4c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009b12:	430b      	orrs	r3, r1
 8009b14:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8009b16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b1e:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8009b22:	643b      	str	r3, [r7, #64]	@ 0x40
 8009b24:	2300      	movs	r3, #0
 8009b26:	647b      	str	r3, [r7, #68]	@ 0x44
 8009b28:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8009b2c:	460b      	mov	r3, r1
 8009b2e:	4313      	orrs	r3, r2
 8009b30:	d00e      	beq.n	8009b50 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009b32:	4b86      	ldr	r3, [pc, #536]	@ (8009d4c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009b34:	691b      	ldr	r3, [r3, #16]
 8009b36:	4a85      	ldr	r2, [pc, #532]	@ (8009d4c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009b38:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8009b3c:	6113      	str	r3, [r2, #16]
 8009b3e:	4b83      	ldr	r3, [pc, #524]	@ (8009d4c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009b40:	6919      	ldr	r1, [r3, #16]
 8009b42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b46:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8009b4a:	4a80      	ldr	r2, [pc, #512]	@ (8009d4c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009b4c:	430b      	orrs	r3, r1
 8009b4e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8009b50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b58:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8009b5c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009b5e:	2300      	movs	r3, #0
 8009b60:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009b62:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8009b66:	460b      	mov	r3, r1
 8009b68:	4313      	orrs	r3, r2
 8009b6a:	d009      	beq.n	8009b80 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8009b6c:	4b77      	ldr	r3, [pc, #476]	@ (8009d4c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009b6e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009b70:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8009b74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009b7a:	4a74      	ldr	r2, [pc, #464]	@ (8009d4c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009b7c:	430b      	orrs	r3, r1
 8009b7e:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8009b80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b88:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8009b8c:	633b      	str	r3, [r7, #48]	@ 0x30
 8009b8e:	2300      	movs	r3, #0
 8009b90:	637b      	str	r3, [r7, #52]	@ 0x34
 8009b92:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8009b96:	460b      	mov	r3, r1
 8009b98:	4313      	orrs	r3, r2
 8009b9a:	d00a      	beq.n	8009bb2 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8009b9c:	4b6b      	ldr	r3, [pc, #428]	@ (8009d4c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009b9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009ba0:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8009ba4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ba8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009bac:	4a67      	ldr	r2, [pc, #412]	@ (8009d4c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009bae:	430b      	orrs	r3, r1
 8009bb0:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8009bb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bba:	2100      	movs	r1, #0
 8009bbc:	62b9      	str	r1, [r7, #40]	@ 0x28
 8009bbe:	f003 0301 	and.w	r3, r3, #1
 8009bc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009bc4:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8009bc8:	460b      	mov	r3, r1
 8009bca:	4313      	orrs	r3, r2
 8009bcc:	d011      	beq.n	8009bf2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009bce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009bd2:	3308      	adds	r3, #8
 8009bd4:	2100      	movs	r1, #0
 8009bd6:	4618      	mov	r0, r3
 8009bd8:	f001 fa4a 	bl	800b070 <RCCEx_PLL2_Config>
 8009bdc:	4603      	mov	r3, r0
 8009bde:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8009be2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d003      	beq.n	8009bf2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009bea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009bee:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8009bf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009bf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bfa:	2100      	movs	r1, #0
 8009bfc:	6239      	str	r1, [r7, #32]
 8009bfe:	f003 0302 	and.w	r3, r3, #2
 8009c02:	627b      	str	r3, [r7, #36]	@ 0x24
 8009c04:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8009c08:	460b      	mov	r3, r1
 8009c0a:	4313      	orrs	r3, r2
 8009c0c:	d011      	beq.n	8009c32 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009c0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c12:	3308      	adds	r3, #8
 8009c14:	2101      	movs	r1, #1
 8009c16:	4618      	mov	r0, r3
 8009c18:	f001 fa2a 	bl	800b070 <RCCEx_PLL2_Config>
 8009c1c:	4603      	mov	r3, r0
 8009c1e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8009c22:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d003      	beq.n	8009c32 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c2a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009c2e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8009c32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c3a:	2100      	movs	r1, #0
 8009c3c:	61b9      	str	r1, [r7, #24]
 8009c3e:	f003 0304 	and.w	r3, r3, #4
 8009c42:	61fb      	str	r3, [r7, #28]
 8009c44:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8009c48:	460b      	mov	r3, r1
 8009c4a:	4313      	orrs	r3, r2
 8009c4c:	d011      	beq.n	8009c72 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009c4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c52:	3308      	adds	r3, #8
 8009c54:	2102      	movs	r1, #2
 8009c56:	4618      	mov	r0, r3
 8009c58:	f001 fa0a 	bl	800b070 <RCCEx_PLL2_Config>
 8009c5c:	4603      	mov	r3, r0
 8009c5e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8009c62:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d003      	beq.n	8009c72 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c6a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009c6e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8009c72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c7a:	2100      	movs	r1, #0
 8009c7c:	6139      	str	r1, [r7, #16]
 8009c7e:	f003 0308 	and.w	r3, r3, #8
 8009c82:	617b      	str	r3, [r7, #20]
 8009c84:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8009c88:	460b      	mov	r3, r1
 8009c8a:	4313      	orrs	r3, r2
 8009c8c:	d011      	beq.n	8009cb2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009c8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c92:	3328      	adds	r3, #40	@ 0x28
 8009c94:	2100      	movs	r1, #0
 8009c96:	4618      	mov	r0, r3
 8009c98:	f001 fa9c 	bl	800b1d4 <RCCEx_PLL3_Config>
 8009c9c:	4603      	mov	r3, r0
 8009c9e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8009ca2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d003      	beq.n	8009cb2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009caa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009cae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8009cb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009cb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cba:	2100      	movs	r1, #0
 8009cbc:	60b9      	str	r1, [r7, #8]
 8009cbe:	f003 0310 	and.w	r3, r3, #16
 8009cc2:	60fb      	str	r3, [r7, #12]
 8009cc4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8009cc8:	460b      	mov	r3, r1
 8009cca:	4313      	orrs	r3, r2
 8009ccc:	d011      	beq.n	8009cf2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009cce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009cd2:	3328      	adds	r3, #40	@ 0x28
 8009cd4:	2101      	movs	r1, #1
 8009cd6:	4618      	mov	r0, r3
 8009cd8:	f001 fa7c 	bl	800b1d4 <RCCEx_PLL3_Config>
 8009cdc:	4603      	mov	r3, r0
 8009cde:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8009ce2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d003      	beq.n	8009cf2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009cea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009cee:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8009cf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009cf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cfa:	2100      	movs	r1, #0
 8009cfc:	6039      	str	r1, [r7, #0]
 8009cfe:	f003 0320 	and.w	r3, r3, #32
 8009d02:	607b      	str	r3, [r7, #4]
 8009d04:	e9d7 1200 	ldrd	r1, r2, [r7]
 8009d08:	460b      	mov	r3, r1
 8009d0a:	4313      	orrs	r3, r2
 8009d0c:	d011      	beq.n	8009d32 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009d0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d12:	3328      	adds	r3, #40	@ 0x28
 8009d14:	2102      	movs	r1, #2
 8009d16:	4618      	mov	r0, r3
 8009d18:	f001 fa5c 	bl	800b1d4 <RCCEx_PLL3_Config>
 8009d1c:	4603      	mov	r3, r0
 8009d1e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8009d22:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d003      	beq.n	8009d32 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d2a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009d2e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8009d32:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d101      	bne.n	8009d3e <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8009d3a:	2300      	movs	r3, #0
 8009d3c:	e000      	b.n	8009d40 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8009d3e:	2301      	movs	r3, #1
}
 8009d40:	4618      	mov	r0, r3
 8009d42:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8009d46:	46bd      	mov	sp, r7
 8009d48:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009d4c:	58024400 	.word	0x58024400

08009d50 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8009d50:	b580      	push	{r7, lr}
 8009d52:	b090      	sub	sp, #64	@ 0x40
 8009d54:	af00      	add	r7, sp, #0
 8009d56:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8009d5a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009d5e:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8009d62:	430b      	orrs	r3, r1
 8009d64:	f040 8094 	bne.w	8009e90 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8009d68:	4b9e      	ldr	r3, [pc, #632]	@ (8009fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009d6a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009d6c:	f003 0307 	and.w	r3, r3, #7
 8009d70:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8009d72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d74:	2b04      	cmp	r3, #4
 8009d76:	f200 8087 	bhi.w	8009e88 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8009d7a:	a201      	add	r2, pc, #4	@ (adr r2, 8009d80 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8009d7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d80:	08009d95 	.word	0x08009d95
 8009d84:	08009dbd 	.word	0x08009dbd
 8009d88:	08009de5 	.word	0x08009de5
 8009d8c:	08009e81 	.word	0x08009e81
 8009d90:	08009e0d 	.word	0x08009e0d
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009d94:	4b93      	ldr	r3, [pc, #588]	@ (8009fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009d9c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009da0:	d108      	bne.n	8009db4 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009da2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009da6:	4618      	mov	r0, r3
 8009da8:	f001 f810 	bl	800adcc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009dac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009dae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009db0:	f000 bd45 	b.w	800a83e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009db4:	2300      	movs	r3, #0
 8009db6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009db8:	f000 bd41 	b.w	800a83e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009dbc:	4b89      	ldr	r3, [pc, #548]	@ (8009fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009dc4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009dc8:	d108      	bne.n	8009ddc <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009dca:	f107 0318 	add.w	r3, r7, #24
 8009dce:	4618      	mov	r0, r3
 8009dd0:	f000 fd54 	bl	800a87c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009dd4:	69bb      	ldr	r3, [r7, #24]
 8009dd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009dd8:	f000 bd31 	b.w	800a83e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009ddc:	2300      	movs	r3, #0
 8009dde:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009de0:	f000 bd2d 	b.w	800a83e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009de4:	4b7f      	ldr	r3, [pc, #508]	@ (8009fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009dec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009df0:	d108      	bne.n	8009e04 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009df2:	f107 030c 	add.w	r3, r7, #12
 8009df6:	4618      	mov	r0, r3
 8009df8:	f000 fe94 	bl	800ab24 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009e00:	f000 bd1d 	b.w	800a83e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009e04:	2300      	movs	r3, #0
 8009e06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009e08:	f000 bd19 	b.w	800a83e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009e0c:	4b75      	ldr	r3, [pc, #468]	@ (8009fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009e0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009e10:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009e14:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009e16:	4b73      	ldr	r3, [pc, #460]	@ (8009fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	f003 0304 	and.w	r3, r3, #4
 8009e1e:	2b04      	cmp	r3, #4
 8009e20:	d10c      	bne.n	8009e3c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8009e22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d109      	bne.n	8009e3c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009e28:	4b6e      	ldr	r3, [pc, #440]	@ (8009fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	08db      	lsrs	r3, r3, #3
 8009e2e:	f003 0303 	and.w	r3, r3, #3
 8009e32:	4a6d      	ldr	r2, [pc, #436]	@ (8009fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8009e34:	fa22 f303 	lsr.w	r3, r2, r3
 8009e38:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009e3a:	e01f      	b.n	8009e7c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009e3c:	4b69      	ldr	r3, [pc, #420]	@ (8009fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009e44:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009e48:	d106      	bne.n	8009e58 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8009e4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009e4c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009e50:	d102      	bne.n	8009e58 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009e52:	4b66      	ldr	r3, [pc, #408]	@ (8009fec <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8009e54:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009e56:	e011      	b.n	8009e7c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009e58:	4b62      	ldr	r3, [pc, #392]	@ (8009fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009e60:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009e64:	d106      	bne.n	8009e74 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8009e66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009e68:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009e6c:	d102      	bne.n	8009e74 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009e6e:	4b60      	ldr	r3, [pc, #384]	@ (8009ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8009e70:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009e72:	e003      	b.n	8009e7c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009e74:	2300      	movs	r3, #0
 8009e76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8009e78:	f000 bce1 	b.w	800a83e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009e7c:	f000 bcdf 	b.w	800a83e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009e80:	4b5c      	ldr	r3, [pc, #368]	@ (8009ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8009e82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009e84:	f000 bcdb 	b.w	800a83e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8009e88:	2300      	movs	r3, #0
 8009e8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009e8c:	f000 bcd7 	b.w	800a83e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8009e90:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009e94:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8009e98:	430b      	orrs	r3, r1
 8009e9a:	f040 80ad 	bne.w	8009ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8009e9e:	4b51      	ldr	r3, [pc, #324]	@ (8009fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009ea0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009ea2:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8009ea6:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8009ea8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009eaa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009eae:	d056      	beq.n	8009f5e <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8009eb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009eb2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009eb6:	f200 8090 	bhi.w	8009fda <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8009eba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ebc:	2bc0      	cmp	r3, #192	@ 0xc0
 8009ebe:	f000 8088 	beq.w	8009fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8009ec2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ec4:	2bc0      	cmp	r3, #192	@ 0xc0
 8009ec6:	f200 8088 	bhi.w	8009fda <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8009eca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ecc:	2b80      	cmp	r3, #128	@ 0x80
 8009ece:	d032      	beq.n	8009f36 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8009ed0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ed2:	2b80      	cmp	r3, #128	@ 0x80
 8009ed4:	f200 8081 	bhi.w	8009fda <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8009ed8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d003      	beq.n	8009ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8009ede:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ee0:	2b40      	cmp	r3, #64	@ 0x40
 8009ee2:	d014      	beq.n	8009f0e <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8009ee4:	e079      	b.n	8009fda <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009ee6:	4b3f      	ldr	r3, [pc, #252]	@ (8009fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009eee:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009ef2:	d108      	bne.n	8009f06 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009ef4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009ef8:	4618      	mov	r0, r3
 8009efa:	f000 ff67 	bl	800adcc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009efe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f00:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009f02:	f000 bc9c 	b.w	800a83e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009f06:	2300      	movs	r3, #0
 8009f08:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009f0a:	f000 bc98 	b.w	800a83e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009f0e:	4b35      	ldr	r3, [pc, #212]	@ (8009fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009f16:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009f1a:	d108      	bne.n	8009f2e <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009f1c:	f107 0318 	add.w	r3, r7, #24
 8009f20:	4618      	mov	r0, r3
 8009f22:	f000 fcab 	bl	800a87c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009f26:	69bb      	ldr	r3, [r7, #24]
 8009f28:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009f2a:	f000 bc88 	b.w	800a83e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009f2e:	2300      	movs	r3, #0
 8009f30:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009f32:	f000 bc84 	b.w	800a83e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009f36:	4b2b      	ldr	r3, [pc, #172]	@ (8009fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009f3e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009f42:	d108      	bne.n	8009f56 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009f44:	f107 030c 	add.w	r3, r7, #12
 8009f48:	4618      	mov	r0, r3
 8009f4a:	f000 fdeb 	bl	800ab24 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009f52:	f000 bc74 	b.w	800a83e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009f56:	2300      	movs	r3, #0
 8009f58:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009f5a:	f000 bc70 	b.w	800a83e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009f5e:	4b21      	ldr	r3, [pc, #132]	@ (8009fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009f60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009f62:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009f66:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009f68:	4b1e      	ldr	r3, [pc, #120]	@ (8009fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	f003 0304 	and.w	r3, r3, #4
 8009f70:	2b04      	cmp	r3, #4
 8009f72:	d10c      	bne.n	8009f8e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8009f74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d109      	bne.n	8009f8e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009f7a:	4b1a      	ldr	r3, [pc, #104]	@ (8009fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	08db      	lsrs	r3, r3, #3
 8009f80:	f003 0303 	and.w	r3, r3, #3
 8009f84:	4a18      	ldr	r2, [pc, #96]	@ (8009fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8009f86:	fa22 f303 	lsr.w	r3, r2, r3
 8009f8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009f8c:	e01f      	b.n	8009fce <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009f8e:	4b15      	ldr	r3, [pc, #84]	@ (8009fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009f96:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009f9a:	d106      	bne.n	8009faa <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8009f9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f9e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009fa2:	d102      	bne.n	8009faa <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009fa4:	4b11      	ldr	r3, [pc, #68]	@ (8009fec <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8009fa6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009fa8:	e011      	b.n	8009fce <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009faa:	4b0e      	ldr	r3, [pc, #56]	@ (8009fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009fb2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009fb6:	d106      	bne.n	8009fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8009fb8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009fba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009fbe:	d102      	bne.n	8009fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009fc0:	4b0b      	ldr	r3, [pc, #44]	@ (8009ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8009fc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009fc4:	e003      	b.n	8009fce <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009fc6:	2300      	movs	r3, #0
 8009fc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8009fca:	f000 bc38 	b.w	800a83e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009fce:	f000 bc36 	b.w	800a83e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009fd2:	4b08      	ldr	r3, [pc, #32]	@ (8009ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8009fd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009fd6:	f000 bc32 	b.w	800a83e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8009fda:	2300      	movs	r3, #0
 8009fdc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009fde:	f000 bc2e 	b.w	800a83e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009fe2:	bf00      	nop
 8009fe4:	58024400 	.word	0x58024400
 8009fe8:	03d09000 	.word	0x03d09000
 8009fec:	003d0900 	.word	0x003d0900
 8009ff0:	017d7840 	.word	0x017d7840
 8009ff4:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8009ff8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009ffc:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800a000:	430b      	orrs	r3, r1
 800a002:	f040 809c 	bne.w	800a13e <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800a006:	4b9e      	ldr	r3, [pc, #632]	@ (800a280 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a008:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a00a:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800a00e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800a010:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a012:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a016:	d054      	beq.n	800a0c2 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800a018:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a01a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a01e:	f200 808b 	bhi.w	800a138 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800a022:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a024:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800a028:	f000 8083 	beq.w	800a132 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800a02c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a02e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800a032:	f200 8081 	bhi.w	800a138 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800a036:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a038:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a03c:	d02f      	beq.n	800a09e <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800a03e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a040:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a044:	d878      	bhi.n	800a138 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800a046:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d004      	beq.n	800a056 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800a04c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a04e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a052:	d012      	beq.n	800a07a <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800a054:	e070      	b.n	800a138 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a056:	4b8a      	ldr	r3, [pc, #552]	@ (800a280 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a05e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a062:	d107      	bne.n	800a074 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a064:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a068:	4618      	mov	r0, r3
 800a06a:	f000 feaf 	bl	800adcc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a06e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a070:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a072:	e3e4      	b.n	800a83e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a074:	2300      	movs	r3, #0
 800a076:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a078:	e3e1      	b.n	800a83e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a07a:	4b81      	ldr	r3, [pc, #516]	@ (800a280 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a082:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a086:	d107      	bne.n	800a098 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a088:	f107 0318 	add.w	r3, r7, #24
 800a08c:	4618      	mov	r0, r3
 800a08e:	f000 fbf5 	bl	800a87c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a092:	69bb      	ldr	r3, [r7, #24]
 800a094:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a096:	e3d2      	b.n	800a83e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a098:	2300      	movs	r3, #0
 800a09a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a09c:	e3cf      	b.n	800a83e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a09e:	4b78      	ldr	r3, [pc, #480]	@ (800a280 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a0a6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a0aa:	d107      	bne.n	800a0bc <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a0ac:	f107 030c 	add.w	r3, r7, #12
 800a0b0:	4618      	mov	r0, r3
 800a0b2:	f000 fd37 	bl	800ab24 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a0ba:	e3c0      	b.n	800a83e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a0bc:	2300      	movs	r3, #0
 800a0be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a0c0:	e3bd      	b.n	800a83e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a0c2:	4b6f      	ldr	r3, [pc, #444]	@ (800a280 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a0c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a0c6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a0ca:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a0cc:	4b6c      	ldr	r3, [pc, #432]	@ (800a280 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	f003 0304 	and.w	r3, r3, #4
 800a0d4:	2b04      	cmp	r3, #4
 800a0d6:	d10c      	bne.n	800a0f2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800a0d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d109      	bne.n	800a0f2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a0de:	4b68      	ldr	r3, [pc, #416]	@ (800a280 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	08db      	lsrs	r3, r3, #3
 800a0e4:	f003 0303 	and.w	r3, r3, #3
 800a0e8:	4a66      	ldr	r2, [pc, #408]	@ (800a284 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800a0ea:	fa22 f303 	lsr.w	r3, r2, r3
 800a0ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a0f0:	e01e      	b.n	800a130 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a0f2:	4b63      	ldr	r3, [pc, #396]	@ (800a280 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a0fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a0fe:	d106      	bne.n	800a10e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800a100:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a102:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a106:	d102      	bne.n	800a10e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a108:	4b5f      	ldr	r3, [pc, #380]	@ (800a288 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800a10a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a10c:	e010      	b.n	800a130 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a10e:	4b5c      	ldr	r3, [pc, #368]	@ (800a280 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a116:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a11a:	d106      	bne.n	800a12a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800a11c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a11e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a122:	d102      	bne.n	800a12a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a124:	4b59      	ldr	r3, [pc, #356]	@ (800a28c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800a126:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a128:	e002      	b.n	800a130 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a12a:	2300      	movs	r3, #0
 800a12c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a12e:	e386      	b.n	800a83e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a130:	e385      	b.n	800a83e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a132:	4b57      	ldr	r3, [pc, #348]	@ (800a290 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800a134:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a136:	e382      	b.n	800a83e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800a138:	2300      	movs	r3, #0
 800a13a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a13c:	e37f      	b.n	800a83e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800a13e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a142:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800a146:	430b      	orrs	r3, r1
 800a148:	f040 80a7 	bne.w	800a29a <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800a14c:	4b4c      	ldr	r3, [pc, #304]	@ (800a280 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a14e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a150:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800a154:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800a156:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a158:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a15c:	d055      	beq.n	800a20a <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800a15e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a160:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a164:	f200 8096 	bhi.w	800a294 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800a168:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a16a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800a16e:	f000 8084 	beq.w	800a27a <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800a172:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a174:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800a178:	f200 808c 	bhi.w	800a294 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800a17c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a17e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a182:	d030      	beq.n	800a1e6 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800a184:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a186:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a18a:	f200 8083 	bhi.w	800a294 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800a18e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a190:	2b00      	cmp	r3, #0
 800a192:	d004      	beq.n	800a19e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800a194:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a196:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a19a:	d012      	beq.n	800a1c2 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800a19c:	e07a      	b.n	800a294 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a19e:	4b38      	ldr	r3, [pc, #224]	@ (800a280 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a1a6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a1aa:	d107      	bne.n	800a1bc <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a1ac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a1b0:	4618      	mov	r0, r3
 800a1b2:	f000 fe0b 	bl	800adcc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a1b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a1ba:	e340      	b.n	800a83e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a1bc:	2300      	movs	r3, #0
 800a1be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a1c0:	e33d      	b.n	800a83e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a1c2:	4b2f      	ldr	r3, [pc, #188]	@ (800a280 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a1ca:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a1ce:	d107      	bne.n	800a1e0 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a1d0:	f107 0318 	add.w	r3, r7, #24
 800a1d4:	4618      	mov	r0, r3
 800a1d6:	f000 fb51 	bl	800a87c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a1da:	69bb      	ldr	r3, [r7, #24]
 800a1dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a1de:	e32e      	b.n	800a83e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a1e0:	2300      	movs	r3, #0
 800a1e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a1e4:	e32b      	b.n	800a83e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a1e6:	4b26      	ldr	r3, [pc, #152]	@ (800a280 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a1ee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a1f2:	d107      	bne.n	800a204 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a1f4:	f107 030c 	add.w	r3, r7, #12
 800a1f8:	4618      	mov	r0, r3
 800a1fa:	f000 fc93 	bl	800ab24 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a202:	e31c      	b.n	800a83e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a204:	2300      	movs	r3, #0
 800a206:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a208:	e319      	b.n	800a83e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a20a:	4b1d      	ldr	r3, [pc, #116]	@ (800a280 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a20c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a20e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a212:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a214:	4b1a      	ldr	r3, [pc, #104]	@ (800a280 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	f003 0304 	and.w	r3, r3, #4
 800a21c:	2b04      	cmp	r3, #4
 800a21e:	d10c      	bne.n	800a23a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800a220:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a222:	2b00      	cmp	r3, #0
 800a224:	d109      	bne.n	800a23a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a226:	4b16      	ldr	r3, [pc, #88]	@ (800a280 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	08db      	lsrs	r3, r3, #3
 800a22c:	f003 0303 	and.w	r3, r3, #3
 800a230:	4a14      	ldr	r2, [pc, #80]	@ (800a284 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800a232:	fa22 f303 	lsr.w	r3, r2, r3
 800a236:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a238:	e01e      	b.n	800a278 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a23a:	4b11      	ldr	r3, [pc, #68]	@ (800a280 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a242:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a246:	d106      	bne.n	800a256 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800a248:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a24a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a24e:	d102      	bne.n	800a256 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a250:	4b0d      	ldr	r3, [pc, #52]	@ (800a288 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800a252:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a254:	e010      	b.n	800a278 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a256:	4b0a      	ldr	r3, [pc, #40]	@ (800a280 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a25e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a262:	d106      	bne.n	800a272 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800a264:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a266:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a26a:	d102      	bne.n	800a272 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a26c:	4b07      	ldr	r3, [pc, #28]	@ (800a28c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800a26e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a270:	e002      	b.n	800a278 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a272:	2300      	movs	r3, #0
 800a274:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a276:	e2e2      	b.n	800a83e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a278:	e2e1      	b.n	800a83e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a27a:	4b05      	ldr	r3, [pc, #20]	@ (800a290 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800a27c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a27e:	e2de      	b.n	800a83e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a280:	58024400 	.word	0x58024400
 800a284:	03d09000 	.word	0x03d09000
 800a288:	003d0900 	.word	0x003d0900
 800a28c:	017d7840 	.word	0x017d7840
 800a290:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800a294:	2300      	movs	r3, #0
 800a296:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a298:	e2d1      	b.n	800a83e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800a29a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a29e:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800a2a2:	430b      	orrs	r3, r1
 800a2a4:	f040 809c 	bne.w	800a3e0 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800a2a8:	4b93      	ldr	r3, [pc, #588]	@ (800a4f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a2aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a2ac:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800a2b0:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a2b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2b4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a2b8:	d054      	beq.n	800a364 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800a2ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2bc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a2c0:	f200 808b 	bhi.w	800a3da <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800a2c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2c6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a2ca:	f000 8083 	beq.w	800a3d4 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800a2ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2d0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a2d4:	f200 8081 	bhi.w	800a3da <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800a2d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2da:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a2de:	d02f      	beq.n	800a340 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800a2e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2e2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a2e6:	d878      	bhi.n	800a3da <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800a2e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d004      	beq.n	800a2f8 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800a2ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2f0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a2f4:	d012      	beq.n	800a31c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800a2f6:	e070      	b.n	800a3da <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a2f8:	4b7f      	ldr	r3, [pc, #508]	@ (800a4f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a300:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a304:	d107      	bne.n	800a316 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a306:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a30a:	4618      	mov	r0, r3
 800a30c:	f000 fd5e 	bl	800adcc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a310:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a312:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a314:	e293      	b.n	800a83e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a316:	2300      	movs	r3, #0
 800a318:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a31a:	e290      	b.n	800a83e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a31c:	4b76      	ldr	r3, [pc, #472]	@ (800a4f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a324:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a328:	d107      	bne.n	800a33a <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a32a:	f107 0318 	add.w	r3, r7, #24
 800a32e:	4618      	mov	r0, r3
 800a330:	f000 faa4 	bl	800a87c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a334:	69bb      	ldr	r3, [r7, #24]
 800a336:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a338:	e281      	b.n	800a83e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a33a:	2300      	movs	r3, #0
 800a33c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a33e:	e27e      	b.n	800a83e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a340:	4b6d      	ldr	r3, [pc, #436]	@ (800a4f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a348:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a34c:	d107      	bne.n	800a35e <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a34e:	f107 030c 	add.w	r3, r7, #12
 800a352:	4618      	mov	r0, r3
 800a354:	f000 fbe6 	bl	800ab24 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a35c:	e26f      	b.n	800a83e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a35e:	2300      	movs	r3, #0
 800a360:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a362:	e26c      	b.n	800a83e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a364:	4b64      	ldr	r3, [pc, #400]	@ (800a4f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a366:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a368:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a36c:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a36e:	4b62      	ldr	r3, [pc, #392]	@ (800a4f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	f003 0304 	and.w	r3, r3, #4
 800a376:	2b04      	cmp	r3, #4
 800a378:	d10c      	bne.n	800a394 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800a37a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d109      	bne.n	800a394 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a380:	4b5d      	ldr	r3, [pc, #372]	@ (800a4f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	08db      	lsrs	r3, r3, #3
 800a386:	f003 0303 	and.w	r3, r3, #3
 800a38a:	4a5c      	ldr	r2, [pc, #368]	@ (800a4fc <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800a38c:	fa22 f303 	lsr.w	r3, r2, r3
 800a390:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a392:	e01e      	b.n	800a3d2 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a394:	4b58      	ldr	r3, [pc, #352]	@ (800a4f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a39c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a3a0:	d106      	bne.n	800a3b0 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800a3a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a3a4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a3a8:	d102      	bne.n	800a3b0 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a3aa:	4b55      	ldr	r3, [pc, #340]	@ (800a500 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800a3ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a3ae:	e010      	b.n	800a3d2 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a3b0:	4b51      	ldr	r3, [pc, #324]	@ (800a4f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a3b8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a3bc:	d106      	bne.n	800a3cc <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800a3be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a3c0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a3c4:	d102      	bne.n	800a3cc <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a3c6:	4b4f      	ldr	r3, [pc, #316]	@ (800a504 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800a3c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a3ca:	e002      	b.n	800a3d2 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a3cc:	2300      	movs	r3, #0
 800a3ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a3d0:	e235      	b.n	800a83e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a3d2:	e234      	b.n	800a83e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a3d4:	4b4c      	ldr	r3, [pc, #304]	@ (800a508 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800a3d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a3d8:	e231      	b.n	800a83e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a3da:	2300      	movs	r3, #0
 800a3dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a3de:	e22e      	b.n	800a83e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800a3e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a3e4:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800a3e8:	430b      	orrs	r3, r1
 800a3ea:	f040 808f 	bne.w	800a50c <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800a3ee:	4b42      	ldr	r3, [pc, #264]	@ (800a4f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a3f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a3f2:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800a3f6:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 800a3f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3fa:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a3fe:	d06b      	beq.n	800a4d8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800a400:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a402:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a406:	d874      	bhi.n	800a4f2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800a408:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a40a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a40e:	d056      	beq.n	800a4be <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800a410:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a412:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a416:	d86c      	bhi.n	800a4f2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800a418:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a41a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a41e:	d03b      	beq.n	800a498 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800a420:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a422:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a426:	d864      	bhi.n	800a4f2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800a428:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a42a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a42e:	d021      	beq.n	800a474 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800a430:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a432:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a436:	d85c      	bhi.n	800a4f2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800a438:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d004      	beq.n	800a448 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800a43e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a440:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a444:	d004      	beq.n	800a450 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800a446:	e054      	b.n	800a4f2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800a448:	f7fe fa4c 	bl	80088e4 <HAL_RCC_GetPCLK1Freq>
 800a44c:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a44e:	e1f6      	b.n	800a83e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a450:	4b29      	ldr	r3, [pc, #164]	@ (800a4f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a458:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a45c:	d107      	bne.n	800a46e <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a45e:	f107 0318 	add.w	r3, r7, #24
 800a462:	4618      	mov	r0, r3
 800a464:	f000 fa0a 	bl	800a87c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a468:	69fb      	ldr	r3, [r7, #28]
 800a46a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a46c:	e1e7      	b.n	800a83e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a46e:	2300      	movs	r3, #0
 800a470:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a472:	e1e4      	b.n	800a83e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a474:	4b20      	ldr	r3, [pc, #128]	@ (800a4f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a47c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a480:	d107      	bne.n	800a492 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a482:	f107 030c 	add.w	r3, r7, #12
 800a486:	4618      	mov	r0, r3
 800a488:	f000 fb4c 	bl	800ab24 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a48c:	693b      	ldr	r3, [r7, #16]
 800a48e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a490:	e1d5      	b.n	800a83e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a492:	2300      	movs	r3, #0
 800a494:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a496:	e1d2      	b.n	800a83e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a498:	4b17      	ldr	r3, [pc, #92]	@ (800a4f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	f003 0304 	and.w	r3, r3, #4
 800a4a0:	2b04      	cmp	r3, #4
 800a4a2:	d109      	bne.n	800a4b8 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a4a4:	4b14      	ldr	r3, [pc, #80]	@ (800a4f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	08db      	lsrs	r3, r3, #3
 800a4aa:	f003 0303 	and.w	r3, r3, #3
 800a4ae:	4a13      	ldr	r2, [pc, #76]	@ (800a4fc <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800a4b0:	fa22 f303 	lsr.w	r3, r2, r3
 800a4b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a4b6:	e1c2      	b.n	800a83e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a4b8:	2300      	movs	r3, #0
 800a4ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a4bc:	e1bf      	b.n	800a83e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800a4be:	4b0e      	ldr	r3, [pc, #56]	@ (800a4f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a4c6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a4ca:	d102      	bne.n	800a4d2 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800a4cc:	4b0c      	ldr	r3, [pc, #48]	@ (800a500 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800a4ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a4d0:	e1b5      	b.n	800a83e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a4d2:	2300      	movs	r3, #0
 800a4d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a4d6:	e1b2      	b.n	800a83e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a4d8:	4b07      	ldr	r3, [pc, #28]	@ (800a4f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a4e0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a4e4:	d102      	bne.n	800a4ec <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800a4e6:	4b07      	ldr	r3, [pc, #28]	@ (800a504 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800a4e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a4ea:	e1a8      	b.n	800a83e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a4ec:	2300      	movs	r3, #0
 800a4ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a4f0:	e1a5      	b.n	800a83e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a4f2:	2300      	movs	r3, #0
 800a4f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a4f6:	e1a2      	b.n	800a83e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a4f8:	58024400 	.word	0x58024400
 800a4fc:	03d09000 	.word	0x03d09000
 800a500:	003d0900 	.word	0x003d0900
 800a504:	017d7840 	.word	0x017d7840
 800a508:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800a50c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a510:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800a514:	430b      	orrs	r3, r1
 800a516:	d173      	bne.n	800a600 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800a518:	4b9c      	ldr	r3, [pc, #624]	@ (800a78c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a51a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a51c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800a520:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a522:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a524:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a528:	d02f      	beq.n	800a58a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800a52a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a52c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a530:	d863      	bhi.n	800a5fa <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800a532:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a534:	2b00      	cmp	r3, #0
 800a536:	d004      	beq.n	800a542 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800a538:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a53a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a53e:	d012      	beq.n	800a566 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800a540:	e05b      	b.n	800a5fa <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a542:	4b92      	ldr	r3, [pc, #584]	@ (800a78c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a54a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a54e:	d107      	bne.n	800a560 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a550:	f107 0318 	add.w	r3, r7, #24
 800a554:	4618      	mov	r0, r3
 800a556:	f000 f991 	bl	800a87c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a55a:	69bb      	ldr	r3, [r7, #24]
 800a55c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a55e:	e16e      	b.n	800a83e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a560:	2300      	movs	r3, #0
 800a562:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a564:	e16b      	b.n	800a83e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a566:	4b89      	ldr	r3, [pc, #548]	@ (800a78c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a56e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a572:	d107      	bne.n	800a584 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a574:	f107 030c 	add.w	r3, r7, #12
 800a578:	4618      	mov	r0, r3
 800a57a:	f000 fad3 	bl	800ab24 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800a57e:	697b      	ldr	r3, [r7, #20]
 800a580:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a582:	e15c      	b.n	800a83e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a584:	2300      	movs	r3, #0
 800a586:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a588:	e159      	b.n	800a83e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a58a:	4b80      	ldr	r3, [pc, #512]	@ (800a78c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a58c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a58e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a592:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a594:	4b7d      	ldr	r3, [pc, #500]	@ (800a78c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	f003 0304 	and.w	r3, r3, #4
 800a59c:	2b04      	cmp	r3, #4
 800a59e:	d10c      	bne.n	800a5ba <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800a5a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d109      	bne.n	800a5ba <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a5a6:	4b79      	ldr	r3, [pc, #484]	@ (800a78c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	08db      	lsrs	r3, r3, #3
 800a5ac:	f003 0303 	and.w	r3, r3, #3
 800a5b0:	4a77      	ldr	r2, [pc, #476]	@ (800a790 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800a5b2:	fa22 f303 	lsr.w	r3, r2, r3
 800a5b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a5b8:	e01e      	b.n	800a5f8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a5ba:	4b74      	ldr	r3, [pc, #464]	@ (800a78c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a5c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a5c6:	d106      	bne.n	800a5d6 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800a5c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a5ca:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a5ce:	d102      	bne.n	800a5d6 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a5d0:	4b70      	ldr	r3, [pc, #448]	@ (800a794 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800a5d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a5d4:	e010      	b.n	800a5f8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a5d6:	4b6d      	ldr	r3, [pc, #436]	@ (800a78c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a5de:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a5e2:	d106      	bne.n	800a5f2 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800a5e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a5e6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a5ea:	d102      	bne.n	800a5f2 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a5ec:	4b6a      	ldr	r3, [pc, #424]	@ (800a798 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800a5ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a5f0:	e002      	b.n	800a5f8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a5f2:	2300      	movs	r3, #0
 800a5f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a5f6:	e122      	b.n	800a83e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a5f8:	e121      	b.n	800a83e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800a5fa:	2300      	movs	r3, #0
 800a5fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a5fe:	e11e      	b.n	800a83e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800a600:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a604:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800a608:	430b      	orrs	r3, r1
 800a60a:	d133      	bne.n	800a674 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800a60c:	4b5f      	ldr	r3, [pc, #380]	@ (800a78c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a60e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a610:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a614:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a616:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d004      	beq.n	800a626 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800a61c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a61e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a622:	d012      	beq.n	800a64a <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800a624:	e023      	b.n	800a66e <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a626:	4b59      	ldr	r3, [pc, #356]	@ (800a78c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a62e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a632:	d107      	bne.n	800a644 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a634:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a638:	4618      	mov	r0, r3
 800a63a:	f000 fbc7 	bl	800adcc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a63e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a640:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a642:	e0fc      	b.n	800a83e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a644:	2300      	movs	r3, #0
 800a646:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a648:	e0f9      	b.n	800a83e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a64a:	4b50      	ldr	r3, [pc, #320]	@ (800a78c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a652:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a656:	d107      	bne.n	800a668 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a658:	f107 0318 	add.w	r3, r7, #24
 800a65c:	4618      	mov	r0, r3
 800a65e:	f000 f90d 	bl	800a87c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800a662:	6a3b      	ldr	r3, [r7, #32]
 800a664:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a666:	e0ea      	b.n	800a83e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a668:	2300      	movs	r3, #0
 800a66a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a66c:	e0e7      	b.n	800a83e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800a66e:	2300      	movs	r3, #0
 800a670:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a672:	e0e4      	b.n	800a83e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800a674:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a678:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800a67c:	430b      	orrs	r3, r1
 800a67e:	f040 808d 	bne.w	800a79c <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800a682:	4b42      	ldr	r3, [pc, #264]	@ (800a78c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a684:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a686:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800a68a:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a68c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a68e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a692:	d06b      	beq.n	800a76c <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800a694:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a696:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a69a:	d874      	bhi.n	800a786 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800a69c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a69e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a6a2:	d056      	beq.n	800a752 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800a6a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a6aa:	d86c      	bhi.n	800a786 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800a6ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6ae:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a6b2:	d03b      	beq.n	800a72c <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800a6b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6b6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a6ba:	d864      	bhi.n	800a786 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800a6bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6be:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a6c2:	d021      	beq.n	800a708 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800a6c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6c6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a6ca:	d85c      	bhi.n	800a786 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800a6cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d004      	beq.n	800a6dc <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800a6d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6d4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a6d8:	d004      	beq.n	800a6e4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800a6da:	e054      	b.n	800a786 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800a6dc:	f000 f8b8 	bl	800a850 <HAL_RCCEx_GetD3PCLK1Freq>
 800a6e0:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a6e2:	e0ac      	b.n	800a83e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a6e4:	4b29      	ldr	r3, [pc, #164]	@ (800a78c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a6ec:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a6f0:	d107      	bne.n	800a702 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a6f2:	f107 0318 	add.w	r3, r7, #24
 800a6f6:	4618      	mov	r0, r3
 800a6f8:	f000 f8c0 	bl	800a87c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a6fc:	69fb      	ldr	r3, [r7, #28]
 800a6fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a700:	e09d      	b.n	800a83e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a702:	2300      	movs	r3, #0
 800a704:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a706:	e09a      	b.n	800a83e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a708:	4b20      	ldr	r3, [pc, #128]	@ (800a78c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a710:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a714:	d107      	bne.n	800a726 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a716:	f107 030c 	add.w	r3, r7, #12
 800a71a:	4618      	mov	r0, r3
 800a71c:	f000 fa02 	bl	800ab24 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a720:	693b      	ldr	r3, [r7, #16]
 800a722:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a724:	e08b      	b.n	800a83e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a726:	2300      	movs	r3, #0
 800a728:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a72a:	e088      	b.n	800a83e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a72c:	4b17      	ldr	r3, [pc, #92]	@ (800a78c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	f003 0304 	and.w	r3, r3, #4
 800a734:	2b04      	cmp	r3, #4
 800a736:	d109      	bne.n	800a74c <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a738:	4b14      	ldr	r3, [pc, #80]	@ (800a78c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	08db      	lsrs	r3, r3, #3
 800a73e:	f003 0303 	and.w	r3, r3, #3
 800a742:	4a13      	ldr	r2, [pc, #76]	@ (800a790 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800a744:	fa22 f303 	lsr.w	r3, r2, r3
 800a748:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a74a:	e078      	b.n	800a83e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a74c:	2300      	movs	r3, #0
 800a74e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a750:	e075      	b.n	800a83e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800a752:	4b0e      	ldr	r3, [pc, #56]	@ (800a78c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a75a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a75e:	d102      	bne.n	800a766 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800a760:	4b0c      	ldr	r3, [pc, #48]	@ (800a794 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800a762:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a764:	e06b      	b.n	800a83e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a766:	2300      	movs	r3, #0
 800a768:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a76a:	e068      	b.n	800a83e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a76c:	4b07      	ldr	r3, [pc, #28]	@ (800a78c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a774:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a778:	d102      	bne.n	800a780 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800a77a:	4b07      	ldr	r3, [pc, #28]	@ (800a798 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800a77c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a77e:	e05e      	b.n	800a83e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a780:	2300      	movs	r3, #0
 800a782:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a784:	e05b      	b.n	800a83e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800a786:	2300      	movs	r3, #0
 800a788:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a78a:	e058      	b.n	800a83e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a78c:	58024400 	.word	0x58024400
 800a790:	03d09000 	.word	0x03d09000
 800a794:	003d0900 	.word	0x003d0900
 800a798:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800a79c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a7a0:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800a7a4:	430b      	orrs	r3, r1
 800a7a6:	d148      	bne.n	800a83a <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800a7a8:	4b27      	ldr	r3, [pc, #156]	@ (800a848 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800a7aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a7ac:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a7b0:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a7b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7b4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a7b8:	d02a      	beq.n	800a810 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800a7ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7bc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a7c0:	d838      	bhi.n	800a834 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800a7c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d004      	beq.n	800a7d2 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800a7c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7ca:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a7ce:	d00d      	beq.n	800a7ec <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800a7d0:	e030      	b.n	800a834 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a7d2:	4b1d      	ldr	r3, [pc, #116]	@ (800a848 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a7da:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a7de:	d102      	bne.n	800a7e6 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800a7e0:	4b1a      	ldr	r3, [pc, #104]	@ (800a84c <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800a7e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a7e4:	e02b      	b.n	800a83e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a7e6:	2300      	movs	r3, #0
 800a7e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a7ea:	e028      	b.n	800a83e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a7ec:	4b16      	ldr	r3, [pc, #88]	@ (800a848 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a7f4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a7f8:	d107      	bne.n	800a80a <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a7fa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a7fe:	4618      	mov	r0, r3
 800a800:	f000 fae4 	bl	800adcc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a804:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a806:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a808:	e019      	b.n	800a83e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a80a:	2300      	movs	r3, #0
 800a80c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a80e:	e016      	b.n	800a83e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a810:	4b0d      	ldr	r3, [pc, #52]	@ (800a848 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a818:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a81c:	d107      	bne.n	800a82e <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a81e:	f107 0318 	add.w	r3, r7, #24
 800a822:	4618      	mov	r0, r3
 800a824:	f000 f82a 	bl	800a87c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a828:	69fb      	ldr	r3, [r7, #28]
 800a82a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a82c:	e007      	b.n	800a83e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a82e:	2300      	movs	r3, #0
 800a830:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a832:	e004      	b.n	800a83e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a834:	2300      	movs	r3, #0
 800a836:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a838:	e001      	b.n	800a83e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800a83a:	2300      	movs	r3, #0
 800a83c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800a83e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800a840:	4618      	mov	r0, r3
 800a842:	3740      	adds	r7, #64	@ 0x40
 800a844:	46bd      	mov	sp, r7
 800a846:	bd80      	pop	{r7, pc}
 800a848:	58024400 	.word	0x58024400
 800a84c:	017d7840 	.word	0x017d7840

0800a850 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800a850:	b580      	push	{r7, lr}
 800a852:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800a854:	f7fe f816 	bl	8008884 <HAL_RCC_GetHCLKFreq>
 800a858:	4602      	mov	r2, r0
 800a85a:	4b06      	ldr	r3, [pc, #24]	@ (800a874 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800a85c:	6a1b      	ldr	r3, [r3, #32]
 800a85e:	091b      	lsrs	r3, r3, #4
 800a860:	f003 0307 	and.w	r3, r3, #7
 800a864:	4904      	ldr	r1, [pc, #16]	@ (800a878 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800a866:	5ccb      	ldrb	r3, [r1, r3]
 800a868:	f003 031f 	and.w	r3, r3, #31
 800a86c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800a870:	4618      	mov	r0, r3
 800a872:	bd80      	pop	{r7, pc}
 800a874:	58024400 	.word	0x58024400
 800a878:	08013ac0 	.word	0x08013ac0

0800a87c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800a87c:	b480      	push	{r7}
 800a87e:	b089      	sub	sp, #36	@ 0x24
 800a880:	af00      	add	r7, sp, #0
 800a882:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a884:	4ba1      	ldr	r3, [pc, #644]	@ (800ab0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a886:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a888:	f003 0303 	and.w	r3, r3, #3
 800a88c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800a88e:	4b9f      	ldr	r3, [pc, #636]	@ (800ab0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a890:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a892:	0b1b      	lsrs	r3, r3, #12
 800a894:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a898:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800a89a:	4b9c      	ldr	r3, [pc, #624]	@ (800ab0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a89c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a89e:	091b      	lsrs	r3, r3, #4
 800a8a0:	f003 0301 	and.w	r3, r3, #1
 800a8a4:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800a8a6:	4b99      	ldr	r3, [pc, #612]	@ (800ab0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a8a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a8aa:	08db      	lsrs	r3, r3, #3
 800a8ac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a8b0:	693a      	ldr	r2, [r7, #16]
 800a8b2:	fb02 f303 	mul.w	r3, r2, r3
 800a8b6:	ee07 3a90 	vmov	s15, r3
 800a8ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a8be:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800a8c2:	697b      	ldr	r3, [r7, #20]
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	f000 8111 	beq.w	800aaec <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800a8ca:	69bb      	ldr	r3, [r7, #24]
 800a8cc:	2b02      	cmp	r3, #2
 800a8ce:	f000 8083 	beq.w	800a9d8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800a8d2:	69bb      	ldr	r3, [r7, #24]
 800a8d4:	2b02      	cmp	r3, #2
 800a8d6:	f200 80a1 	bhi.w	800aa1c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800a8da:	69bb      	ldr	r3, [r7, #24]
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d003      	beq.n	800a8e8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800a8e0:	69bb      	ldr	r3, [r7, #24]
 800a8e2:	2b01      	cmp	r3, #1
 800a8e4:	d056      	beq.n	800a994 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800a8e6:	e099      	b.n	800aa1c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a8e8:	4b88      	ldr	r3, [pc, #544]	@ (800ab0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	f003 0320 	and.w	r3, r3, #32
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d02d      	beq.n	800a950 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a8f4:	4b85      	ldr	r3, [pc, #532]	@ (800ab0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	08db      	lsrs	r3, r3, #3
 800a8fa:	f003 0303 	and.w	r3, r3, #3
 800a8fe:	4a84      	ldr	r2, [pc, #528]	@ (800ab10 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800a900:	fa22 f303 	lsr.w	r3, r2, r3
 800a904:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a906:	68bb      	ldr	r3, [r7, #8]
 800a908:	ee07 3a90 	vmov	s15, r3
 800a90c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a910:	697b      	ldr	r3, [r7, #20]
 800a912:	ee07 3a90 	vmov	s15, r3
 800a916:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a91a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a91e:	4b7b      	ldr	r3, [pc, #492]	@ (800ab0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a920:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a922:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a926:	ee07 3a90 	vmov	s15, r3
 800a92a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a92e:	ed97 6a03 	vldr	s12, [r7, #12]
 800a932:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800ab14 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a936:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a93a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a93e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a942:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a946:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a94a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800a94e:	e087      	b.n	800aa60 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a950:	697b      	ldr	r3, [r7, #20]
 800a952:	ee07 3a90 	vmov	s15, r3
 800a956:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a95a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800ab18 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800a95e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a962:	4b6a      	ldr	r3, [pc, #424]	@ (800ab0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a964:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a966:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a96a:	ee07 3a90 	vmov	s15, r3
 800a96e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a972:	ed97 6a03 	vldr	s12, [r7, #12]
 800a976:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800ab14 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a97a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a97e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a982:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a986:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a98a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a98e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a992:	e065      	b.n	800aa60 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a994:	697b      	ldr	r3, [r7, #20]
 800a996:	ee07 3a90 	vmov	s15, r3
 800a99a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a99e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800ab1c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800a9a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a9a6:	4b59      	ldr	r3, [pc, #356]	@ (800ab0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a9a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a9aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a9ae:	ee07 3a90 	vmov	s15, r3
 800a9b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a9b6:	ed97 6a03 	vldr	s12, [r7, #12]
 800a9ba:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800ab14 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a9be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a9c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a9c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a9ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a9ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a9d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a9d6:	e043      	b.n	800aa60 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a9d8:	697b      	ldr	r3, [r7, #20]
 800a9da:	ee07 3a90 	vmov	s15, r3
 800a9de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a9e2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800ab20 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800a9e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a9ea:	4b48      	ldr	r3, [pc, #288]	@ (800ab0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a9ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a9ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a9f2:	ee07 3a90 	vmov	s15, r3
 800a9f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a9fa:	ed97 6a03 	vldr	s12, [r7, #12]
 800a9fe:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800ab14 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800aa02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aa06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aa0a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800aa0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aa12:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aa16:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800aa1a:	e021      	b.n	800aa60 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800aa1c:	697b      	ldr	r3, [r7, #20]
 800aa1e:	ee07 3a90 	vmov	s15, r3
 800aa22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa26:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800ab1c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800aa2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aa2e:	4b37      	ldr	r3, [pc, #220]	@ (800ab0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aa30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa36:	ee07 3a90 	vmov	s15, r3
 800aa3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa3e:	ed97 6a03 	vldr	s12, [r7, #12]
 800aa42:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800ab14 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800aa46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aa4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aa4e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800aa52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aa56:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aa5a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800aa5e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800aa60:	4b2a      	ldr	r3, [pc, #168]	@ (800ab0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aa62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa64:	0a5b      	lsrs	r3, r3, #9
 800aa66:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800aa6a:	ee07 3a90 	vmov	s15, r3
 800aa6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa72:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800aa76:	ee37 7a87 	vadd.f32	s14, s15, s14
 800aa7a:	edd7 6a07 	vldr	s13, [r7, #28]
 800aa7e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aa82:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aa86:	ee17 2a90 	vmov	r2, s15
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800aa8e:	4b1f      	ldr	r3, [pc, #124]	@ (800ab0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aa90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa92:	0c1b      	lsrs	r3, r3, #16
 800aa94:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800aa98:	ee07 3a90 	vmov	s15, r3
 800aa9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aaa0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800aaa4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800aaa8:	edd7 6a07 	vldr	s13, [r7, #28]
 800aaac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aab0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aab4:	ee17 2a90 	vmov	r2, s15
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800aabc:	4b13      	ldr	r3, [pc, #76]	@ (800ab0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aabe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aac0:	0e1b      	lsrs	r3, r3, #24
 800aac2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800aac6:	ee07 3a90 	vmov	s15, r3
 800aaca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aace:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800aad2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800aad6:	edd7 6a07 	vldr	s13, [r7, #28]
 800aada:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aade:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aae2:	ee17 2a90 	vmov	r2, s15
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800aaea:	e008      	b.n	800aafe <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	2200      	movs	r2, #0
 800aaf0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	2200      	movs	r2, #0
 800aaf6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	2200      	movs	r2, #0
 800aafc:	609a      	str	r2, [r3, #8]
}
 800aafe:	bf00      	nop
 800ab00:	3724      	adds	r7, #36	@ 0x24
 800ab02:	46bd      	mov	sp, r7
 800ab04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab08:	4770      	bx	lr
 800ab0a:	bf00      	nop
 800ab0c:	58024400 	.word	0x58024400
 800ab10:	03d09000 	.word	0x03d09000
 800ab14:	46000000 	.word	0x46000000
 800ab18:	4c742400 	.word	0x4c742400
 800ab1c:	4a742400 	.word	0x4a742400
 800ab20:	4bbebc20 	.word	0x4bbebc20

0800ab24 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800ab24:	b480      	push	{r7}
 800ab26:	b089      	sub	sp, #36	@ 0x24
 800ab28:	af00      	add	r7, sp, #0
 800ab2a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ab2c:	4ba1      	ldr	r3, [pc, #644]	@ (800adb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ab2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab30:	f003 0303 	and.w	r3, r3, #3
 800ab34:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800ab36:	4b9f      	ldr	r3, [pc, #636]	@ (800adb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ab38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab3a:	0d1b      	lsrs	r3, r3, #20
 800ab3c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ab40:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800ab42:	4b9c      	ldr	r3, [pc, #624]	@ (800adb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ab44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab46:	0a1b      	lsrs	r3, r3, #8
 800ab48:	f003 0301 	and.w	r3, r3, #1
 800ab4c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800ab4e:	4b99      	ldr	r3, [pc, #612]	@ (800adb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ab50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ab52:	08db      	lsrs	r3, r3, #3
 800ab54:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ab58:	693a      	ldr	r2, [r7, #16]
 800ab5a:	fb02 f303 	mul.w	r3, r2, r3
 800ab5e:	ee07 3a90 	vmov	s15, r3
 800ab62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab66:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800ab6a:	697b      	ldr	r3, [r7, #20]
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	f000 8111 	beq.w	800ad94 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800ab72:	69bb      	ldr	r3, [r7, #24]
 800ab74:	2b02      	cmp	r3, #2
 800ab76:	f000 8083 	beq.w	800ac80 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800ab7a:	69bb      	ldr	r3, [r7, #24]
 800ab7c:	2b02      	cmp	r3, #2
 800ab7e:	f200 80a1 	bhi.w	800acc4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800ab82:	69bb      	ldr	r3, [r7, #24]
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d003      	beq.n	800ab90 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800ab88:	69bb      	ldr	r3, [r7, #24]
 800ab8a:	2b01      	cmp	r3, #1
 800ab8c:	d056      	beq.n	800ac3c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800ab8e:	e099      	b.n	800acc4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ab90:	4b88      	ldr	r3, [pc, #544]	@ (800adb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	f003 0320 	and.w	r3, r3, #32
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d02d      	beq.n	800abf8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ab9c:	4b85      	ldr	r3, [pc, #532]	@ (800adb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	08db      	lsrs	r3, r3, #3
 800aba2:	f003 0303 	and.w	r3, r3, #3
 800aba6:	4a84      	ldr	r2, [pc, #528]	@ (800adb8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800aba8:	fa22 f303 	lsr.w	r3, r2, r3
 800abac:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800abae:	68bb      	ldr	r3, [r7, #8]
 800abb0:	ee07 3a90 	vmov	s15, r3
 800abb4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800abb8:	697b      	ldr	r3, [r7, #20]
 800abba:	ee07 3a90 	vmov	s15, r3
 800abbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800abc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800abc6:	4b7b      	ldr	r3, [pc, #492]	@ (800adb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800abc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800abca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800abce:	ee07 3a90 	vmov	s15, r3
 800abd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800abd6:	ed97 6a03 	vldr	s12, [r7, #12]
 800abda:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800adbc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800abde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800abe2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800abe6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800abea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800abee:	ee67 7a27 	vmul.f32	s15, s14, s15
 800abf2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800abf6:	e087      	b.n	800ad08 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800abf8:	697b      	ldr	r3, [r7, #20]
 800abfa:	ee07 3a90 	vmov	s15, r3
 800abfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac02:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800adc0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800ac06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ac0a:	4b6a      	ldr	r3, [pc, #424]	@ (800adb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ac0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ac0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac12:	ee07 3a90 	vmov	s15, r3
 800ac16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac1a:	ed97 6a03 	vldr	s12, [r7, #12]
 800ac1e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800adbc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ac22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ac26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ac2a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ac2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ac32:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac36:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ac3a:	e065      	b.n	800ad08 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ac3c:	697b      	ldr	r3, [r7, #20]
 800ac3e:	ee07 3a90 	vmov	s15, r3
 800ac42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac46:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800adc4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800ac4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ac4e:	4b59      	ldr	r3, [pc, #356]	@ (800adb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ac50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ac52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac56:	ee07 3a90 	vmov	s15, r3
 800ac5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac5e:	ed97 6a03 	vldr	s12, [r7, #12]
 800ac62:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800adbc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ac66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ac6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ac6e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ac72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ac76:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac7a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ac7e:	e043      	b.n	800ad08 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ac80:	697b      	ldr	r3, [r7, #20]
 800ac82:	ee07 3a90 	vmov	s15, r3
 800ac86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac8a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800adc8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800ac8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ac92:	4b48      	ldr	r3, [pc, #288]	@ (800adb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ac94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ac96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac9a:	ee07 3a90 	vmov	s15, r3
 800ac9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aca2:	ed97 6a03 	vldr	s12, [r7, #12]
 800aca6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800adbc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800acaa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800acae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800acb2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800acb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800acba:	ee67 7a27 	vmul.f32	s15, s14, s15
 800acbe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800acc2:	e021      	b.n	800ad08 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800acc4:	697b      	ldr	r3, [r7, #20]
 800acc6:	ee07 3a90 	vmov	s15, r3
 800acca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800acce:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800adc4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800acd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800acd6:	4b37      	ldr	r3, [pc, #220]	@ (800adb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800acd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800acda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800acde:	ee07 3a90 	vmov	s15, r3
 800ace2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ace6:	ed97 6a03 	vldr	s12, [r7, #12]
 800acea:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800adbc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800acee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800acf2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800acf6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800acfa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800acfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad02:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ad06:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800ad08:	4b2a      	ldr	r3, [pc, #168]	@ (800adb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ad0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad0c:	0a5b      	lsrs	r3, r3, #9
 800ad0e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ad12:	ee07 3a90 	vmov	s15, r3
 800ad16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad1a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ad1e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ad22:	edd7 6a07 	vldr	s13, [r7, #28]
 800ad26:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ad2a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ad2e:	ee17 2a90 	vmov	r2, s15
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800ad36:	4b1f      	ldr	r3, [pc, #124]	@ (800adb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ad38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad3a:	0c1b      	lsrs	r3, r3, #16
 800ad3c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ad40:	ee07 3a90 	vmov	s15, r3
 800ad44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad48:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ad4c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ad50:	edd7 6a07 	vldr	s13, [r7, #28]
 800ad54:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ad58:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ad5c:	ee17 2a90 	vmov	r2, s15
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800ad64:	4b13      	ldr	r3, [pc, #76]	@ (800adb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ad66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad68:	0e1b      	lsrs	r3, r3, #24
 800ad6a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ad6e:	ee07 3a90 	vmov	s15, r3
 800ad72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad76:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ad7a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ad7e:	edd7 6a07 	vldr	s13, [r7, #28]
 800ad82:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ad86:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ad8a:	ee17 2a90 	vmov	r2, s15
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800ad92:	e008      	b.n	800ada6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	2200      	movs	r2, #0
 800ad98:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	2200      	movs	r2, #0
 800ad9e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	2200      	movs	r2, #0
 800ada4:	609a      	str	r2, [r3, #8]
}
 800ada6:	bf00      	nop
 800ada8:	3724      	adds	r7, #36	@ 0x24
 800adaa:	46bd      	mov	sp, r7
 800adac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adb0:	4770      	bx	lr
 800adb2:	bf00      	nop
 800adb4:	58024400 	.word	0x58024400
 800adb8:	03d09000 	.word	0x03d09000
 800adbc:	46000000 	.word	0x46000000
 800adc0:	4c742400 	.word	0x4c742400
 800adc4:	4a742400 	.word	0x4a742400
 800adc8:	4bbebc20 	.word	0x4bbebc20

0800adcc <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800adcc:	b480      	push	{r7}
 800adce:	b089      	sub	sp, #36	@ 0x24
 800add0:	af00      	add	r7, sp, #0
 800add2:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800add4:	4ba0      	ldr	r3, [pc, #640]	@ (800b058 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800add6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800add8:	f003 0303 	and.w	r3, r3, #3
 800addc:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800adde:	4b9e      	ldr	r3, [pc, #632]	@ (800b058 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ade0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ade2:	091b      	lsrs	r3, r3, #4
 800ade4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ade8:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800adea:	4b9b      	ldr	r3, [pc, #620]	@ (800b058 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800adec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800adee:	f003 0301 	and.w	r3, r3, #1
 800adf2:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800adf4:	4b98      	ldr	r3, [pc, #608]	@ (800b058 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800adf6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800adf8:	08db      	lsrs	r3, r3, #3
 800adfa:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800adfe:	693a      	ldr	r2, [r7, #16]
 800ae00:	fb02 f303 	mul.w	r3, r2, r3
 800ae04:	ee07 3a90 	vmov	s15, r3
 800ae08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae0c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800ae10:	697b      	ldr	r3, [r7, #20]
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	f000 8111 	beq.w	800b03a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800ae18:	69bb      	ldr	r3, [r7, #24]
 800ae1a:	2b02      	cmp	r3, #2
 800ae1c:	f000 8083 	beq.w	800af26 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800ae20:	69bb      	ldr	r3, [r7, #24]
 800ae22:	2b02      	cmp	r3, #2
 800ae24:	f200 80a1 	bhi.w	800af6a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800ae28:	69bb      	ldr	r3, [r7, #24]
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d003      	beq.n	800ae36 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800ae2e:	69bb      	ldr	r3, [r7, #24]
 800ae30:	2b01      	cmp	r3, #1
 800ae32:	d056      	beq.n	800aee2 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800ae34:	e099      	b.n	800af6a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ae36:	4b88      	ldr	r3, [pc, #544]	@ (800b058 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	f003 0320 	and.w	r3, r3, #32
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	d02d      	beq.n	800ae9e <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ae42:	4b85      	ldr	r3, [pc, #532]	@ (800b058 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	08db      	lsrs	r3, r3, #3
 800ae48:	f003 0303 	and.w	r3, r3, #3
 800ae4c:	4a83      	ldr	r2, [pc, #524]	@ (800b05c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800ae4e:	fa22 f303 	lsr.w	r3, r2, r3
 800ae52:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ae54:	68bb      	ldr	r3, [r7, #8]
 800ae56:	ee07 3a90 	vmov	s15, r3
 800ae5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ae5e:	697b      	ldr	r3, [r7, #20]
 800ae60:	ee07 3a90 	vmov	s15, r3
 800ae64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae68:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ae6c:	4b7a      	ldr	r3, [pc, #488]	@ (800b058 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ae6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ae70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae74:	ee07 3a90 	vmov	s15, r3
 800ae78:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ae7c:	ed97 6a03 	vldr	s12, [r7, #12]
 800ae80:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800b060 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800ae84:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ae88:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ae8c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ae90:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ae94:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ae98:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800ae9c:	e087      	b.n	800afae <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ae9e:	697b      	ldr	r3, [r7, #20]
 800aea0:	ee07 3a90 	vmov	s15, r3
 800aea4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aea8:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800b064 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800aeac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aeb0:	4b69      	ldr	r3, [pc, #420]	@ (800b058 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800aeb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aeb4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aeb8:	ee07 3a90 	vmov	s15, r3
 800aebc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aec0:	ed97 6a03 	vldr	s12, [r7, #12]
 800aec4:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800b060 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800aec8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aecc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aed0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800aed4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aed8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aedc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800aee0:	e065      	b.n	800afae <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800aee2:	697b      	ldr	r3, [r7, #20]
 800aee4:	ee07 3a90 	vmov	s15, r3
 800aee8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aeec:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800b068 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800aef0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aef4:	4b58      	ldr	r3, [pc, #352]	@ (800b058 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800aef6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aef8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aefc:	ee07 3a90 	vmov	s15, r3
 800af00:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af04:	ed97 6a03 	vldr	s12, [r7, #12]
 800af08:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800b060 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800af0c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800af10:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800af14:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800af18:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800af1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af20:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800af24:	e043      	b.n	800afae <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800af26:	697b      	ldr	r3, [r7, #20]
 800af28:	ee07 3a90 	vmov	s15, r3
 800af2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af30:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800b06c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800af34:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800af38:	4b47      	ldr	r3, [pc, #284]	@ (800b058 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800af3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800af3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af40:	ee07 3a90 	vmov	s15, r3
 800af44:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af48:	ed97 6a03 	vldr	s12, [r7, #12]
 800af4c:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800b060 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800af50:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800af54:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800af58:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800af5c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800af60:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af64:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800af68:	e021      	b.n	800afae <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800af6a:	697b      	ldr	r3, [r7, #20]
 800af6c:	ee07 3a90 	vmov	s15, r3
 800af70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af74:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800b064 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800af78:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800af7c:	4b36      	ldr	r3, [pc, #216]	@ (800b058 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800af7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800af80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af84:	ee07 3a90 	vmov	s15, r3
 800af88:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af8c:	ed97 6a03 	vldr	s12, [r7, #12]
 800af90:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800b060 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800af94:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800af98:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800af9c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800afa0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800afa4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800afa8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800afac:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800afae:	4b2a      	ldr	r3, [pc, #168]	@ (800b058 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800afb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800afb2:	0a5b      	lsrs	r3, r3, #9
 800afb4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800afb8:	ee07 3a90 	vmov	s15, r3
 800afbc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800afc0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800afc4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800afc8:	edd7 6a07 	vldr	s13, [r7, #28]
 800afcc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800afd0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800afd4:	ee17 2a90 	vmov	r2, s15
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800afdc:	4b1e      	ldr	r3, [pc, #120]	@ (800b058 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800afde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800afe0:	0c1b      	lsrs	r3, r3, #16
 800afe2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800afe6:	ee07 3a90 	vmov	s15, r3
 800afea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800afee:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800aff2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800aff6:	edd7 6a07 	vldr	s13, [r7, #28]
 800affa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800affe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b002:	ee17 2a90 	vmov	r2, s15
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800b00a:	4b13      	ldr	r3, [pc, #76]	@ (800b058 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b00c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b00e:	0e1b      	lsrs	r3, r3, #24
 800b010:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b014:	ee07 3a90 	vmov	s15, r3
 800b018:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b01c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b020:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b024:	edd7 6a07 	vldr	s13, [r7, #28]
 800b028:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b02c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b030:	ee17 2a90 	vmov	r2, s15
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800b038:	e008      	b.n	800b04c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	2200      	movs	r2, #0
 800b03e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	2200      	movs	r2, #0
 800b044:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	2200      	movs	r2, #0
 800b04a:	609a      	str	r2, [r3, #8]
}
 800b04c:	bf00      	nop
 800b04e:	3724      	adds	r7, #36	@ 0x24
 800b050:	46bd      	mov	sp, r7
 800b052:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b056:	4770      	bx	lr
 800b058:	58024400 	.word	0x58024400
 800b05c:	03d09000 	.word	0x03d09000
 800b060:	46000000 	.word	0x46000000
 800b064:	4c742400 	.word	0x4c742400
 800b068:	4a742400 	.word	0x4a742400
 800b06c:	4bbebc20 	.word	0x4bbebc20

0800b070 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800b070:	b580      	push	{r7, lr}
 800b072:	b084      	sub	sp, #16
 800b074:	af00      	add	r7, sp, #0
 800b076:	6078      	str	r0, [r7, #4]
 800b078:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b07a:	2300      	movs	r3, #0
 800b07c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b07e:	4b53      	ldr	r3, [pc, #332]	@ (800b1cc <RCCEx_PLL2_Config+0x15c>)
 800b080:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b082:	f003 0303 	and.w	r3, r3, #3
 800b086:	2b03      	cmp	r3, #3
 800b088:	d101      	bne.n	800b08e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800b08a:	2301      	movs	r3, #1
 800b08c:	e099      	b.n	800b1c2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800b08e:	4b4f      	ldr	r3, [pc, #316]	@ (800b1cc <RCCEx_PLL2_Config+0x15c>)
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	4a4e      	ldr	r2, [pc, #312]	@ (800b1cc <RCCEx_PLL2_Config+0x15c>)
 800b094:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800b098:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b09a:	f7f7 fd5d 	bl	8002b58 <HAL_GetTick>
 800b09e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b0a0:	e008      	b.n	800b0b4 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b0a2:	f7f7 fd59 	bl	8002b58 <HAL_GetTick>
 800b0a6:	4602      	mov	r2, r0
 800b0a8:	68bb      	ldr	r3, [r7, #8]
 800b0aa:	1ad3      	subs	r3, r2, r3
 800b0ac:	2b02      	cmp	r3, #2
 800b0ae:	d901      	bls.n	800b0b4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b0b0:	2303      	movs	r3, #3
 800b0b2:	e086      	b.n	800b1c2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b0b4:	4b45      	ldr	r3, [pc, #276]	@ (800b1cc <RCCEx_PLL2_Config+0x15c>)
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d1f0      	bne.n	800b0a2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800b0c0:	4b42      	ldr	r3, [pc, #264]	@ (800b1cc <RCCEx_PLL2_Config+0x15c>)
 800b0c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b0c4:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	031b      	lsls	r3, r3, #12
 800b0ce:	493f      	ldr	r1, [pc, #252]	@ (800b1cc <RCCEx_PLL2_Config+0x15c>)
 800b0d0:	4313      	orrs	r3, r2
 800b0d2:	628b      	str	r3, [r1, #40]	@ 0x28
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	685b      	ldr	r3, [r3, #4]
 800b0d8:	3b01      	subs	r3, #1
 800b0da:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	689b      	ldr	r3, [r3, #8]
 800b0e2:	3b01      	subs	r3, #1
 800b0e4:	025b      	lsls	r3, r3, #9
 800b0e6:	b29b      	uxth	r3, r3
 800b0e8:	431a      	orrs	r2, r3
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	68db      	ldr	r3, [r3, #12]
 800b0ee:	3b01      	subs	r3, #1
 800b0f0:	041b      	lsls	r3, r3, #16
 800b0f2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800b0f6:	431a      	orrs	r2, r3
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	691b      	ldr	r3, [r3, #16]
 800b0fc:	3b01      	subs	r3, #1
 800b0fe:	061b      	lsls	r3, r3, #24
 800b100:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800b104:	4931      	ldr	r1, [pc, #196]	@ (800b1cc <RCCEx_PLL2_Config+0x15c>)
 800b106:	4313      	orrs	r3, r2
 800b108:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800b10a:	4b30      	ldr	r3, [pc, #192]	@ (800b1cc <RCCEx_PLL2_Config+0x15c>)
 800b10c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b10e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	695b      	ldr	r3, [r3, #20]
 800b116:	492d      	ldr	r1, [pc, #180]	@ (800b1cc <RCCEx_PLL2_Config+0x15c>)
 800b118:	4313      	orrs	r3, r2
 800b11a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800b11c:	4b2b      	ldr	r3, [pc, #172]	@ (800b1cc <RCCEx_PLL2_Config+0x15c>)
 800b11e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b120:	f023 0220 	bic.w	r2, r3, #32
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	699b      	ldr	r3, [r3, #24]
 800b128:	4928      	ldr	r1, [pc, #160]	@ (800b1cc <RCCEx_PLL2_Config+0x15c>)
 800b12a:	4313      	orrs	r3, r2
 800b12c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800b12e:	4b27      	ldr	r3, [pc, #156]	@ (800b1cc <RCCEx_PLL2_Config+0x15c>)
 800b130:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b132:	4a26      	ldr	r2, [pc, #152]	@ (800b1cc <RCCEx_PLL2_Config+0x15c>)
 800b134:	f023 0310 	bic.w	r3, r3, #16
 800b138:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800b13a:	4b24      	ldr	r3, [pc, #144]	@ (800b1cc <RCCEx_PLL2_Config+0x15c>)
 800b13c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b13e:	4b24      	ldr	r3, [pc, #144]	@ (800b1d0 <RCCEx_PLL2_Config+0x160>)
 800b140:	4013      	ands	r3, r2
 800b142:	687a      	ldr	r2, [r7, #4]
 800b144:	69d2      	ldr	r2, [r2, #28]
 800b146:	00d2      	lsls	r2, r2, #3
 800b148:	4920      	ldr	r1, [pc, #128]	@ (800b1cc <RCCEx_PLL2_Config+0x15c>)
 800b14a:	4313      	orrs	r3, r2
 800b14c:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800b14e:	4b1f      	ldr	r3, [pc, #124]	@ (800b1cc <RCCEx_PLL2_Config+0x15c>)
 800b150:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b152:	4a1e      	ldr	r2, [pc, #120]	@ (800b1cc <RCCEx_PLL2_Config+0x15c>)
 800b154:	f043 0310 	orr.w	r3, r3, #16
 800b158:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800b15a:	683b      	ldr	r3, [r7, #0]
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d106      	bne.n	800b16e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800b160:	4b1a      	ldr	r3, [pc, #104]	@ (800b1cc <RCCEx_PLL2_Config+0x15c>)
 800b162:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b164:	4a19      	ldr	r2, [pc, #100]	@ (800b1cc <RCCEx_PLL2_Config+0x15c>)
 800b166:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800b16a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b16c:	e00f      	b.n	800b18e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800b16e:	683b      	ldr	r3, [r7, #0]
 800b170:	2b01      	cmp	r3, #1
 800b172:	d106      	bne.n	800b182 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800b174:	4b15      	ldr	r3, [pc, #84]	@ (800b1cc <RCCEx_PLL2_Config+0x15c>)
 800b176:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b178:	4a14      	ldr	r2, [pc, #80]	@ (800b1cc <RCCEx_PLL2_Config+0x15c>)
 800b17a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b17e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b180:	e005      	b.n	800b18e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800b182:	4b12      	ldr	r3, [pc, #72]	@ (800b1cc <RCCEx_PLL2_Config+0x15c>)
 800b184:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b186:	4a11      	ldr	r2, [pc, #68]	@ (800b1cc <RCCEx_PLL2_Config+0x15c>)
 800b188:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800b18c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800b18e:	4b0f      	ldr	r3, [pc, #60]	@ (800b1cc <RCCEx_PLL2_Config+0x15c>)
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	4a0e      	ldr	r2, [pc, #56]	@ (800b1cc <RCCEx_PLL2_Config+0x15c>)
 800b194:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800b198:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b19a:	f7f7 fcdd 	bl	8002b58 <HAL_GetTick>
 800b19e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b1a0:	e008      	b.n	800b1b4 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b1a2:	f7f7 fcd9 	bl	8002b58 <HAL_GetTick>
 800b1a6:	4602      	mov	r2, r0
 800b1a8:	68bb      	ldr	r3, [r7, #8]
 800b1aa:	1ad3      	subs	r3, r2, r3
 800b1ac:	2b02      	cmp	r3, #2
 800b1ae:	d901      	bls.n	800b1b4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b1b0:	2303      	movs	r3, #3
 800b1b2:	e006      	b.n	800b1c2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b1b4:	4b05      	ldr	r3, [pc, #20]	@ (800b1cc <RCCEx_PLL2_Config+0x15c>)
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d0f0      	beq.n	800b1a2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800b1c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1c2:	4618      	mov	r0, r3
 800b1c4:	3710      	adds	r7, #16
 800b1c6:	46bd      	mov	sp, r7
 800b1c8:	bd80      	pop	{r7, pc}
 800b1ca:	bf00      	nop
 800b1cc:	58024400 	.word	0x58024400
 800b1d0:	ffff0007 	.word	0xffff0007

0800b1d4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800b1d4:	b580      	push	{r7, lr}
 800b1d6:	b084      	sub	sp, #16
 800b1d8:	af00      	add	r7, sp, #0
 800b1da:	6078      	str	r0, [r7, #4]
 800b1dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b1de:	2300      	movs	r3, #0
 800b1e0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b1e2:	4b53      	ldr	r3, [pc, #332]	@ (800b330 <RCCEx_PLL3_Config+0x15c>)
 800b1e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b1e6:	f003 0303 	and.w	r3, r3, #3
 800b1ea:	2b03      	cmp	r3, #3
 800b1ec:	d101      	bne.n	800b1f2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800b1ee:	2301      	movs	r3, #1
 800b1f0:	e099      	b.n	800b326 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800b1f2:	4b4f      	ldr	r3, [pc, #316]	@ (800b330 <RCCEx_PLL3_Config+0x15c>)
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	4a4e      	ldr	r2, [pc, #312]	@ (800b330 <RCCEx_PLL3_Config+0x15c>)
 800b1f8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b1fc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b1fe:	f7f7 fcab 	bl	8002b58 <HAL_GetTick>
 800b202:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b204:	e008      	b.n	800b218 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b206:	f7f7 fca7 	bl	8002b58 <HAL_GetTick>
 800b20a:	4602      	mov	r2, r0
 800b20c:	68bb      	ldr	r3, [r7, #8]
 800b20e:	1ad3      	subs	r3, r2, r3
 800b210:	2b02      	cmp	r3, #2
 800b212:	d901      	bls.n	800b218 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b214:	2303      	movs	r3, #3
 800b216:	e086      	b.n	800b326 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b218:	4b45      	ldr	r3, [pc, #276]	@ (800b330 <RCCEx_PLL3_Config+0x15c>)
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b220:	2b00      	cmp	r3, #0
 800b222:	d1f0      	bne.n	800b206 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800b224:	4b42      	ldr	r3, [pc, #264]	@ (800b330 <RCCEx_PLL3_Config+0x15c>)
 800b226:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b228:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	051b      	lsls	r3, r3, #20
 800b232:	493f      	ldr	r1, [pc, #252]	@ (800b330 <RCCEx_PLL3_Config+0x15c>)
 800b234:	4313      	orrs	r3, r2
 800b236:	628b      	str	r3, [r1, #40]	@ 0x28
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	685b      	ldr	r3, [r3, #4]
 800b23c:	3b01      	subs	r3, #1
 800b23e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	689b      	ldr	r3, [r3, #8]
 800b246:	3b01      	subs	r3, #1
 800b248:	025b      	lsls	r3, r3, #9
 800b24a:	b29b      	uxth	r3, r3
 800b24c:	431a      	orrs	r2, r3
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	68db      	ldr	r3, [r3, #12]
 800b252:	3b01      	subs	r3, #1
 800b254:	041b      	lsls	r3, r3, #16
 800b256:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800b25a:	431a      	orrs	r2, r3
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	691b      	ldr	r3, [r3, #16]
 800b260:	3b01      	subs	r3, #1
 800b262:	061b      	lsls	r3, r3, #24
 800b264:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800b268:	4931      	ldr	r1, [pc, #196]	@ (800b330 <RCCEx_PLL3_Config+0x15c>)
 800b26a:	4313      	orrs	r3, r2
 800b26c:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800b26e:	4b30      	ldr	r3, [pc, #192]	@ (800b330 <RCCEx_PLL3_Config+0x15c>)
 800b270:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b272:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	695b      	ldr	r3, [r3, #20]
 800b27a:	492d      	ldr	r1, [pc, #180]	@ (800b330 <RCCEx_PLL3_Config+0x15c>)
 800b27c:	4313      	orrs	r3, r2
 800b27e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800b280:	4b2b      	ldr	r3, [pc, #172]	@ (800b330 <RCCEx_PLL3_Config+0x15c>)
 800b282:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b284:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	699b      	ldr	r3, [r3, #24]
 800b28c:	4928      	ldr	r1, [pc, #160]	@ (800b330 <RCCEx_PLL3_Config+0x15c>)
 800b28e:	4313      	orrs	r3, r2
 800b290:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800b292:	4b27      	ldr	r3, [pc, #156]	@ (800b330 <RCCEx_PLL3_Config+0x15c>)
 800b294:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b296:	4a26      	ldr	r2, [pc, #152]	@ (800b330 <RCCEx_PLL3_Config+0x15c>)
 800b298:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b29c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800b29e:	4b24      	ldr	r3, [pc, #144]	@ (800b330 <RCCEx_PLL3_Config+0x15c>)
 800b2a0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b2a2:	4b24      	ldr	r3, [pc, #144]	@ (800b334 <RCCEx_PLL3_Config+0x160>)
 800b2a4:	4013      	ands	r3, r2
 800b2a6:	687a      	ldr	r2, [r7, #4]
 800b2a8:	69d2      	ldr	r2, [r2, #28]
 800b2aa:	00d2      	lsls	r2, r2, #3
 800b2ac:	4920      	ldr	r1, [pc, #128]	@ (800b330 <RCCEx_PLL3_Config+0x15c>)
 800b2ae:	4313      	orrs	r3, r2
 800b2b0:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800b2b2:	4b1f      	ldr	r3, [pc, #124]	@ (800b330 <RCCEx_PLL3_Config+0x15c>)
 800b2b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b2b6:	4a1e      	ldr	r2, [pc, #120]	@ (800b330 <RCCEx_PLL3_Config+0x15c>)
 800b2b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b2bc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800b2be:	683b      	ldr	r3, [r7, #0]
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d106      	bne.n	800b2d2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800b2c4:	4b1a      	ldr	r3, [pc, #104]	@ (800b330 <RCCEx_PLL3_Config+0x15c>)
 800b2c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b2c8:	4a19      	ldr	r2, [pc, #100]	@ (800b330 <RCCEx_PLL3_Config+0x15c>)
 800b2ca:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800b2ce:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b2d0:	e00f      	b.n	800b2f2 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800b2d2:	683b      	ldr	r3, [r7, #0]
 800b2d4:	2b01      	cmp	r3, #1
 800b2d6:	d106      	bne.n	800b2e6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800b2d8:	4b15      	ldr	r3, [pc, #84]	@ (800b330 <RCCEx_PLL3_Config+0x15c>)
 800b2da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b2dc:	4a14      	ldr	r2, [pc, #80]	@ (800b330 <RCCEx_PLL3_Config+0x15c>)
 800b2de:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800b2e2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b2e4:	e005      	b.n	800b2f2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800b2e6:	4b12      	ldr	r3, [pc, #72]	@ (800b330 <RCCEx_PLL3_Config+0x15c>)
 800b2e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b2ea:	4a11      	ldr	r2, [pc, #68]	@ (800b330 <RCCEx_PLL3_Config+0x15c>)
 800b2ec:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800b2f0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800b2f2:	4b0f      	ldr	r3, [pc, #60]	@ (800b330 <RCCEx_PLL3_Config+0x15c>)
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	4a0e      	ldr	r2, [pc, #56]	@ (800b330 <RCCEx_PLL3_Config+0x15c>)
 800b2f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b2fc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b2fe:	f7f7 fc2b 	bl	8002b58 <HAL_GetTick>
 800b302:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b304:	e008      	b.n	800b318 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b306:	f7f7 fc27 	bl	8002b58 <HAL_GetTick>
 800b30a:	4602      	mov	r2, r0
 800b30c:	68bb      	ldr	r3, [r7, #8]
 800b30e:	1ad3      	subs	r3, r2, r3
 800b310:	2b02      	cmp	r3, #2
 800b312:	d901      	bls.n	800b318 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b314:	2303      	movs	r3, #3
 800b316:	e006      	b.n	800b326 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b318:	4b05      	ldr	r3, [pc, #20]	@ (800b330 <RCCEx_PLL3_Config+0x15c>)
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b320:	2b00      	cmp	r3, #0
 800b322:	d0f0      	beq.n	800b306 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800b324:	7bfb      	ldrb	r3, [r7, #15]
}
 800b326:	4618      	mov	r0, r3
 800b328:	3710      	adds	r7, #16
 800b32a:	46bd      	mov	sp, r7
 800b32c:	bd80      	pop	{r7, pc}
 800b32e:	bf00      	nop
 800b330:	58024400 	.word	0x58024400
 800b334:	ffff0007 	.word	0xffff0007

0800b338 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b338:	b580      	push	{r7, lr}
 800b33a:	b082      	sub	sp, #8
 800b33c:	af00      	add	r7, sp, #0
 800b33e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	2b00      	cmp	r3, #0
 800b344:	d101      	bne.n	800b34a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b346:	2301      	movs	r3, #1
 800b348:	e049      	b.n	800b3de <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b350:	b2db      	uxtb	r3, r3
 800b352:	2b00      	cmp	r3, #0
 800b354:	d106      	bne.n	800b364 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	2200      	movs	r2, #0
 800b35a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b35e:	6878      	ldr	r0, [r7, #4]
 800b360:	f7f7 fa34 	bl	80027cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	2202      	movs	r2, #2
 800b368:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	681a      	ldr	r2, [r3, #0]
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	3304      	adds	r3, #4
 800b374:	4619      	mov	r1, r3
 800b376:	4610      	mov	r0, r2
 800b378:	f000 fbfc 	bl	800bb74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	2201      	movs	r2, #1
 800b380:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	2201      	movs	r2, #1
 800b388:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	2201      	movs	r2, #1
 800b390:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	2201      	movs	r2, #1
 800b398:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	2201      	movs	r2, #1
 800b3a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	2201      	movs	r2, #1
 800b3a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	2201      	movs	r2, #1
 800b3b0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	2201      	movs	r2, #1
 800b3b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	2201      	movs	r2, #1
 800b3c0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	2201      	movs	r2, #1
 800b3c8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	2201      	movs	r2, #1
 800b3d0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	2201      	movs	r2, #1
 800b3d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b3dc:	2300      	movs	r3, #0
}
 800b3de:	4618      	mov	r0, r3
 800b3e0:	3708      	adds	r7, #8
 800b3e2:	46bd      	mov	sp, r7
 800b3e4:	bd80      	pop	{r7, pc}

0800b3e6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800b3e6:	b580      	push	{r7, lr}
 800b3e8:	b082      	sub	sp, #8
 800b3ea:	af00      	add	r7, sp, #0
 800b3ec:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d101      	bne.n	800b3f8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800b3f4:	2301      	movs	r3, #1
 800b3f6:	e049      	b.n	800b48c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b3fe:	b2db      	uxtb	r3, r3
 800b400:	2b00      	cmp	r3, #0
 800b402:	d106      	bne.n	800b412 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	2200      	movs	r2, #0
 800b408:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800b40c:	6878      	ldr	r0, [r7, #4]
 800b40e:	f000 f841 	bl	800b494 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	2202      	movs	r2, #2
 800b416:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	681a      	ldr	r2, [r3, #0]
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	3304      	adds	r3, #4
 800b422:	4619      	mov	r1, r3
 800b424:	4610      	mov	r0, r2
 800b426:	f000 fba5 	bl	800bb74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	2201      	movs	r2, #1
 800b42e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	2201      	movs	r2, #1
 800b436:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	2201      	movs	r2, #1
 800b43e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	2201      	movs	r2, #1
 800b446:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	2201      	movs	r2, #1
 800b44e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	2201      	movs	r2, #1
 800b456:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	2201      	movs	r2, #1
 800b45e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	2201      	movs	r2, #1
 800b466:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	2201      	movs	r2, #1
 800b46e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	2201      	movs	r2, #1
 800b476:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	2201      	movs	r2, #1
 800b47e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	2201      	movs	r2, #1
 800b486:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b48a:	2300      	movs	r3, #0
}
 800b48c:	4618      	mov	r0, r3
 800b48e:	3708      	adds	r7, #8
 800b490:	46bd      	mov	sp, r7
 800b492:	bd80      	pop	{r7, pc}

0800b494 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800b494:	b480      	push	{r7}
 800b496:	b083      	sub	sp, #12
 800b498:	af00      	add	r7, sp, #0
 800b49a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800b49c:	bf00      	nop
 800b49e:	370c      	adds	r7, #12
 800b4a0:	46bd      	mov	sp, r7
 800b4a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4a6:	4770      	bx	lr

0800b4a8 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b4a8:	b580      	push	{r7, lr}
 800b4aa:	b084      	sub	sp, #16
 800b4ac:	af00      	add	r7, sp, #0
 800b4ae:	6078      	str	r0, [r7, #4]
 800b4b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b4b2:	2300      	movs	r3, #0
 800b4b4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800b4b6:	683b      	ldr	r3, [r7, #0]
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d109      	bne.n	800b4d0 <HAL_TIM_PWM_Start_IT+0x28>
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800b4c2:	b2db      	uxtb	r3, r3
 800b4c4:	2b01      	cmp	r3, #1
 800b4c6:	bf14      	ite	ne
 800b4c8:	2301      	movne	r3, #1
 800b4ca:	2300      	moveq	r3, #0
 800b4cc:	b2db      	uxtb	r3, r3
 800b4ce:	e03c      	b.n	800b54a <HAL_TIM_PWM_Start_IT+0xa2>
 800b4d0:	683b      	ldr	r3, [r7, #0]
 800b4d2:	2b04      	cmp	r3, #4
 800b4d4:	d109      	bne.n	800b4ea <HAL_TIM_PWM_Start_IT+0x42>
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800b4dc:	b2db      	uxtb	r3, r3
 800b4de:	2b01      	cmp	r3, #1
 800b4e0:	bf14      	ite	ne
 800b4e2:	2301      	movne	r3, #1
 800b4e4:	2300      	moveq	r3, #0
 800b4e6:	b2db      	uxtb	r3, r3
 800b4e8:	e02f      	b.n	800b54a <HAL_TIM_PWM_Start_IT+0xa2>
 800b4ea:	683b      	ldr	r3, [r7, #0]
 800b4ec:	2b08      	cmp	r3, #8
 800b4ee:	d109      	bne.n	800b504 <HAL_TIM_PWM_Start_IT+0x5c>
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800b4f6:	b2db      	uxtb	r3, r3
 800b4f8:	2b01      	cmp	r3, #1
 800b4fa:	bf14      	ite	ne
 800b4fc:	2301      	movne	r3, #1
 800b4fe:	2300      	moveq	r3, #0
 800b500:	b2db      	uxtb	r3, r3
 800b502:	e022      	b.n	800b54a <HAL_TIM_PWM_Start_IT+0xa2>
 800b504:	683b      	ldr	r3, [r7, #0]
 800b506:	2b0c      	cmp	r3, #12
 800b508:	d109      	bne.n	800b51e <HAL_TIM_PWM_Start_IT+0x76>
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b510:	b2db      	uxtb	r3, r3
 800b512:	2b01      	cmp	r3, #1
 800b514:	bf14      	ite	ne
 800b516:	2301      	movne	r3, #1
 800b518:	2300      	moveq	r3, #0
 800b51a:	b2db      	uxtb	r3, r3
 800b51c:	e015      	b.n	800b54a <HAL_TIM_PWM_Start_IT+0xa2>
 800b51e:	683b      	ldr	r3, [r7, #0]
 800b520:	2b10      	cmp	r3, #16
 800b522:	d109      	bne.n	800b538 <HAL_TIM_PWM_Start_IT+0x90>
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800b52a:	b2db      	uxtb	r3, r3
 800b52c:	2b01      	cmp	r3, #1
 800b52e:	bf14      	ite	ne
 800b530:	2301      	movne	r3, #1
 800b532:	2300      	moveq	r3, #0
 800b534:	b2db      	uxtb	r3, r3
 800b536:	e008      	b.n	800b54a <HAL_TIM_PWM_Start_IT+0xa2>
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800b53e:	b2db      	uxtb	r3, r3
 800b540:	2b01      	cmp	r3, #1
 800b542:	bf14      	ite	ne
 800b544:	2301      	movne	r3, #1
 800b546:	2300      	moveq	r3, #0
 800b548:	b2db      	uxtb	r3, r3
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d001      	beq.n	800b552 <HAL_TIM_PWM_Start_IT+0xaa>
  {
    return HAL_ERROR;
 800b54e:	2301      	movs	r3, #1
 800b550:	e0ec      	b.n	800b72c <HAL_TIM_PWM_Start_IT+0x284>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b552:	683b      	ldr	r3, [r7, #0]
 800b554:	2b00      	cmp	r3, #0
 800b556:	d104      	bne.n	800b562 <HAL_TIM_PWM_Start_IT+0xba>
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	2202      	movs	r2, #2
 800b55c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b560:	e023      	b.n	800b5aa <HAL_TIM_PWM_Start_IT+0x102>
 800b562:	683b      	ldr	r3, [r7, #0]
 800b564:	2b04      	cmp	r3, #4
 800b566:	d104      	bne.n	800b572 <HAL_TIM_PWM_Start_IT+0xca>
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	2202      	movs	r2, #2
 800b56c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b570:	e01b      	b.n	800b5aa <HAL_TIM_PWM_Start_IT+0x102>
 800b572:	683b      	ldr	r3, [r7, #0]
 800b574:	2b08      	cmp	r3, #8
 800b576:	d104      	bne.n	800b582 <HAL_TIM_PWM_Start_IT+0xda>
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	2202      	movs	r2, #2
 800b57c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b580:	e013      	b.n	800b5aa <HAL_TIM_PWM_Start_IT+0x102>
 800b582:	683b      	ldr	r3, [r7, #0]
 800b584:	2b0c      	cmp	r3, #12
 800b586:	d104      	bne.n	800b592 <HAL_TIM_PWM_Start_IT+0xea>
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	2202      	movs	r2, #2
 800b58c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b590:	e00b      	b.n	800b5aa <HAL_TIM_PWM_Start_IT+0x102>
 800b592:	683b      	ldr	r3, [r7, #0]
 800b594:	2b10      	cmp	r3, #16
 800b596:	d104      	bne.n	800b5a2 <HAL_TIM_PWM_Start_IT+0xfa>
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	2202      	movs	r2, #2
 800b59c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b5a0:	e003      	b.n	800b5aa <HAL_TIM_PWM_Start_IT+0x102>
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	2202      	movs	r2, #2
 800b5a6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  switch (Channel)
 800b5aa:	683b      	ldr	r3, [r7, #0]
 800b5ac:	2b0c      	cmp	r3, #12
 800b5ae:	d841      	bhi.n	800b634 <HAL_TIM_PWM_Start_IT+0x18c>
 800b5b0:	a201      	add	r2, pc, #4	@ (adr r2, 800b5b8 <HAL_TIM_PWM_Start_IT+0x110>)
 800b5b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5b6:	bf00      	nop
 800b5b8:	0800b5ed 	.word	0x0800b5ed
 800b5bc:	0800b635 	.word	0x0800b635
 800b5c0:	0800b635 	.word	0x0800b635
 800b5c4:	0800b635 	.word	0x0800b635
 800b5c8:	0800b5ff 	.word	0x0800b5ff
 800b5cc:	0800b635 	.word	0x0800b635
 800b5d0:	0800b635 	.word	0x0800b635
 800b5d4:	0800b635 	.word	0x0800b635
 800b5d8:	0800b611 	.word	0x0800b611
 800b5dc:	0800b635 	.word	0x0800b635
 800b5e0:	0800b635 	.word	0x0800b635
 800b5e4:	0800b635 	.word	0x0800b635
 800b5e8:	0800b623 	.word	0x0800b623
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	68da      	ldr	r2, [r3, #12]
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	f042 0202 	orr.w	r2, r2, #2
 800b5fa:	60da      	str	r2, [r3, #12]
      break;
 800b5fc:	e01d      	b.n	800b63a <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	68da      	ldr	r2, [r3, #12]
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	f042 0204 	orr.w	r2, r2, #4
 800b60c:	60da      	str	r2, [r3, #12]
      break;
 800b60e:	e014      	b.n	800b63a <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	68da      	ldr	r2, [r3, #12]
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	681b      	ldr	r3, [r3, #0]
 800b61a:	f042 0208 	orr.w	r2, r2, #8
 800b61e:	60da      	str	r2, [r3, #12]
      break;
 800b620:	e00b      	b.n	800b63a <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	681b      	ldr	r3, [r3, #0]
 800b626:	68da      	ldr	r2, [r3, #12]
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	f042 0210 	orr.w	r2, r2, #16
 800b630:	60da      	str	r2, [r3, #12]
      break;
 800b632:	e002      	b.n	800b63a <HAL_TIM_PWM_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800b634:	2301      	movs	r3, #1
 800b636:	73fb      	strb	r3, [r7, #15]
      break;
 800b638:	bf00      	nop
  }

  if (status == HAL_OK)
 800b63a:	7bfb      	ldrb	r3, [r7, #15]
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d174      	bne.n	800b72a <HAL_TIM_PWM_Start_IT+0x282>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	2201      	movs	r2, #1
 800b646:	6839      	ldr	r1, [r7, #0]
 800b648:	4618      	mov	r0, r3
 800b64a:	f000 fead 	bl	800c3a8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	4a38      	ldr	r2, [pc, #224]	@ (800b734 <HAL_TIM_PWM_Start_IT+0x28c>)
 800b654:	4293      	cmp	r3, r2
 800b656:	d013      	beq.n	800b680 <HAL_TIM_PWM_Start_IT+0x1d8>
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	4a36      	ldr	r2, [pc, #216]	@ (800b738 <HAL_TIM_PWM_Start_IT+0x290>)
 800b65e:	4293      	cmp	r3, r2
 800b660:	d00e      	beq.n	800b680 <HAL_TIM_PWM_Start_IT+0x1d8>
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	681b      	ldr	r3, [r3, #0]
 800b666:	4a35      	ldr	r2, [pc, #212]	@ (800b73c <HAL_TIM_PWM_Start_IT+0x294>)
 800b668:	4293      	cmp	r3, r2
 800b66a:	d009      	beq.n	800b680 <HAL_TIM_PWM_Start_IT+0x1d8>
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	4a33      	ldr	r2, [pc, #204]	@ (800b740 <HAL_TIM_PWM_Start_IT+0x298>)
 800b672:	4293      	cmp	r3, r2
 800b674:	d004      	beq.n	800b680 <HAL_TIM_PWM_Start_IT+0x1d8>
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	4a32      	ldr	r2, [pc, #200]	@ (800b744 <HAL_TIM_PWM_Start_IT+0x29c>)
 800b67c:	4293      	cmp	r3, r2
 800b67e:	d101      	bne.n	800b684 <HAL_TIM_PWM_Start_IT+0x1dc>
 800b680:	2301      	movs	r3, #1
 800b682:	e000      	b.n	800b686 <HAL_TIM_PWM_Start_IT+0x1de>
 800b684:	2300      	movs	r3, #0
 800b686:	2b00      	cmp	r3, #0
 800b688:	d007      	beq.n	800b69a <HAL_TIM_PWM_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800b698:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	4a25      	ldr	r2, [pc, #148]	@ (800b734 <HAL_TIM_PWM_Start_IT+0x28c>)
 800b6a0:	4293      	cmp	r3, r2
 800b6a2:	d022      	beq.n	800b6ea <HAL_TIM_PWM_Start_IT+0x242>
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b6ac:	d01d      	beq.n	800b6ea <HAL_TIM_PWM_Start_IT+0x242>
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	4a25      	ldr	r2, [pc, #148]	@ (800b748 <HAL_TIM_PWM_Start_IT+0x2a0>)
 800b6b4:	4293      	cmp	r3, r2
 800b6b6:	d018      	beq.n	800b6ea <HAL_TIM_PWM_Start_IT+0x242>
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	4a23      	ldr	r2, [pc, #140]	@ (800b74c <HAL_TIM_PWM_Start_IT+0x2a4>)
 800b6be:	4293      	cmp	r3, r2
 800b6c0:	d013      	beq.n	800b6ea <HAL_TIM_PWM_Start_IT+0x242>
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	4a22      	ldr	r2, [pc, #136]	@ (800b750 <HAL_TIM_PWM_Start_IT+0x2a8>)
 800b6c8:	4293      	cmp	r3, r2
 800b6ca:	d00e      	beq.n	800b6ea <HAL_TIM_PWM_Start_IT+0x242>
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	4a19      	ldr	r2, [pc, #100]	@ (800b738 <HAL_TIM_PWM_Start_IT+0x290>)
 800b6d2:	4293      	cmp	r3, r2
 800b6d4:	d009      	beq.n	800b6ea <HAL_TIM_PWM_Start_IT+0x242>
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	4a1e      	ldr	r2, [pc, #120]	@ (800b754 <HAL_TIM_PWM_Start_IT+0x2ac>)
 800b6dc:	4293      	cmp	r3, r2
 800b6de:	d004      	beq.n	800b6ea <HAL_TIM_PWM_Start_IT+0x242>
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	4a15      	ldr	r2, [pc, #84]	@ (800b73c <HAL_TIM_PWM_Start_IT+0x294>)
 800b6e6:	4293      	cmp	r3, r2
 800b6e8:	d115      	bne.n	800b716 <HAL_TIM_PWM_Start_IT+0x26e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	689a      	ldr	r2, [r3, #8]
 800b6f0:	4b19      	ldr	r3, [pc, #100]	@ (800b758 <HAL_TIM_PWM_Start_IT+0x2b0>)
 800b6f2:	4013      	ands	r3, r2
 800b6f4:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b6f6:	68bb      	ldr	r3, [r7, #8]
 800b6f8:	2b06      	cmp	r3, #6
 800b6fa:	d015      	beq.n	800b728 <HAL_TIM_PWM_Start_IT+0x280>
 800b6fc:	68bb      	ldr	r3, [r7, #8]
 800b6fe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b702:	d011      	beq.n	800b728 <HAL_TIM_PWM_Start_IT+0x280>
      {
        __HAL_TIM_ENABLE(htim);
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	681a      	ldr	r2, [r3, #0]
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	681b      	ldr	r3, [r3, #0]
 800b70e:	f042 0201 	orr.w	r2, r2, #1
 800b712:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b714:	e008      	b.n	800b728 <HAL_TIM_PWM_Start_IT+0x280>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	681a      	ldr	r2, [r3, #0]
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	f042 0201 	orr.w	r2, r2, #1
 800b724:	601a      	str	r2, [r3, #0]
 800b726:	e000      	b.n	800b72a <HAL_TIM_PWM_Start_IT+0x282>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b728:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800b72a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b72c:	4618      	mov	r0, r3
 800b72e:	3710      	adds	r7, #16
 800b730:	46bd      	mov	sp, r7
 800b732:	bd80      	pop	{r7, pc}
 800b734:	40010000 	.word	0x40010000
 800b738:	40010400 	.word	0x40010400
 800b73c:	40014000 	.word	0x40014000
 800b740:	40014400 	.word	0x40014400
 800b744:	40014800 	.word	0x40014800
 800b748:	40000400 	.word	0x40000400
 800b74c:	40000800 	.word	0x40000800
 800b750:	40000c00 	.word	0x40000c00
 800b754:	40001800 	.word	0x40001800
 800b758:	00010007 	.word	0x00010007

0800b75c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800b75c:	b580      	push	{r7, lr}
 800b75e:	b086      	sub	sp, #24
 800b760:	af00      	add	r7, sp, #0
 800b762:	60f8      	str	r0, [r7, #12]
 800b764:	60b9      	str	r1, [r7, #8]
 800b766:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b768:	2300      	movs	r3, #0
 800b76a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b76c:	68fb      	ldr	r3, [r7, #12]
 800b76e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b772:	2b01      	cmp	r3, #1
 800b774:	d101      	bne.n	800b77a <HAL_TIM_PWM_ConfigChannel+0x1e>
 800b776:	2302      	movs	r3, #2
 800b778:	e0ff      	b.n	800b97a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800b77a:	68fb      	ldr	r3, [r7, #12]
 800b77c:	2201      	movs	r2, #1
 800b77e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	2b14      	cmp	r3, #20
 800b786:	f200 80f0 	bhi.w	800b96a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800b78a:	a201      	add	r2, pc, #4	@ (adr r2, 800b790 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800b78c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b790:	0800b7e5 	.word	0x0800b7e5
 800b794:	0800b96b 	.word	0x0800b96b
 800b798:	0800b96b 	.word	0x0800b96b
 800b79c:	0800b96b 	.word	0x0800b96b
 800b7a0:	0800b825 	.word	0x0800b825
 800b7a4:	0800b96b 	.word	0x0800b96b
 800b7a8:	0800b96b 	.word	0x0800b96b
 800b7ac:	0800b96b 	.word	0x0800b96b
 800b7b0:	0800b867 	.word	0x0800b867
 800b7b4:	0800b96b 	.word	0x0800b96b
 800b7b8:	0800b96b 	.word	0x0800b96b
 800b7bc:	0800b96b 	.word	0x0800b96b
 800b7c0:	0800b8a7 	.word	0x0800b8a7
 800b7c4:	0800b96b 	.word	0x0800b96b
 800b7c8:	0800b96b 	.word	0x0800b96b
 800b7cc:	0800b96b 	.word	0x0800b96b
 800b7d0:	0800b8e9 	.word	0x0800b8e9
 800b7d4:	0800b96b 	.word	0x0800b96b
 800b7d8:	0800b96b 	.word	0x0800b96b
 800b7dc:	0800b96b 	.word	0x0800b96b
 800b7e0:	0800b929 	.word	0x0800b929
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b7e4:	68fb      	ldr	r3, [r7, #12]
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	68b9      	ldr	r1, [r7, #8]
 800b7ea:	4618      	mov	r0, r3
 800b7ec:	f000 fa68 	bl	800bcc0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	699a      	ldr	r2, [r3, #24]
 800b7f6:	68fb      	ldr	r3, [r7, #12]
 800b7f8:	681b      	ldr	r3, [r3, #0]
 800b7fa:	f042 0208 	orr.w	r2, r2, #8
 800b7fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b800:	68fb      	ldr	r3, [r7, #12]
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	699a      	ldr	r2, [r3, #24]
 800b806:	68fb      	ldr	r3, [r7, #12]
 800b808:	681b      	ldr	r3, [r3, #0]
 800b80a:	f022 0204 	bic.w	r2, r2, #4
 800b80e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b810:	68fb      	ldr	r3, [r7, #12]
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	6999      	ldr	r1, [r3, #24]
 800b816:	68bb      	ldr	r3, [r7, #8]
 800b818:	691a      	ldr	r2, [r3, #16]
 800b81a:	68fb      	ldr	r3, [r7, #12]
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	430a      	orrs	r2, r1
 800b820:	619a      	str	r2, [r3, #24]
      break;
 800b822:	e0a5      	b.n	800b970 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b824:	68fb      	ldr	r3, [r7, #12]
 800b826:	681b      	ldr	r3, [r3, #0]
 800b828:	68b9      	ldr	r1, [r7, #8]
 800b82a:	4618      	mov	r0, r3
 800b82c:	f000 fad8 	bl	800bde0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b830:	68fb      	ldr	r3, [r7, #12]
 800b832:	681b      	ldr	r3, [r3, #0]
 800b834:	699a      	ldr	r2, [r3, #24]
 800b836:	68fb      	ldr	r3, [r7, #12]
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b83e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b840:	68fb      	ldr	r3, [r7, #12]
 800b842:	681b      	ldr	r3, [r3, #0]
 800b844:	699a      	ldr	r2, [r3, #24]
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b84e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	6999      	ldr	r1, [r3, #24]
 800b856:	68bb      	ldr	r3, [r7, #8]
 800b858:	691b      	ldr	r3, [r3, #16]
 800b85a:	021a      	lsls	r2, r3, #8
 800b85c:	68fb      	ldr	r3, [r7, #12]
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	430a      	orrs	r2, r1
 800b862:	619a      	str	r2, [r3, #24]
      break;
 800b864:	e084      	b.n	800b970 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b866:	68fb      	ldr	r3, [r7, #12]
 800b868:	681b      	ldr	r3, [r3, #0]
 800b86a:	68b9      	ldr	r1, [r7, #8]
 800b86c:	4618      	mov	r0, r3
 800b86e:	f000 fb41 	bl	800bef4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b872:	68fb      	ldr	r3, [r7, #12]
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	69da      	ldr	r2, [r3, #28]
 800b878:	68fb      	ldr	r3, [r7, #12]
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	f042 0208 	orr.w	r2, r2, #8
 800b880:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b882:	68fb      	ldr	r3, [r7, #12]
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	69da      	ldr	r2, [r3, #28]
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	f022 0204 	bic.w	r2, r2, #4
 800b890:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	69d9      	ldr	r1, [r3, #28]
 800b898:	68bb      	ldr	r3, [r7, #8]
 800b89a:	691a      	ldr	r2, [r3, #16]
 800b89c:	68fb      	ldr	r3, [r7, #12]
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	430a      	orrs	r2, r1
 800b8a2:	61da      	str	r2, [r3, #28]
      break;
 800b8a4:	e064      	b.n	800b970 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	68b9      	ldr	r1, [r7, #8]
 800b8ac:	4618      	mov	r0, r3
 800b8ae:	f000 fba9 	bl	800c004 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b8b2:	68fb      	ldr	r3, [r7, #12]
 800b8b4:	681b      	ldr	r3, [r3, #0]
 800b8b6:	69da      	ldr	r2, [r3, #28]
 800b8b8:	68fb      	ldr	r3, [r7, #12]
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b8c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b8c2:	68fb      	ldr	r3, [r7, #12]
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	69da      	ldr	r2, [r3, #28]
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b8d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b8d2:	68fb      	ldr	r3, [r7, #12]
 800b8d4:	681b      	ldr	r3, [r3, #0]
 800b8d6:	69d9      	ldr	r1, [r3, #28]
 800b8d8:	68bb      	ldr	r3, [r7, #8]
 800b8da:	691b      	ldr	r3, [r3, #16]
 800b8dc:	021a      	lsls	r2, r3, #8
 800b8de:	68fb      	ldr	r3, [r7, #12]
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	430a      	orrs	r2, r1
 800b8e4:	61da      	str	r2, [r3, #28]
      break;
 800b8e6:	e043      	b.n	800b970 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800b8e8:	68fb      	ldr	r3, [r7, #12]
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	68b9      	ldr	r1, [r7, #8]
 800b8ee:	4618      	mov	r0, r3
 800b8f0:	f000 fbf2 	bl	800c0d8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	681b      	ldr	r3, [r3, #0]
 800b8fe:	f042 0208 	orr.w	r2, r2, #8
 800b902:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800b904:	68fb      	ldr	r3, [r7, #12]
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b90a:	68fb      	ldr	r3, [r7, #12]
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	f022 0204 	bic.w	r2, r2, #4
 800b912:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800b914:	68fb      	ldr	r3, [r7, #12]
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800b91a:	68bb      	ldr	r3, [r7, #8]
 800b91c:	691a      	ldr	r2, [r3, #16]
 800b91e:	68fb      	ldr	r3, [r7, #12]
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	430a      	orrs	r2, r1
 800b924:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800b926:	e023      	b.n	800b970 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800b928:	68fb      	ldr	r3, [r7, #12]
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	68b9      	ldr	r1, [r7, #8]
 800b92e:	4618      	mov	r0, r3
 800b930:	f000 fc36 	bl	800c1a0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800b934:	68fb      	ldr	r3, [r7, #12]
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b93a:	68fb      	ldr	r3, [r7, #12]
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b942:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	681b      	ldr	r3, [r3, #0]
 800b948:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b94a:	68fb      	ldr	r3, [r7, #12]
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b952:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800b954:	68fb      	ldr	r3, [r7, #12]
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800b95a:	68bb      	ldr	r3, [r7, #8]
 800b95c:	691b      	ldr	r3, [r3, #16]
 800b95e:	021a      	lsls	r2, r3, #8
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	430a      	orrs	r2, r1
 800b966:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800b968:	e002      	b.n	800b970 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800b96a:	2301      	movs	r3, #1
 800b96c:	75fb      	strb	r3, [r7, #23]
      break;
 800b96e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	2200      	movs	r2, #0
 800b974:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800b978:	7dfb      	ldrb	r3, [r7, #23]
}
 800b97a:	4618      	mov	r0, r3
 800b97c:	3718      	adds	r7, #24
 800b97e:	46bd      	mov	sp, r7
 800b980:	bd80      	pop	{r7, pc}
 800b982:	bf00      	nop

0800b984 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b984:	b580      	push	{r7, lr}
 800b986:	b084      	sub	sp, #16
 800b988:	af00      	add	r7, sp, #0
 800b98a:	6078      	str	r0, [r7, #4]
 800b98c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b98e:	2300      	movs	r3, #0
 800b990:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b998:	2b01      	cmp	r3, #1
 800b99a:	d101      	bne.n	800b9a0 <HAL_TIM_ConfigClockSource+0x1c>
 800b99c:	2302      	movs	r3, #2
 800b99e:	e0dc      	b.n	800bb5a <HAL_TIM_ConfigClockSource+0x1d6>
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	2201      	movs	r2, #1
 800b9a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	2202      	movs	r2, #2
 800b9ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	689b      	ldr	r3, [r3, #8]
 800b9b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b9b8:	68ba      	ldr	r2, [r7, #8]
 800b9ba:	4b6a      	ldr	r3, [pc, #424]	@ (800bb64 <HAL_TIM_ConfigClockSource+0x1e0>)
 800b9bc:	4013      	ands	r3, r2
 800b9be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b9c0:	68bb      	ldr	r3, [r7, #8]
 800b9c2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b9c6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	68ba      	ldr	r2, [r7, #8]
 800b9ce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b9d0:	683b      	ldr	r3, [r7, #0]
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	4a64      	ldr	r2, [pc, #400]	@ (800bb68 <HAL_TIM_ConfigClockSource+0x1e4>)
 800b9d6:	4293      	cmp	r3, r2
 800b9d8:	f000 80a9 	beq.w	800bb2e <HAL_TIM_ConfigClockSource+0x1aa>
 800b9dc:	4a62      	ldr	r2, [pc, #392]	@ (800bb68 <HAL_TIM_ConfigClockSource+0x1e4>)
 800b9de:	4293      	cmp	r3, r2
 800b9e0:	f200 80ae 	bhi.w	800bb40 <HAL_TIM_ConfigClockSource+0x1bc>
 800b9e4:	4a61      	ldr	r2, [pc, #388]	@ (800bb6c <HAL_TIM_ConfigClockSource+0x1e8>)
 800b9e6:	4293      	cmp	r3, r2
 800b9e8:	f000 80a1 	beq.w	800bb2e <HAL_TIM_ConfigClockSource+0x1aa>
 800b9ec:	4a5f      	ldr	r2, [pc, #380]	@ (800bb6c <HAL_TIM_ConfigClockSource+0x1e8>)
 800b9ee:	4293      	cmp	r3, r2
 800b9f0:	f200 80a6 	bhi.w	800bb40 <HAL_TIM_ConfigClockSource+0x1bc>
 800b9f4:	4a5e      	ldr	r2, [pc, #376]	@ (800bb70 <HAL_TIM_ConfigClockSource+0x1ec>)
 800b9f6:	4293      	cmp	r3, r2
 800b9f8:	f000 8099 	beq.w	800bb2e <HAL_TIM_ConfigClockSource+0x1aa>
 800b9fc:	4a5c      	ldr	r2, [pc, #368]	@ (800bb70 <HAL_TIM_ConfigClockSource+0x1ec>)
 800b9fe:	4293      	cmp	r3, r2
 800ba00:	f200 809e 	bhi.w	800bb40 <HAL_TIM_ConfigClockSource+0x1bc>
 800ba04:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800ba08:	f000 8091 	beq.w	800bb2e <HAL_TIM_ConfigClockSource+0x1aa>
 800ba0c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800ba10:	f200 8096 	bhi.w	800bb40 <HAL_TIM_ConfigClockSource+0x1bc>
 800ba14:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ba18:	f000 8089 	beq.w	800bb2e <HAL_TIM_ConfigClockSource+0x1aa>
 800ba1c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ba20:	f200 808e 	bhi.w	800bb40 <HAL_TIM_ConfigClockSource+0x1bc>
 800ba24:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ba28:	d03e      	beq.n	800baa8 <HAL_TIM_ConfigClockSource+0x124>
 800ba2a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ba2e:	f200 8087 	bhi.w	800bb40 <HAL_TIM_ConfigClockSource+0x1bc>
 800ba32:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ba36:	f000 8086 	beq.w	800bb46 <HAL_TIM_ConfigClockSource+0x1c2>
 800ba3a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ba3e:	d87f      	bhi.n	800bb40 <HAL_TIM_ConfigClockSource+0x1bc>
 800ba40:	2b70      	cmp	r3, #112	@ 0x70
 800ba42:	d01a      	beq.n	800ba7a <HAL_TIM_ConfigClockSource+0xf6>
 800ba44:	2b70      	cmp	r3, #112	@ 0x70
 800ba46:	d87b      	bhi.n	800bb40 <HAL_TIM_ConfigClockSource+0x1bc>
 800ba48:	2b60      	cmp	r3, #96	@ 0x60
 800ba4a:	d050      	beq.n	800baee <HAL_TIM_ConfigClockSource+0x16a>
 800ba4c:	2b60      	cmp	r3, #96	@ 0x60
 800ba4e:	d877      	bhi.n	800bb40 <HAL_TIM_ConfigClockSource+0x1bc>
 800ba50:	2b50      	cmp	r3, #80	@ 0x50
 800ba52:	d03c      	beq.n	800bace <HAL_TIM_ConfigClockSource+0x14a>
 800ba54:	2b50      	cmp	r3, #80	@ 0x50
 800ba56:	d873      	bhi.n	800bb40 <HAL_TIM_ConfigClockSource+0x1bc>
 800ba58:	2b40      	cmp	r3, #64	@ 0x40
 800ba5a:	d058      	beq.n	800bb0e <HAL_TIM_ConfigClockSource+0x18a>
 800ba5c:	2b40      	cmp	r3, #64	@ 0x40
 800ba5e:	d86f      	bhi.n	800bb40 <HAL_TIM_ConfigClockSource+0x1bc>
 800ba60:	2b30      	cmp	r3, #48	@ 0x30
 800ba62:	d064      	beq.n	800bb2e <HAL_TIM_ConfigClockSource+0x1aa>
 800ba64:	2b30      	cmp	r3, #48	@ 0x30
 800ba66:	d86b      	bhi.n	800bb40 <HAL_TIM_ConfigClockSource+0x1bc>
 800ba68:	2b20      	cmp	r3, #32
 800ba6a:	d060      	beq.n	800bb2e <HAL_TIM_ConfigClockSource+0x1aa>
 800ba6c:	2b20      	cmp	r3, #32
 800ba6e:	d867      	bhi.n	800bb40 <HAL_TIM_ConfigClockSource+0x1bc>
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d05c      	beq.n	800bb2e <HAL_TIM_ConfigClockSource+0x1aa>
 800ba74:	2b10      	cmp	r3, #16
 800ba76:	d05a      	beq.n	800bb2e <HAL_TIM_ConfigClockSource+0x1aa>
 800ba78:	e062      	b.n	800bb40 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800ba7e:	683b      	ldr	r3, [r7, #0]
 800ba80:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800ba82:	683b      	ldr	r3, [r7, #0]
 800ba84:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800ba86:	683b      	ldr	r3, [r7, #0]
 800ba88:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800ba8a:	f000 fc6d 	bl	800c368 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	689b      	ldr	r3, [r3, #8]
 800ba94:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800ba96:	68bb      	ldr	r3, [r7, #8]
 800ba98:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800ba9c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	68ba      	ldr	r2, [r7, #8]
 800baa4:	609a      	str	r2, [r3, #8]
      break;
 800baa6:	e04f      	b.n	800bb48 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800baac:	683b      	ldr	r3, [r7, #0]
 800baae:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800bab0:	683b      	ldr	r3, [r7, #0]
 800bab2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800bab4:	683b      	ldr	r3, [r7, #0]
 800bab6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800bab8:	f000 fc56 	bl	800c368 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	689a      	ldr	r2, [r3, #8]
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800baca:	609a      	str	r2, [r3, #8]
      break;
 800bacc:	e03c      	b.n	800bb48 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800bad2:	683b      	ldr	r3, [r7, #0]
 800bad4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800bad6:	683b      	ldr	r3, [r7, #0]
 800bad8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800bada:	461a      	mov	r2, r3
 800badc:	f000 fbc6 	bl	800c26c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	2150      	movs	r1, #80	@ 0x50
 800bae6:	4618      	mov	r0, r3
 800bae8:	f000 fc20 	bl	800c32c <TIM_ITRx_SetConfig>
      break;
 800baec:	e02c      	b.n	800bb48 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800baf2:	683b      	ldr	r3, [r7, #0]
 800baf4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800baf6:	683b      	ldr	r3, [r7, #0]
 800baf8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800bafa:	461a      	mov	r2, r3
 800bafc:	f000 fbe5 	bl	800c2ca <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	2160      	movs	r1, #96	@ 0x60
 800bb06:	4618      	mov	r0, r3
 800bb08:	f000 fc10 	bl	800c32c <TIM_ITRx_SetConfig>
      break;
 800bb0c:	e01c      	b.n	800bb48 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800bb12:	683b      	ldr	r3, [r7, #0]
 800bb14:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800bb16:	683b      	ldr	r3, [r7, #0]
 800bb18:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800bb1a:	461a      	mov	r2, r3
 800bb1c:	f000 fba6 	bl	800c26c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	2140      	movs	r1, #64	@ 0x40
 800bb26:	4618      	mov	r0, r3
 800bb28:	f000 fc00 	bl	800c32c <TIM_ITRx_SetConfig>
      break;
 800bb2c:	e00c      	b.n	800bb48 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	681a      	ldr	r2, [r3, #0]
 800bb32:	683b      	ldr	r3, [r7, #0]
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	4619      	mov	r1, r3
 800bb38:	4610      	mov	r0, r2
 800bb3a:	f000 fbf7 	bl	800c32c <TIM_ITRx_SetConfig>
      break;
 800bb3e:	e003      	b.n	800bb48 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800bb40:	2301      	movs	r3, #1
 800bb42:	73fb      	strb	r3, [r7, #15]
      break;
 800bb44:	e000      	b.n	800bb48 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800bb46:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	2201      	movs	r2, #1
 800bb4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	2200      	movs	r2, #0
 800bb54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800bb58:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb5a:	4618      	mov	r0, r3
 800bb5c:	3710      	adds	r7, #16
 800bb5e:	46bd      	mov	sp, r7
 800bb60:	bd80      	pop	{r7, pc}
 800bb62:	bf00      	nop
 800bb64:	ffceff88 	.word	0xffceff88
 800bb68:	00100040 	.word	0x00100040
 800bb6c:	00100030 	.word	0x00100030
 800bb70:	00100020 	.word	0x00100020

0800bb74 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800bb74:	b480      	push	{r7}
 800bb76:	b085      	sub	sp, #20
 800bb78:	af00      	add	r7, sp, #0
 800bb7a:	6078      	str	r0, [r7, #4]
 800bb7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	4a46      	ldr	r2, [pc, #280]	@ (800bca0 <TIM_Base_SetConfig+0x12c>)
 800bb88:	4293      	cmp	r3, r2
 800bb8a:	d013      	beq.n	800bbb4 <TIM_Base_SetConfig+0x40>
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bb92:	d00f      	beq.n	800bbb4 <TIM_Base_SetConfig+0x40>
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	4a43      	ldr	r2, [pc, #268]	@ (800bca4 <TIM_Base_SetConfig+0x130>)
 800bb98:	4293      	cmp	r3, r2
 800bb9a:	d00b      	beq.n	800bbb4 <TIM_Base_SetConfig+0x40>
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	4a42      	ldr	r2, [pc, #264]	@ (800bca8 <TIM_Base_SetConfig+0x134>)
 800bba0:	4293      	cmp	r3, r2
 800bba2:	d007      	beq.n	800bbb4 <TIM_Base_SetConfig+0x40>
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	4a41      	ldr	r2, [pc, #260]	@ (800bcac <TIM_Base_SetConfig+0x138>)
 800bba8:	4293      	cmp	r3, r2
 800bbaa:	d003      	beq.n	800bbb4 <TIM_Base_SetConfig+0x40>
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	4a40      	ldr	r2, [pc, #256]	@ (800bcb0 <TIM_Base_SetConfig+0x13c>)
 800bbb0:	4293      	cmp	r3, r2
 800bbb2:	d108      	bne.n	800bbc6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800bbb4:	68fb      	ldr	r3, [r7, #12]
 800bbb6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bbba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800bbbc:	683b      	ldr	r3, [r7, #0]
 800bbbe:	685b      	ldr	r3, [r3, #4]
 800bbc0:	68fa      	ldr	r2, [r7, #12]
 800bbc2:	4313      	orrs	r3, r2
 800bbc4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	4a35      	ldr	r2, [pc, #212]	@ (800bca0 <TIM_Base_SetConfig+0x12c>)
 800bbca:	4293      	cmp	r3, r2
 800bbcc:	d01f      	beq.n	800bc0e <TIM_Base_SetConfig+0x9a>
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bbd4:	d01b      	beq.n	800bc0e <TIM_Base_SetConfig+0x9a>
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	4a32      	ldr	r2, [pc, #200]	@ (800bca4 <TIM_Base_SetConfig+0x130>)
 800bbda:	4293      	cmp	r3, r2
 800bbdc:	d017      	beq.n	800bc0e <TIM_Base_SetConfig+0x9a>
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	4a31      	ldr	r2, [pc, #196]	@ (800bca8 <TIM_Base_SetConfig+0x134>)
 800bbe2:	4293      	cmp	r3, r2
 800bbe4:	d013      	beq.n	800bc0e <TIM_Base_SetConfig+0x9a>
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	4a30      	ldr	r2, [pc, #192]	@ (800bcac <TIM_Base_SetConfig+0x138>)
 800bbea:	4293      	cmp	r3, r2
 800bbec:	d00f      	beq.n	800bc0e <TIM_Base_SetConfig+0x9a>
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	4a2f      	ldr	r2, [pc, #188]	@ (800bcb0 <TIM_Base_SetConfig+0x13c>)
 800bbf2:	4293      	cmp	r3, r2
 800bbf4:	d00b      	beq.n	800bc0e <TIM_Base_SetConfig+0x9a>
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	4a2e      	ldr	r2, [pc, #184]	@ (800bcb4 <TIM_Base_SetConfig+0x140>)
 800bbfa:	4293      	cmp	r3, r2
 800bbfc:	d007      	beq.n	800bc0e <TIM_Base_SetConfig+0x9a>
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	4a2d      	ldr	r2, [pc, #180]	@ (800bcb8 <TIM_Base_SetConfig+0x144>)
 800bc02:	4293      	cmp	r3, r2
 800bc04:	d003      	beq.n	800bc0e <TIM_Base_SetConfig+0x9a>
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	4a2c      	ldr	r2, [pc, #176]	@ (800bcbc <TIM_Base_SetConfig+0x148>)
 800bc0a:	4293      	cmp	r3, r2
 800bc0c:	d108      	bne.n	800bc20 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800bc0e:	68fb      	ldr	r3, [r7, #12]
 800bc10:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800bc14:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800bc16:	683b      	ldr	r3, [r7, #0]
 800bc18:	68db      	ldr	r3, [r3, #12]
 800bc1a:	68fa      	ldr	r2, [r7, #12]
 800bc1c:	4313      	orrs	r3, r2
 800bc1e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800bc20:	68fb      	ldr	r3, [r7, #12]
 800bc22:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800bc26:	683b      	ldr	r3, [r7, #0]
 800bc28:	695b      	ldr	r3, [r3, #20]
 800bc2a:	4313      	orrs	r3, r2
 800bc2c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	68fa      	ldr	r2, [r7, #12]
 800bc32:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800bc34:	683b      	ldr	r3, [r7, #0]
 800bc36:	689a      	ldr	r2, [r3, #8]
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800bc3c:	683b      	ldr	r3, [r7, #0]
 800bc3e:	681a      	ldr	r2, [r3, #0]
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	4a16      	ldr	r2, [pc, #88]	@ (800bca0 <TIM_Base_SetConfig+0x12c>)
 800bc48:	4293      	cmp	r3, r2
 800bc4a:	d00f      	beq.n	800bc6c <TIM_Base_SetConfig+0xf8>
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	4a18      	ldr	r2, [pc, #96]	@ (800bcb0 <TIM_Base_SetConfig+0x13c>)
 800bc50:	4293      	cmp	r3, r2
 800bc52:	d00b      	beq.n	800bc6c <TIM_Base_SetConfig+0xf8>
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	4a17      	ldr	r2, [pc, #92]	@ (800bcb4 <TIM_Base_SetConfig+0x140>)
 800bc58:	4293      	cmp	r3, r2
 800bc5a:	d007      	beq.n	800bc6c <TIM_Base_SetConfig+0xf8>
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	4a16      	ldr	r2, [pc, #88]	@ (800bcb8 <TIM_Base_SetConfig+0x144>)
 800bc60:	4293      	cmp	r3, r2
 800bc62:	d003      	beq.n	800bc6c <TIM_Base_SetConfig+0xf8>
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	4a15      	ldr	r2, [pc, #84]	@ (800bcbc <TIM_Base_SetConfig+0x148>)
 800bc68:	4293      	cmp	r3, r2
 800bc6a:	d103      	bne.n	800bc74 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800bc6c:	683b      	ldr	r3, [r7, #0]
 800bc6e:	691a      	ldr	r2, [r3, #16]
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	2201      	movs	r2, #1
 800bc78:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	691b      	ldr	r3, [r3, #16]
 800bc7e:	f003 0301 	and.w	r3, r3, #1
 800bc82:	2b01      	cmp	r3, #1
 800bc84:	d105      	bne.n	800bc92 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	691b      	ldr	r3, [r3, #16]
 800bc8a:	f023 0201 	bic.w	r2, r3, #1
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	611a      	str	r2, [r3, #16]
  }
}
 800bc92:	bf00      	nop
 800bc94:	3714      	adds	r7, #20
 800bc96:	46bd      	mov	sp, r7
 800bc98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc9c:	4770      	bx	lr
 800bc9e:	bf00      	nop
 800bca0:	40010000 	.word	0x40010000
 800bca4:	40000400 	.word	0x40000400
 800bca8:	40000800 	.word	0x40000800
 800bcac:	40000c00 	.word	0x40000c00
 800bcb0:	40010400 	.word	0x40010400
 800bcb4:	40014000 	.word	0x40014000
 800bcb8:	40014400 	.word	0x40014400
 800bcbc:	40014800 	.word	0x40014800

0800bcc0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800bcc0:	b480      	push	{r7}
 800bcc2:	b087      	sub	sp, #28
 800bcc4:	af00      	add	r7, sp, #0
 800bcc6:	6078      	str	r0, [r7, #4]
 800bcc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	6a1b      	ldr	r3, [r3, #32]
 800bcce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	6a1b      	ldr	r3, [r3, #32]
 800bcd4:	f023 0201 	bic.w	r2, r3, #1
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	685b      	ldr	r3, [r3, #4]
 800bce0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	699b      	ldr	r3, [r3, #24]
 800bce6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800bce8:	68fa      	ldr	r2, [r7, #12]
 800bcea:	4b37      	ldr	r3, [pc, #220]	@ (800bdc8 <TIM_OC1_SetConfig+0x108>)
 800bcec:	4013      	ands	r3, r2
 800bcee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800bcf0:	68fb      	ldr	r3, [r7, #12]
 800bcf2:	f023 0303 	bic.w	r3, r3, #3
 800bcf6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bcf8:	683b      	ldr	r3, [r7, #0]
 800bcfa:	681b      	ldr	r3, [r3, #0]
 800bcfc:	68fa      	ldr	r2, [r7, #12]
 800bcfe:	4313      	orrs	r3, r2
 800bd00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800bd02:	697b      	ldr	r3, [r7, #20]
 800bd04:	f023 0302 	bic.w	r3, r3, #2
 800bd08:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800bd0a:	683b      	ldr	r3, [r7, #0]
 800bd0c:	689b      	ldr	r3, [r3, #8]
 800bd0e:	697a      	ldr	r2, [r7, #20]
 800bd10:	4313      	orrs	r3, r2
 800bd12:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	4a2d      	ldr	r2, [pc, #180]	@ (800bdcc <TIM_OC1_SetConfig+0x10c>)
 800bd18:	4293      	cmp	r3, r2
 800bd1a:	d00f      	beq.n	800bd3c <TIM_OC1_SetConfig+0x7c>
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	4a2c      	ldr	r2, [pc, #176]	@ (800bdd0 <TIM_OC1_SetConfig+0x110>)
 800bd20:	4293      	cmp	r3, r2
 800bd22:	d00b      	beq.n	800bd3c <TIM_OC1_SetConfig+0x7c>
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	4a2b      	ldr	r2, [pc, #172]	@ (800bdd4 <TIM_OC1_SetConfig+0x114>)
 800bd28:	4293      	cmp	r3, r2
 800bd2a:	d007      	beq.n	800bd3c <TIM_OC1_SetConfig+0x7c>
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	4a2a      	ldr	r2, [pc, #168]	@ (800bdd8 <TIM_OC1_SetConfig+0x118>)
 800bd30:	4293      	cmp	r3, r2
 800bd32:	d003      	beq.n	800bd3c <TIM_OC1_SetConfig+0x7c>
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	4a29      	ldr	r2, [pc, #164]	@ (800bddc <TIM_OC1_SetConfig+0x11c>)
 800bd38:	4293      	cmp	r3, r2
 800bd3a:	d10c      	bne.n	800bd56 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800bd3c:	697b      	ldr	r3, [r7, #20]
 800bd3e:	f023 0308 	bic.w	r3, r3, #8
 800bd42:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800bd44:	683b      	ldr	r3, [r7, #0]
 800bd46:	68db      	ldr	r3, [r3, #12]
 800bd48:	697a      	ldr	r2, [r7, #20]
 800bd4a:	4313      	orrs	r3, r2
 800bd4c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800bd4e:	697b      	ldr	r3, [r7, #20]
 800bd50:	f023 0304 	bic.w	r3, r3, #4
 800bd54:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	4a1c      	ldr	r2, [pc, #112]	@ (800bdcc <TIM_OC1_SetConfig+0x10c>)
 800bd5a:	4293      	cmp	r3, r2
 800bd5c:	d00f      	beq.n	800bd7e <TIM_OC1_SetConfig+0xbe>
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	4a1b      	ldr	r2, [pc, #108]	@ (800bdd0 <TIM_OC1_SetConfig+0x110>)
 800bd62:	4293      	cmp	r3, r2
 800bd64:	d00b      	beq.n	800bd7e <TIM_OC1_SetConfig+0xbe>
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	4a1a      	ldr	r2, [pc, #104]	@ (800bdd4 <TIM_OC1_SetConfig+0x114>)
 800bd6a:	4293      	cmp	r3, r2
 800bd6c:	d007      	beq.n	800bd7e <TIM_OC1_SetConfig+0xbe>
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	4a19      	ldr	r2, [pc, #100]	@ (800bdd8 <TIM_OC1_SetConfig+0x118>)
 800bd72:	4293      	cmp	r3, r2
 800bd74:	d003      	beq.n	800bd7e <TIM_OC1_SetConfig+0xbe>
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	4a18      	ldr	r2, [pc, #96]	@ (800bddc <TIM_OC1_SetConfig+0x11c>)
 800bd7a:	4293      	cmp	r3, r2
 800bd7c:	d111      	bne.n	800bda2 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800bd7e:	693b      	ldr	r3, [r7, #16]
 800bd80:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800bd84:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800bd86:	693b      	ldr	r3, [r7, #16]
 800bd88:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800bd8c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800bd8e:	683b      	ldr	r3, [r7, #0]
 800bd90:	695b      	ldr	r3, [r3, #20]
 800bd92:	693a      	ldr	r2, [r7, #16]
 800bd94:	4313      	orrs	r3, r2
 800bd96:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800bd98:	683b      	ldr	r3, [r7, #0]
 800bd9a:	699b      	ldr	r3, [r3, #24]
 800bd9c:	693a      	ldr	r2, [r7, #16]
 800bd9e:	4313      	orrs	r3, r2
 800bda0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	693a      	ldr	r2, [r7, #16]
 800bda6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	68fa      	ldr	r2, [r7, #12]
 800bdac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800bdae:	683b      	ldr	r3, [r7, #0]
 800bdb0:	685a      	ldr	r2, [r3, #4]
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	697a      	ldr	r2, [r7, #20]
 800bdba:	621a      	str	r2, [r3, #32]
}
 800bdbc:	bf00      	nop
 800bdbe:	371c      	adds	r7, #28
 800bdc0:	46bd      	mov	sp, r7
 800bdc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdc6:	4770      	bx	lr
 800bdc8:	fffeff8f 	.word	0xfffeff8f
 800bdcc:	40010000 	.word	0x40010000
 800bdd0:	40010400 	.word	0x40010400
 800bdd4:	40014000 	.word	0x40014000
 800bdd8:	40014400 	.word	0x40014400
 800bddc:	40014800 	.word	0x40014800

0800bde0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800bde0:	b480      	push	{r7}
 800bde2:	b087      	sub	sp, #28
 800bde4:	af00      	add	r7, sp, #0
 800bde6:	6078      	str	r0, [r7, #4]
 800bde8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	6a1b      	ldr	r3, [r3, #32]
 800bdee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	6a1b      	ldr	r3, [r3, #32]
 800bdf4:	f023 0210 	bic.w	r2, r3, #16
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	685b      	ldr	r3, [r3, #4]
 800be00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	699b      	ldr	r3, [r3, #24]
 800be06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800be08:	68fa      	ldr	r2, [r7, #12]
 800be0a:	4b34      	ldr	r3, [pc, #208]	@ (800bedc <TIM_OC2_SetConfig+0xfc>)
 800be0c:	4013      	ands	r3, r2
 800be0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800be10:	68fb      	ldr	r3, [r7, #12]
 800be12:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800be16:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800be18:	683b      	ldr	r3, [r7, #0]
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	021b      	lsls	r3, r3, #8
 800be1e:	68fa      	ldr	r2, [r7, #12]
 800be20:	4313      	orrs	r3, r2
 800be22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800be24:	697b      	ldr	r3, [r7, #20]
 800be26:	f023 0320 	bic.w	r3, r3, #32
 800be2a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800be2c:	683b      	ldr	r3, [r7, #0]
 800be2e:	689b      	ldr	r3, [r3, #8]
 800be30:	011b      	lsls	r3, r3, #4
 800be32:	697a      	ldr	r2, [r7, #20]
 800be34:	4313      	orrs	r3, r2
 800be36:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	4a29      	ldr	r2, [pc, #164]	@ (800bee0 <TIM_OC2_SetConfig+0x100>)
 800be3c:	4293      	cmp	r3, r2
 800be3e:	d003      	beq.n	800be48 <TIM_OC2_SetConfig+0x68>
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	4a28      	ldr	r2, [pc, #160]	@ (800bee4 <TIM_OC2_SetConfig+0x104>)
 800be44:	4293      	cmp	r3, r2
 800be46:	d10d      	bne.n	800be64 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800be48:	697b      	ldr	r3, [r7, #20]
 800be4a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800be4e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800be50:	683b      	ldr	r3, [r7, #0]
 800be52:	68db      	ldr	r3, [r3, #12]
 800be54:	011b      	lsls	r3, r3, #4
 800be56:	697a      	ldr	r2, [r7, #20]
 800be58:	4313      	orrs	r3, r2
 800be5a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800be5c:	697b      	ldr	r3, [r7, #20]
 800be5e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800be62:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	4a1e      	ldr	r2, [pc, #120]	@ (800bee0 <TIM_OC2_SetConfig+0x100>)
 800be68:	4293      	cmp	r3, r2
 800be6a:	d00f      	beq.n	800be8c <TIM_OC2_SetConfig+0xac>
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	4a1d      	ldr	r2, [pc, #116]	@ (800bee4 <TIM_OC2_SetConfig+0x104>)
 800be70:	4293      	cmp	r3, r2
 800be72:	d00b      	beq.n	800be8c <TIM_OC2_SetConfig+0xac>
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	4a1c      	ldr	r2, [pc, #112]	@ (800bee8 <TIM_OC2_SetConfig+0x108>)
 800be78:	4293      	cmp	r3, r2
 800be7a:	d007      	beq.n	800be8c <TIM_OC2_SetConfig+0xac>
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	4a1b      	ldr	r2, [pc, #108]	@ (800beec <TIM_OC2_SetConfig+0x10c>)
 800be80:	4293      	cmp	r3, r2
 800be82:	d003      	beq.n	800be8c <TIM_OC2_SetConfig+0xac>
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	4a1a      	ldr	r2, [pc, #104]	@ (800bef0 <TIM_OC2_SetConfig+0x110>)
 800be88:	4293      	cmp	r3, r2
 800be8a:	d113      	bne.n	800beb4 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800be8c:	693b      	ldr	r3, [r7, #16]
 800be8e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800be92:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800be94:	693b      	ldr	r3, [r7, #16]
 800be96:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800be9a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800be9c:	683b      	ldr	r3, [r7, #0]
 800be9e:	695b      	ldr	r3, [r3, #20]
 800bea0:	009b      	lsls	r3, r3, #2
 800bea2:	693a      	ldr	r2, [r7, #16]
 800bea4:	4313      	orrs	r3, r2
 800bea6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800bea8:	683b      	ldr	r3, [r7, #0]
 800beaa:	699b      	ldr	r3, [r3, #24]
 800beac:	009b      	lsls	r3, r3, #2
 800beae:	693a      	ldr	r2, [r7, #16]
 800beb0:	4313      	orrs	r3, r2
 800beb2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	693a      	ldr	r2, [r7, #16]
 800beb8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	68fa      	ldr	r2, [r7, #12]
 800bebe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800bec0:	683b      	ldr	r3, [r7, #0]
 800bec2:	685a      	ldr	r2, [r3, #4]
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	697a      	ldr	r2, [r7, #20]
 800becc:	621a      	str	r2, [r3, #32]
}
 800bece:	bf00      	nop
 800bed0:	371c      	adds	r7, #28
 800bed2:	46bd      	mov	sp, r7
 800bed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bed8:	4770      	bx	lr
 800beda:	bf00      	nop
 800bedc:	feff8fff 	.word	0xfeff8fff
 800bee0:	40010000 	.word	0x40010000
 800bee4:	40010400 	.word	0x40010400
 800bee8:	40014000 	.word	0x40014000
 800beec:	40014400 	.word	0x40014400
 800bef0:	40014800 	.word	0x40014800

0800bef4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800bef4:	b480      	push	{r7}
 800bef6:	b087      	sub	sp, #28
 800bef8:	af00      	add	r7, sp, #0
 800befa:	6078      	str	r0, [r7, #4]
 800befc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	6a1b      	ldr	r3, [r3, #32]
 800bf02:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	6a1b      	ldr	r3, [r3, #32]
 800bf08:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	685b      	ldr	r3, [r3, #4]
 800bf14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	69db      	ldr	r3, [r3, #28]
 800bf1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800bf1c:	68fa      	ldr	r2, [r7, #12]
 800bf1e:	4b33      	ldr	r3, [pc, #204]	@ (800bfec <TIM_OC3_SetConfig+0xf8>)
 800bf20:	4013      	ands	r3, r2
 800bf22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800bf24:	68fb      	ldr	r3, [r7, #12]
 800bf26:	f023 0303 	bic.w	r3, r3, #3
 800bf2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bf2c:	683b      	ldr	r3, [r7, #0]
 800bf2e:	681b      	ldr	r3, [r3, #0]
 800bf30:	68fa      	ldr	r2, [r7, #12]
 800bf32:	4313      	orrs	r3, r2
 800bf34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800bf36:	697b      	ldr	r3, [r7, #20]
 800bf38:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800bf3c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800bf3e:	683b      	ldr	r3, [r7, #0]
 800bf40:	689b      	ldr	r3, [r3, #8]
 800bf42:	021b      	lsls	r3, r3, #8
 800bf44:	697a      	ldr	r2, [r7, #20]
 800bf46:	4313      	orrs	r3, r2
 800bf48:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	4a28      	ldr	r2, [pc, #160]	@ (800bff0 <TIM_OC3_SetConfig+0xfc>)
 800bf4e:	4293      	cmp	r3, r2
 800bf50:	d003      	beq.n	800bf5a <TIM_OC3_SetConfig+0x66>
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	4a27      	ldr	r2, [pc, #156]	@ (800bff4 <TIM_OC3_SetConfig+0x100>)
 800bf56:	4293      	cmp	r3, r2
 800bf58:	d10d      	bne.n	800bf76 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800bf5a:	697b      	ldr	r3, [r7, #20]
 800bf5c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800bf60:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800bf62:	683b      	ldr	r3, [r7, #0]
 800bf64:	68db      	ldr	r3, [r3, #12]
 800bf66:	021b      	lsls	r3, r3, #8
 800bf68:	697a      	ldr	r2, [r7, #20]
 800bf6a:	4313      	orrs	r3, r2
 800bf6c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800bf6e:	697b      	ldr	r3, [r7, #20]
 800bf70:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800bf74:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	4a1d      	ldr	r2, [pc, #116]	@ (800bff0 <TIM_OC3_SetConfig+0xfc>)
 800bf7a:	4293      	cmp	r3, r2
 800bf7c:	d00f      	beq.n	800bf9e <TIM_OC3_SetConfig+0xaa>
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	4a1c      	ldr	r2, [pc, #112]	@ (800bff4 <TIM_OC3_SetConfig+0x100>)
 800bf82:	4293      	cmp	r3, r2
 800bf84:	d00b      	beq.n	800bf9e <TIM_OC3_SetConfig+0xaa>
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	4a1b      	ldr	r2, [pc, #108]	@ (800bff8 <TIM_OC3_SetConfig+0x104>)
 800bf8a:	4293      	cmp	r3, r2
 800bf8c:	d007      	beq.n	800bf9e <TIM_OC3_SetConfig+0xaa>
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	4a1a      	ldr	r2, [pc, #104]	@ (800bffc <TIM_OC3_SetConfig+0x108>)
 800bf92:	4293      	cmp	r3, r2
 800bf94:	d003      	beq.n	800bf9e <TIM_OC3_SetConfig+0xaa>
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	4a19      	ldr	r2, [pc, #100]	@ (800c000 <TIM_OC3_SetConfig+0x10c>)
 800bf9a:	4293      	cmp	r3, r2
 800bf9c:	d113      	bne.n	800bfc6 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800bf9e:	693b      	ldr	r3, [r7, #16]
 800bfa0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800bfa4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800bfa6:	693b      	ldr	r3, [r7, #16]
 800bfa8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800bfac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800bfae:	683b      	ldr	r3, [r7, #0]
 800bfb0:	695b      	ldr	r3, [r3, #20]
 800bfb2:	011b      	lsls	r3, r3, #4
 800bfb4:	693a      	ldr	r2, [r7, #16]
 800bfb6:	4313      	orrs	r3, r2
 800bfb8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800bfba:	683b      	ldr	r3, [r7, #0]
 800bfbc:	699b      	ldr	r3, [r3, #24]
 800bfbe:	011b      	lsls	r3, r3, #4
 800bfc0:	693a      	ldr	r2, [r7, #16]
 800bfc2:	4313      	orrs	r3, r2
 800bfc4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	693a      	ldr	r2, [r7, #16]
 800bfca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	68fa      	ldr	r2, [r7, #12]
 800bfd0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800bfd2:	683b      	ldr	r3, [r7, #0]
 800bfd4:	685a      	ldr	r2, [r3, #4]
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	697a      	ldr	r2, [r7, #20]
 800bfde:	621a      	str	r2, [r3, #32]
}
 800bfe0:	bf00      	nop
 800bfe2:	371c      	adds	r7, #28
 800bfe4:	46bd      	mov	sp, r7
 800bfe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfea:	4770      	bx	lr
 800bfec:	fffeff8f 	.word	0xfffeff8f
 800bff0:	40010000 	.word	0x40010000
 800bff4:	40010400 	.word	0x40010400
 800bff8:	40014000 	.word	0x40014000
 800bffc:	40014400 	.word	0x40014400
 800c000:	40014800 	.word	0x40014800

0800c004 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c004:	b480      	push	{r7}
 800c006:	b087      	sub	sp, #28
 800c008:	af00      	add	r7, sp, #0
 800c00a:	6078      	str	r0, [r7, #4]
 800c00c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	6a1b      	ldr	r3, [r3, #32]
 800c012:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	6a1b      	ldr	r3, [r3, #32]
 800c018:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	685b      	ldr	r3, [r3, #4]
 800c024:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	69db      	ldr	r3, [r3, #28]
 800c02a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800c02c:	68fa      	ldr	r2, [r7, #12]
 800c02e:	4b24      	ldr	r3, [pc, #144]	@ (800c0c0 <TIM_OC4_SetConfig+0xbc>)
 800c030:	4013      	ands	r3, r2
 800c032:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c034:	68fb      	ldr	r3, [r7, #12]
 800c036:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c03a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c03c:	683b      	ldr	r3, [r7, #0]
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	021b      	lsls	r3, r3, #8
 800c042:	68fa      	ldr	r2, [r7, #12]
 800c044:	4313      	orrs	r3, r2
 800c046:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c048:	693b      	ldr	r3, [r7, #16]
 800c04a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800c04e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c050:	683b      	ldr	r3, [r7, #0]
 800c052:	689b      	ldr	r3, [r3, #8]
 800c054:	031b      	lsls	r3, r3, #12
 800c056:	693a      	ldr	r2, [r7, #16]
 800c058:	4313      	orrs	r3, r2
 800c05a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	4a19      	ldr	r2, [pc, #100]	@ (800c0c4 <TIM_OC4_SetConfig+0xc0>)
 800c060:	4293      	cmp	r3, r2
 800c062:	d00f      	beq.n	800c084 <TIM_OC4_SetConfig+0x80>
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	4a18      	ldr	r2, [pc, #96]	@ (800c0c8 <TIM_OC4_SetConfig+0xc4>)
 800c068:	4293      	cmp	r3, r2
 800c06a:	d00b      	beq.n	800c084 <TIM_OC4_SetConfig+0x80>
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	4a17      	ldr	r2, [pc, #92]	@ (800c0cc <TIM_OC4_SetConfig+0xc8>)
 800c070:	4293      	cmp	r3, r2
 800c072:	d007      	beq.n	800c084 <TIM_OC4_SetConfig+0x80>
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	4a16      	ldr	r2, [pc, #88]	@ (800c0d0 <TIM_OC4_SetConfig+0xcc>)
 800c078:	4293      	cmp	r3, r2
 800c07a:	d003      	beq.n	800c084 <TIM_OC4_SetConfig+0x80>
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	4a15      	ldr	r2, [pc, #84]	@ (800c0d4 <TIM_OC4_SetConfig+0xd0>)
 800c080:	4293      	cmp	r3, r2
 800c082:	d109      	bne.n	800c098 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800c084:	697b      	ldr	r3, [r7, #20]
 800c086:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c08a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800c08c:	683b      	ldr	r3, [r7, #0]
 800c08e:	695b      	ldr	r3, [r3, #20]
 800c090:	019b      	lsls	r3, r3, #6
 800c092:	697a      	ldr	r2, [r7, #20]
 800c094:	4313      	orrs	r3, r2
 800c096:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	697a      	ldr	r2, [r7, #20]
 800c09c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	68fa      	ldr	r2, [r7, #12]
 800c0a2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800c0a4:	683b      	ldr	r3, [r7, #0]
 800c0a6:	685a      	ldr	r2, [r3, #4]
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	693a      	ldr	r2, [r7, #16]
 800c0b0:	621a      	str	r2, [r3, #32]
}
 800c0b2:	bf00      	nop
 800c0b4:	371c      	adds	r7, #28
 800c0b6:	46bd      	mov	sp, r7
 800c0b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0bc:	4770      	bx	lr
 800c0be:	bf00      	nop
 800c0c0:	feff8fff 	.word	0xfeff8fff
 800c0c4:	40010000 	.word	0x40010000
 800c0c8:	40010400 	.word	0x40010400
 800c0cc:	40014000 	.word	0x40014000
 800c0d0:	40014400 	.word	0x40014400
 800c0d4:	40014800 	.word	0x40014800

0800c0d8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800c0d8:	b480      	push	{r7}
 800c0da:	b087      	sub	sp, #28
 800c0dc:	af00      	add	r7, sp, #0
 800c0de:	6078      	str	r0, [r7, #4]
 800c0e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	6a1b      	ldr	r3, [r3, #32]
 800c0e6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	6a1b      	ldr	r3, [r3, #32]
 800c0ec:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	685b      	ldr	r3, [r3, #4]
 800c0f8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c0fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800c100:	68fa      	ldr	r2, [r7, #12]
 800c102:	4b21      	ldr	r3, [pc, #132]	@ (800c188 <TIM_OC5_SetConfig+0xb0>)
 800c104:	4013      	ands	r3, r2
 800c106:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c108:	683b      	ldr	r3, [r7, #0]
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	68fa      	ldr	r2, [r7, #12]
 800c10e:	4313      	orrs	r3, r2
 800c110:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800c112:	693b      	ldr	r3, [r7, #16]
 800c114:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800c118:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800c11a:	683b      	ldr	r3, [r7, #0]
 800c11c:	689b      	ldr	r3, [r3, #8]
 800c11e:	041b      	lsls	r3, r3, #16
 800c120:	693a      	ldr	r2, [r7, #16]
 800c122:	4313      	orrs	r3, r2
 800c124:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	4a18      	ldr	r2, [pc, #96]	@ (800c18c <TIM_OC5_SetConfig+0xb4>)
 800c12a:	4293      	cmp	r3, r2
 800c12c:	d00f      	beq.n	800c14e <TIM_OC5_SetConfig+0x76>
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	4a17      	ldr	r2, [pc, #92]	@ (800c190 <TIM_OC5_SetConfig+0xb8>)
 800c132:	4293      	cmp	r3, r2
 800c134:	d00b      	beq.n	800c14e <TIM_OC5_SetConfig+0x76>
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	4a16      	ldr	r2, [pc, #88]	@ (800c194 <TIM_OC5_SetConfig+0xbc>)
 800c13a:	4293      	cmp	r3, r2
 800c13c:	d007      	beq.n	800c14e <TIM_OC5_SetConfig+0x76>
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	4a15      	ldr	r2, [pc, #84]	@ (800c198 <TIM_OC5_SetConfig+0xc0>)
 800c142:	4293      	cmp	r3, r2
 800c144:	d003      	beq.n	800c14e <TIM_OC5_SetConfig+0x76>
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	4a14      	ldr	r2, [pc, #80]	@ (800c19c <TIM_OC5_SetConfig+0xc4>)
 800c14a:	4293      	cmp	r3, r2
 800c14c:	d109      	bne.n	800c162 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800c14e:	697b      	ldr	r3, [r7, #20]
 800c150:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800c154:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800c156:	683b      	ldr	r3, [r7, #0]
 800c158:	695b      	ldr	r3, [r3, #20]
 800c15a:	021b      	lsls	r3, r3, #8
 800c15c:	697a      	ldr	r2, [r7, #20]
 800c15e:	4313      	orrs	r3, r2
 800c160:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	697a      	ldr	r2, [r7, #20]
 800c166:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	68fa      	ldr	r2, [r7, #12]
 800c16c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800c16e:	683b      	ldr	r3, [r7, #0]
 800c170:	685a      	ldr	r2, [r3, #4]
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	693a      	ldr	r2, [r7, #16]
 800c17a:	621a      	str	r2, [r3, #32]
}
 800c17c:	bf00      	nop
 800c17e:	371c      	adds	r7, #28
 800c180:	46bd      	mov	sp, r7
 800c182:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c186:	4770      	bx	lr
 800c188:	fffeff8f 	.word	0xfffeff8f
 800c18c:	40010000 	.word	0x40010000
 800c190:	40010400 	.word	0x40010400
 800c194:	40014000 	.word	0x40014000
 800c198:	40014400 	.word	0x40014400
 800c19c:	40014800 	.word	0x40014800

0800c1a0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800c1a0:	b480      	push	{r7}
 800c1a2:	b087      	sub	sp, #28
 800c1a4:	af00      	add	r7, sp, #0
 800c1a6:	6078      	str	r0, [r7, #4]
 800c1a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	6a1b      	ldr	r3, [r3, #32]
 800c1ae:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	6a1b      	ldr	r3, [r3, #32]
 800c1b4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	685b      	ldr	r3, [r3, #4]
 800c1c0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c1c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800c1c8:	68fa      	ldr	r2, [r7, #12]
 800c1ca:	4b22      	ldr	r3, [pc, #136]	@ (800c254 <TIM_OC6_SetConfig+0xb4>)
 800c1cc:	4013      	ands	r3, r2
 800c1ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c1d0:	683b      	ldr	r3, [r7, #0]
 800c1d2:	681b      	ldr	r3, [r3, #0]
 800c1d4:	021b      	lsls	r3, r3, #8
 800c1d6:	68fa      	ldr	r2, [r7, #12]
 800c1d8:	4313      	orrs	r3, r2
 800c1da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800c1dc:	693b      	ldr	r3, [r7, #16]
 800c1de:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800c1e2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800c1e4:	683b      	ldr	r3, [r7, #0]
 800c1e6:	689b      	ldr	r3, [r3, #8]
 800c1e8:	051b      	lsls	r3, r3, #20
 800c1ea:	693a      	ldr	r2, [r7, #16]
 800c1ec:	4313      	orrs	r3, r2
 800c1ee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	4a19      	ldr	r2, [pc, #100]	@ (800c258 <TIM_OC6_SetConfig+0xb8>)
 800c1f4:	4293      	cmp	r3, r2
 800c1f6:	d00f      	beq.n	800c218 <TIM_OC6_SetConfig+0x78>
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	4a18      	ldr	r2, [pc, #96]	@ (800c25c <TIM_OC6_SetConfig+0xbc>)
 800c1fc:	4293      	cmp	r3, r2
 800c1fe:	d00b      	beq.n	800c218 <TIM_OC6_SetConfig+0x78>
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	4a17      	ldr	r2, [pc, #92]	@ (800c260 <TIM_OC6_SetConfig+0xc0>)
 800c204:	4293      	cmp	r3, r2
 800c206:	d007      	beq.n	800c218 <TIM_OC6_SetConfig+0x78>
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	4a16      	ldr	r2, [pc, #88]	@ (800c264 <TIM_OC6_SetConfig+0xc4>)
 800c20c:	4293      	cmp	r3, r2
 800c20e:	d003      	beq.n	800c218 <TIM_OC6_SetConfig+0x78>
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	4a15      	ldr	r2, [pc, #84]	@ (800c268 <TIM_OC6_SetConfig+0xc8>)
 800c214:	4293      	cmp	r3, r2
 800c216:	d109      	bne.n	800c22c <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800c218:	697b      	ldr	r3, [r7, #20]
 800c21a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800c21e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800c220:	683b      	ldr	r3, [r7, #0]
 800c222:	695b      	ldr	r3, [r3, #20]
 800c224:	029b      	lsls	r3, r3, #10
 800c226:	697a      	ldr	r2, [r7, #20]
 800c228:	4313      	orrs	r3, r2
 800c22a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	697a      	ldr	r2, [r7, #20]
 800c230:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	68fa      	ldr	r2, [r7, #12]
 800c236:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800c238:	683b      	ldr	r3, [r7, #0]
 800c23a:	685a      	ldr	r2, [r3, #4]
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	693a      	ldr	r2, [r7, #16]
 800c244:	621a      	str	r2, [r3, #32]
}
 800c246:	bf00      	nop
 800c248:	371c      	adds	r7, #28
 800c24a:	46bd      	mov	sp, r7
 800c24c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c250:	4770      	bx	lr
 800c252:	bf00      	nop
 800c254:	feff8fff 	.word	0xfeff8fff
 800c258:	40010000 	.word	0x40010000
 800c25c:	40010400 	.word	0x40010400
 800c260:	40014000 	.word	0x40014000
 800c264:	40014400 	.word	0x40014400
 800c268:	40014800 	.word	0x40014800

0800c26c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c26c:	b480      	push	{r7}
 800c26e:	b087      	sub	sp, #28
 800c270:	af00      	add	r7, sp, #0
 800c272:	60f8      	str	r0, [r7, #12]
 800c274:	60b9      	str	r1, [r7, #8]
 800c276:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c278:	68fb      	ldr	r3, [r7, #12]
 800c27a:	6a1b      	ldr	r3, [r3, #32]
 800c27c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c27e:	68fb      	ldr	r3, [r7, #12]
 800c280:	6a1b      	ldr	r3, [r3, #32]
 800c282:	f023 0201 	bic.w	r2, r3, #1
 800c286:	68fb      	ldr	r3, [r7, #12]
 800c288:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c28a:	68fb      	ldr	r3, [r7, #12]
 800c28c:	699b      	ldr	r3, [r3, #24]
 800c28e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c290:	693b      	ldr	r3, [r7, #16]
 800c292:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800c296:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	011b      	lsls	r3, r3, #4
 800c29c:	693a      	ldr	r2, [r7, #16]
 800c29e:	4313      	orrs	r3, r2
 800c2a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c2a2:	697b      	ldr	r3, [r7, #20]
 800c2a4:	f023 030a 	bic.w	r3, r3, #10
 800c2a8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c2aa:	697a      	ldr	r2, [r7, #20]
 800c2ac:	68bb      	ldr	r3, [r7, #8]
 800c2ae:	4313      	orrs	r3, r2
 800c2b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c2b2:	68fb      	ldr	r3, [r7, #12]
 800c2b4:	693a      	ldr	r2, [r7, #16]
 800c2b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c2b8:	68fb      	ldr	r3, [r7, #12]
 800c2ba:	697a      	ldr	r2, [r7, #20]
 800c2bc:	621a      	str	r2, [r3, #32]
}
 800c2be:	bf00      	nop
 800c2c0:	371c      	adds	r7, #28
 800c2c2:	46bd      	mov	sp, r7
 800c2c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2c8:	4770      	bx	lr

0800c2ca <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c2ca:	b480      	push	{r7}
 800c2cc:	b087      	sub	sp, #28
 800c2ce:	af00      	add	r7, sp, #0
 800c2d0:	60f8      	str	r0, [r7, #12]
 800c2d2:	60b9      	str	r1, [r7, #8]
 800c2d4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800c2d6:	68fb      	ldr	r3, [r7, #12]
 800c2d8:	6a1b      	ldr	r3, [r3, #32]
 800c2da:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c2dc:	68fb      	ldr	r3, [r7, #12]
 800c2de:	6a1b      	ldr	r3, [r3, #32]
 800c2e0:	f023 0210 	bic.w	r2, r3, #16
 800c2e4:	68fb      	ldr	r3, [r7, #12]
 800c2e6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c2e8:	68fb      	ldr	r3, [r7, #12]
 800c2ea:	699b      	ldr	r3, [r3, #24]
 800c2ec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c2ee:	693b      	ldr	r3, [r7, #16]
 800c2f0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800c2f4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	031b      	lsls	r3, r3, #12
 800c2fa:	693a      	ldr	r2, [r7, #16]
 800c2fc:	4313      	orrs	r3, r2
 800c2fe:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c300:	697b      	ldr	r3, [r7, #20]
 800c302:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800c306:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c308:	68bb      	ldr	r3, [r7, #8]
 800c30a:	011b      	lsls	r3, r3, #4
 800c30c:	697a      	ldr	r2, [r7, #20]
 800c30e:	4313      	orrs	r3, r2
 800c310:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c312:	68fb      	ldr	r3, [r7, #12]
 800c314:	693a      	ldr	r2, [r7, #16]
 800c316:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c318:	68fb      	ldr	r3, [r7, #12]
 800c31a:	697a      	ldr	r2, [r7, #20]
 800c31c:	621a      	str	r2, [r3, #32]
}
 800c31e:	bf00      	nop
 800c320:	371c      	adds	r7, #28
 800c322:	46bd      	mov	sp, r7
 800c324:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c328:	4770      	bx	lr
	...

0800c32c <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c32c:	b480      	push	{r7}
 800c32e:	b085      	sub	sp, #20
 800c330:	af00      	add	r7, sp, #0
 800c332:	6078      	str	r0, [r7, #4]
 800c334:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	689b      	ldr	r3, [r3, #8]
 800c33a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c33c:	68fa      	ldr	r2, [r7, #12]
 800c33e:	4b09      	ldr	r3, [pc, #36]	@ (800c364 <TIM_ITRx_SetConfig+0x38>)
 800c340:	4013      	ands	r3, r2
 800c342:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c344:	683a      	ldr	r2, [r7, #0]
 800c346:	68fb      	ldr	r3, [r7, #12]
 800c348:	4313      	orrs	r3, r2
 800c34a:	f043 0307 	orr.w	r3, r3, #7
 800c34e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	68fa      	ldr	r2, [r7, #12]
 800c354:	609a      	str	r2, [r3, #8]
}
 800c356:	bf00      	nop
 800c358:	3714      	adds	r7, #20
 800c35a:	46bd      	mov	sp, r7
 800c35c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c360:	4770      	bx	lr
 800c362:	bf00      	nop
 800c364:	ffcfff8f 	.word	0xffcfff8f

0800c368 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c368:	b480      	push	{r7}
 800c36a:	b087      	sub	sp, #28
 800c36c:	af00      	add	r7, sp, #0
 800c36e:	60f8      	str	r0, [r7, #12]
 800c370:	60b9      	str	r1, [r7, #8]
 800c372:	607a      	str	r2, [r7, #4]
 800c374:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c376:	68fb      	ldr	r3, [r7, #12]
 800c378:	689b      	ldr	r3, [r3, #8]
 800c37a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c37c:	697b      	ldr	r3, [r7, #20]
 800c37e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800c382:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c384:	683b      	ldr	r3, [r7, #0]
 800c386:	021a      	lsls	r2, r3, #8
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	431a      	orrs	r2, r3
 800c38c:	68bb      	ldr	r3, [r7, #8]
 800c38e:	4313      	orrs	r3, r2
 800c390:	697a      	ldr	r2, [r7, #20]
 800c392:	4313      	orrs	r3, r2
 800c394:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c396:	68fb      	ldr	r3, [r7, #12]
 800c398:	697a      	ldr	r2, [r7, #20]
 800c39a:	609a      	str	r2, [r3, #8]
}
 800c39c:	bf00      	nop
 800c39e:	371c      	adds	r7, #28
 800c3a0:	46bd      	mov	sp, r7
 800c3a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3a6:	4770      	bx	lr

0800c3a8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800c3a8:	b480      	push	{r7}
 800c3aa:	b087      	sub	sp, #28
 800c3ac:	af00      	add	r7, sp, #0
 800c3ae:	60f8      	str	r0, [r7, #12]
 800c3b0:	60b9      	str	r1, [r7, #8]
 800c3b2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800c3b4:	68bb      	ldr	r3, [r7, #8]
 800c3b6:	f003 031f 	and.w	r3, r3, #31
 800c3ba:	2201      	movs	r2, #1
 800c3bc:	fa02 f303 	lsl.w	r3, r2, r3
 800c3c0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800c3c2:	68fb      	ldr	r3, [r7, #12]
 800c3c4:	6a1a      	ldr	r2, [r3, #32]
 800c3c6:	697b      	ldr	r3, [r7, #20]
 800c3c8:	43db      	mvns	r3, r3
 800c3ca:	401a      	ands	r2, r3
 800c3cc:	68fb      	ldr	r3, [r7, #12]
 800c3ce:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800c3d0:	68fb      	ldr	r3, [r7, #12]
 800c3d2:	6a1a      	ldr	r2, [r3, #32]
 800c3d4:	68bb      	ldr	r3, [r7, #8]
 800c3d6:	f003 031f 	and.w	r3, r3, #31
 800c3da:	6879      	ldr	r1, [r7, #4]
 800c3dc:	fa01 f303 	lsl.w	r3, r1, r3
 800c3e0:	431a      	orrs	r2, r3
 800c3e2:	68fb      	ldr	r3, [r7, #12]
 800c3e4:	621a      	str	r2, [r3, #32]
}
 800c3e6:	bf00      	nop
 800c3e8:	371c      	adds	r7, #28
 800c3ea:	46bd      	mov	sp, r7
 800c3ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3f0:	4770      	bx	lr
	...

0800c3f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c3f4:	b480      	push	{r7}
 800c3f6:	b085      	sub	sp, #20
 800c3f8:	af00      	add	r7, sp, #0
 800c3fa:	6078      	str	r0, [r7, #4]
 800c3fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c404:	2b01      	cmp	r3, #1
 800c406:	d101      	bne.n	800c40c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c408:	2302      	movs	r3, #2
 800c40a:	e06d      	b.n	800c4e8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	2201      	movs	r2, #1
 800c410:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	2202      	movs	r2, #2
 800c418:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	681b      	ldr	r3, [r3, #0]
 800c420:	685b      	ldr	r3, [r3, #4]
 800c422:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	681b      	ldr	r3, [r3, #0]
 800c428:	689b      	ldr	r3, [r3, #8]
 800c42a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	681b      	ldr	r3, [r3, #0]
 800c430:	4a30      	ldr	r2, [pc, #192]	@ (800c4f4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800c432:	4293      	cmp	r3, r2
 800c434:	d004      	beq.n	800c440 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	681b      	ldr	r3, [r3, #0]
 800c43a:	4a2f      	ldr	r2, [pc, #188]	@ (800c4f8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800c43c:	4293      	cmp	r3, r2
 800c43e:	d108      	bne.n	800c452 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800c440:	68fb      	ldr	r3, [r7, #12]
 800c442:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800c446:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800c448:	683b      	ldr	r3, [r7, #0]
 800c44a:	685b      	ldr	r3, [r3, #4]
 800c44c:	68fa      	ldr	r2, [r7, #12]
 800c44e:	4313      	orrs	r3, r2
 800c450:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c452:	68fb      	ldr	r3, [r7, #12]
 800c454:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c458:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c45a:	683b      	ldr	r3, [r7, #0]
 800c45c:	681b      	ldr	r3, [r3, #0]
 800c45e:	68fa      	ldr	r2, [r7, #12]
 800c460:	4313      	orrs	r3, r2
 800c462:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	681b      	ldr	r3, [r3, #0]
 800c468:	68fa      	ldr	r2, [r7, #12]
 800c46a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	4a20      	ldr	r2, [pc, #128]	@ (800c4f4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800c472:	4293      	cmp	r3, r2
 800c474:	d022      	beq.n	800c4bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	681b      	ldr	r3, [r3, #0]
 800c47a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c47e:	d01d      	beq.n	800c4bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	681b      	ldr	r3, [r3, #0]
 800c484:	4a1d      	ldr	r2, [pc, #116]	@ (800c4fc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800c486:	4293      	cmp	r3, r2
 800c488:	d018      	beq.n	800c4bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	681b      	ldr	r3, [r3, #0]
 800c48e:	4a1c      	ldr	r2, [pc, #112]	@ (800c500 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800c490:	4293      	cmp	r3, r2
 800c492:	d013      	beq.n	800c4bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	681b      	ldr	r3, [r3, #0]
 800c498:	4a1a      	ldr	r2, [pc, #104]	@ (800c504 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800c49a:	4293      	cmp	r3, r2
 800c49c:	d00e      	beq.n	800c4bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	681b      	ldr	r3, [r3, #0]
 800c4a2:	4a15      	ldr	r2, [pc, #84]	@ (800c4f8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800c4a4:	4293      	cmp	r3, r2
 800c4a6:	d009      	beq.n	800c4bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	681b      	ldr	r3, [r3, #0]
 800c4ac:	4a16      	ldr	r2, [pc, #88]	@ (800c508 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800c4ae:	4293      	cmp	r3, r2
 800c4b0:	d004      	beq.n	800c4bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	681b      	ldr	r3, [r3, #0]
 800c4b6:	4a15      	ldr	r2, [pc, #84]	@ (800c50c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800c4b8:	4293      	cmp	r3, r2
 800c4ba:	d10c      	bne.n	800c4d6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c4bc:	68bb      	ldr	r3, [r7, #8]
 800c4be:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c4c2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c4c4:	683b      	ldr	r3, [r7, #0]
 800c4c6:	689b      	ldr	r3, [r3, #8]
 800c4c8:	68ba      	ldr	r2, [r7, #8]
 800c4ca:	4313      	orrs	r3, r2
 800c4cc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	681b      	ldr	r3, [r3, #0]
 800c4d2:	68ba      	ldr	r2, [r7, #8]
 800c4d4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	2201      	movs	r2, #1
 800c4da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	2200      	movs	r2, #0
 800c4e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800c4e6:	2300      	movs	r3, #0
}
 800c4e8:	4618      	mov	r0, r3
 800c4ea:	3714      	adds	r7, #20
 800c4ec:	46bd      	mov	sp, r7
 800c4ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4f2:	4770      	bx	lr
 800c4f4:	40010000 	.word	0x40010000
 800c4f8:	40010400 	.word	0x40010400
 800c4fc:	40000400 	.word	0x40000400
 800c500:	40000800 	.word	0x40000800
 800c504:	40000c00 	.word	0x40000c00
 800c508:	40001800 	.word	0x40001800
 800c50c:	40014000 	.word	0x40014000

0800c510 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c510:	b580      	push	{r7, lr}
 800c512:	b082      	sub	sp, #8
 800c514:	af00      	add	r7, sp, #0
 800c516:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	2b00      	cmp	r3, #0
 800c51c:	d101      	bne.n	800c522 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c51e:	2301      	movs	r3, #1
 800c520:	e042      	b.n	800c5a8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c528:	2b00      	cmp	r3, #0
 800c52a:	d106      	bne.n	800c53a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	2200      	movs	r2, #0
 800c530:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c534:	6878      	ldr	r0, [r7, #4]
 800c536:	f7f6 f9ed 	bl	8002914 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	2224      	movs	r2, #36	@ 0x24
 800c53e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	681b      	ldr	r3, [r3, #0]
 800c546:	681a      	ldr	r2, [r3, #0]
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	f022 0201 	bic.w	r2, r2, #1
 800c550:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c556:	2b00      	cmp	r3, #0
 800c558:	d002      	beq.n	800c560 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800c55a:	6878      	ldr	r0, [r7, #4]
 800c55c:	f001 fa44 	bl	800d9e8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c560:	6878      	ldr	r0, [r7, #4]
 800c562:	f000 fcd9 	bl	800cf18 <UART_SetConfig>
 800c566:	4603      	mov	r3, r0
 800c568:	2b01      	cmp	r3, #1
 800c56a:	d101      	bne.n	800c570 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800c56c:	2301      	movs	r3, #1
 800c56e:	e01b      	b.n	800c5a8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	681b      	ldr	r3, [r3, #0]
 800c574:	685a      	ldr	r2, [r3, #4]
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	681b      	ldr	r3, [r3, #0]
 800c57a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800c57e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	681b      	ldr	r3, [r3, #0]
 800c584:	689a      	ldr	r2, [r3, #8]
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	681b      	ldr	r3, [r3, #0]
 800c58a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800c58e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	681b      	ldr	r3, [r3, #0]
 800c594:	681a      	ldr	r2, [r3, #0]
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	681b      	ldr	r3, [r3, #0]
 800c59a:	f042 0201 	orr.w	r2, r2, #1
 800c59e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c5a0:	6878      	ldr	r0, [r7, #4]
 800c5a2:	f001 fac3 	bl	800db2c <UART_CheckIdleState>
 800c5a6:	4603      	mov	r3, r0
}
 800c5a8:	4618      	mov	r0, r3
 800c5aa:	3708      	adds	r7, #8
 800c5ac:	46bd      	mov	sp, r7
 800c5ae:	bd80      	pop	{r7, pc}

0800c5b0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c5b0:	b580      	push	{r7, lr}
 800c5b2:	b08a      	sub	sp, #40	@ 0x28
 800c5b4:	af02      	add	r7, sp, #8
 800c5b6:	60f8      	str	r0, [r7, #12]
 800c5b8:	60b9      	str	r1, [r7, #8]
 800c5ba:	603b      	str	r3, [r7, #0]
 800c5bc:	4613      	mov	r3, r2
 800c5be:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c5c0:	68fb      	ldr	r3, [r7, #12]
 800c5c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c5c6:	2b20      	cmp	r3, #32
 800c5c8:	d17b      	bne.n	800c6c2 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800c5ca:	68bb      	ldr	r3, [r7, #8]
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	d002      	beq.n	800c5d6 <HAL_UART_Transmit+0x26>
 800c5d0:	88fb      	ldrh	r3, [r7, #6]
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	d101      	bne.n	800c5da <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800c5d6:	2301      	movs	r3, #1
 800c5d8:	e074      	b.n	800c6c4 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c5da:	68fb      	ldr	r3, [r7, #12]
 800c5dc:	2200      	movs	r2, #0
 800c5de:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c5e2:	68fb      	ldr	r3, [r7, #12]
 800c5e4:	2221      	movs	r2, #33	@ 0x21
 800c5e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800c5ea:	f7f6 fab5 	bl	8002b58 <HAL_GetTick>
 800c5ee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800c5f0:	68fb      	ldr	r3, [r7, #12]
 800c5f2:	88fa      	ldrh	r2, [r7, #6]
 800c5f4:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800c5f8:	68fb      	ldr	r3, [r7, #12]
 800c5fa:	88fa      	ldrh	r2, [r7, #6]
 800c5fc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c600:	68fb      	ldr	r3, [r7, #12]
 800c602:	689b      	ldr	r3, [r3, #8]
 800c604:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c608:	d108      	bne.n	800c61c <HAL_UART_Transmit+0x6c>
 800c60a:	68fb      	ldr	r3, [r7, #12]
 800c60c:	691b      	ldr	r3, [r3, #16]
 800c60e:	2b00      	cmp	r3, #0
 800c610:	d104      	bne.n	800c61c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800c612:	2300      	movs	r3, #0
 800c614:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800c616:	68bb      	ldr	r3, [r7, #8]
 800c618:	61bb      	str	r3, [r7, #24]
 800c61a:	e003      	b.n	800c624 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800c61c:	68bb      	ldr	r3, [r7, #8]
 800c61e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800c620:	2300      	movs	r3, #0
 800c622:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800c624:	e030      	b.n	800c688 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800c626:	683b      	ldr	r3, [r7, #0]
 800c628:	9300      	str	r3, [sp, #0]
 800c62a:	697b      	ldr	r3, [r7, #20]
 800c62c:	2200      	movs	r2, #0
 800c62e:	2180      	movs	r1, #128	@ 0x80
 800c630:	68f8      	ldr	r0, [r7, #12]
 800c632:	f001 fb25 	bl	800dc80 <UART_WaitOnFlagUntilTimeout>
 800c636:	4603      	mov	r3, r0
 800c638:	2b00      	cmp	r3, #0
 800c63a:	d005      	beq.n	800c648 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800c63c:	68fb      	ldr	r3, [r7, #12]
 800c63e:	2220      	movs	r2, #32
 800c640:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800c644:	2303      	movs	r3, #3
 800c646:	e03d      	b.n	800c6c4 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800c648:	69fb      	ldr	r3, [r7, #28]
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	d10b      	bne.n	800c666 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800c64e:	69bb      	ldr	r3, [r7, #24]
 800c650:	881b      	ldrh	r3, [r3, #0]
 800c652:	461a      	mov	r2, r3
 800c654:	68fb      	ldr	r3, [r7, #12]
 800c656:	681b      	ldr	r3, [r3, #0]
 800c658:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c65c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800c65e:	69bb      	ldr	r3, [r7, #24]
 800c660:	3302      	adds	r3, #2
 800c662:	61bb      	str	r3, [r7, #24]
 800c664:	e007      	b.n	800c676 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800c666:	69fb      	ldr	r3, [r7, #28]
 800c668:	781a      	ldrb	r2, [r3, #0]
 800c66a:	68fb      	ldr	r3, [r7, #12]
 800c66c:	681b      	ldr	r3, [r3, #0]
 800c66e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800c670:	69fb      	ldr	r3, [r7, #28]
 800c672:	3301      	adds	r3, #1
 800c674:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800c676:	68fb      	ldr	r3, [r7, #12]
 800c678:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800c67c:	b29b      	uxth	r3, r3
 800c67e:	3b01      	subs	r3, #1
 800c680:	b29a      	uxth	r2, r3
 800c682:	68fb      	ldr	r3, [r7, #12]
 800c684:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800c688:	68fb      	ldr	r3, [r7, #12]
 800c68a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800c68e:	b29b      	uxth	r3, r3
 800c690:	2b00      	cmp	r3, #0
 800c692:	d1c8      	bne.n	800c626 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800c694:	683b      	ldr	r3, [r7, #0]
 800c696:	9300      	str	r3, [sp, #0]
 800c698:	697b      	ldr	r3, [r7, #20]
 800c69a:	2200      	movs	r2, #0
 800c69c:	2140      	movs	r1, #64	@ 0x40
 800c69e:	68f8      	ldr	r0, [r7, #12]
 800c6a0:	f001 faee 	bl	800dc80 <UART_WaitOnFlagUntilTimeout>
 800c6a4:	4603      	mov	r3, r0
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	d005      	beq.n	800c6b6 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800c6aa:	68fb      	ldr	r3, [r7, #12]
 800c6ac:	2220      	movs	r2, #32
 800c6ae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800c6b2:	2303      	movs	r3, #3
 800c6b4:	e006      	b.n	800c6c4 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800c6b6:	68fb      	ldr	r3, [r7, #12]
 800c6b8:	2220      	movs	r2, #32
 800c6ba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800c6be:	2300      	movs	r3, #0
 800c6c0:	e000      	b.n	800c6c4 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800c6c2:	2302      	movs	r3, #2
  }
}
 800c6c4:	4618      	mov	r0, r3
 800c6c6:	3720      	adds	r7, #32
 800c6c8:	46bd      	mov	sp, r7
 800c6ca:	bd80      	pop	{r7, pc}

0800c6cc <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c6cc:	b580      	push	{r7, lr}
 800c6ce:	b08a      	sub	sp, #40	@ 0x28
 800c6d0:	af00      	add	r7, sp, #0
 800c6d2:	60f8      	str	r0, [r7, #12]
 800c6d4:	60b9      	str	r1, [r7, #8]
 800c6d6:	4613      	mov	r3, r2
 800c6d8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c6da:	68fb      	ldr	r3, [r7, #12]
 800c6dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c6e0:	2b20      	cmp	r3, #32
 800c6e2:	d137      	bne.n	800c754 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800c6e4:	68bb      	ldr	r3, [r7, #8]
 800c6e6:	2b00      	cmp	r3, #0
 800c6e8:	d002      	beq.n	800c6f0 <HAL_UART_Receive_IT+0x24>
 800c6ea:	88fb      	ldrh	r3, [r7, #6]
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	d101      	bne.n	800c6f4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800c6f0:	2301      	movs	r3, #1
 800c6f2:	e030      	b.n	800c756 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c6f4:	68fb      	ldr	r3, [r7, #12]
 800c6f6:	2200      	movs	r2, #0
 800c6f8:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c6fa:	68fb      	ldr	r3, [r7, #12]
 800c6fc:	681b      	ldr	r3, [r3, #0]
 800c6fe:	4a18      	ldr	r2, [pc, #96]	@ (800c760 <HAL_UART_Receive_IT+0x94>)
 800c700:	4293      	cmp	r3, r2
 800c702:	d01f      	beq.n	800c744 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c704:	68fb      	ldr	r3, [r7, #12]
 800c706:	681b      	ldr	r3, [r3, #0]
 800c708:	685b      	ldr	r3, [r3, #4]
 800c70a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c70e:	2b00      	cmp	r3, #0
 800c710:	d018      	beq.n	800c744 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c712:	68fb      	ldr	r3, [r7, #12]
 800c714:	681b      	ldr	r3, [r3, #0]
 800c716:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c718:	697b      	ldr	r3, [r7, #20]
 800c71a:	e853 3f00 	ldrex	r3, [r3]
 800c71e:	613b      	str	r3, [r7, #16]
   return(result);
 800c720:	693b      	ldr	r3, [r7, #16]
 800c722:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800c726:	627b      	str	r3, [r7, #36]	@ 0x24
 800c728:	68fb      	ldr	r3, [r7, #12]
 800c72a:	681b      	ldr	r3, [r3, #0]
 800c72c:	461a      	mov	r2, r3
 800c72e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c730:	623b      	str	r3, [r7, #32]
 800c732:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c734:	69f9      	ldr	r1, [r7, #28]
 800c736:	6a3a      	ldr	r2, [r7, #32]
 800c738:	e841 2300 	strex	r3, r2, [r1]
 800c73c:	61bb      	str	r3, [r7, #24]
   return(result);
 800c73e:	69bb      	ldr	r3, [r7, #24]
 800c740:	2b00      	cmp	r3, #0
 800c742:	d1e6      	bne.n	800c712 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800c744:	88fb      	ldrh	r3, [r7, #6]
 800c746:	461a      	mov	r2, r3
 800c748:	68b9      	ldr	r1, [r7, #8]
 800c74a:	68f8      	ldr	r0, [r7, #12]
 800c74c:	f001 fb06 	bl	800dd5c <UART_Start_Receive_IT>
 800c750:	4603      	mov	r3, r0
 800c752:	e000      	b.n	800c756 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800c754:	2302      	movs	r3, #2
  }
}
 800c756:	4618      	mov	r0, r3
 800c758:	3728      	adds	r7, #40	@ 0x28
 800c75a:	46bd      	mov	sp, r7
 800c75c:	bd80      	pop	{r7, pc}
 800c75e:	bf00      	nop
 800c760:	58000c00 	.word	0x58000c00

0800c764 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c764:	b580      	push	{r7, lr}
 800c766:	b0ba      	sub	sp, #232	@ 0xe8
 800c768:	af00      	add	r7, sp, #0
 800c76a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	681b      	ldr	r3, [r3, #0]
 800c770:	69db      	ldr	r3, [r3, #28]
 800c772:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	681b      	ldr	r3, [r3, #0]
 800c77a:	681b      	ldr	r3, [r3, #0]
 800c77c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	681b      	ldr	r3, [r3, #0]
 800c784:	689b      	ldr	r3, [r3, #8]
 800c786:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800c78a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800c78e:	f640 030f 	movw	r3, #2063	@ 0x80f
 800c792:	4013      	ands	r3, r2
 800c794:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800c798:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c79c:	2b00      	cmp	r3, #0
 800c79e:	d11b      	bne.n	800c7d8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c7a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c7a4:	f003 0320 	and.w	r3, r3, #32
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	d015      	beq.n	800c7d8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c7ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c7b0:	f003 0320 	and.w	r3, r3, #32
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	d105      	bne.n	800c7c4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c7b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c7bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c7c0:	2b00      	cmp	r3, #0
 800c7c2:	d009      	beq.n	800c7d8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c7c8:	2b00      	cmp	r3, #0
 800c7ca:	f000 8377 	beq.w	800cebc <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c7d2:	6878      	ldr	r0, [r7, #4]
 800c7d4:	4798      	blx	r3
      }
      return;
 800c7d6:	e371      	b.n	800cebc <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800c7d8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	f000 8123 	beq.w	800ca28 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800c7e2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800c7e6:	4b8d      	ldr	r3, [pc, #564]	@ (800ca1c <HAL_UART_IRQHandler+0x2b8>)
 800c7e8:	4013      	ands	r3, r2
 800c7ea:	2b00      	cmp	r3, #0
 800c7ec:	d106      	bne.n	800c7fc <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800c7ee:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800c7f2:	4b8b      	ldr	r3, [pc, #556]	@ (800ca20 <HAL_UART_IRQHandler+0x2bc>)
 800c7f4:	4013      	ands	r3, r2
 800c7f6:	2b00      	cmp	r3, #0
 800c7f8:	f000 8116 	beq.w	800ca28 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c7fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c800:	f003 0301 	and.w	r3, r3, #1
 800c804:	2b00      	cmp	r3, #0
 800c806:	d011      	beq.n	800c82c <HAL_UART_IRQHandler+0xc8>
 800c808:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c80c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c810:	2b00      	cmp	r3, #0
 800c812:	d00b      	beq.n	800c82c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	681b      	ldr	r3, [r3, #0]
 800c818:	2201      	movs	r2, #1
 800c81a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c822:	f043 0201 	orr.w	r2, r3, #1
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c82c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c830:	f003 0302 	and.w	r3, r3, #2
 800c834:	2b00      	cmp	r3, #0
 800c836:	d011      	beq.n	800c85c <HAL_UART_IRQHandler+0xf8>
 800c838:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c83c:	f003 0301 	and.w	r3, r3, #1
 800c840:	2b00      	cmp	r3, #0
 800c842:	d00b      	beq.n	800c85c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	681b      	ldr	r3, [r3, #0]
 800c848:	2202      	movs	r2, #2
 800c84a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c852:	f043 0204 	orr.w	r2, r3, #4
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c85c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c860:	f003 0304 	and.w	r3, r3, #4
 800c864:	2b00      	cmp	r3, #0
 800c866:	d011      	beq.n	800c88c <HAL_UART_IRQHandler+0x128>
 800c868:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c86c:	f003 0301 	and.w	r3, r3, #1
 800c870:	2b00      	cmp	r3, #0
 800c872:	d00b      	beq.n	800c88c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	681b      	ldr	r3, [r3, #0]
 800c878:	2204      	movs	r2, #4
 800c87a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c882:	f043 0202 	orr.w	r2, r3, #2
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800c88c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c890:	f003 0308 	and.w	r3, r3, #8
 800c894:	2b00      	cmp	r3, #0
 800c896:	d017      	beq.n	800c8c8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c898:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c89c:	f003 0320 	and.w	r3, r3, #32
 800c8a0:	2b00      	cmp	r3, #0
 800c8a2:	d105      	bne.n	800c8b0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800c8a4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800c8a8:	4b5c      	ldr	r3, [pc, #368]	@ (800ca1c <HAL_UART_IRQHandler+0x2b8>)
 800c8aa:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c8ac:	2b00      	cmp	r3, #0
 800c8ae:	d00b      	beq.n	800c8c8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	681b      	ldr	r3, [r3, #0]
 800c8b4:	2208      	movs	r2, #8
 800c8b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c8be:	f043 0208 	orr.w	r2, r3, #8
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800c8c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c8cc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	d012      	beq.n	800c8fa <HAL_UART_IRQHandler+0x196>
 800c8d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c8d8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800c8dc:	2b00      	cmp	r3, #0
 800c8de:	d00c      	beq.n	800c8fa <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	681b      	ldr	r3, [r3, #0]
 800c8e4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800c8e8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c8f0:	f043 0220 	orr.w	r2, r3, #32
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c900:	2b00      	cmp	r3, #0
 800c902:	f000 82dd 	beq.w	800cec0 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c906:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c90a:	f003 0320 	and.w	r3, r3, #32
 800c90e:	2b00      	cmp	r3, #0
 800c910:	d013      	beq.n	800c93a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c912:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c916:	f003 0320 	and.w	r3, r3, #32
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	d105      	bne.n	800c92a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c91e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c922:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c926:	2b00      	cmp	r3, #0
 800c928:	d007      	beq.n	800c93a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c92e:	2b00      	cmp	r3, #0
 800c930:	d003      	beq.n	800c93a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c936:	6878      	ldr	r0, [r7, #4]
 800c938:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c940:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	681b      	ldr	r3, [r3, #0]
 800c948:	689b      	ldr	r3, [r3, #8]
 800c94a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c94e:	2b40      	cmp	r3, #64	@ 0x40
 800c950:	d005      	beq.n	800c95e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800c952:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800c956:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c95a:	2b00      	cmp	r3, #0
 800c95c:	d054      	beq.n	800ca08 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c95e:	6878      	ldr	r0, [r7, #4]
 800c960:	f001 fb1e 	bl	800dfa0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	681b      	ldr	r3, [r3, #0]
 800c968:	689b      	ldr	r3, [r3, #8]
 800c96a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c96e:	2b40      	cmp	r3, #64	@ 0x40
 800c970:	d146      	bne.n	800ca00 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	681b      	ldr	r3, [r3, #0]
 800c976:	3308      	adds	r3, #8
 800c978:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c97c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800c980:	e853 3f00 	ldrex	r3, [r3]
 800c984:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800c988:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c98c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c990:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	681b      	ldr	r3, [r3, #0]
 800c998:	3308      	adds	r3, #8
 800c99a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800c99e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800c9a2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c9a6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800c9aa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800c9ae:	e841 2300 	strex	r3, r2, [r1]
 800c9b2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800c9b6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800c9ba:	2b00      	cmp	r3, #0
 800c9bc:	d1d9      	bne.n	800c972 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	d017      	beq.n	800c9f8 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c9ce:	4a15      	ldr	r2, [pc, #84]	@ (800ca24 <HAL_UART_IRQHandler+0x2c0>)
 800c9d0:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c9d8:	4618      	mov	r0, r3
 800c9da:	f7f8 fbc9 	bl	8005170 <HAL_DMA_Abort_IT>
 800c9de:	4603      	mov	r3, r0
 800c9e0:	2b00      	cmp	r3, #0
 800c9e2:	d019      	beq.n	800ca18 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c9ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c9ec:	687a      	ldr	r2, [r7, #4]
 800c9ee:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800c9f2:	4610      	mov	r0, r2
 800c9f4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c9f6:	e00f      	b.n	800ca18 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c9f8:	6878      	ldr	r0, [r7, #4]
 800c9fa:	f000 fa77 	bl	800ceec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c9fe:	e00b      	b.n	800ca18 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ca00:	6878      	ldr	r0, [r7, #4]
 800ca02:	f000 fa73 	bl	800ceec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ca06:	e007      	b.n	800ca18 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800ca08:	6878      	ldr	r0, [r7, #4]
 800ca0a:	f000 fa6f 	bl	800ceec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	2200      	movs	r2, #0
 800ca12:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800ca16:	e253      	b.n	800cec0 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ca18:	bf00      	nop
    return;
 800ca1a:	e251      	b.n	800cec0 <HAL_UART_IRQHandler+0x75c>
 800ca1c:	10000001 	.word	0x10000001
 800ca20:	04000120 	.word	0x04000120
 800ca24:	0800e06d 	.word	0x0800e06d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ca2c:	2b01      	cmp	r3, #1
 800ca2e:	f040 81e7 	bne.w	800ce00 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800ca32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ca36:	f003 0310 	and.w	r3, r3, #16
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	f000 81e0 	beq.w	800ce00 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800ca40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ca44:	f003 0310 	and.w	r3, r3, #16
 800ca48:	2b00      	cmp	r3, #0
 800ca4a:	f000 81d9 	beq.w	800ce00 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	681b      	ldr	r3, [r3, #0]
 800ca52:	2210      	movs	r2, #16
 800ca54:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	681b      	ldr	r3, [r3, #0]
 800ca5a:	689b      	ldr	r3, [r3, #8]
 800ca5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ca60:	2b40      	cmp	r3, #64	@ 0x40
 800ca62:	f040 8151 	bne.w	800cd08 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ca6c:	681b      	ldr	r3, [r3, #0]
 800ca6e:	4a96      	ldr	r2, [pc, #600]	@ (800ccc8 <HAL_UART_IRQHandler+0x564>)
 800ca70:	4293      	cmp	r3, r2
 800ca72:	d068      	beq.n	800cb46 <HAL_UART_IRQHandler+0x3e2>
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ca7a:	681b      	ldr	r3, [r3, #0]
 800ca7c:	4a93      	ldr	r2, [pc, #588]	@ (800cccc <HAL_UART_IRQHandler+0x568>)
 800ca7e:	4293      	cmp	r3, r2
 800ca80:	d061      	beq.n	800cb46 <HAL_UART_IRQHandler+0x3e2>
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ca88:	681b      	ldr	r3, [r3, #0]
 800ca8a:	4a91      	ldr	r2, [pc, #580]	@ (800ccd0 <HAL_UART_IRQHandler+0x56c>)
 800ca8c:	4293      	cmp	r3, r2
 800ca8e:	d05a      	beq.n	800cb46 <HAL_UART_IRQHandler+0x3e2>
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ca96:	681b      	ldr	r3, [r3, #0]
 800ca98:	4a8e      	ldr	r2, [pc, #568]	@ (800ccd4 <HAL_UART_IRQHandler+0x570>)
 800ca9a:	4293      	cmp	r3, r2
 800ca9c:	d053      	beq.n	800cb46 <HAL_UART_IRQHandler+0x3e2>
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800caa4:	681b      	ldr	r3, [r3, #0]
 800caa6:	4a8c      	ldr	r2, [pc, #560]	@ (800ccd8 <HAL_UART_IRQHandler+0x574>)
 800caa8:	4293      	cmp	r3, r2
 800caaa:	d04c      	beq.n	800cb46 <HAL_UART_IRQHandler+0x3e2>
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cab2:	681b      	ldr	r3, [r3, #0]
 800cab4:	4a89      	ldr	r2, [pc, #548]	@ (800ccdc <HAL_UART_IRQHandler+0x578>)
 800cab6:	4293      	cmp	r3, r2
 800cab8:	d045      	beq.n	800cb46 <HAL_UART_IRQHandler+0x3e2>
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cac0:	681b      	ldr	r3, [r3, #0]
 800cac2:	4a87      	ldr	r2, [pc, #540]	@ (800cce0 <HAL_UART_IRQHandler+0x57c>)
 800cac4:	4293      	cmp	r3, r2
 800cac6:	d03e      	beq.n	800cb46 <HAL_UART_IRQHandler+0x3e2>
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cace:	681b      	ldr	r3, [r3, #0]
 800cad0:	4a84      	ldr	r2, [pc, #528]	@ (800cce4 <HAL_UART_IRQHandler+0x580>)
 800cad2:	4293      	cmp	r3, r2
 800cad4:	d037      	beq.n	800cb46 <HAL_UART_IRQHandler+0x3e2>
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cadc:	681b      	ldr	r3, [r3, #0]
 800cade:	4a82      	ldr	r2, [pc, #520]	@ (800cce8 <HAL_UART_IRQHandler+0x584>)
 800cae0:	4293      	cmp	r3, r2
 800cae2:	d030      	beq.n	800cb46 <HAL_UART_IRQHandler+0x3e2>
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800caea:	681b      	ldr	r3, [r3, #0]
 800caec:	4a7f      	ldr	r2, [pc, #508]	@ (800ccec <HAL_UART_IRQHandler+0x588>)
 800caee:	4293      	cmp	r3, r2
 800caf0:	d029      	beq.n	800cb46 <HAL_UART_IRQHandler+0x3e2>
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800caf8:	681b      	ldr	r3, [r3, #0]
 800cafa:	4a7d      	ldr	r2, [pc, #500]	@ (800ccf0 <HAL_UART_IRQHandler+0x58c>)
 800cafc:	4293      	cmp	r3, r2
 800cafe:	d022      	beq.n	800cb46 <HAL_UART_IRQHandler+0x3e2>
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cb06:	681b      	ldr	r3, [r3, #0]
 800cb08:	4a7a      	ldr	r2, [pc, #488]	@ (800ccf4 <HAL_UART_IRQHandler+0x590>)
 800cb0a:	4293      	cmp	r3, r2
 800cb0c:	d01b      	beq.n	800cb46 <HAL_UART_IRQHandler+0x3e2>
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	4a78      	ldr	r2, [pc, #480]	@ (800ccf8 <HAL_UART_IRQHandler+0x594>)
 800cb18:	4293      	cmp	r3, r2
 800cb1a:	d014      	beq.n	800cb46 <HAL_UART_IRQHandler+0x3e2>
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cb22:	681b      	ldr	r3, [r3, #0]
 800cb24:	4a75      	ldr	r2, [pc, #468]	@ (800ccfc <HAL_UART_IRQHandler+0x598>)
 800cb26:	4293      	cmp	r3, r2
 800cb28:	d00d      	beq.n	800cb46 <HAL_UART_IRQHandler+0x3e2>
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cb30:	681b      	ldr	r3, [r3, #0]
 800cb32:	4a73      	ldr	r2, [pc, #460]	@ (800cd00 <HAL_UART_IRQHandler+0x59c>)
 800cb34:	4293      	cmp	r3, r2
 800cb36:	d006      	beq.n	800cb46 <HAL_UART_IRQHandler+0x3e2>
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cb3e:	681b      	ldr	r3, [r3, #0]
 800cb40:	4a70      	ldr	r2, [pc, #448]	@ (800cd04 <HAL_UART_IRQHandler+0x5a0>)
 800cb42:	4293      	cmp	r3, r2
 800cb44:	d106      	bne.n	800cb54 <HAL_UART_IRQHandler+0x3f0>
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cb4c:	681b      	ldr	r3, [r3, #0]
 800cb4e:	685b      	ldr	r3, [r3, #4]
 800cb50:	b29b      	uxth	r3, r3
 800cb52:	e005      	b.n	800cb60 <HAL_UART_IRQHandler+0x3fc>
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cb5a:	681b      	ldr	r3, [r3, #0]
 800cb5c:	685b      	ldr	r3, [r3, #4]
 800cb5e:	b29b      	uxth	r3, r3
 800cb60:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800cb64:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800cb68:	2b00      	cmp	r3, #0
 800cb6a:	f000 81ab 	beq.w	800cec4 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800cb74:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800cb78:	429a      	cmp	r2, r3
 800cb7a:	f080 81a3 	bcs.w	800cec4 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800cb84:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cb8e:	69db      	ldr	r3, [r3, #28]
 800cb90:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cb94:	f000 8087 	beq.w	800cca6 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	681b      	ldr	r3, [r3, #0]
 800cb9c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cba0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800cba4:	e853 3f00 	ldrex	r3, [r3]
 800cba8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800cbac:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800cbb0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800cbb4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	681b      	ldr	r3, [r3, #0]
 800cbbc:	461a      	mov	r2, r3
 800cbbe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800cbc2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800cbc6:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cbca:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800cbce:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800cbd2:	e841 2300 	strex	r3, r2, [r1]
 800cbd6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800cbda:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800cbde:	2b00      	cmp	r3, #0
 800cbe0:	d1da      	bne.n	800cb98 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	681b      	ldr	r3, [r3, #0]
 800cbe6:	3308      	adds	r3, #8
 800cbe8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cbea:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800cbec:	e853 3f00 	ldrex	r3, [r3]
 800cbf0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800cbf2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800cbf4:	f023 0301 	bic.w	r3, r3, #1
 800cbf8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	681b      	ldr	r3, [r3, #0]
 800cc00:	3308      	adds	r3, #8
 800cc02:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800cc06:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800cc0a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc0c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800cc0e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800cc12:	e841 2300 	strex	r3, r2, [r1]
 800cc16:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800cc18:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800cc1a:	2b00      	cmp	r3, #0
 800cc1c:	d1e1      	bne.n	800cbe2 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	681b      	ldr	r3, [r3, #0]
 800cc22:	3308      	adds	r3, #8
 800cc24:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc26:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800cc28:	e853 3f00 	ldrex	r3, [r3]
 800cc2c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800cc2e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800cc30:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800cc34:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	681b      	ldr	r3, [r3, #0]
 800cc3c:	3308      	adds	r3, #8
 800cc3e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800cc42:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800cc44:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc46:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800cc48:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800cc4a:	e841 2300 	strex	r3, r2, [r1]
 800cc4e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800cc50:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800cc52:	2b00      	cmp	r3, #0
 800cc54:	d1e3      	bne.n	800cc1e <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	2220      	movs	r2, #32
 800cc5a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	2200      	movs	r2, #0
 800cc62:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	681b      	ldr	r3, [r3, #0]
 800cc68:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc6a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cc6c:	e853 3f00 	ldrex	r3, [r3]
 800cc70:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800cc72:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cc74:	f023 0310 	bic.w	r3, r3, #16
 800cc78:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	681b      	ldr	r3, [r3, #0]
 800cc80:	461a      	mov	r2, r3
 800cc82:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cc86:	65bb      	str	r3, [r7, #88]	@ 0x58
 800cc88:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc8a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800cc8c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800cc8e:	e841 2300 	strex	r3, r2, [r1]
 800cc92:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800cc94:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cc96:	2b00      	cmp	r3, #0
 800cc98:	d1e4      	bne.n	800cc64 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cca0:	4618      	mov	r0, r3
 800cca2:	f7f7 ff47 	bl	8004b34 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	2202      	movs	r2, #2
 800ccaa:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ccb8:	b29b      	uxth	r3, r3
 800ccba:	1ad3      	subs	r3, r2, r3
 800ccbc:	b29b      	uxth	r3, r3
 800ccbe:	4619      	mov	r1, r3
 800ccc0:	6878      	ldr	r0, [r7, #4]
 800ccc2:	f000 f91d 	bl	800cf00 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800ccc6:	e0fd      	b.n	800cec4 <HAL_UART_IRQHandler+0x760>
 800ccc8:	40020010 	.word	0x40020010
 800cccc:	40020028 	.word	0x40020028
 800ccd0:	40020040 	.word	0x40020040
 800ccd4:	40020058 	.word	0x40020058
 800ccd8:	40020070 	.word	0x40020070
 800ccdc:	40020088 	.word	0x40020088
 800cce0:	400200a0 	.word	0x400200a0
 800cce4:	400200b8 	.word	0x400200b8
 800cce8:	40020410 	.word	0x40020410
 800ccec:	40020428 	.word	0x40020428
 800ccf0:	40020440 	.word	0x40020440
 800ccf4:	40020458 	.word	0x40020458
 800ccf8:	40020470 	.word	0x40020470
 800ccfc:	40020488 	.word	0x40020488
 800cd00:	400204a0 	.word	0x400204a0
 800cd04:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800cd14:	b29b      	uxth	r3, r3
 800cd16:	1ad3      	subs	r3, r2, r3
 800cd18:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800cd22:	b29b      	uxth	r3, r3
 800cd24:	2b00      	cmp	r3, #0
 800cd26:	f000 80cf 	beq.w	800cec8 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800cd2a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800cd2e:	2b00      	cmp	r3, #0
 800cd30:	f000 80ca 	beq.w	800cec8 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	681b      	ldr	r3, [r3, #0]
 800cd38:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd3c:	e853 3f00 	ldrex	r3, [r3]
 800cd40:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800cd42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cd44:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800cd48:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	681b      	ldr	r3, [r3, #0]
 800cd50:	461a      	mov	r2, r3
 800cd52:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800cd56:	647b      	str	r3, [r7, #68]	@ 0x44
 800cd58:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd5a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800cd5c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800cd5e:	e841 2300 	strex	r3, r2, [r1]
 800cd62:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800cd64:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cd66:	2b00      	cmp	r3, #0
 800cd68:	d1e4      	bne.n	800cd34 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	681b      	ldr	r3, [r3, #0]
 800cd6e:	3308      	adds	r3, #8
 800cd70:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd74:	e853 3f00 	ldrex	r3, [r3]
 800cd78:	623b      	str	r3, [r7, #32]
   return(result);
 800cd7a:	6a3a      	ldr	r2, [r7, #32]
 800cd7c:	4b55      	ldr	r3, [pc, #340]	@ (800ced4 <HAL_UART_IRQHandler+0x770>)
 800cd7e:	4013      	ands	r3, r2
 800cd80:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	681b      	ldr	r3, [r3, #0]
 800cd88:	3308      	adds	r3, #8
 800cd8a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800cd8e:	633a      	str	r2, [r7, #48]	@ 0x30
 800cd90:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd92:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800cd94:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cd96:	e841 2300 	strex	r3, r2, [r1]
 800cd9a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800cd9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	d1e3      	bne.n	800cd6a <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	2220      	movs	r2, #32
 800cda6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	2200      	movs	r2, #0
 800cdae:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	2200      	movs	r2, #0
 800cdb4:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	681b      	ldr	r3, [r3, #0]
 800cdba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cdbc:	693b      	ldr	r3, [r7, #16]
 800cdbe:	e853 3f00 	ldrex	r3, [r3]
 800cdc2:	60fb      	str	r3, [r7, #12]
   return(result);
 800cdc4:	68fb      	ldr	r3, [r7, #12]
 800cdc6:	f023 0310 	bic.w	r3, r3, #16
 800cdca:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	681b      	ldr	r3, [r3, #0]
 800cdd2:	461a      	mov	r2, r3
 800cdd4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800cdd8:	61fb      	str	r3, [r7, #28]
 800cdda:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cddc:	69b9      	ldr	r1, [r7, #24]
 800cdde:	69fa      	ldr	r2, [r7, #28]
 800cde0:	e841 2300 	strex	r3, r2, [r1]
 800cde4:	617b      	str	r3, [r7, #20]
   return(result);
 800cde6:	697b      	ldr	r3, [r7, #20]
 800cde8:	2b00      	cmp	r3, #0
 800cdea:	d1e4      	bne.n	800cdb6 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	2202      	movs	r2, #2
 800cdf0:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800cdf2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800cdf6:	4619      	mov	r1, r3
 800cdf8:	6878      	ldr	r0, [r7, #4]
 800cdfa:	f000 f881 	bl	800cf00 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800cdfe:	e063      	b.n	800cec8 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800ce00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ce04:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800ce08:	2b00      	cmp	r3, #0
 800ce0a:	d00e      	beq.n	800ce2a <HAL_UART_IRQHandler+0x6c6>
 800ce0c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ce10:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	d008      	beq.n	800ce2a <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	681b      	ldr	r3, [r3, #0]
 800ce1c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800ce20:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800ce22:	6878      	ldr	r0, [r7, #4]
 800ce24:	f001 fe80 	bl	800eb28 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ce28:	e051      	b.n	800cece <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800ce2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ce2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ce32:	2b00      	cmp	r3, #0
 800ce34:	d014      	beq.n	800ce60 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800ce36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ce3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ce3e:	2b00      	cmp	r3, #0
 800ce40:	d105      	bne.n	800ce4e <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800ce42:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ce46:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ce4a:	2b00      	cmp	r3, #0
 800ce4c:	d008      	beq.n	800ce60 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ce52:	2b00      	cmp	r3, #0
 800ce54:	d03a      	beq.n	800cecc <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ce5a:	6878      	ldr	r0, [r7, #4]
 800ce5c:	4798      	blx	r3
    }
    return;
 800ce5e:	e035      	b.n	800cecc <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800ce60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ce64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ce68:	2b00      	cmp	r3, #0
 800ce6a:	d009      	beq.n	800ce80 <HAL_UART_IRQHandler+0x71c>
 800ce6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ce70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	d003      	beq.n	800ce80 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800ce78:	6878      	ldr	r0, [r7, #4]
 800ce7a:	f001 f90d 	bl	800e098 <UART_EndTransmit_IT>
    return;
 800ce7e:	e026      	b.n	800cece <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800ce80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ce84:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ce88:	2b00      	cmp	r3, #0
 800ce8a:	d009      	beq.n	800cea0 <HAL_UART_IRQHandler+0x73c>
 800ce8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ce90:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	d003      	beq.n	800cea0 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800ce98:	6878      	ldr	r0, [r7, #4]
 800ce9a:	f001 fe59 	bl	800eb50 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ce9e:	e016      	b.n	800cece <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800cea0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cea4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800cea8:	2b00      	cmp	r3, #0
 800ceaa:	d010      	beq.n	800cece <HAL_UART_IRQHandler+0x76a>
 800ceac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	da0c      	bge.n	800cece <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800ceb4:	6878      	ldr	r0, [r7, #4]
 800ceb6:	f001 fe41 	bl	800eb3c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ceba:	e008      	b.n	800cece <HAL_UART_IRQHandler+0x76a>
      return;
 800cebc:	bf00      	nop
 800cebe:	e006      	b.n	800cece <HAL_UART_IRQHandler+0x76a>
    return;
 800cec0:	bf00      	nop
 800cec2:	e004      	b.n	800cece <HAL_UART_IRQHandler+0x76a>
      return;
 800cec4:	bf00      	nop
 800cec6:	e002      	b.n	800cece <HAL_UART_IRQHandler+0x76a>
      return;
 800cec8:	bf00      	nop
 800ceca:	e000      	b.n	800cece <HAL_UART_IRQHandler+0x76a>
    return;
 800cecc:	bf00      	nop
  }
}
 800cece:	37e8      	adds	r7, #232	@ 0xe8
 800ced0:	46bd      	mov	sp, r7
 800ced2:	bd80      	pop	{r7, pc}
 800ced4:	effffffe 	.word	0xeffffffe

0800ced8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800ced8:	b480      	push	{r7}
 800ceda:	b083      	sub	sp, #12
 800cedc:	af00      	add	r7, sp, #0
 800cede:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800cee0:	bf00      	nop
 800cee2:	370c      	adds	r7, #12
 800cee4:	46bd      	mov	sp, r7
 800cee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceea:	4770      	bx	lr

0800ceec <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800ceec:	b480      	push	{r7}
 800ceee:	b083      	sub	sp, #12
 800cef0:	af00      	add	r7, sp, #0
 800cef2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800cef4:	bf00      	nop
 800cef6:	370c      	adds	r7, #12
 800cef8:	46bd      	mov	sp, r7
 800cefa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cefe:	4770      	bx	lr

0800cf00 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800cf00:	b480      	push	{r7}
 800cf02:	b083      	sub	sp, #12
 800cf04:	af00      	add	r7, sp, #0
 800cf06:	6078      	str	r0, [r7, #4]
 800cf08:	460b      	mov	r3, r1
 800cf0a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800cf0c:	bf00      	nop
 800cf0e:	370c      	adds	r7, #12
 800cf10:	46bd      	mov	sp, r7
 800cf12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf16:	4770      	bx	lr

0800cf18 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800cf18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800cf1c:	b092      	sub	sp, #72	@ 0x48
 800cf1e:	af00      	add	r7, sp, #0
 800cf20:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800cf22:	2300      	movs	r3, #0
 800cf24:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800cf28:	697b      	ldr	r3, [r7, #20]
 800cf2a:	689a      	ldr	r2, [r3, #8]
 800cf2c:	697b      	ldr	r3, [r7, #20]
 800cf2e:	691b      	ldr	r3, [r3, #16]
 800cf30:	431a      	orrs	r2, r3
 800cf32:	697b      	ldr	r3, [r7, #20]
 800cf34:	695b      	ldr	r3, [r3, #20]
 800cf36:	431a      	orrs	r2, r3
 800cf38:	697b      	ldr	r3, [r7, #20]
 800cf3a:	69db      	ldr	r3, [r3, #28]
 800cf3c:	4313      	orrs	r3, r2
 800cf3e:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800cf40:	697b      	ldr	r3, [r7, #20]
 800cf42:	681b      	ldr	r3, [r3, #0]
 800cf44:	681a      	ldr	r2, [r3, #0]
 800cf46:	4bbe      	ldr	r3, [pc, #760]	@ (800d240 <UART_SetConfig+0x328>)
 800cf48:	4013      	ands	r3, r2
 800cf4a:	697a      	ldr	r2, [r7, #20]
 800cf4c:	6812      	ldr	r2, [r2, #0]
 800cf4e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800cf50:	430b      	orrs	r3, r1
 800cf52:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800cf54:	697b      	ldr	r3, [r7, #20]
 800cf56:	681b      	ldr	r3, [r3, #0]
 800cf58:	685b      	ldr	r3, [r3, #4]
 800cf5a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800cf5e:	697b      	ldr	r3, [r7, #20]
 800cf60:	68da      	ldr	r2, [r3, #12]
 800cf62:	697b      	ldr	r3, [r7, #20]
 800cf64:	681b      	ldr	r3, [r3, #0]
 800cf66:	430a      	orrs	r2, r1
 800cf68:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800cf6a:	697b      	ldr	r3, [r7, #20]
 800cf6c:	699b      	ldr	r3, [r3, #24]
 800cf6e:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800cf70:	697b      	ldr	r3, [r7, #20]
 800cf72:	681b      	ldr	r3, [r3, #0]
 800cf74:	4ab3      	ldr	r2, [pc, #716]	@ (800d244 <UART_SetConfig+0x32c>)
 800cf76:	4293      	cmp	r3, r2
 800cf78:	d004      	beq.n	800cf84 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800cf7a:	697b      	ldr	r3, [r7, #20]
 800cf7c:	6a1b      	ldr	r3, [r3, #32]
 800cf7e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800cf80:	4313      	orrs	r3, r2
 800cf82:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800cf84:	697b      	ldr	r3, [r7, #20]
 800cf86:	681b      	ldr	r3, [r3, #0]
 800cf88:	689a      	ldr	r2, [r3, #8]
 800cf8a:	4baf      	ldr	r3, [pc, #700]	@ (800d248 <UART_SetConfig+0x330>)
 800cf8c:	4013      	ands	r3, r2
 800cf8e:	697a      	ldr	r2, [r7, #20]
 800cf90:	6812      	ldr	r2, [r2, #0]
 800cf92:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800cf94:	430b      	orrs	r3, r1
 800cf96:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800cf98:	697b      	ldr	r3, [r7, #20]
 800cf9a:	681b      	ldr	r3, [r3, #0]
 800cf9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cf9e:	f023 010f 	bic.w	r1, r3, #15
 800cfa2:	697b      	ldr	r3, [r7, #20]
 800cfa4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800cfa6:	697b      	ldr	r3, [r7, #20]
 800cfa8:	681b      	ldr	r3, [r3, #0]
 800cfaa:	430a      	orrs	r2, r1
 800cfac:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800cfae:	697b      	ldr	r3, [r7, #20]
 800cfb0:	681b      	ldr	r3, [r3, #0]
 800cfb2:	4aa6      	ldr	r2, [pc, #664]	@ (800d24c <UART_SetConfig+0x334>)
 800cfb4:	4293      	cmp	r3, r2
 800cfb6:	d177      	bne.n	800d0a8 <UART_SetConfig+0x190>
 800cfb8:	4ba5      	ldr	r3, [pc, #660]	@ (800d250 <UART_SetConfig+0x338>)
 800cfba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cfbc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800cfc0:	2b28      	cmp	r3, #40	@ 0x28
 800cfc2:	d86d      	bhi.n	800d0a0 <UART_SetConfig+0x188>
 800cfc4:	a201      	add	r2, pc, #4	@ (adr r2, 800cfcc <UART_SetConfig+0xb4>)
 800cfc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cfca:	bf00      	nop
 800cfcc:	0800d071 	.word	0x0800d071
 800cfd0:	0800d0a1 	.word	0x0800d0a1
 800cfd4:	0800d0a1 	.word	0x0800d0a1
 800cfd8:	0800d0a1 	.word	0x0800d0a1
 800cfdc:	0800d0a1 	.word	0x0800d0a1
 800cfe0:	0800d0a1 	.word	0x0800d0a1
 800cfe4:	0800d0a1 	.word	0x0800d0a1
 800cfe8:	0800d0a1 	.word	0x0800d0a1
 800cfec:	0800d079 	.word	0x0800d079
 800cff0:	0800d0a1 	.word	0x0800d0a1
 800cff4:	0800d0a1 	.word	0x0800d0a1
 800cff8:	0800d0a1 	.word	0x0800d0a1
 800cffc:	0800d0a1 	.word	0x0800d0a1
 800d000:	0800d0a1 	.word	0x0800d0a1
 800d004:	0800d0a1 	.word	0x0800d0a1
 800d008:	0800d0a1 	.word	0x0800d0a1
 800d00c:	0800d081 	.word	0x0800d081
 800d010:	0800d0a1 	.word	0x0800d0a1
 800d014:	0800d0a1 	.word	0x0800d0a1
 800d018:	0800d0a1 	.word	0x0800d0a1
 800d01c:	0800d0a1 	.word	0x0800d0a1
 800d020:	0800d0a1 	.word	0x0800d0a1
 800d024:	0800d0a1 	.word	0x0800d0a1
 800d028:	0800d0a1 	.word	0x0800d0a1
 800d02c:	0800d089 	.word	0x0800d089
 800d030:	0800d0a1 	.word	0x0800d0a1
 800d034:	0800d0a1 	.word	0x0800d0a1
 800d038:	0800d0a1 	.word	0x0800d0a1
 800d03c:	0800d0a1 	.word	0x0800d0a1
 800d040:	0800d0a1 	.word	0x0800d0a1
 800d044:	0800d0a1 	.word	0x0800d0a1
 800d048:	0800d0a1 	.word	0x0800d0a1
 800d04c:	0800d091 	.word	0x0800d091
 800d050:	0800d0a1 	.word	0x0800d0a1
 800d054:	0800d0a1 	.word	0x0800d0a1
 800d058:	0800d0a1 	.word	0x0800d0a1
 800d05c:	0800d0a1 	.word	0x0800d0a1
 800d060:	0800d0a1 	.word	0x0800d0a1
 800d064:	0800d0a1 	.word	0x0800d0a1
 800d068:	0800d0a1 	.word	0x0800d0a1
 800d06c:	0800d099 	.word	0x0800d099
 800d070:	2301      	movs	r3, #1
 800d072:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d076:	e222      	b.n	800d4be <UART_SetConfig+0x5a6>
 800d078:	2304      	movs	r3, #4
 800d07a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d07e:	e21e      	b.n	800d4be <UART_SetConfig+0x5a6>
 800d080:	2308      	movs	r3, #8
 800d082:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d086:	e21a      	b.n	800d4be <UART_SetConfig+0x5a6>
 800d088:	2310      	movs	r3, #16
 800d08a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d08e:	e216      	b.n	800d4be <UART_SetConfig+0x5a6>
 800d090:	2320      	movs	r3, #32
 800d092:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d096:	e212      	b.n	800d4be <UART_SetConfig+0x5a6>
 800d098:	2340      	movs	r3, #64	@ 0x40
 800d09a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d09e:	e20e      	b.n	800d4be <UART_SetConfig+0x5a6>
 800d0a0:	2380      	movs	r3, #128	@ 0x80
 800d0a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d0a6:	e20a      	b.n	800d4be <UART_SetConfig+0x5a6>
 800d0a8:	697b      	ldr	r3, [r7, #20]
 800d0aa:	681b      	ldr	r3, [r3, #0]
 800d0ac:	4a69      	ldr	r2, [pc, #420]	@ (800d254 <UART_SetConfig+0x33c>)
 800d0ae:	4293      	cmp	r3, r2
 800d0b0:	d130      	bne.n	800d114 <UART_SetConfig+0x1fc>
 800d0b2:	4b67      	ldr	r3, [pc, #412]	@ (800d250 <UART_SetConfig+0x338>)
 800d0b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d0b6:	f003 0307 	and.w	r3, r3, #7
 800d0ba:	2b05      	cmp	r3, #5
 800d0bc:	d826      	bhi.n	800d10c <UART_SetConfig+0x1f4>
 800d0be:	a201      	add	r2, pc, #4	@ (adr r2, 800d0c4 <UART_SetConfig+0x1ac>)
 800d0c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d0c4:	0800d0dd 	.word	0x0800d0dd
 800d0c8:	0800d0e5 	.word	0x0800d0e5
 800d0cc:	0800d0ed 	.word	0x0800d0ed
 800d0d0:	0800d0f5 	.word	0x0800d0f5
 800d0d4:	0800d0fd 	.word	0x0800d0fd
 800d0d8:	0800d105 	.word	0x0800d105
 800d0dc:	2300      	movs	r3, #0
 800d0de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d0e2:	e1ec      	b.n	800d4be <UART_SetConfig+0x5a6>
 800d0e4:	2304      	movs	r3, #4
 800d0e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d0ea:	e1e8      	b.n	800d4be <UART_SetConfig+0x5a6>
 800d0ec:	2308      	movs	r3, #8
 800d0ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d0f2:	e1e4      	b.n	800d4be <UART_SetConfig+0x5a6>
 800d0f4:	2310      	movs	r3, #16
 800d0f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d0fa:	e1e0      	b.n	800d4be <UART_SetConfig+0x5a6>
 800d0fc:	2320      	movs	r3, #32
 800d0fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d102:	e1dc      	b.n	800d4be <UART_SetConfig+0x5a6>
 800d104:	2340      	movs	r3, #64	@ 0x40
 800d106:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d10a:	e1d8      	b.n	800d4be <UART_SetConfig+0x5a6>
 800d10c:	2380      	movs	r3, #128	@ 0x80
 800d10e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d112:	e1d4      	b.n	800d4be <UART_SetConfig+0x5a6>
 800d114:	697b      	ldr	r3, [r7, #20]
 800d116:	681b      	ldr	r3, [r3, #0]
 800d118:	4a4f      	ldr	r2, [pc, #316]	@ (800d258 <UART_SetConfig+0x340>)
 800d11a:	4293      	cmp	r3, r2
 800d11c:	d130      	bne.n	800d180 <UART_SetConfig+0x268>
 800d11e:	4b4c      	ldr	r3, [pc, #304]	@ (800d250 <UART_SetConfig+0x338>)
 800d120:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d122:	f003 0307 	and.w	r3, r3, #7
 800d126:	2b05      	cmp	r3, #5
 800d128:	d826      	bhi.n	800d178 <UART_SetConfig+0x260>
 800d12a:	a201      	add	r2, pc, #4	@ (adr r2, 800d130 <UART_SetConfig+0x218>)
 800d12c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d130:	0800d149 	.word	0x0800d149
 800d134:	0800d151 	.word	0x0800d151
 800d138:	0800d159 	.word	0x0800d159
 800d13c:	0800d161 	.word	0x0800d161
 800d140:	0800d169 	.word	0x0800d169
 800d144:	0800d171 	.word	0x0800d171
 800d148:	2300      	movs	r3, #0
 800d14a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d14e:	e1b6      	b.n	800d4be <UART_SetConfig+0x5a6>
 800d150:	2304      	movs	r3, #4
 800d152:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d156:	e1b2      	b.n	800d4be <UART_SetConfig+0x5a6>
 800d158:	2308      	movs	r3, #8
 800d15a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d15e:	e1ae      	b.n	800d4be <UART_SetConfig+0x5a6>
 800d160:	2310      	movs	r3, #16
 800d162:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d166:	e1aa      	b.n	800d4be <UART_SetConfig+0x5a6>
 800d168:	2320      	movs	r3, #32
 800d16a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d16e:	e1a6      	b.n	800d4be <UART_SetConfig+0x5a6>
 800d170:	2340      	movs	r3, #64	@ 0x40
 800d172:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d176:	e1a2      	b.n	800d4be <UART_SetConfig+0x5a6>
 800d178:	2380      	movs	r3, #128	@ 0x80
 800d17a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d17e:	e19e      	b.n	800d4be <UART_SetConfig+0x5a6>
 800d180:	697b      	ldr	r3, [r7, #20]
 800d182:	681b      	ldr	r3, [r3, #0]
 800d184:	4a35      	ldr	r2, [pc, #212]	@ (800d25c <UART_SetConfig+0x344>)
 800d186:	4293      	cmp	r3, r2
 800d188:	d130      	bne.n	800d1ec <UART_SetConfig+0x2d4>
 800d18a:	4b31      	ldr	r3, [pc, #196]	@ (800d250 <UART_SetConfig+0x338>)
 800d18c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d18e:	f003 0307 	and.w	r3, r3, #7
 800d192:	2b05      	cmp	r3, #5
 800d194:	d826      	bhi.n	800d1e4 <UART_SetConfig+0x2cc>
 800d196:	a201      	add	r2, pc, #4	@ (adr r2, 800d19c <UART_SetConfig+0x284>)
 800d198:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d19c:	0800d1b5 	.word	0x0800d1b5
 800d1a0:	0800d1bd 	.word	0x0800d1bd
 800d1a4:	0800d1c5 	.word	0x0800d1c5
 800d1a8:	0800d1cd 	.word	0x0800d1cd
 800d1ac:	0800d1d5 	.word	0x0800d1d5
 800d1b0:	0800d1dd 	.word	0x0800d1dd
 800d1b4:	2300      	movs	r3, #0
 800d1b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d1ba:	e180      	b.n	800d4be <UART_SetConfig+0x5a6>
 800d1bc:	2304      	movs	r3, #4
 800d1be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d1c2:	e17c      	b.n	800d4be <UART_SetConfig+0x5a6>
 800d1c4:	2308      	movs	r3, #8
 800d1c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d1ca:	e178      	b.n	800d4be <UART_SetConfig+0x5a6>
 800d1cc:	2310      	movs	r3, #16
 800d1ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d1d2:	e174      	b.n	800d4be <UART_SetConfig+0x5a6>
 800d1d4:	2320      	movs	r3, #32
 800d1d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d1da:	e170      	b.n	800d4be <UART_SetConfig+0x5a6>
 800d1dc:	2340      	movs	r3, #64	@ 0x40
 800d1de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d1e2:	e16c      	b.n	800d4be <UART_SetConfig+0x5a6>
 800d1e4:	2380      	movs	r3, #128	@ 0x80
 800d1e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d1ea:	e168      	b.n	800d4be <UART_SetConfig+0x5a6>
 800d1ec:	697b      	ldr	r3, [r7, #20]
 800d1ee:	681b      	ldr	r3, [r3, #0]
 800d1f0:	4a1b      	ldr	r2, [pc, #108]	@ (800d260 <UART_SetConfig+0x348>)
 800d1f2:	4293      	cmp	r3, r2
 800d1f4:	d142      	bne.n	800d27c <UART_SetConfig+0x364>
 800d1f6:	4b16      	ldr	r3, [pc, #88]	@ (800d250 <UART_SetConfig+0x338>)
 800d1f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d1fa:	f003 0307 	and.w	r3, r3, #7
 800d1fe:	2b05      	cmp	r3, #5
 800d200:	d838      	bhi.n	800d274 <UART_SetConfig+0x35c>
 800d202:	a201      	add	r2, pc, #4	@ (adr r2, 800d208 <UART_SetConfig+0x2f0>)
 800d204:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d208:	0800d221 	.word	0x0800d221
 800d20c:	0800d229 	.word	0x0800d229
 800d210:	0800d231 	.word	0x0800d231
 800d214:	0800d239 	.word	0x0800d239
 800d218:	0800d265 	.word	0x0800d265
 800d21c:	0800d26d 	.word	0x0800d26d
 800d220:	2300      	movs	r3, #0
 800d222:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d226:	e14a      	b.n	800d4be <UART_SetConfig+0x5a6>
 800d228:	2304      	movs	r3, #4
 800d22a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d22e:	e146      	b.n	800d4be <UART_SetConfig+0x5a6>
 800d230:	2308      	movs	r3, #8
 800d232:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d236:	e142      	b.n	800d4be <UART_SetConfig+0x5a6>
 800d238:	2310      	movs	r3, #16
 800d23a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d23e:	e13e      	b.n	800d4be <UART_SetConfig+0x5a6>
 800d240:	cfff69f3 	.word	0xcfff69f3
 800d244:	58000c00 	.word	0x58000c00
 800d248:	11fff4ff 	.word	0x11fff4ff
 800d24c:	40011000 	.word	0x40011000
 800d250:	58024400 	.word	0x58024400
 800d254:	40004400 	.word	0x40004400
 800d258:	40004800 	.word	0x40004800
 800d25c:	40004c00 	.word	0x40004c00
 800d260:	40005000 	.word	0x40005000
 800d264:	2320      	movs	r3, #32
 800d266:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d26a:	e128      	b.n	800d4be <UART_SetConfig+0x5a6>
 800d26c:	2340      	movs	r3, #64	@ 0x40
 800d26e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d272:	e124      	b.n	800d4be <UART_SetConfig+0x5a6>
 800d274:	2380      	movs	r3, #128	@ 0x80
 800d276:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d27a:	e120      	b.n	800d4be <UART_SetConfig+0x5a6>
 800d27c:	697b      	ldr	r3, [r7, #20]
 800d27e:	681b      	ldr	r3, [r3, #0]
 800d280:	4acb      	ldr	r2, [pc, #812]	@ (800d5b0 <UART_SetConfig+0x698>)
 800d282:	4293      	cmp	r3, r2
 800d284:	d176      	bne.n	800d374 <UART_SetConfig+0x45c>
 800d286:	4bcb      	ldr	r3, [pc, #812]	@ (800d5b4 <UART_SetConfig+0x69c>)
 800d288:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d28a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800d28e:	2b28      	cmp	r3, #40	@ 0x28
 800d290:	d86c      	bhi.n	800d36c <UART_SetConfig+0x454>
 800d292:	a201      	add	r2, pc, #4	@ (adr r2, 800d298 <UART_SetConfig+0x380>)
 800d294:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d298:	0800d33d 	.word	0x0800d33d
 800d29c:	0800d36d 	.word	0x0800d36d
 800d2a0:	0800d36d 	.word	0x0800d36d
 800d2a4:	0800d36d 	.word	0x0800d36d
 800d2a8:	0800d36d 	.word	0x0800d36d
 800d2ac:	0800d36d 	.word	0x0800d36d
 800d2b0:	0800d36d 	.word	0x0800d36d
 800d2b4:	0800d36d 	.word	0x0800d36d
 800d2b8:	0800d345 	.word	0x0800d345
 800d2bc:	0800d36d 	.word	0x0800d36d
 800d2c0:	0800d36d 	.word	0x0800d36d
 800d2c4:	0800d36d 	.word	0x0800d36d
 800d2c8:	0800d36d 	.word	0x0800d36d
 800d2cc:	0800d36d 	.word	0x0800d36d
 800d2d0:	0800d36d 	.word	0x0800d36d
 800d2d4:	0800d36d 	.word	0x0800d36d
 800d2d8:	0800d34d 	.word	0x0800d34d
 800d2dc:	0800d36d 	.word	0x0800d36d
 800d2e0:	0800d36d 	.word	0x0800d36d
 800d2e4:	0800d36d 	.word	0x0800d36d
 800d2e8:	0800d36d 	.word	0x0800d36d
 800d2ec:	0800d36d 	.word	0x0800d36d
 800d2f0:	0800d36d 	.word	0x0800d36d
 800d2f4:	0800d36d 	.word	0x0800d36d
 800d2f8:	0800d355 	.word	0x0800d355
 800d2fc:	0800d36d 	.word	0x0800d36d
 800d300:	0800d36d 	.word	0x0800d36d
 800d304:	0800d36d 	.word	0x0800d36d
 800d308:	0800d36d 	.word	0x0800d36d
 800d30c:	0800d36d 	.word	0x0800d36d
 800d310:	0800d36d 	.word	0x0800d36d
 800d314:	0800d36d 	.word	0x0800d36d
 800d318:	0800d35d 	.word	0x0800d35d
 800d31c:	0800d36d 	.word	0x0800d36d
 800d320:	0800d36d 	.word	0x0800d36d
 800d324:	0800d36d 	.word	0x0800d36d
 800d328:	0800d36d 	.word	0x0800d36d
 800d32c:	0800d36d 	.word	0x0800d36d
 800d330:	0800d36d 	.word	0x0800d36d
 800d334:	0800d36d 	.word	0x0800d36d
 800d338:	0800d365 	.word	0x0800d365
 800d33c:	2301      	movs	r3, #1
 800d33e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d342:	e0bc      	b.n	800d4be <UART_SetConfig+0x5a6>
 800d344:	2304      	movs	r3, #4
 800d346:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d34a:	e0b8      	b.n	800d4be <UART_SetConfig+0x5a6>
 800d34c:	2308      	movs	r3, #8
 800d34e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d352:	e0b4      	b.n	800d4be <UART_SetConfig+0x5a6>
 800d354:	2310      	movs	r3, #16
 800d356:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d35a:	e0b0      	b.n	800d4be <UART_SetConfig+0x5a6>
 800d35c:	2320      	movs	r3, #32
 800d35e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d362:	e0ac      	b.n	800d4be <UART_SetConfig+0x5a6>
 800d364:	2340      	movs	r3, #64	@ 0x40
 800d366:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d36a:	e0a8      	b.n	800d4be <UART_SetConfig+0x5a6>
 800d36c:	2380      	movs	r3, #128	@ 0x80
 800d36e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d372:	e0a4      	b.n	800d4be <UART_SetConfig+0x5a6>
 800d374:	697b      	ldr	r3, [r7, #20]
 800d376:	681b      	ldr	r3, [r3, #0]
 800d378:	4a8f      	ldr	r2, [pc, #572]	@ (800d5b8 <UART_SetConfig+0x6a0>)
 800d37a:	4293      	cmp	r3, r2
 800d37c:	d130      	bne.n	800d3e0 <UART_SetConfig+0x4c8>
 800d37e:	4b8d      	ldr	r3, [pc, #564]	@ (800d5b4 <UART_SetConfig+0x69c>)
 800d380:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d382:	f003 0307 	and.w	r3, r3, #7
 800d386:	2b05      	cmp	r3, #5
 800d388:	d826      	bhi.n	800d3d8 <UART_SetConfig+0x4c0>
 800d38a:	a201      	add	r2, pc, #4	@ (adr r2, 800d390 <UART_SetConfig+0x478>)
 800d38c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d390:	0800d3a9 	.word	0x0800d3a9
 800d394:	0800d3b1 	.word	0x0800d3b1
 800d398:	0800d3b9 	.word	0x0800d3b9
 800d39c:	0800d3c1 	.word	0x0800d3c1
 800d3a0:	0800d3c9 	.word	0x0800d3c9
 800d3a4:	0800d3d1 	.word	0x0800d3d1
 800d3a8:	2300      	movs	r3, #0
 800d3aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d3ae:	e086      	b.n	800d4be <UART_SetConfig+0x5a6>
 800d3b0:	2304      	movs	r3, #4
 800d3b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d3b6:	e082      	b.n	800d4be <UART_SetConfig+0x5a6>
 800d3b8:	2308      	movs	r3, #8
 800d3ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d3be:	e07e      	b.n	800d4be <UART_SetConfig+0x5a6>
 800d3c0:	2310      	movs	r3, #16
 800d3c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d3c6:	e07a      	b.n	800d4be <UART_SetConfig+0x5a6>
 800d3c8:	2320      	movs	r3, #32
 800d3ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d3ce:	e076      	b.n	800d4be <UART_SetConfig+0x5a6>
 800d3d0:	2340      	movs	r3, #64	@ 0x40
 800d3d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d3d6:	e072      	b.n	800d4be <UART_SetConfig+0x5a6>
 800d3d8:	2380      	movs	r3, #128	@ 0x80
 800d3da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d3de:	e06e      	b.n	800d4be <UART_SetConfig+0x5a6>
 800d3e0:	697b      	ldr	r3, [r7, #20]
 800d3e2:	681b      	ldr	r3, [r3, #0]
 800d3e4:	4a75      	ldr	r2, [pc, #468]	@ (800d5bc <UART_SetConfig+0x6a4>)
 800d3e6:	4293      	cmp	r3, r2
 800d3e8:	d130      	bne.n	800d44c <UART_SetConfig+0x534>
 800d3ea:	4b72      	ldr	r3, [pc, #456]	@ (800d5b4 <UART_SetConfig+0x69c>)
 800d3ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d3ee:	f003 0307 	and.w	r3, r3, #7
 800d3f2:	2b05      	cmp	r3, #5
 800d3f4:	d826      	bhi.n	800d444 <UART_SetConfig+0x52c>
 800d3f6:	a201      	add	r2, pc, #4	@ (adr r2, 800d3fc <UART_SetConfig+0x4e4>)
 800d3f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d3fc:	0800d415 	.word	0x0800d415
 800d400:	0800d41d 	.word	0x0800d41d
 800d404:	0800d425 	.word	0x0800d425
 800d408:	0800d42d 	.word	0x0800d42d
 800d40c:	0800d435 	.word	0x0800d435
 800d410:	0800d43d 	.word	0x0800d43d
 800d414:	2300      	movs	r3, #0
 800d416:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d41a:	e050      	b.n	800d4be <UART_SetConfig+0x5a6>
 800d41c:	2304      	movs	r3, #4
 800d41e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d422:	e04c      	b.n	800d4be <UART_SetConfig+0x5a6>
 800d424:	2308      	movs	r3, #8
 800d426:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d42a:	e048      	b.n	800d4be <UART_SetConfig+0x5a6>
 800d42c:	2310      	movs	r3, #16
 800d42e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d432:	e044      	b.n	800d4be <UART_SetConfig+0x5a6>
 800d434:	2320      	movs	r3, #32
 800d436:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d43a:	e040      	b.n	800d4be <UART_SetConfig+0x5a6>
 800d43c:	2340      	movs	r3, #64	@ 0x40
 800d43e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d442:	e03c      	b.n	800d4be <UART_SetConfig+0x5a6>
 800d444:	2380      	movs	r3, #128	@ 0x80
 800d446:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d44a:	e038      	b.n	800d4be <UART_SetConfig+0x5a6>
 800d44c:	697b      	ldr	r3, [r7, #20]
 800d44e:	681b      	ldr	r3, [r3, #0]
 800d450:	4a5b      	ldr	r2, [pc, #364]	@ (800d5c0 <UART_SetConfig+0x6a8>)
 800d452:	4293      	cmp	r3, r2
 800d454:	d130      	bne.n	800d4b8 <UART_SetConfig+0x5a0>
 800d456:	4b57      	ldr	r3, [pc, #348]	@ (800d5b4 <UART_SetConfig+0x69c>)
 800d458:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d45a:	f003 0307 	and.w	r3, r3, #7
 800d45e:	2b05      	cmp	r3, #5
 800d460:	d826      	bhi.n	800d4b0 <UART_SetConfig+0x598>
 800d462:	a201      	add	r2, pc, #4	@ (adr r2, 800d468 <UART_SetConfig+0x550>)
 800d464:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d468:	0800d481 	.word	0x0800d481
 800d46c:	0800d489 	.word	0x0800d489
 800d470:	0800d491 	.word	0x0800d491
 800d474:	0800d499 	.word	0x0800d499
 800d478:	0800d4a1 	.word	0x0800d4a1
 800d47c:	0800d4a9 	.word	0x0800d4a9
 800d480:	2302      	movs	r3, #2
 800d482:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d486:	e01a      	b.n	800d4be <UART_SetConfig+0x5a6>
 800d488:	2304      	movs	r3, #4
 800d48a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d48e:	e016      	b.n	800d4be <UART_SetConfig+0x5a6>
 800d490:	2308      	movs	r3, #8
 800d492:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d496:	e012      	b.n	800d4be <UART_SetConfig+0x5a6>
 800d498:	2310      	movs	r3, #16
 800d49a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d49e:	e00e      	b.n	800d4be <UART_SetConfig+0x5a6>
 800d4a0:	2320      	movs	r3, #32
 800d4a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d4a6:	e00a      	b.n	800d4be <UART_SetConfig+0x5a6>
 800d4a8:	2340      	movs	r3, #64	@ 0x40
 800d4aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d4ae:	e006      	b.n	800d4be <UART_SetConfig+0x5a6>
 800d4b0:	2380      	movs	r3, #128	@ 0x80
 800d4b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d4b6:	e002      	b.n	800d4be <UART_SetConfig+0x5a6>
 800d4b8:	2380      	movs	r3, #128	@ 0x80
 800d4ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800d4be:	697b      	ldr	r3, [r7, #20]
 800d4c0:	681b      	ldr	r3, [r3, #0]
 800d4c2:	4a3f      	ldr	r2, [pc, #252]	@ (800d5c0 <UART_SetConfig+0x6a8>)
 800d4c4:	4293      	cmp	r3, r2
 800d4c6:	f040 80f8 	bne.w	800d6ba <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800d4ca:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800d4ce:	2b20      	cmp	r3, #32
 800d4d0:	dc46      	bgt.n	800d560 <UART_SetConfig+0x648>
 800d4d2:	2b02      	cmp	r3, #2
 800d4d4:	f2c0 8082 	blt.w	800d5dc <UART_SetConfig+0x6c4>
 800d4d8:	3b02      	subs	r3, #2
 800d4da:	2b1e      	cmp	r3, #30
 800d4dc:	d87e      	bhi.n	800d5dc <UART_SetConfig+0x6c4>
 800d4de:	a201      	add	r2, pc, #4	@ (adr r2, 800d4e4 <UART_SetConfig+0x5cc>)
 800d4e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d4e4:	0800d567 	.word	0x0800d567
 800d4e8:	0800d5dd 	.word	0x0800d5dd
 800d4ec:	0800d56f 	.word	0x0800d56f
 800d4f0:	0800d5dd 	.word	0x0800d5dd
 800d4f4:	0800d5dd 	.word	0x0800d5dd
 800d4f8:	0800d5dd 	.word	0x0800d5dd
 800d4fc:	0800d57f 	.word	0x0800d57f
 800d500:	0800d5dd 	.word	0x0800d5dd
 800d504:	0800d5dd 	.word	0x0800d5dd
 800d508:	0800d5dd 	.word	0x0800d5dd
 800d50c:	0800d5dd 	.word	0x0800d5dd
 800d510:	0800d5dd 	.word	0x0800d5dd
 800d514:	0800d5dd 	.word	0x0800d5dd
 800d518:	0800d5dd 	.word	0x0800d5dd
 800d51c:	0800d58f 	.word	0x0800d58f
 800d520:	0800d5dd 	.word	0x0800d5dd
 800d524:	0800d5dd 	.word	0x0800d5dd
 800d528:	0800d5dd 	.word	0x0800d5dd
 800d52c:	0800d5dd 	.word	0x0800d5dd
 800d530:	0800d5dd 	.word	0x0800d5dd
 800d534:	0800d5dd 	.word	0x0800d5dd
 800d538:	0800d5dd 	.word	0x0800d5dd
 800d53c:	0800d5dd 	.word	0x0800d5dd
 800d540:	0800d5dd 	.word	0x0800d5dd
 800d544:	0800d5dd 	.word	0x0800d5dd
 800d548:	0800d5dd 	.word	0x0800d5dd
 800d54c:	0800d5dd 	.word	0x0800d5dd
 800d550:	0800d5dd 	.word	0x0800d5dd
 800d554:	0800d5dd 	.word	0x0800d5dd
 800d558:	0800d5dd 	.word	0x0800d5dd
 800d55c:	0800d5cf 	.word	0x0800d5cf
 800d560:	2b40      	cmp	r3, #64	@ 0x40
 800d562:	d037      	beq.n	800d5d4 <UART_SetConfig+0x6bc>
 800d564:	e03a      	b.n	800d5dc <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800d566:	f7fd f973 	bl	800a850 <HAL_RCCEx_GetD3PCLK1Freq>
 800d56a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800d56c:	e03c      	b.n	800d5e8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d56e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d572:	4618      	mov	r0, r3
 800d574:	f7fd f982 	bl	800a87c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d578:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d57a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d57c:	e034      	b.n	800d5e8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d57e:	f107 0318 	add.w	r3, r7, #24
 800d582:	4618      	mov	r0, r3
 800d584:	f7fd face 	bl	800ab24 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d588:	69fb      	ldr	r3, [r7, #28]
 800d58a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d58c:	e02c      	b.n	800d5e8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d58e:	4b09      	ldr	r3, [pc, #36]	@ (800d5b4 <UART_SetConfig+0x69c>)
 800d590:	681b      	ldr	r3, [r3, #0]
 800d592:	f003 0320 	and.w	r3, r3, #32
 800d596:	2b00      	cmp	r3, #0
 800d598:	d016      	beq.n	800d5c8 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d59a:	4b06      	ldr	r3, [pc, #24]	@ (800d5b4 <UART_SetConfig+0x69c>)
 800d59c:	681b      	ldr	r3, [r3, #0]
 800d59e:	08db      	lsrs	r3, r3, #3
 800d5a0:	f003 0303 	and.w	r3, r3, #3
 800d5a4:	4a07      	ldr	r2, [pc, #28]	@ (800d5c4 <UART_SetConfig+0x6ac>)
 800d5a6:	fa22 f303 	lsr.w	r3, r2, r3
 800d5aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d5ac:	e01c      	b.n	800d5e8 <UART_SetConfig+0x6d0>
 800d5ae:	bf00      	nop
 800d5b0:	40011400 	.word	0x40011400
 800d5b4:	58024400 	.word	0x58024400
 800d5b8:	40007800 	.word	0x40007800
 800d5bc:	40007c00 	.word	0x40007c00
 800d5c0:	58000c00 	.word	0x58000c00
 800d5c4:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800d5c8:	4b9d      	ldr	r3, [pc, #628]	@ (800d840 <UART_SetConfig+0x928>)
 800d5ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d5cc:	e00c      	b.n	800d5e8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d5ce:	4b9d      	ldr	r3, [pc, #628]	@ (800d844 <UART_SetConfig+0x92c>)
 800d5d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d5d2:	e009      	b.n	800d5e8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d5d4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d5d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d5da:	e005      	b.n	800d5e8 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800d5dc:	2300      	movs	r3, #0
 800d5de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800d5e0:	2301      	movs	r3, #1
 800d5e2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800d5e6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800d5e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d5ea:	2b00      	cmp	r3, #0
 800d5ec:	f000 81de 	beq.w	800d9ac <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800d5f0:	697b      	ldr	r3, [r7, #20]
 800d5f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d5f4:	4a94      	ldr	r2, [pc, #592]	@ (800d848 <UART_SetConfig+0x930>)
 800d5f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d5fa:	461a      	mov	r2, r3
 800d5fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d5fe:	fbb3 f3f2 	udiv	r3, r3, r2
 800d602:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d604:	697b      	ldr	r3, [r7, #20]
 800d606:	685a      	ldr	r2, [r3, #4]
 800d608:	4613      	mov	r3, r2
 800d60a:	005b      	lsls	r3, r3, #1
 800d60c:	4413      	add	r3, r2
 800d60e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d610:	429a      	cmp	r2, r3
 800d612:	d305      	bcc.n	800d620 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800d614:	697b      	ldr	r3, [r7, #20]
 800d616:	685b      	ldr	r3, [r3, #4]
 800d618:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d61a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d61c:	429a      	cmp	r2, r3
 800d61e:	d903      	bls.n	800d628 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800d620:	2301      	movs	r3, #1
 800d622:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800d626:	e1c1      	b.n	800d9ac <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d628:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d62a:	2200      	movs	r2, #0
 800d62c:	60bb      	str	r3, [r7, #8]
 800d62e:	60fa      	str	r2, [r7, #12]
 800d630:	697b      	ldr	r3, [r7, #20]
 800d632:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d634:	4a84      	ldr	r2, [pc, #528]	@ (800d848 <UART_SetConfig+0x930>)
 800d636:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d63a:	b29b      	uxth	r3, r3
 800d63c:	2200      	movs	r2, #0
 800d63e:	603b      	str	r3, [r7, #0]
 800d640:	607a      	str	r2, [r7, #4]
 800d642:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d646:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800d64a:	f7f3 f86d 	bl	8000728 <__aeabi_uldivmod>
 800d64e:	4602      	mov	r2, r0
 800d650:	460b      	mov	r3, r1
 800d652:	4610      	mov	r0, r2
 800d654:	4619      	mov	r1, r3
 800d656:	f04f 0200 	mov.w	r2, #0
 800d65a:	f04f 0300 	mov.w	r3, #0
 800d65e:	020b      	lsls	r3, r1, #8
 800d660:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800d664:	0202      	lsls	r2, r0, #8
 800d666:	6979      	ldr	r1, [r7, #20]
 800d668:	6849      	ldr	r1, [r1, #4]
 800d66a:	0849      	lsrs	r1, r1, #1
 800d66c:	2000      	movs	r0, #0
 800d66e:	460c      	mov	r4, r1
 800d670:	4605      	mov	r5, r0
 800d672:	eb12 0804 	adds.w	r8, r2, r4
 800d676:	eb43 0905 	adc.w	r9, r3, r5
 800d67a:	697b      	ldr	r3, [r7, #20]
 800d67c:	685b      	ldr	r3, [r3, #4]
 800d67e:	2200      	movs	r2, #0
 800d680:	469a      	mov	sl, r3
 800d682:	4693      	mov	fp, r2
 800d684:	4652      	mov	r2, sl
 800d686:	465b      	mov	r3, fp
 800d688:	4640      	mov	r0, r8
 800d68a:	4649      	mov	r1, r9
 800d68c:	f7f3 f84c 	bl	8000728 <__aeabi_uldivmod>
 800d690:	4602      	mov	r2, r0
 800d692:	460b      	mov	r3, r1
 800d694:	4613      	mov	r3, r2
 800d696:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800d698:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d69a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d69e:	d308      	bcc.n	800d6b2 <UART_SetConfig+0x79a>
 800d6a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d6a2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d6a6:	d204      	bcs.n	800d6b2 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800d6a8:	697b      	ldr	r3, [r7, #20]
 800d6aa:	681b      	ldr	r3, [r3, #0]
 800d6ac:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d6ae:	60da      	str	r2, [r3, #12]
 800d6b0:	e17c      	b.n	800d9ac <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800d6b2:	2301      	movs	r3, #1
 800d6b4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800d6b8:	e178      	b.n	800d9ac <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d6ba:	697b      	ldr	r3, [r7, #20]
 800d6bc:	69db      	ldr	r3, [r3, #28]
 800d6be:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d6c2:	f040 80c5 	bne.w	800d850 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800d6c6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800d6ca:	2b20      	cmp	r3, #32
 800d6cc:	dc48      	bgt.n	800d760 <UART_SetConfig+0x848>
 800d6ce:	2b00      	cmp	r3, #0
 800d6d0:	db7b      	blt.n	800d7ca <UART_SetConfig+0x8b2>
 800d6d2:	2b20      	cmp	r3, #32
 800d6d4:	d879      	bhi.n	800d7ca <UART_SetConfig+0x8b2>
 800d6d6:	a201      	add	r2, pc, #4	@ (adr r2, 800d6dc <UART_SetConfig+0x7c4>)
 800d6d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d6dc:	0800d767 	.word	0x0800d767
 800d6e0:	0800d76f 	.word	0x0800d76f
 800d6e4:	0800d7cb 	.word	0x0800d7cb
 800d6e8:	0800d7cb 	.word	0x0800d7cb
 800d6ec:	0800d777 	.word	0x0800d777
 800d6f0:	0800d7cb 	.word	0x0800d7cb
 800d6f4:	0800d7cb 	.word	0x0800d7cb
 800d6f8:	0800d7cb 	.word	0x0800d7cb
 800d6fc:	0800d787 	.word	0x0800d787
 800d700:	0800d7cb 	.word	0x0800d7cb
 800d704:	0800d7cb 	.word	0x0800d7cb
 800d708:	0800d7cb 	.word	0x0800d7cb
 800d70c:	0800d7cb 	.word	0x0800d7cb
 800d710:	0800d7cb 	.word	0x0800d7cb
 800d714:	0800d7cb 	.word	0x0800d7cb
 800d718:	0800d7cb 	.word	0x0800d7cb
 800d71c:	0800d797 	.word	0x0800d797
 800d720:	0800d7cb 	.word	0x0800d7cb
 800d724:	0800d7cb 	.word	0x0800d7cb
 800d728:	0800d7cb 	.word	0x0800d7cb
 800d72c:	0800d7cb 	.word	0x0800d7cb
 800d730:	0800d7cb 	.word	0x0800d7cb
 800d734:	0800d7cb 	.word	0x0800d7cb
 800d738:	0800d7cb 	.word	0x0800d7cb
 800d73c:	0800d7cb 	.word	0x0800d7cb
 800d740:	0800d7cb 	.word	0x0800d7cb
 800d744:	0800d7cb 	.word	0x0800d7cb
 800d748:	0800d7cb 	.word	0x0800d7cb
 800d74c:	0800d7cb 	.word	0x0800d7cb
 800d750:	0800d7cb 	.word	0x0800d7cb
 800d754:	0800d7cb 	.word	0x0800d7cb
 800d758:	0800d7cb 	.word	0x0800d7cb
 800d75c:	0800d7bd 	.word	0x0800d7bd
 800d760:	2b40      	cmp	r3, #64	@ 0x40
 800d762:	d02e      	beq.n	800d7c2 <UART_SetConfig+0x8aa>
 800d764:	e031      	b.n	800d7ca <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d766:	f7fb f8bd 	bl	80088e4 <HAL_RCC_GetPCLK1Freq>
 800d76a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800d76c:	e033      	b.n	800d7d6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d76e:	f7fb f8cf 	bl	8008910 <HAL_RCC_GetPCLK2Freq>
 800d772:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800d774:	e02f      	b.n	800d7d6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d776:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d77a:	4618      	mov	r0, r3
 800d77c:	f7fd f87e 	bl	800a87c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d780:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d782:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d784:	e027      	b.n	800d7d6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d786:	f107 0318 	add.w	r3, r7, #24
 800d78a:	4618      	mov	r0, r3
 800d78c:	f7fd f9ca 	bl	800ab24 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d790:	69fb      	ldr	r3, [r7, #28]
 800d792:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d794:	e01f      	b.n	800d7d6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d796:	4b2d      	ldr	r3, [pc, #180]	@ (800d84c <UART_SetConfig+0x934>)
 800d798:	681b      	ldr	r3, [r3, #0]
 800d79a:	f003 0320 	and.w	r3, r3, #32
 800d79e:	2b00      	cmp	r3, #0
 800d7a0:	d009      	beq.n	800d7b6 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d7a2:	4b2a      	ldr	r3, [pc, #168]	@ (800d84c <UART_SetConfig+0x934>)
 800d7a4:	681b      	ldr	r3, [r3, #0]
 800d7a6:	08db      	lsrs	r3, r3, #3
 800d7a8:	f003 0303 	and.w	r3, r3, #3
 800d7ac:	4a24      	ldr	r2, [pc, #144]	@ (800d840 <UART_SetConfig+0x928>)
 800d7ae:	fa22 f303 	lsr.w	r3, r2, r3
 800d7b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d7b4:	e00f      	b.n	800d7d6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800d7b6:	4b22      	ldr	r3, [pc, #136]	@ (800d840 <UART_SetConfig+0x928>)
 800d7b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d7ba:	e00c      	b.n	800d7d6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d7bc:	4b21      	ldr	r3, [pc, #132]	@ (800d844 <UART_SetConfig+0x92c>)
 800d7be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d7c0:	e009      	b.n	800d7d6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d7c2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d7c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d7c8:	e005      	b.n	800d7d6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800d7ca:	2300      	movs	r3, #0
 800d7cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800d7ce:	2301      	movs	r3, #1
 800d7d0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800d7d4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800d7d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d7d8:	2b00      	cmp	r3, #0
 800d7da:	f000 80e7 	beq.w	800d9ac <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d7de:	697b      	ldr	r3, [r7, #20]
 800d7e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d7e2:	4a19      	ldr	r2, [pc, #100]	@ (800d848 <UART_SetConfig+0x930>)
 800d7e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d7e8:	461a      	mov	r2, r3
 800d7ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d7ec:	fbb3 f3f2 	udiv	r3, r3, r2
 800d7f0:	005a      	lsls	r2, r3, #1
 800d7f2:	697b      	ldr	r3, [r7, #20]
 800d7f4:	685b      	ldr	r3, [r3, #4]
 800d7f6:	085b      	lsrs	r3, r3, #1
 800d7f8:	441a      	add	r2, r3
 800d7fa:	697b      	ldr	r3, [r7, #20]
 800d7fc:	685b      	ldr	r3, [r3, #4]
 800d7fe:	fbb2 f3f3 	udiv	r3, r2, r3
 800d802:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d804:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d806:	2b0f      	cmp	r3, #15
 800d808:	d916      	bls.n	800d838 <UART_SetConfig+0x920>
 800d80a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d80c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d810:	d212      	bcs.n	800d838 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d812:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d814:	b29b      	uxth	r3, r3
 800d816:	f023 030f 	bic.w	r3, r3, #15
 800d81a:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d81c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d81e:	085b      	lsrs	r3, r3, #1
 800d820:	b29b      	uxth	r3, r3
 800d822:	f003 0307 	and.w	r3, r3, #7
 800d826:	b29a      	uxth	r2, r3
 800d828:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800d82a:	4313      	orrs	r3, r2
 800d82c:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800d82e:	697b      	ldr	r3, [r7, #20]
 800d830:	681b      	ldr	r3, [r3, #0]
 800d832:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800d834:	60da      	str	r2, [r3, #12]
 800d836:	e0b9      	b.n	800d9ac <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800d838:	2301      	movs	r3, #1
 800d83a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800d83e:	e0b5      	b.n	800d9ac <UART_SetConfig+0xa94>
 800d840:	03d09000 	.word	0x03d09000
 800d844:	003d0900 	.word	0x003d0900
 800d848:	08013ad8 	.word	0x08013ad8
 800d84c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800d850:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800d854:	2b20      	cmp	r3, #32
 800d856:	dc49      	bgt.n	800d8ec <UART_SetConfig+0x9d4>
 800d858:	2b00      	cmp	r3, #0
 800d85a:	db7c      	blt.n	800d956 <UART_SetConfig+0xa3e>
 800d85c:	2b20      	cmp	r3, #32
 800d85e:	d87a      	bhi.n	800d956 <UART_SetConfig+0xa3e>
 800d860:	a201      	add	r2, pc, #4	@ (adr r2, 800d868 <UART_SetConfig+0x950>)
 800d862:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d866:	bf00      	nop
 800d868:	0800d8f3 	.word	0x0800d8f3
 800d86c:	0800d8fb 	.word	0x0800d8fb
 800d870:	0800d957 	.word	0x0800d957
 800d874:	0800d957 	.word	0x0800d957
 800d878:	0800d903 	.word	0x0800d903
 800d87c:	0800d957 	.word	0x0800d957
 800d880:	0800d957 	.word	0x0800d957
 800d884:	0800d957 	.word	0x0800d957
 800d888:	0800d913 	.word	0x0800d913
 800d88c:	0800d957 	.word	0x0800d957
 800d890:	0800d957 	.word	0x0800d957
 800d894:	0800d957 	.word	0x0800d957
 800d898:	0800d957 	.word	0x0800d957
 800d89c:	0800d957 	.word	0x0800d957
 800d8a0:	0800d957 	.word	0x0800d957
 800d8a4:	0800d957 	.word	0x0800d957
 800d8a8:	0800d923 	.word	0x0800d923
 800d8ac:	0800d957 	.word	0x0800d957
 800d8b0:	0800d957 	.word	0x0800d957
 800d8b4:	0800d957 	.word	0x0800d957
 800d8b8:	0800d957 	.word	0x0800d957
 800d8bc:	0800d957 	.word	0x0800d957
 800d8c0:	0800d957 	.word	0x0800d957
 800d8c4:	0800d957 	.word	0x0800d957
 800d8c8:	0800d957 	.word	0x0800d957
 800d8cc:	0800d957 	.word	0x0800d957
 800d8d0:	0800d957 	.word	0x0800d957
 800d8d4:	0800d957 	.word	0x0800d957
 800d8d8:	0800d957 	.word	0x0800d957
 800d8dc:	0800d957 	.word	0x0800d957
 800d8e0:	0800d957 	.word	0x0800d957
 800d8e4:	0800d957 	.word	0x0800d957
 800d8e8:	0800d949 	.word	0x0800d949
 800d8ec:	2b40      	cmp	r3, #64	@ 0x40
 800d8ee:	d02e      	beq.n	800d94e <UART_SetConfig+0xa36>
 800d8f0:	e031      	b.n	800d956 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d8f2:	f7fa fff7 	bl	80088e4 <HAL_RCC_GetPCLK1Freq>
 800d8f6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800d8f8:	e033      	b.n	800d962 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d8fa:	f7fb f809 	bl	8008910 <HAL_RCC_GetPCLK2Freq>
 800d8fe:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800d900:	e02f      	b.n	800d962 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d902:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d906:	4618      	mov	r0, r3
 800d908:	f7fc ffb8 	bl	800a87c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d90c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d90e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d910:	e027      	b.n	800d962 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d912:	f107 0318 	add.w	r3, r7, #24
 800d916:	4618      	mov	r0, r3
 800d918:	f7fd f904 	bl	800ab24 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d91c:	69fb      	ldr	r3, [r7, #28]
 800d91e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d920:	e01f      	b.n	800d962 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d922:	4b2d      	ldr	r3, [pc, #180]	@ (800d9d8 <UART_SetConfig+0xac0>)
 800d924:	681b      	ldr	r3, [r3, #0]
 800d926:	f003 0320 	and.w	r3, r3, #32
 800d92a:	2b00      	cmp	r3, #0
 800d92c:	d009      	beq.n	800d942 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d92e:	4b2a      	ldr	r3, [pc, #168]	@ (800d9d8 <UART_SetConfig+0xac0>)
 800d930:	681b      	ldr	r3, [r3, #0]
 800d932:	08db      	lsrs	r3, r3, #3
 800d934:	f003 0303 	and.w	r3, r3, #3
 800d938:	4a28      	ldr	r2, [pc, #160]	@ (800d9dc <UART_SetConfig+0xac4>)
 800d93a:	fa22 f303 	lsr.w	r3, r2, r3
 800d93e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d940:	e00f      	b.n	800d962 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800d942:	4b26      	ldr	r3, [pc, #152]	@ (800d9dc <UART_SetConfig+0xac4>)
 800d944:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d946:	e00c      	b.n	800d962 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d948:	4b25      	ldr	r3, [pc, #148]	@ (800d9e0 <UART_SetConfig+0xac8>)
 800d94a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d94c:	e009      	b.n	800d962 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d94e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d952:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d954:	e005      	b.n	800d962 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800d956:	2300      	movs	r3, #0
 800d958:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800d95a:	2301      	movs	r3, #1
 800d95c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800d960:	bf00      	nop
    }

    if (pclk != 0U)
 800d962:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d964:	2b00      	cmp	r3, #0
 800d966:	d021      	beq.n	800d9ac <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d968:	697b      	ldr	r3, [r7, #20]
 800d96a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d96c:	4a1d      	ldr	r2, [pc, #116]	@ (800d9e4 <UART_SetConfig+0xacc>)
 800d96e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d972:	461a      	mov	r2, r3
 800d974:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d976:	fbb3 f2f2 	udiv	r2, r3, r2
 800d97a:	697b      	ldr	r3, [r7, #20]
 800d97c:	685b      	ldr	r3, [r3, #4]
 800d97e:	085b      	lsrs	r3, r3, #1
 800d980:	441a      	add	r2, r3
 800d982:	697b      	ldr	r3, [r7, #20]
 800d984:	685b      	ldr	r3, [r3, #4]
 800d986:	fbb2 f3f3 	udiv	r3, r2, r3
 800d98a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d98c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d98e:	2b0f      	cmp	r3, #15
 800d990:	d909      	bls.n	800d9a6 <UART_SetConfig+0xa8e>
 800d992:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d994:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d998:	d205      	bcs.n	800d9a6 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800d99a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d99c:	b29a      	uxth	r2, r3
 800d99e:	697b      	ldr	r3, [r7, #20]
 800d9a0:	681b      	ldr	r3, [r3, #0]
 800d9a2:	60da      	str	r2, [r3, #12]
 800d9a4:	e002      	b.n	800d9ac <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800d9a6:	2301      	movs	r3, #1
 800d9a8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800d9ac:	697b      	ldr	r3, [r7, #20]
 800d9ae:	2201      	movs	r2, #1
 800d9b0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800d9b4:	697b      	ldr	r3, [r7, #20]
 800d9b6:	2201      	movs	r2, #1
 800d9b8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d9bc:	697b      	ldr	r3, [r7, #20]
 800d9be:	2200      	movs	r2, #0
 800d9c0:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800d9c2:	697b      	ldr	r3, [r7, #20]
 800d9c4:	2200      	movs	r2, #0
 800d9c6:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800d9c8:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800d9cc:	4618      	mov	r0, r3
 800d9ce:	3748      	adds	r7, #72	@ 0x48
 800d9d0:	46bd      	mov	sp, r7
 800d9d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d9d6:	bf00      	nop
 800d9d8:	58024400 	.word	0x58024400
 800d9dc:	03d09000 	.word	0x03d09000
 800d9e0:	003d0900 	.word	0x003d0900
 800d9e4:	08013ad8 	.word	0x08013ad8

0800d9e8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d9e8:	b480      	push	{r7}
 800d9ea:	b083      	sub	sp, #12
 800d9ec:	af00      	add	r7, sp, #0
 800d9ee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d9f4:	f003 0308 	and.w	r3, r3, #8
 800d9f8:	2b00      	cmp	r3, #0
 800d9fa:	d00a      	beq.n	800da12 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	681b      	ldr	r3, [r3, #0]
 800da00:	685b      	ldr	r3, [r3, #4]
 800da02:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	681b      	ldr	r3, [r3, #0]
 800da0e:	430a      	orrs	r2, r1
 800da10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800da16:	f003 0301 	and.w	r3, r3, #1
 800da1a:	2b00      	cmp	r3, #0
 800da1c:	d00a      	beq.n	800da34 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	681b      	ldr	r3, [r3, #0]
 800da22:	685b      	ldr	r3, [r3, #4]
 800da24:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	681b      	ldr	r3, [r3, #0]
 800da30:	430a      	orrs	r2, r1
 800da32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800da38:	f003 0302 	and.w	r3, r3, #2
 800da3c:	2b00      	cmp	r3, #0
 800da3e:	d00a      	beq.n	800da56 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	681b      	ldr	r3, [r3, #0]
 800da44:	685b      	ldr	r3, [r3, #4]
 800da46:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	681b      	ldr	r3, [r3, #0]
 800da52:	430a      	orrs	r2, r1
 800da54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800da5a:	f003 0304 	and.w	r3, r3, #4
 800da5e:	2b00      	cmp	r3, #0
 800da60:	d00a      	beq.n	800da78 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	681b      	ldr	r3, [r3, #0]
 800da66:	685b      	ldr	r3, [r3, #4]
 800da68:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	681b      	ldr	r3, [r3, #0]
 800da74:	430a      	orrs	r2, r1
 800da76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800da7c:	f003 0310 	and.w	r3, r3, #16
 800da80:	2b00      	cmp	r3, #0
 800da82:	d00a      	beq.n	800da9a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	681b      	ldr	r3, [r3, #0]
 800da88:	689b      	ldr	r3, [r3, #8]
 800da8a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	681b      	ldr	r3, [r3, #0]
 800da96:	430a      	orrs	r2, r1
 800da98:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800da9e:	f003 0320 	and.w	r3, r3, #32
 800daa2:	2b00      	cmp	r3, #0
 800daa4:	d00a      	beq.n	800dabc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	681b      	ldr	r3, [r3, #0]
 800daaa:	689b      	ldr	r3, [r3, #8]
 800daac:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	681b      	ldr	r3, [r3, #0]
 800dab8:	430a      	orrs	r2, r1
 800daba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dac0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dac4:	2b00      	cmp	r3, #0
 800dac6:	d01a      	beq.n	800dafe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	681b      	ldr	r3, [r3, #0]
 800dacc:	685b      	ldr	r3, [r3, #4]
 800dace:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	681b      	ldr	r3, [r3, #0]
 800dada:	430a      	orrs	r2, r1
 800dadc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dae2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800dae6:	d10a      	bne.n	800dafe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	681b      	ldr	r3, [r3, #0]
 800daec:	685b      	ldr	r3, [r3, #4]
 800daee:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	681b      	ldr	r3, [r3, #0]
 800dafa:	430a      	orrs	r2, r1
 800dafc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800db02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800db06:	2b00      	cmp	r3, #0
 800db08:	d00a      	beq.n	800db20 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	681b      	ldr	r3, [r3, #0]
 800db0e:	685b      	ldr	r3, [r3, #4]
 800db10:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	681b      	ldr	r3, [r3, #0]
 800db1c:	430a      	orrs	r2, r1
 800db1e:	605a      	str	r2, [r3, #4]
  }
}
 800db20:	bf00      	nop
 800db22:	370c      	adds	r7, #12
 800db24:	46bd      	mov	sp, r7
 800db26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db2a:	4770      	bx	lr

0800db2c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800db2c:	b580      	push	{r7, lr}
 800db2e:	b098      	sub	sp, #96	@ 0x60
 800db30:	af02      	add	r7, sp, #8
 800db32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	2200      	movs	r2, #0
 800db38:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800db3c:	f7f5 f80c 	bl	8002b58 <HAL_GetTick>
 800db40:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	681b      	ldr	r3, [r3, #0]
 800db46:	681b      	ldr	r3, [r3, #0]
 800db48:	f003 0308 	and.w	r3, r3, #8
 800db4c:	2b08      	cmp	r3, #8
 800db4e:	d12f      	bne.n	800dbb0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800db50:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800db54:	9300      	str	r3, [sp, #0]
 800db56:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800db58:	2200      	movs	r2, #0
 800db5a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800db5e:	6878      	ldr	r0, [r7, #4]
 800db60:	f000 f88e 	bl	800dc80 <UART_WaitOnFlagUntilTimeout>
 800db64:	4603      	mov	r3, r0
 800db66:	2b00      	cmp	r3, #0
 800db68:	d022      	beq.n	800dbb0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	681b      	ldr	r3, [r3, #0]
 800db6e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db72:	e853 3f00 	ldrex	r3, [r3]
 800db76:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800db78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800db7a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800db7e:	653b      	str	r3, [r7, #80]	@ 0x50
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	681b      	ldr	r3, [r3, #0]
 800db84:	461a      	mov	r2, r3
 800db86:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800db88:	647b      	str	r3, [r7, #68]	@ 0x44
 800db8a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db8c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800db8e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800db90:	e841 2300 	strex	r3, r2, [r1]
 800db94:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800db96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800db98:	2b00      	cmp	r3, #0
 800db9a:	d1e6      	bne.n	800db6a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	2220      	movs	r2, #32
 800dba0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	2200      	movs	r2, #0
 800dba8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800dbac:	2303      	movs	r3, #3
 800dbae:	e063      	b.n	800dc78 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	681b      	ldr	r3, [r3, #0]
 800dbb4:	681b      	ldr	r3, [r3, #0]
 800dbb6:	f003 0304 	and.w	r3, r3, #4
 800dbba:	2b04      	cmp	r3, #4
 800dbbc:	d149      	bne.n	800dc52 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800dbbe:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800dbc2:	9300      	str	r3, [sp, #0]
 800dbc4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800dbc6:	2200      	movs	r2, #0
 800dbc8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800dbcc:	6878      	ldr	r0, [r7, #4]
 800dbce:	f000 f857 	bl	800dc80 <UART_WaitOnFlagUntilTimeout>
 800dbd2:	4603      	mov	r3, r0
 800dbd4:	2b00      	cmp	r3, #0
 800dbd6:	d03c      	beq.n	800dc52 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	681b      	ldr	r3, [r3, #0]
 800dbdc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dbde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dbe0:	e853 3f00 	ldrex	r3, [r3]
 800dbe4:	623b      	str	r3, [r7, #32]
   return(result);
 800dbe6:	6a3b      	ldr	r3, [r7, #32]
 800dbe8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800dbec:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	681b      	ldr	r3, [r3, #0]
 800dbf2:	461a      	mov	r2, r3
 800dbf4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dbf6:	633b      	str	r3, [r7, #48]	@ 0x30
 800dbf8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dbfa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800dbfc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800dbfe:	e841 2300 	strex	r3, r2, [r1]
 800dc02:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800dc04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc06:	2b00      	cmp	r3, #0
 800dc08:	d1e6      	bne.n	800dbd8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	681b      	ldr	r3, [r3, #0]
 800dc0e:	3308      	adds	r3, #8
 800dc10:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc12:	693b      	ldr	r3, [r7, #16]
 800dc14:	e853 3f00 	ldrex	r3, [r3]
 800dc18:	60fb      	str	r3, [r7, #12]
   return(result);
 800dc1a:	68fb      	ldr	r3, [r7, #12]
 800dc1c:	f023 0301 	bic.w	r3, r3, #1
 800dc20:	64bb      	str	r3, [r7, #72]	@ 0x48
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	681b      	ldr	r3, [r3, #0]
 800dc26:	3308      	adds	r3, #8
 800dc28:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800dc2a:	61fa      	str	r2, [r7, #28]
 800dc2c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc2e:	69b9      	ldr	r1, [r7, #24]
 800dc30:	69fa      	ldr	r2, [r7, #28]
 800dc32:	e841 2300 	strex	r3, r2, [r1]
 800dc36:	617b      	str	r3, [r7, #20]
   return(result);
 800dc38:	697b      	ldr	r3, [r7, #20]
 800dc3a:	2b00      	cmp	r3, #0
 800dc3c:	d1e5      	bne.n	800dc0a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	2220      	movs	r2, #32
 800dc42:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	2200      	movs	r2, #0
 800dc4a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800dc4e:	2303      	movs	r3, #3
 800dc50:	e012      	b.n	800dc78 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	2220      	movs	r2, #32
 800dc56:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	2220      	movs	r2, #32
 800dc5e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	2200      	movs	r2, #0
 800dc66:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	2200      	movs	r2, #0
 800dc6c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	2200      	movs	r2, #0
 800dc72:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800dc76:	2300      	movs	r3, #0
}
 800dc78:	4618      	mov	r0, r3
 800dc7a:	3758      	adds	r7, #88	@ 0x58
 800dc7c:	46bd      	mov	sp, r7
 800dc7e:	bd80      	pop	{r7, pc}

0800dc80 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800dc80:	b580      	push	{r7, lr}
 800dc82:	b084      	sub	sp, #16
 800dc84:	af00      	add	r7, sp, #0
 800dc86:	60f8      	str	r0, [r7, #12]
 800dc88:	60b9      	str	r1, [r7, #8]
 800dc8a:	603b      	str	r3, [r7, #0]
 800dc8c:	4613      	mov	r3, r2
 800dc8e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800dc90:	e04f      	b.n	800dd32 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800dc92:	69bb      	ldr	r3, [r7, #24]
 800dc94:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc98:	d04b      	beq.n	800dd32 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800dc9a:	f7f4 ff5d 	bl	8002b58 <HAL_GetTick>
 800dc9e:	4602      	mov	r2, r0
 800dca0:	683b      	ldr	r3, [r7, #0]
 800dca2:	1ad3      	subs	r3, r2, r3
 800dca4:	69ba      	ldr	r2, [r7, #24]
 800dca6:	429a      	cmp	r2, r3
 800dca8:	d302      	bcc.n	800dcb0 <UART_WaitOnFlagUntilTimeout+0x30>
 800dcaa:	69bb      	ldr	r3, [r7, #24]
 800dcac:	2b00      	cmp	r3, #0
 800dcae:	d101      	bne.n	800dcb4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800dcb0:	2303      	movs	r3, #3
 800dcb2:	e04e      	b.n	800dd52 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800dcb4:	68fb      	ldr	r3, [r7, #12]
 800dcb6:	681b      	ldr	r3, [r3, #0]
 800dcb8:	681b      	ldr	r3, [r3, #0]
 800dcba:	f003 0304 	and.w	r3, r3, #4
 800dcbe:	2b00      	cmp	r3, #0
 800dcc0:	d037      	beq.n	800dd32 <UART_WaitOnFlagUntilTimeout+0xb2>
 800dcc2:	68bb      	ldr	r3, [r7, #8]
 800dcc4:	2b80      	cmp	r3, #128	@ 0x80
 800dcc6:	d034      	beq.n	800dd32 <UART_WaitOnFlagUntilTimeout+0xb2>
 800dcc8:	68bb      	ldr	r3, [r7, #8]
 800dcca:	2b40      	cmp	r3, #64	@ 0x40
 800dccc:	d031      	beq.n	800dd32 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800dcce:	68fb      	ldr	r3, [r7, #12]
 800dcd0:	681b      	ldr	r3, [r3, #0]
 800dcd2:	69db      	ldr	r3, [r3, #28]
 800dcd4:	f003 0308 	and.w	r3, r3, #8
 800dcd8:	2b08      	cmp	r3, #8
 800dcda:	d110      	bne.n	800dcfe <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800dcdc:	68fb      	ldr	r3, [r7, #12]
 800dcde:	681b      	ldr	r3, [r3, #0]
 800dce0:	2208      	movs	r2, #8
 800dce2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800dce4:	68f8      	ldr	r0, [r7, #12]
 800dce6:	f000 f95b 	bl	800dfa0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800dcea:	68fb      	ldr	r3, [r7, #12]
 800dcec:	2208      	movs	r2, #8
 800dcee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800dcf2:	68fb      	ldr	r3, [r7, #12]
 800dcf4:	2200      	movs	r2, #0
 800dcf6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800dcfa:	2301      	movs	r3, #1
 800dcfc:	e029      	b.n	800dd52 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800dcfe:	68fb      	ldr	r3, [r7, #12]
 800dd00:	681b      	ldr	r3, [r3, #0]
 800dd02:	69db      	ldr	r3, [r3, #28]
 800dd04:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800dd08:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800dd0c:	d111      	bne.n	800dd32 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800dd0e:	68fb      	ldr	r3, [r7, #12]
 800dd10:	681b      	ldr	r3, [r3, #0]
 800dd12:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800dd16:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800dd18:	68f8      	ldr	r0, [r7, #12]
 800dd1a:	f000 f941 	bl	800dfa0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800dd1e:	68fb      	ldr	r3, [r7, #12]
 800dd20:	2220      	movs	r2, #32
 800dd22:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800dd26:	68fb      	ldr	r3, [r7, #12]
 800dd28:	2200      	movs	r2, #0
 800dd2a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800dd2e:	2303      	movs	r3, #3
 800dd30:	e00f      	b.n	800dd52 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800dd32:	68fb      	ldr	r3, [r7, #12]
 800dd34:	681b      	ldr	r3, [r3, #0]
 800dd36:	69da      	ldr	r2, [r3, #28]
 800dd38:	68bb      	ldr	r3, [r7, #8]
 800dd3a:	4013      	ands	r3, r2
 800dd3c:	68ba      	ldr	r2, [r7, #8]
 800dd3e:	429a      	cmp	r2, r3
 800dd40:	bf0c      	ite	eq
 800dd42:	2301      	moveq	r3, #1
 800dd44:	2300      	movne	r3, #0
 800dd46:	b2db      	uxtb	r3, r3
 800dd48:	461a      	mov	r2, r3
 800dd4a:	79fb      	ldrb	r3, [r7, #7]
 800dd4c:	429a      	cmp	r2, r3
 800dd4e:	d0a0      	beq.n	800dc92 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800dd50:	2300      	movs	r3, #0
}
 800dd52:	4618      	mov	r0, r3
 800dd54:	3710      	adds	r7, #16
 800dd56:	46bd      	mov	sp, r7
 800dd58:	bd80      	pop	{r7, pc}
	...

0800dd5c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800dd5c:	b480      	push	{r7}
 800dd5e:	b0a3      	sub	sp, #140	@ 0x8c
 800dd60:	af00      	add	r7, sp, #0
 800dd62:	60f8      	str	r0, [r7, #12]
 800dd64:	60b9      	str	r1, [r7, #8]
 800dd66:	4613      	mov	r3, r2
 800dd68:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800dd6a:	68fb      	ldr	r3, [r7, #12]
 800dd6c:	68ba      	ldr	r2, [r7, #8]
 800dd6e:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 800dd70:	68fb      	ldr	r3, [r7, #12]
 800dd72:	88fa      	ldrh	r2, [r7, #6]
 800dd74:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 800dd78:	68fb      	ldr	r3, [r7, #12]
 800dd7a:	88fa      	ldrh	r2, [r7, #6]
 800dd7c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 800dd80:	68fb      	ldr	r3, [r7, #12]
 800dd82:	2200      	movs	r2, #0
 800dd84:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800dd86:	68fb      	ldr	r3, [r7, #12]
 800dd88:	689b      	ldr	r3, [r3, #8]
 800dd8a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800dd8e:	d10e      	bne.n	800ddae <UART_Start_Receive_IT+0x52>
 800dd90:	68fb      	ldr	r3, [r7, #12]
 800dd92:	691b      	ldr	r3, [r3, #16]
 800dd94:	2b00      	cmp	r3, #0
 800dd96:	d105      	bne.n	800dda4 <UART_Start_Receive_IT+0x48>
 800dd98:	68fb      	ldr	r3, [r7, #12]
 800dd9a:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800dd9e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800dda2:	e02d      	b.n	800de00 <UART_Start_Receive_IT+0xa4>
 800dda4:	68fb      	ldr	r3, [r7, #12]
 800dda6:	22ff      	movs	r2, #255	@ 0xff
 800dda8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800ddac:	e028      	b.n	800de00 <UART_Start_Receive_IT+0xa4>
 800ddae:	68fb      	ldr	r3, [r7, #12]
 800ddb0:	689b      	ldr	r3, [r3, #8]
 800ddb2:	2b00      	cmp	r3, #0
 800ddb4:	d10d      	bne.n	800ddd2 <UART_Start_Receive_IT+0x76>
 800ddb6:	68fb      	ldr	r3, [r7, #12]
 800ddb8:	691b      	ldr	r3, [r3, #16]
 800ddba:	2b00      	cmp	r3, #0
 800ddbc:	d104      	bne.n	800ddc8 <UART_Start_Receive_IT+0x6c>
 800ddbe:	68fb      	ldr	r3, [r7, #12]
 800ddc0:	22ff      	movs	r2, #255	@ 0xff
 800ddc2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800ddc6:	e01b      	b.n	800de00 <UART_Start_Receive_IT+0xa4>
 800ddc8:	68fb      	ldr	r3, [r7, #12]
 800ddca:	227f      	movs	r2, #127	@ 0x7f
 800ddcc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800ddd0:	e016      	b.n	800de00 <UART_Start_Receive_IT+0xa4>
 800ddd2:	68fb      	ldr	r3, [r7, #12]
 800ddd4:	689b      	ldr	r3, [r3, #8]
 800ddd6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ddda:	d10d      	bne.n	800ddf8 <UART_Start_Receive_IT+0x9c>
 800dddc:	68fb      	ldr	r3, [r7, #12]
 800ddde:	691b      	ldr	r3, [r3, #16]
 800dde0:	2b00      	cmp	r3, #0
 800dde2:	d104      	bne.n	800ddee <UART_Start_Receive_IT+0x92>
 800dde4:	68fb      	ldr	r3, [r7, #12]
 800dde6:	227f      	movs	r2, #127	@ 0x7f
 800dde8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800ddec:	e008      	b.n	800de00 <UART_Start_Receive_IT+0xa4>
 800ddee:	68fb      	ldr	r3, [r7, #12]
 800ddf0:	223f      	movs	r2, #63	@ 0x3f
 800ddf2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800ddf6:	e003      	b.n	800de00 <UART_Start_Receive_IT+0xa4>
 800ddf8:	68fb      	ldr	r3, [r7, #12]
 800ddfa:	2200      	movs	r2, #0
 800ddfc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800de00:	68fb      	ldr	r3, [r7, #12]
 800de02:	2200      	movs	r2, #0
 800de04:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800de08:	68fb      	ldr	r3, [r7, #12]
 800de0a:	2222      	movs	r2, #34	@ 0x22
 800de0c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800de10:	68fb      	ldr	r3, [r7, #12]
 800de12:	681b      	ldr	r3, [r3, #0]
 800de14:	3308      	adds	r3, #8
 800de16:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de18:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800de1a:	e853 3f00 	ldrex	r3, [r3]
 800de1e:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800de20:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800de22:	f043 0301 	orr.w	r3, r3, #1
 800de26:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800de2a:	68fb      	ldr	r3, [r7, #12]
 800de2c:	681b      	ldr	r3, [r3, #0]
 800de2e:	3308      	adds	r3, #8
 800de30:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800de34:	673a      	str	r2, [r7, #112]	@ 0x70
 800de36:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de38:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800de3a:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800de3c:	e841 2300 	strex	r3, r2, [r1]
 800de40:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 800de42:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800de44:	2b00      	cmp	r3, #0
 800de46:	d1e3      	bne.n	800de10 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800de48:	68fb      	ldr	r3, [r7, #12]
 800de4a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800de4c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800de50:	d14f      	bne.n	800def2 <UART_Start_Receive_IT+0x196>
 800de52:	68fb      	ldr	r3, [r7, #12]
 800de54:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800de58:	88fa      	ldrh	r2, [r7, #6]
 800de5a:	429a      	cmp	r2, r3
 800de5c:	d349      	bcc.n	800def2 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800de5e:	68fb      	ldr	r3, [r7, #12]
 800de60:	689b      	ldr	r3, [r3, #8]
 800de62:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800de66:	d107      	bne.n	800de78 <UART_Start_Receive_IT+0x11c>
 800de68:	68fb      	ldr	r3, [r7, #12]
 800de6a:	691b      	ldr	r3, [r3, #16]
 800de6c:	2b00      	cmp	r3, #0
 800de6e:	d103      	bne.n	800de78 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800de70:	68fb      	ldr	r3, [r7, #12]
 800de72:	4a47      	ldr	r2, [pc, #284]	@ (800df90 <UART_Start_Receive_IT+0x234>)
 800de74:	675a      	str	r2, [r3, #116]	@ 0x74
 800de76:	e002      	b.n	800de7e <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800de78:	68fb      	ldr	r3, [r7, #12]
 800de7a:	4a46      	ldr	r2, [pc, #280]	@ (800df94 <UART_Start_Receive_IT+0x238>)
 800de7c:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800de7e:	68fb      	ldr	r3, [r7, #12]
 800de80:	691b      	ldr	r3, [r3, #16]
 800de82:	2b00      	cmp	r3, #0
 800de84:	d01a      	beq.n	800debc <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800de86:	68fb      	ldr	r3, [r7, #12]
 800de88:	681b      	ldr	r3, [r3, #0]
 800de8a:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de8c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800de8e:	e853 3f00 	ldrex	r3, [r3]
 800de92:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800de94:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800de96:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800de9a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800de9e:	68fb      	ldr	r3, [r7, #12]
 800dea0:	681b      	ldr	r3, [r3, #0]
 800dea2:	461a      	mov	r2, r3
 800dea4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800dea8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800deaa:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800deac:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800deae:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800deb0:	e841 2300 	strex	r3, r2, [r1]
 800deb4:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800deb6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800deb8:	2b00      	cmp	r3, #0
 800deba:	d1e4      	bne.n	800de86 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800debc:	68fb      	ldr	r3, [r7, #12]
 800debe:	681b      	ldr	r3, [r3, #0]
 800dec0:	3308      	adds	r3, #8
 800dec2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dec4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dec6:	e853 3f00 	ldrex	r3, [r3]
 800deca:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800decc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dece:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ded2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800ded4:	68fb      	ldr	r3, [r7, #12]
 800ded6:	681b      	ldr	r3, [r3, #0]
 800ded8:	3308      	adds	r3, #8
 800deda:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800dedc:	64ba      	str	r2, [r7, #72]	@ 0x48
 800dede:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dee0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800dee2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800dee4:	e841 2300 	strex	r3, r2, [r1]
 800dee8:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800deea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800deec:	2b00      	cmp	r3, #0
 800deee:	d1e5      	bne.n	800debc <UART_Start_Receive_IT+0x160>
 800def0:	e046      	b.n	800df80 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800def2:	68fb      	ldr	r3, [r7, #12]
 800def4:	689b      	ldr	r3, [r3, #8]
 800def6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800defa:	d107      	bne.n	800df0c <UART_Start_Receive_IT+0x1b0>
 800defc:	68fb      	ldr	r3, [r7, #12]
 800defe:	691b      	ldr	r3, [r3, #16]
 800df00:	2b00      	cmp	r3, #0
 800df02:	d103      	bne.n	800df0c <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800df04:	68fb      	ldr	r3, [r7, #12]
 800df06:	4a24      	ldr	r2, [pc, #144]	@ (800df98 <UART_Start_Receive_IT+0x23c>)
 800df08:	675a      	str	r2, [r3, #116]	@ 0x74
 800df0a:	e002      	b.n	800df12 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800df0c:	68fb      	ldr	r3, [r7, #12]
 800df0e:	4a23      	ldr	r2, [pc, #140]	@ (800df9c <UART_Start_Receive_IT+0x240>)
 800df10:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800df12:	68fb      	ldr	r3, [r7, #12]
 800df14:	691b      	ldr	r3, [r3, #16]
 800df16:	2b00      	cmp	r3, #0
 800df18:	d019      	beq.n	800df4e <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800df1a:	68fb      	ldr	r3, [r7, #12]
 800df1c:	681b      	ldr	r3, [r3, #0]
 800df1e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800df22:	e853 3f00 	ldrex	r3, [r3]
 800df26:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800df28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df2a:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800df2e:	677b      	str	r3, [r7, #116]	@ 0x74
 800df30:	68fb      	ldr	r3, [r7, #12]
 800df32:	681b      	ldr	r3, [r3, #0]
 800df34:	461a      	mov	r2, r3
 800df36:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800df38:	637b      	str	r3, [r7, #52]	@ 0x34
 800df3a:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df3c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800df3e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800df40:	e841 2300 	strex	r3, r2, [r1]
 800df44:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800df46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df48:	2b00      	cmp	r3, #0
 800df4a:	d1e6      	bne.n	800df1a <UART_Start_Receive_IT+0x1be>
 800df4c:	e018      	b.n	800df80 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800df4e:	68fb      	ldr	r3, [r7, #12]
 800df50:	681b      	ldr	r3, [r3, #0]
 800df52:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df54:	697b      	ldr	r3, [r7, #20]
 800df56:	e853 3f00 	ldrex	r3, [r3]
 800df5a:	613b      	str	r3, [r7, #16]
   return(result);
 800df5c:	693b      	ldr	r3, [r7, #16]
 800df5e:	f043 0320 	orr.w	r3, r3, #32
 800df62:	67bb      	str	r3, [r7, #120]	@ 0x78
 800df64:	68fb      	ldr	r3, [r7, #12]
 800df66:	681b      	ldr	r3, [r3, #0]
 800df68:	461a      	mov	r2, r3
 800df6a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800df6c:	623b      	str	r3, [r7, #32]
 800df6e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df70:	69f9      	ldr	r1, [r7, #28]
 800df72:	6a3a      	ldr	r2, [r7, #32]
 800df74:	e841 2300 	strex	r3, r2, [r1]
 800df78:	61bb      	str	r3, [r7, #24]
   return(result);
 800df7a:	69bb      	ldr	r3, [r7, #24]
 800df7c:	2b00      	cmp	r3, #0
 800df7e:	d1e6      	bne.n	800df4e <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800df80:	2300      	movs	r3, #0
}
 800df82:	4618      	mov	r0, r3
 800df84:	378c      	adds	r7, #140	@ 0x8c
 800df86:	46bd      	mov	sp, r7
 800df88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df8c:	4770      	bx	lr
 800df8e:	bf00      	nop
 800df90:	0800e7c1 	.word	0x0800e7c1
 800df94:	0800e461 	.word	0x0800e461
 800df98:	0800e2a9 	.word	0x0800e2a9
 800df9c:	0800e0f1 	.word	0x0800e0f1

0800dfa0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800dfa0:	b480      	push	{r7}
 800dfa2:	b095      	sub	sp, #84	@ 0x54
 800dfa4:	af00      	add	r7, sp, #0
 800dfa6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	681b      	ldr	r3, [r3, #0]
 800dfac:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dfae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dfb0:	e853 3f00 	ldrex	r3, [r3]
 800dfb4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800dfb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dfb8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800dfbc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	681b      	ldr	r3, [r3, #0]
 800dfc2:	461a      	mov	r2, r3
 800dfc4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dfc6:	643b      	str	r3, [r7, #64]	@ 0x40
 800dfc8:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dfca:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800dfcc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800dfce:	e841 2300 	strex	r3, r2, [r1]
 800dfd2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800dfd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dfd6:	2b00      	cmp	r3, #0
 800dfd8:	d1e6      	bne.n	800dfa8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	681b      	ldr	r3, [r3, #0]
 800dfde:	3308      	adds	r3, #8
 800dfe0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dfe2:	6a3b      	ldr	r3, [r7, #32]
 800dfe4:	e853 3f00 	ldrex	r3, [r3]
 800dfe8:	61fb      	str	r3, [r7, #28]
   return(result);
 800dfea:	69fa      	ldr	r2, [r7, #28]
 800dfec:	4b1e      	ldr	r3, [pc, #120]	@ (800e068 <UART_EndRxTransfer+0xc8>)
 800dfee:	4013      	ands	r3, r2
 800dff0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	681b      	ldr	r3, [r3, #0]
 800dff6:	3308      	adds	r3, #8
 800dff8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800dffa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800dffc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dffe:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e000:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e002:	e841 2300 	strex	r3, r2, [r1]
 800e006:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800e008:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e00a:	2b00      	cmp	r3, #0
 800e00c:	d1e5      	bne.n	800dfda <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e012:	2b01      	cmp	r3, #1
 800e014:	d118      	bne.n	800e048 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	681b      	ldr	r3, [r3, #0]
 800e01a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e01c:	68fb      	ldr	r3, [r7, #12]
 800e01e:	e853 3f00 	ldrex	r3, [r3]
 800e022:	60bb      	str	r3, [r7, #8]
   return(result);
 800e024:	68bb      	ldr	r3, [r7, #8]
 800e026:	f023 0310 	bic.w	r3, r3, #16
 800e02a:	647b      	str	r3, [r7, #68]	@ 0x44
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	681b      	ldr	r3, [r3, #0]
 800e030:	461a      	mov	r2, r3
 800e032:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e034:	61bb      	str	r3, [r7, #24]
 800e036:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e038:	6979      	ldr	r1, [r7, #20]
 800e03a:	69ba      	ldr	r2, [r7, #24]
 800e03c:	e841 2300 	strex	r3, r2, [r1]
 800e040:	613b      	str	r3, [r7, #16]
   return(result);
 800e042:	693b      	ldr	r3, [r7, #16]
 800e044:	2b00      	cmp	r3, #0
 800e046:	d1e6      	bne.n	800e016 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	2220      	movs	r2, #32
 800e04c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	2200      	movs	r2, #0
 800e054:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800e056:	687b      	ldr	r3, [r7, #4]
 800e058:	2200      	movs	r2, #0
 800e05a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800e05c:	bf00      	nop
 800e05e:	3754      	adds	r7, #84	@ 0x54
 800e060:	46bd      	mov	sp, r7
 800e062:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e066:	4770      	bx	lr
 800e068:	effffffe 	.word	0xeffffffe

0800e06c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800e06c:	b580      	push	{r7, lr}
 800e06e:	b084      	sub	sp, #16
 800e070:	af00      	add	r7, sp, #0
 800e072:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e078:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800e07a:	68fb      	ldr	r3, [r7, #12]
 800e07c:	2200      	movs	r2, #0
 800e07e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800e082:	68fb      	ldr	r3, [r7, #12]
 800e084:	2200      	movs	r2, #0
 800e086:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e08a:	68f8      	ldr	r0, [r7, #12]
 800e08c:	f7fe ff2e 	bl	800ceec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e090:	bf00      	nop
 800e092:	3710      	adds	r7, #16
 800e094:	46bd      	mov	sp, r7
 800e096:	bd80      	pop	{r7, pc}

0800e098 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800e098:	b580      	push	{r7, lr}
 800e09a:	b088      	sub	sp, #32
 800e09c:	af00      	add	r7, sp, #0
 800e09e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	681b      	ldr	r3, [r3, #0]
 800e0a4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e0a6:	68fb      	ldr	r3, [r7, #12]
 800e0a8:	e853 3f00 	ldrex	r3, [r3]
 800e0ac:	60bb      	str	r3, [r7, #8]
   return(result);
 800e0ae:	68bb      	ldr	r3, [r7, #8]
 800e0b0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e0b4:	61fb      	str	r3, [r7, #28]
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	681b      	ldr	r3, [r3, #0]
 800e0ba:	461a      	mov	r2, r3
 800e0bc:	69fb      	ldr	r3, [r7, #28]
 800e0be:	61bb      	str	r3, [r7, #24]
 800e0c0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e0c2:	6979      	ldr	r1, [r7, #20]
 800e0c4:	69ba      	ldr	r2, [r7, #24]
 800e0c6:	e841 2300 	strex	r3, r2, [r1]
 800e0ca:	613b      	str	r3, [r7, #16]
   return(result);
 800e0cc:	693b      	ldr	r3, [r7, #16]
 800e0ce:	2b00      	cmp	r3, #0
 800e0d0:	d1e6      	bne.n	800e0a0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	2220      	movs	r2, #32
 800e0d6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800e0da:	687b      	ldr	r3, [r7, #4]
 800e0dc:	2200      	movs	r2, #0
 800e0de:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800e0e0:	6878      	ldr	r0, [r7, #4]
 800e0e2:	f7fe fef9 	bl	800ced8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e0e6:	bf00      	nop
 800e0e8:	3720      	adds	r7, #32
 800e0ea:	46bd      	mov	sp, r7
 800e0ec:	bd80      	pop	{r7, pc}
	...

0800e0f0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800e0f0:	b580      	push	{r7, lr}
 800e0f2:	b09c      	sub	sp, #112	@ 0x70
 800e0f4:	af00      	add	r7, sp, #0
 800e0f6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800e0fe:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e108:	2b22      	cmp	r3, #34	@ 0x22
 800e10a:	f040 80be 	bne.w	800e28a <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	681b      	ldr	r3, [r3, #0]
 800e112:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e114:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800e118:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800e11c:	b2d9      	uxtb	r1, r3
 800e11e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800e122:	b2da      	uxtb	r2, r3
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e128:	400a      	ands	r2, r1
 800e12a:	b2d2      	uxtb	r2, r2
 800e12c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e132:	1c5a      	adds	r2, r3, #1
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800e13e:	b29b      	uxth	r3, r3
 800e140:	3b01      	subs	r3, #1
 800e142:	b29a      	uxth	r2, r3
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800e150:	b29b      	uxth	r3, r3
 800e152:	2b00      	cmp	r3, #0
 800e154:	f040 80a1 	bne.w	800e29a <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	681b      	ldr	r3, [r3, #0]
 800e15c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e15e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e160:	e853 3f00 	ldrex	r3, [r3]
 800e164:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800e166:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e168:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800e16c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800e16e:	687b      	ldr	r3, [r7, #4]
 800e170:	681b      	ldr	r3, [r3, #0]
 800e172:	461a      	mov	r2, r3
 800e174:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800e176:	65bb      	str	r3, [r7, #88]	@ 0x58
 800e178:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e17a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800e17c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800e17e:	e841 2300 	strex	r3, r2, [r1]
 800e182:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800e184:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e186:	2b00      	cmp	r3, #0
 800e188:	d1e6      	bne.n	800e158 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	681b      	ldr	r3, [r3, #0]
 800e18e:	3308      	adds	r3, #8
 800e190:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e192:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e194:	e853 3f00 	ldrex	r3, [r3]
 800e198:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800e19a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e19c:	f023 0301 	bic.w	r3, r3, #1
 800e1a0:	667b      	str	r3, [r7, #100]	@ 0x64
 800e1a2:	687b      	ldr	r3, [r7, #4]
 800e1a4:	681b      	ldr	r3, [r3, #0]
 800e1a6:	3308      	adds	r3, #8
 800e1a8:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800e1aa:	647a      	str	r2, [r7, #68]	@ 0x44
 800e1ac:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e1ae:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800e1b0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e1b2:	e841 2300 	strex	r3, r2, [r1]
 800e1b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800e1b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e1ba:	2b00      	cmp	r3, #0
 800e1bc:	d1e5      	bne.n	800e18a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	2220      	movs	r2, #32
 800e1c2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	2200      	movs	r2, #0
 800e1ca:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e1cc:	687b      	ldr	r3, [r7, #4]
 800e1ce:	2200      	movs	r2, #0
 800e1d0:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	681b      	ldr	r3, [r3, #0]
 800e1d6:	4a33      	ldr	r2, [pc, #204]	@ (800e2a4 <UART_RxISR_8BIT+0x1b4>)
 800e1d8:	4293      	cmp	r3, r2
 800e1da:	d01f      	beq.n	800e21c <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	681b      	ldr	r3, [r3, #0]
 800e1e0:	685b      	ldr	r3, [r3, #4]
 800e1e2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800e1e6:	2b00      	cmp	r3, #0
 800e1e8:	d018      	beq.n	800e21c <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800e1ea:	687b      	ldr	r3, [r7, #4]
 800e1ec:	681b      	ldr	r3, [r3, #0]
 800e1ee:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e1f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e1f2:	e853 3f00 	ldrex	r3, [r3]
 800e1f6:	623b      	str	r3, [r7, #32]
   return(result);
 800e1f8:	6a3b      	ldr	r3, [r7, #32]
 800e1fa:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800e1fe:	663b      	str	r3, [r7, #96]	@ 0x60
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	681b      	ldr	r3, [r3, #0]
 800e204:	461a      	mov	r2, r3
 800e206:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e208:	633b      	str	r3, [r7, #48]	@ 0x30
 800e20a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e20c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e20e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e210:	e841 2300 	strex	r3, r2, [r1]
 800e214:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800e216:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e218:	2b00      	cmp	r3, #0
 800e21a:	d1e6      	bne.n	800e1ea <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e220:	2b01      	cmp	r3, #1
 800e222:	d12e      	bne.n	800e282 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e224:	687b      	ldr	r3, [r7, #4]
 800e226:	2200      	movs	r2, #0
 800e228:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	681b      	ldr	r3, [r3, #0]
 800e22e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e230:	693b      	ldr	r3, [r7, #16]
 800e232:	e853 3f00 	ldrex	r3, [r3]
 800e236:	60fb      	str	r3, [r7, #12]
   return(result);
 800e238:	68fb      	ldr	r3, [r7, #12]
 800e23a:	f023 0310 	bic.w	r3, r3, #16
 800e23e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	681b      	ldr	r3, [r3, #0]
 800e244:	461a      	mov	r2, r3
 800e246:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e248:	61fb      	str	r3, [r7, #28]
 800e24a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e24c:	69b9      	ldr	r1, [r7, #24]
 800e24e:	69fa      	ldr	r2, [r7, #28]
 800e250:	e841 2300 	strex	r3, r2, [r1]
 800e254:	617b      	str	r3, [r7, #20]
   return(result);
 800e256:	697b      	ldr	r3, [r7, #20]
 800e258:	2b00      	cmp	r3, #0
 800e25a:	d1e6      	bne.n	800e22a <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	681b      	ldr	r3, [r3, #0]
 800e260:	69db      	ldr	r3, [r3, #28]
 800e262:	f003 0310 	and.w	r3, r3, #16
 800e266:	2b10      	cmp	r3, #16
 800e268:	d103      	bne.n	800e272 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	681b      	ldr	r3, [r3, #0]
 800e26e:	2210      	movs	r2, #16
 800e270:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800e278:	4619      	mov	r1, r3
 800e27a:	6878      	ldr	r0, [r7, #4]
 800e27c:	f7fe fe40 	bl	800cf00 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800e280:	e00b      	b.n	800e29a <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800e282:	6878      	ldr	r0, [r7, #4]
 800e284:	f7f3 fcae 	bl	8001be4 <HAL_UART_RxCpltCallback>
}
 800e288:	e007      	b.n	800e29a <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	681b      	ldr	r3, [r3, #0]
 800e28e:	699a      	ldr	r2, [r3, #24]
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	681b      	ldr	r3, [r3, #0]
 800e294:	f042 0208 	orr.w	r2, r2, #8
 800e298:	619a      	str	r2, [r3, #24]
}
 800e29a:	bf00      	nop
 800e29c:	3770      	adds	r7, #112	@ 0x70
 800e29e:	46bd      	mov	sp, r7
 800e2a0:	bd80      	pop	{r7, pc}
 800e2a2:	bf00      	nop
 800e2a4:	58000c00 	.word	0x58000c00

0800e2a8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800e2a8:	b580      	push	{r7, lr}
 800e2aa:	b09c      	sub	sp, #112	@ 0x70
 800e2ac:	af00      	add	r7, sp, #0
 800e2ae:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800e2b6:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e2c0:	2b22      	cmp	r3, #34	@ 0x22
 800e2c2:	f040 80be 	bne.w	800e442 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	681b      	ldr	r3, [r3, #0]
 800e2ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e2cc:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e2d4:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800e2d6:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800e2da:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800e2de:	4013      	ands	r3, r2
 800e2e0:	b29a      	uxth	r2, r3
 800e2e2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800e2e4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800e2e6:	687b      	ldr	r3, [r7, #4]
 800e2e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e2ea:	1c9a      	adds	r2, r3, #2
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800e2f6:	b29b      	uxth	r3, r3
 800e2f8:	3b01      	subs	r3, #1
 800e2fa:	b29a      	uxth	r2, r3
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800e308:	b29b      	uxth	r3, r3
 800e30a:	2b00      	cmp	r3, #0
 800e30c:	f040 80a1 	bne.w	800e452 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	681b      	ldr	r3, [r3, #0]
 800e314:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e316:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e318:	e853 3f00 	ldrex	r3, [r3]
 800e31c:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800e31e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e320:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800e324:	667b      	str	r3, [r7, #100]	@ 0x64
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	681b      	ldr	r3, [r3, #0]
 800e32a:	461a      	mov	r2, r3
 800e32c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e32e:	657b      	str	r3, [r7, #84]	@ 0x54
 800e330:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e332:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800e334:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800e336:	e841 2300 	strex	r3, r2, [r1]
 800e33a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800e33c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e33e:	2b00      	cmp	r3, #0
 800e340:	d1e6      	bne.n	800e310 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	681b      	ldr	r3, [r3, #0]
 800e346:	3308      	adds	r3, #8
 800e348:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e34a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e34c:	e853 3f00 	ldrex	r3, [r3]
 800e350:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800e352:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e354:	f023 0301 	bic.w	r3, r3, #1
 800e358:	663b      	str	r3, [r7, #96]	@ 0x60
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	681b      	ldr	r3, [r3, #0]
 800e35e:	3308      	adds	r3, #8
 800e360:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800e362:	643a      	str	r2, [r7, #64]	@ 0x40
 800e364:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e366:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800e368:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800e36a:	e841 2300 	strex	r3, r2, [r1]
 800e36e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800e370:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e372:	2b00      	cmp	r3, #0
 800e374:	d1e5      	bne.n	800e342 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	2220      	movs	r2, #32
 800e37a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800e37e:	687b      	ldr	r3, [r7, #4]
 800e380:	2200      	movs	r2, #0
 800e382:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e384:	687b      	ldr	r3, [r7, #4]
 800e386:	2200      	movs	r2, #0
 800e388:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	681b      	ldr	r3, [r3, #0]
 800e38e:	4a33      	ldr	r2, [pc, #204]	@ (800e45c <UART_RxISR_16BIT+0x1b4>)
 800e390:	4293      	cmp	r3, r2
 800e392:	d01f      	beq.n	800e3d4 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	681b      	ldr	r3, [r3, #0]
 800e398:	685b      	ldr	r3, [r3, #4]
 800e39a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800e39e:	2b00      	cmp	r3, #0
 800e3a0:	d018      	beq.n	800e3d4 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	681b      	ldr	r3, [r3, #0]
 800e3a6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e3a8:	6a3b      	ldr	r3, [r7, #32]
 800e3aa:	e853 3f00 	ldrex	r3, [r3]
 800e3ae:	61fb      	str	r3, [r7, #28]
   return(result);
 800e3b0:	69fb      	ldr	r3, [r7, #28]
 800e3b2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800e3b6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800e3b8:	687b      	ldr	r3, [r7, #4]
 800e3ba:	681b      	ldr	r3, [r3, #0]
 800e3bc:	461a      	mov	r2, r3
 800e3be:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e3c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e3c2:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e3c4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e3c6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e3c8:	e841 2300 	strex	r3, r2, [r1]
 800e3cc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800e3ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e3d0:	2b00      	cmp	r3, #0
 800e3d2:	d1e6      	bne.n	800e3a2 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e3d8:	2b01      	cmp	r3, #1
 800e3da:	d12e      	bne.n	800e43a <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	2200      	movs	r2, #0
 800e3e0:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	681b      	ldr	r3, [r3, #0]
 800e3e6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e3e8:	68fb      	ldr	r3, [r7, #12]
 800e3ea:	e853 3f00 	ldrex	r3, [r3]
 800e3ee:	60bb      	str	r3, [r7, #8]
   return(result);
 800e3f0:	68bb      	ldr	r3, [r7, #8]
 800e3f2:	f023 0310 	bic.w	r3, r3, #16
 800e3f6:	65bb      	str	r3, [r7, #88]	@ 0x58
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	681b      	ldr	r3, [r3, #0]
 800e3fc:	461a      	mov	r2, r3
 800e3fe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e400:	61bb      	str	r3, [r7, #24]
 800e402:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e404:	6979      	ldr	r1, [r7, #20]
 800e406:	69ba      	ldr	r2, [r7, #24]
 800e408:	e841 2300 	strex	r3, r2, [r1]
 800e40c:	613b      	str	r3, [r7, #16]
   return(result);
 800e40e:	693b      	ldr	r3, [r7, #16]
 800e410:	2b00      	cmp	r3, #0
 800e412:	d1e6      	bne.n	800e3e2 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	681b      	ldr	r3, [r3, #0]
 800e418:	69db      	ldr	r3, [r3, #28]
 800e41a:	f003 0310 	and.w	r3, r3, #16
 800e41e:	2b10      	cmp	r3, #16
 800e420:	d103      	bne.n	800e42a <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	681b      	ldr	r3, [r3, #0]
 800e426:	2210      	movs	r2, #16
 800e428:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800e430:	4619      	mov	r1, r3
 800e432:	6878      	ldr	r0, [r7, #4]
 800e434:	f7fe fd64 	bl	800cf00 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800e438:	e00b      	b.n	800e452 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800e43a:	6878      	ldr	r0, [r7, #4]
 800e43c:	f7f3 fbd2 	bl	8001be4 <HAL_UART_RxCpltCallback>
}
 800e440:	e007      	b.n	800e452 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	681b      	ldr	r3, [r3, #0]
 800e446:	699a      	ldr	r2, [r3, #24]
 800e448:	687b      	ldr	r3, [r7, #4]
 800e44a:	681b      	ldr	r3, [r3, #0]
 800e44c:	f042 0208 	orr.w	r2, r2, #8
 800e450:	619a      	str	r2, [r3, #24]
}
 800e452:	bf00      	nop
 800e454:	3770      	adds	r7, #112	@ 0x70
 800e456:	46bd      	mov	sp, r7
 800e458:	bd80      	pop	{r7, pc}
 800e45a:	bf00      	nop
 800e45c:	58000c00 	.word	0x58000c00

0800e460 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800e460:	b580      	push	{r7, lr}
 800e462:	b0ac      	sub	sp, #176	@ 0xb0
 800e464:	af00      	add	r7, sp, #0
 800e466:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800e46e:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800e472:	687b      	ldr	r3, [r7, #4]
 800e474:	681b      	ldr	r3, [r3, #0]
 800e476:	69db      	ldr	r3, [r3, #28]
 800e478:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	681b      	ldr	r3, [r3, #0]
 800e480:	681b      	ldr	r3, [r3, #0]
 800e482:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800e486:	687b      	ldr	r3, [r7, #4]
 800e488:	681b      	ldr	r3, [r3, #0]
 800e48a:	689b      	ldr	r3, [r3, #8]
 800e48c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e496:	2b22      	cmp	r3, #34	@ 0x22
 800e498:	f040 8180 	bne.w	800e79c <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800e4a2:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800e4a6:	e123      	b.n	800e6f0 <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	681b      	ldr	r3, [r3, #0]
 800e4ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e4ae:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800e4b2:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 800e4b6:	b2d9      	uxtb	r1, r3
 800e4b8:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 800e4bc:	b2da      	uxtb	r2, r3
 800e4be:	687b      	ldr	r3, [r7, #4]
 800e4c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e4c2:	400a      	ands	r2, r1
 800e4c4:	b2d2      	uxtb	r2, r2
 800e4c6:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e4cc:	1c5a      	adds	r2, r3, #1
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800e4d8:	b29b      	uxth	r3, r3
 800e4da:	3b01      	subs	r3, #1
 800e4dc:	b29a      	uxth	r2, r3
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	681b      	ldr	r3, [r3, #0]
 800e4e8:	69db      	ldr	r3, [r3, #28]
 800e4ea:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800e4ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e4f2:	f003 0307 	and.w	r3, r3, #7
 800e4f6:	2b00      	cmp	r3, #0
 800e4f8:	d053      	beq.n	800e5a2 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800e4fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e4fe:	f003 0301 	and.w	r3, r3, #1
 800e502:	2b00      	cmp	r3, #0
 800e504:	d011      	beq.n	800e52a <UART_RxISR_8BIT_FIFOEN+0xca>
 800e506:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e50a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e50e:	2b00      	cmp	r3, #0
 800e510:	d00b      	beq.n	800e52a <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	681b      	ldr	r3, [r3, #0]
 800e516:	2201      	movs	r2, #1
 800e518:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e520:	f043 0201 	orr.w	r2, r3, #1
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e52a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e52e:	f003 0302 	and.w	r3, r3, #2
 800e532:	2b00      	cmp	r3, #0
 800e534:	d011      	beq.n	800e55a <UART_RxISR_8BIT_FIFOEN+0xfa>
 800e536:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800e53a:	f003 0301 	and.w	r3, r3, #1
 800e53e:	2b00      	cmp	r3, #0
 800e540:	d00b      	beq.n	800e55a <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	681b      	ldr	r3, [r3, #0]
 800e546:	2202      	movs	r2, #2
 800e548:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e550:	f043 0204 	orr.w	r2, r3, #4
 800e554:	687b      	ldr	r3, [r7, #4]
 800e556:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e55a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e55e:	f003 0304 	and.w	r3, r3, #4
 800e562:	2b00      	cmp	r3, #0
 800e564:	d011      	beq.n	800e58a <UART_RxISR_8BIT_FIFOEN+0x12a>
 800e566:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800e56a:	f003 0301 	and.w	r3, r3, #1
 800e56e:	2b00      	cmp	r3, #0
 800e570:	d00b      	beq.n	800e58a <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	681b      	ldr	r3, [r3, #0]
 800e576:	2204      	movs	r2, #4
 800e578:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e580:	f043 0202 	orr.w	r2, r3, #2
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e58a:	687b      	ldr	r3, [r7, #4]
 800e58c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e590:	2b00      	cmp	r3, #0
 800e592:	d006      	beq.n	800e5a2 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800e594:	6878      	ldr	r0, [r7, #4]
 800e596:	f7fe fca9 	bl	800ceec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	2200      	movs	r2, #0
 800e59e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800e5a8:	b29b      	uxth	r3, r3
 800e5aa:	2b00      	cmp	r3, #0
 800e5ac:	f040 80a0 	bne.w	800e6f0 <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	681b      	ldr	r3, [r3, #0]
 800e5b4:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e5b6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800e5b8:	e853 3f00 	ldrex	r3, [r3]
 800e5bc:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 800e5be:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e5c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e5c4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	681b      	ldr	r3, [r3, #0]
 800e5cc:	461a      	mov	r2, r3
 800e5ce:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800e5d2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800e5d4:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e5d6:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800e5d8:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800e5da:	e841 2300 	strex	r3, r2, [r1]
 800e5de:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 800e5e0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800e5e2:	2b00      	cmp	r3, #0
 800e5e4:	d1e4      	bne.n	800e5b0 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	681b      	ldr	r3, [r3, #0]
 800e5ea:	3308      	adds	r3, #8
 800e5ec:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e5ee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e5f0:	e853 3f00 	ldrex	r3, [r3]
 800e5f4:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800e5f6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800e5f8:	4b6e      	ldr	r3, [pc, #440]	@ (800e7b4 <UART_RxISR_8BIT_FIFOEN+0x354>)
 800e5fa:	4013      	ands	r3, r2
 800e5fc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	681b      	ldr	r3, [r3, #0]
 800e604:	3308      	adds	r3, #8
 800e606:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800e60a:	66ba      	str	r2, [r7, #104]	@ 0x68
 800e60c:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e60e:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800e610:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800e612:	e841 2300 	strex	r3, r2, [r1]
 800e616:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800e618:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e61a:	2b00      	cmp	r3, #0
 800e61c:	d1e3      	bne.n	800e5e6 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	2220      	movs	r2, #32
 800e622:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	2200      	movs	r2, #0
 800e62a:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	2200      	movs	r2, #0
 800e630:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	681b      	ldr	r3, [r3, #0]
 800e636:	4a60      	ldr	r2, [pc, #384]	@ (800e7b8 <UART_RxISR_8BIT_FIFOEN+0x358>)
 800e638:	4293      	cmp	r3, r2
 800e63a:	d021      	beq.n	800e680 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	681b      	ldr	r3, [r3, #0]
 800e640:	685b      	ldr	r3, [r3, #4]
 800e642:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800e646:	2b00      	cmp	r3, #0
 800e648:	d01a      	beq.n	800e680 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800e64a:	687b      	ldr	r3, [r7, #4]
 800e64c:	681b      	ldr	r3, [r3, #0]
 800e64e:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e650:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e652:	e853 3f00 	ldrex	r3, [r3]
 800e656:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800e658:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e65a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800e65e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	681b      	ldr	r3, [r3, #0]
 800e666:	461a      	mov	r2, r3
 800e668:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800e66c:	657b      	str	r3, [r7, #84]	@ 0x54
 800e66e:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e670:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800e672:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800e674:	e841 2300 	strex	r3, r2, [r1]
 800e678:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800e67a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e67c:	2b00      	cmp	r3, #0
 800e67e:	d1e4      	bne.n	800e64a <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e684:	2b01      	cmp	r3, #1
 800e686:	d130      	bne.n	800e6ea <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e688:	687b      	ldr	r3, [r7, #4]
 800e68a:	2200      	movs	r2, #0
 800e68c:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	681b      	ldr	r3, [r3, #0]
 800e692:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e694:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e696:	e853 3f00 	ldrex	r3, [r3]
 800e69a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800e69c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e69e:	f023 0310 	bic.w	r3, r3, #16
 800e6a2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800e6a6:	687b      	ldr	r3, [r7, #4]
 800e6a8:	681b      	ldr	r3, [r3, #0]
 800e6aa:	461a      	mov	r2, r3
 800e6ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800e6b0:	643b      	str	r3, [r7, #64]	@ 0x40
 800e6b2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e6b4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800e6b6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800e6b8:	e841 2300 	strex	r3, r2, [r1]
 800e6bc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800e6be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e6c0:	2b00      	cmp	r3, #0
 800e6c2:	d1e4      	bne.n	800e68e <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	681b      	ldr	r3, [r3, #0]
 800e6c8:	69db      	ldr	r3, [r3, #28]
 800e6ca:	f003 0310 	and.w	r3, r3, #16
 800e6ce:	2b10      	cmp	r3, #16
 800e6d0:	d103      	bne.n	800e6da <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	681b      	ldr	r3, [r3, #0]
 800e6d6:	2210      	movs	r2, #16
 800e6d8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e6da:	687b      	ldr	r3, [r7, #4]
 800e6dc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800e6e0:	4619      	mov	r1, r3
 800e6e2:	6878      	ldr	r0, [r7, #4]
 800e6e4:	f7fe fc0c 	bl	800cf00 <HAL_UARTEx_RxEventCallback>
 800e6e8:	e002      	b.n	800e6f0 <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800e6ea:	6878      	ldr	r0, [r7, #4]
 800e6ec:	f7f3 fa7a 	bl	8001be4 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800e6f0:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 800e6f4:	2b00      	cmp	r3, #0
 800e6f6:	d006      	beq.n	800e706 <UART_RxISR_8BIT_FIFOEN+0x2a6>
 800e6f8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e6fc:	f003 0320 	and.w	r3, r3, #32
 800e700:	2b00      	cmp	r3, #0
 800e702:	f47f aed1 	bne.w	800e4a8 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800e706:	687b      	ldr	r3, [r7, #4]
 800e708:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800e70c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800e710:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800e714:	2b00      	cmp	r3, #0
 800e716:	d049      	beq.n	800e7ac <UART_RxISR_8BIT_FIFOEN+0x34c>
 800e718:	687b      	ldr	r3, [r7, #4]
 800e71a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800e71e:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 800e722:	429a      	cmp	r2, r3
 800e724:	d242      	bcs.n	800e7ac <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800e726:	687b      	ldr	r3, [r7, #4]
 800e728:	681b      	ldr	r3, [r3, #0]
 800e72a:	3308      	adds	r3, #8
 800e72c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e72e:	6a3b      	ldr	r3, [r7, #32]
 800e730:	e853 3f00 	ldrex	r3, [r3]
 800e734:	61fb      	str	r3, [r7, #28]
   return(result);
 800e736:	69fb      	ldr	r3, [r7, #28]
 800e738:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800e73c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	681b      	ldr	r3, [r3, #0]
 800e744:	3308      	adds	r3, #8
 800e746:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800e74a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800e74c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e74e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e750:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e752:	e841 2300 	strex	r3, r2, [r1]
 800e756:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800e758:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e75a:	2b00      	cmp	r3, #0
 800e75c:	d1e3      	bne.n	800e726 <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800e75e:	687b      	ldr	r3, [r7, #4]
 800e760:	4a16      	ldr	r2, [pc, #88]	@ (800e7bc <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800e762:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	681b      	ldr	r3, [r3, #0]
 800e768:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e76a:	68fb      	ldr	r3, [r7, #12]
 800e76c:	e853 3f00 	ldrex	r3, [r3]
 800e770:	60bb      	str	r3, [r7, #8]
   return(result);
 800e772:	68bb      	ldr	r3, [r7, #8]
 800e774:	f043 0320 	orr.w	r3, r3, #32
 800e778:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800e77c:	687b      	ldr	r3, [r7, #4]
 800e77e:	681b      	ldr	r3, [r3, #0]
 800e780:	461a      	mov	r2, r3
 800e782:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800e786:	61bb      	str	r3, [r7, #24]
 800e788:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e78a:	6979      	ldr	r1, [r7, #20]
 800e78c:	69ba      	ldr	r2, [r7, #24]
 800e78e:	e841 2300 	strex	r3, r2, [r1]
 800e792:	613b      	str	r3, [r7, #16]
   return(result);
 800e794:	693b      	ldr	r3, [r7, #16]
 800e796:	2b00      	cmp	r3, #0
 800e798:	d1e4      	bne.n	800e764 <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800e79a:	e007      	b.n	800e7ac <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	681b      	ldr	r3, [r3, #0]
 800e7a0:	699a      	ldr	r2, [r3, #24]
 800e7a2:	687b      	ldr	r3, [r7, #4]
 800e7a4:	681b      	ldr	r3, [r3, #0]
 800e7a6:	f042 0208 	orr.w	r2, r2, #8
 800e7aa:	619a      	str	r2, [r3, #24]
}
 800e7ac:	bf00      	nop
 800e7ae:	37b0      	adds	r7, #176	@ 0xb0
 800e7b0:	46bd      	mov	sp, r7
 800e7b2:	bd80      	pop	{r7, pc}
 800e7b4:	effffffe 	.word	0xeffffffe
 800e7b8:	58000c00 	.word	0x58000c00
 800e7bc:	0800e0f1 	.word	0x0800e0f1

0800e7c0 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800e7c0:	b580      	push	{r7, lr}
 800e7c2:	b0ae      	sub	sp, #184	@ 0xb8
 800e7c4:	af00      	add	r7, sp, #0
 800e7c6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800e7ce:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800e7d2:	687b      	ldr	r3, [r7, #4]
 800e7d4:	681b      	ldr	r3, [r3, #0]
 800e7d6:	69db      	ldr	r3, [r3, #28]
 800e7d8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800e7dc:	687b      	ldr	r3, [r7, #4]
 800e7de:	681b      	ldr	r3, [r3, #0]
 800e7e0:	681b      	ldr	r3, [r3, #0]
 800e7e2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800e7e6:	687b      	ldr	r3, [r7, #4]
 800e7e8:	681b      	ldr	r3, [r3, #0]
 800e7ea:	689b      	ldr	r3, [r3, #8]
 800e7ec:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e7f6:	2b22      	cmp	r3, #34	@ 0x22
 800e7f8:	f040 8184 	bne.w	800eb04 <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800e7fc:	687b      	ldr	r3, [r7, #4]
 800e7fe:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800e802:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800e806:	e127      	b.n	800ea58 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	681b      	ldr	r3, [r3, #0]
 800e80c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e80e:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800e812:	687b      	ldr	r3, [r7, #4]
 800e814:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e816:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800e81a:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800e81e:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800e822:	4013      	ands	r3, r2
 800e824:	b29a      	uxth	r2, r3
 800e826:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800e82a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e830:	1c9a      	adds	r2, r3, #2
 800e832:	687b      	ldr	r3, [r7, #4]
 800e834:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800e836:	687b      	ldr	r3, [r7, #4]
 800e838:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800e83c:	b29b      	uxth	r3, r3
 800e83e:	3b01      	subs	r3, #1
 800e840:	b29a      	uxth	r2, r3
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	681b      	ldr	r3, [r3, #0]
 800e84c:	69db      	ldr	r3, [r3, #28]
 800e84e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800e852:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800e856:	f003 0307 	and.w	r3, r3, #7
 800e85a:	2b00      	cmp	r3, #0
 800e85c:	d053      	beq.n	800e906 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800e85e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800e862:	f003 0301 	and.w	r3, r3, #1
 800e866:	2b00      	cmp	r3, #0
 800e868:	d011      	beq.n	800e88e <UART_RxISR_16BIT_FIFOEN+0xce>
 800e86a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e86e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e872:	2b00      	cmp	r3, #0
 800e874:	d00b      	beq.n	800e88e <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	681b      	ldr	r3, [r3, #0]
 800e87a:	2201      	movs	r2, #1
 800e87c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e884:	f043 0201 	orr.w	r2, r3, #1
 800e888:	687b      	ldr	r3, [r7, #4]
 800e88a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e88e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800e892:	f003 0302 	and.w	r3, r3, #2
 800e896:	2b00      	cmp	r3, #0
 800e898:	d011      	beq.n	800e8be <UART_RxISR_16BIT_FIFOEN+0xfe>
 800e89a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800e89e:	f003 0301 	and.w	r3, r3, #1
 800e8a2:	2b00      	cmp	r3, #0
 800e8a4:	d00b      	beq.n	800e8be <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800e8a6:	687b      	ldr	r3, [r7, #4]
 800e8a8:	681b      	ldr	r3, [r3, #0]
 800e8aa:	2202      	movs	r2, #2
 800e8ac:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e8b4:	f043 0204 	orr.w	r2, r3, #4
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e8be:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800e8c2:	f003 0304 	and.w	r3, r3, #4
 800e8c6:	2b00      	cmp	r3, #0
 800e8c8:	d011      	beq.n	800e8ee <UART_RxISR_16BIT_FIFOEN+0x12e>
 800e8ca:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800e8ce:	f003 0301 	and.w	r3, r3, #1
 800e8d2:	2b00      	cmp	r3, #0
 800e8d4:	d00b      	beq.n	800e8ee <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	681b      	ldr	r3, [r3, #0]
 800e8da:	2204      	movs	r2, #4
 800e8dc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e8de:	687b      	ldr	r3, [r7, #4]
 800e8e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e8e4:	f043 0202 	orr.w	r2, r3, #2
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e8ee:	687b      	ldr	r3, [r7, #4]
 800e8f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e8f4:	2b00      	cmp	r3, #0
 800e8f6:	d006      	beq.n	800e906 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800e8f8:	6878      	ldr	r0, [r7, #4]
 800e8fa:	f7fe faf7 	bl	800ceec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	2200      	movs	r2, #0
 800e902:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800e906:	687b      	ldr	r3, [r7, #4]
 800e908:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800e90c:	b29b      	uxth	r3, r3
 800e90e:	2b00      	cmp	r3, #0
 800e910:	f040 80a2 	bne.w	800ea58 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	681b      	ldr	r3, [r3, #0]
 800e918:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e91a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800e91c:	e853 3f00 	ldrex	r3, [r3]
 800e920:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800e922:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800e924:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e928:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	681b      	ldr	r3, [r3, #0]
 800e930:	461a      	mov	r2, r3
 800e932:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800e936:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800e93a:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e93c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800e93e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800e942:	e841 2300 	strex	r3, r2, [r1]
 800e946:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800e948:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e94a:	2b00      	cmp	r3, #0
 800e94c:	d1e2      	bne.n	800e914 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e94e:	687b      	ldr	r3, [r7, #4]
 800e950:	681b      	ldr	r3, [r3, #0]
 800e952:	3308      	adds	r3, #8
 800e954:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e956:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e958:	e853 3f00 	ldrex	r3, [r3]
 800e95c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800e95e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800e960:	4b6e      	ldr	r3, [pc, #440]	@ (800eb1c <UART_RxISR_16BIT_FIFOEN+0x35c>)
 800e962:	4013      	ands	r3, r2
 800e964:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	681b      	ldr	r3, [r3, #0]
 800e96c:	3308      	adds	r3, #8
 800e96e:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800e972:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800e974:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e976:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800e978:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800e97a:	e841 2300 	strex	r3, r2, [r1]
 800e97e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800e980:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e982:	2b00      	cmp	r3, #0
 800e984:	d1e3      	bne.n	800e94e <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	2220      	movs	r2, #32
 800e98a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800e98e:	687b      	ldr	r3, [r7, #4]
 800e990:	2200      	movs	r2, #0
 800e992:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e994:	687b      	ldr	r3, [r7, #4]
 800e996:	2200      	movs	r2, #0
 800e998:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800e99a:	687b      	ldr	r3, [r7, #4]
 800e99c:	681b      	ldr	r3, [r3, #0]
 800e99e:	4a60      	ldr	r2, [pc, #384]	@ (800eb20 <UART_RxISR_16BIT_FIFOEN+0x360>)
 800e9a0:	4293      	cmp	r3, r2
 800e9a2:	d021      	beq.n	800e9e8 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800e9a4:	687b      	ldr	r3, [r7, #4]
 800e9a6:	681b      	ldr	r3, [r3, #0]
 800e9a8:	685b      	ldr	r3, [r3, #4]
 800e9aa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800e9ae:	2b00      	cmp	r3, #0
 800e9b0:	d01a      	beq.n	800e9e8 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800e9b2:	687b      	ldr	r3, [r7, #4]
 800e9b4:	681b      	ldr	r3, [r3, #0]
 800e9b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e9b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e9ba:	e853 3f00 	ldrex	r3, [r3]
 800e9be:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800e9c0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e9c2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800e9c6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	681b      	ldr	r3, [r3, #0]
 800e9ce:	461a      	mov	r2, r3
 800e9d0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800e9d4:	65bb      	str	r3, [r7, #88]	@ 0x58
 800e9d6:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e9d8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800e9da:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800e9dc:	e841 2300 	strex	r3, r2, [r1]
 800e9e0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800e9e2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e9e4:	2b00      	cmp	r3, #0
 800e9e6:	d1e4      	bne.n	800e9b2 <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e9ec:	2b01      	cmp	r3, #1
 800e9ee:	d130      	bne.n	800ea52 <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e9f0:	687b      	ldr	r3, [r7, #4]
 800e9f2:	2200      	movs	r2, #0
 800e9f4:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e9f6:	687b      	ldr	r3, [r7, #4]
 800e9f8:	681b      	ldr	r3, [r3, #0]
 800e9fa:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e9fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e9fe:	e853 3f00 	ldrex	r3, [r3]
 800ea02:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800ea04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ea06:	f023 0310 	bic.w	r3, r3, #16
 800ea0a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	681b      	ldr	r3, [r3, #0]
 800ea12:	461a      	mov	r2, r3
 800ea14:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800ea18:	647b      	str	r3, [r7, #68]	@ 0x44
 800ea1a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea1c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ea1e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ea20:	e841 2300 	strex	r3, r2, [r1]
 800ea24:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800ea26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ea28:	2b00      	cmp	r3, #0
 800ea2a:	d1e4      	bne.n	800e9f6 <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800ea2c:	687b      	ldr	r3, [r7, #4]
 800ea2e:	681b      	ldr	r3, [r3, #0]
 800ea30:	69db      	ldr	r3, [r3, #28]
 800ea32:	f003 0310 	and.w	r3, r3, #16
 800ea36:	2b10      	cmp	r3, #16
 800ea38:	d103      	bne.n	800ea42 <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ea3a:	687b      	ldr	r3, [r7, #4]
 800ea3c:	681b      	ldr	r3, [r3, #0]
 800ea3e:	2210      	movs	r2, #16
 800ea40:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ea42:	687b      	ldr	r3, [r7, #4]
 800ea44:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800ea48:	4619      	mov	r1, r3
 800ea4a:	6878      	ldr	r0, [r7, #4]
 800ea4c:	f7fe fa58 	bl	800cf00 <HAL_UARTEx_RxEventCallback>
 800ea50:	e002      	b.n	800ea58 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800ea52:	6878      	ldr	r0, [r7, #4]
 800ea54:	f7f3 f8c6 	bl	8001be4 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800ea58:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800ea5c:	2b00      	cmp	r3, #0
 800ea5e:	d006      	beq.n	800ea6e <UART_RxISR_16BIT_FIFOEN+0x2ae>
 800ea60:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800ea64:	f003 0320 	and.w	r3, r3, #32
 800ea68:	2b00      	cmp	r3, #0
 800ea6a:	f47f aecd 	bne.w	800e808 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ea74:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800ea78:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800ea7c:	2b00      	cmp	r3, #0
 800ea7e:	d049      	beq.n	800eb14 <UART_RxISR_16BIT_FIFOEN+0x354>
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800ea86:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 800ea8a:	429a      	cmp	r2, r3
 800ea8c:	d242      	bcs.n	800eb14 <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800ea8e:	687b      	ldr	r3, [r7, #4]
 800ea90:	681b      	ldr	r3, [r3, #0]
 800ea92:	3308      	adds	r3, #8
 800ea94:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea98:	e853 3f00 	ldrex	r3, [r3]
 800ea9c:	623b      	str	r3, [r7, #32]
   return(result);
 800ea9e:	6a3b      	ldr	r3, [r7, #32]
 800eaa0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800eaa4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	681b      	ldr	r3, [r3, #0]
 800eaac:	3308      	adds	r3, #8
 800eaae:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800eab2:	633a      	str	r2, [r7, #48]	@ 0x30
 800eab4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eab6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800eab8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800eaba:	e841 2300 	strex	r3, r2, [r1]
 800eabe:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800eac0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eac2:	2b00      	cmp	r3, #0
 800eac4:	d1e3      	bne.n	800ea8e <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	4a16      	ldr	r2, [pc, #88]	@ (800eb24 <UART_RxISR_16BIT_FIFOEN+0x364>)
 800eaca:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800eacc:	687b      	ldr	r3, [r7, #4]
 800eace:	681b      	ldr	r3, [r3, #0]
 800ead0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ead2:	693b      	ldr	r3, [r7, #16]
 800ead4:	e853 3f00 	ldrex	r3, [r3]
 800ead8:	60fb      	str	r3, [r7, #12]
   return(result);
 800eada:	68fb      	ldr	r3, [r7, #12]
 800eadc:	f043 0320 	orr.w	r3, r3, #32
 800eae0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	681b      	ldr	r3, [r3, #0]
 800eae8:	461a      	mov	r2, r3
 800eaea:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800eaee:	61fb      	str	r3, [r7, #28]
 800eaf0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eaf2:	69b9      	ldr	r1, [r7, #24]
 800eaf4:	69fa      	ldr	r2, [r7, #28]
 800eaf6:	e841 2300 	strex	r3, r2, [r1]
 800eafa:	617b      	str	r3, [r7, #20]
   return(result);
 800eafc:	697b      	ldr	r3, [r7, #20]
 800eafe:	2b00      	cmp	r3, #0
 800eb00:	d1e4      	bne.n	800eacc <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800eb02:	e007      	b.n	800eb14 <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	681b      	ldr	r3, [r3, #0]
 800eb08:	699a      	ldr	r2, [r3, #24]
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	681b      	ldr	r3, [r3, #0]
 800eb0e:	f042 0208 	orr.w	r2, r2, #8
 800eb12:	619a      	str	r2, [r3, #24]
}
 800eb14:	bf00      	nop
 800eb16:	37b8      	adds	r7, #184	@ 0xb8
 800eb18:	46bd      	mov	sp, r7
 800eb1a:	bd80      	pop	{r7, pc}
 800eb1c:	effffffe 	.word	0xeffffffe
 800eb20:	58000c00 	.word	0x58000c00
 800eb24:	0800e2a9 	.word	0x0800e2a9

0800eb28 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800eb28:	b480      	push	{r7}
 800eb2a:	b083      	sub	sp, #12
 800eb2c:	af00      	add	r7, sp, #0
 800eb2e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800eb30:	bf00      	nop
 800eb32:	370c      	adds	r7, #12
 800eb34:	46bd      	mov	sp, r7
 800eb36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb3a:	4770      	bx	lr

0800eb3c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800eb3c:	b480      	push	{r7}
 800eb3e:	b083      	sub	sp, #12
 800eb40:	af00      	add	r7, sp, #0
 800eb42:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800eb44:	bf00      	nop
 800eb46:	370c      	adds	r7, #12
 800eb48:	46bd      	mov	sp, r7
 800eb4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb4e:	4770      	bx	lr

0800eb50 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800eb50:	b480      	push	{r7}
 800eb52:	b083      	sub	sp, #12
 800eb54:	af00      	add	r7, sp, #0
 800eb56:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800eb58:	bf00      	nop
 800eb5a:	370c      	adds	r7, #12
 800eb5c:	46bd      	mov	sp, r7
 800eb5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb62:	4770      	bx	lr

0800eb64 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800eb64:	b480      	push	{r7}
 800eb66:	b085      	sub	sp, #20
 800eb68:	af00      	add	r7, sp, #0
 800eb6a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800eb6c:	687b      	ldr	r3, [r7, #4]
 800eb6e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800eb72:	2b01      	cmp	r3, #1
 800eb74:	d101      	bne.n	800eb7a <HAL_UARTEx_DisableFifoMode+0x16>
 800eb76:	2302      	movs	r3, #2
 800eb78:	e027      	b.n	800ebca <HAL_UARTEx_DisableFifoMode+0x66>
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	2201      	movs	r2, #1
 800eb7e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	2224      	movs	r2, #36	@ 0x24
 800eb86:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	681b      	ldr	r3, [r3, #0]
 800eb8e:	681b      	ldr	r3, [r3, #0]
 800eb90:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	681b      	ldr	r3, [r3, #0]
 800eb96:	681a      	ldr	r2, [r3, #0]
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	681b      	ldr	r3, [r3, #0]
 800eb9c:	f022 0201 	bic.w	r2, r2, #1
 800eba0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800eba2:	68fb      	ldr	r3, [r7, #12]
 800eba4:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800eba8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	2200      	movs	r2, #0
 800ebae:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ebb0:	687b      	ldr	r3, [r7, #4]
 800ebb2:	681b      	ldr	r3, [r3, #0]
 800ebb4:	68fa      	ldr	r2, [r7, #12]
 800ebb6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ebb8:	687b      	ldr	r3, [r7, #4]
 800ebba:	2220      	movs	r2, #32
 800ebbc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ebc0:	687b      	ldr	r3, [r7, #4]
 800ebc2:	2200      	movs	r2, #0
 800ebc4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ebc8:	2300      	movs	r3, #0
}
 800ebca:	4618      	mov	r0, r3
 800ebcc:	3714      	adds	r7, #20
 800ebce:	46bd      	mov	sp, r7
 800ebd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebd4:	4770      	bx	lr

0800ebd6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ebd6:	b580      	push	{r7, lr}
 800ebd8:	b084      	sub	sp, #16
 800ebda:	af00      	add	r7, sp, #0
 800ebdc:	6078      	str	r0, [r7, #4]
 800ebde:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ebe6:	2b01      	cmp	r3, #1
 800ebe8:	d101      	bne.n	800ebee <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800ebea:	2302      	movs	r3, #2
 800ebec:	e02d      	b.n	800ec4a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800ebee:	687b      	ldr	r3, [r7, #4]
 800ebf0:	2201      	movs	r2, #1
 800ebf2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ebf6:	687b      	ldr	r3, [r7, #4]
 800ebf8:	2224      	movs	r2, #36	@ 0x24
 800ebfa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ebfe:	687b      	ldr	r3, [r7, #4]
 800ec00:	681b      	ldr	r3, [r3, #0]
 800ec02:	681b      	ldr	r3, [r3, #0]
 800ec04:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ec06:	687b      	ldr	r3, [r7, #4]
 800ec08:	681b      	ldr	r3, [r3, #0]
 800ec0a:	681a      	ldr	r2, [r3, #0]
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	681b      	ldr	r3, [r3, #0]
 800ec10:	f022 0201 	bic.w	r2, r2, #1
 800ec14:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800ec16:	687b      	ldr	r3, [r7, #4]
 800ec18:	681b      	ldr	r3, [r3, #0]
 800ec1a:	689b      	ldr	r3, [r3, #8]
 800ec1c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	681b      	ldr	r3, [r3, #0]
 800ec24:	683a      	ldr	r2, [r7, #0]
 800ec26:	430a      	orrs	r2, r1
 800ec28:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ec2a:	6878      	ldr	r0, [r7, #4]
 800ec2c:	f000 f850 	bl	800ecd0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ec30:	687b      	ldr	r3, [r7, #4]
 800ec32:	681b      	ldr	r3, [r3, #0]
 800ec34:	68fa      	ldr	r2, [r7, #12]
 800ec36:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	2220      	movs	r2, #32
 800ec3c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	2200      	movs	r2, #0
 800ec44:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ec48:	2300      	movs	r3, #0
}
 800ec4a:	4618      	mov	r0, r3
 800ec4c:	3710      	adds	r7, #16
 800ec4e:	46bd      	mov	sp, r7
 800ec50:	bd80      	pop	{r7, pc}

0800ec52 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ec52:	b580      	push	{r7, lr}
 800ec54:	b084      	sub	sp, #16
 800ec56:	af00      	add	r7, sp, #0
 800ec58:	6078      	str	r0, [r7, #4]
 800ec5a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ec62:	2b01      	cmp	r3, #1
 800ec64:	d101      	bne.n	800ec6a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800ec66:	2302      	movs	r3, #2
 800ec68:	e02d      	b.n	800ecc6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800ec6a:	687b      	ldr	r3, [r7, #4]
 800ec6c:	2201      	movs	r2, #1
 800ec6e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	2224      	movs	r2, #36	@ 0x24
 800ec76:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ec7a:	687b      	ldr	r3, [r7, #4]
 800ec7c:	681b      	ldr	r3, [r3, #0]
 800ec7e:	681b      	ldr	r3, [r3, #0]
 800ec80:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	681b      	ldr	r3, [r3, #0]
 800ec86:	681a      	ldr	r2, [r3, #0]
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	681b      	ldr	r3, [r3, #0]
 800ec8c:	f022 0201 	bic.w	r2, r2, #1
 800ec90:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800ec92:	687b      	ldr	r3, [r7, #4]
 800ec94:	681b      	ldr	r3, [r3, #0]
 800ec96:	689b      	ldr	r3, [r3, #8]
 800ec98:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	681b      	ldr	r3, [r3, #0]
 800eca0:	683a      	ldr	r2, [r7, #0]
 800eca2:	430a      	orrs	r2, r1
 800eca4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800eca6:	6878      	ldr	r0, [r7, #4]
 800eca8:	f000 f812 	bl	800ecd0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	681b      	ldr	r3, [r3, #0]
 800ecb0:	68fa      	ldr	r2, [r7, #12]
 800ecb2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ecb4:	687b      	ldr	r3, [r7, #4]
 800ecb6:	2220      	movs	r2, #32
 800ecb8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	2200      	movs	r2, #0
 800ecc0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ecc4:	2300      	movs	r3, #0
}
 800ecc6:	4618      	mov	r0, r3
 800ecc8:	3710      	adds	r7, #16
 800ecca:	46bd      	mov	sp, r7
 800eccc:	bd80      	pop	{r7, pc}
	...

0800ecd0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800ecd0:	b480      	push	{r7}
 800ecd2:	b085      	sub	sp, #20
 800ecd4:	af00      	add	r7, sp, #0
 800ecd6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ecd8:	687b      	ldr	r3, [r7, #4]
 800ecda:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ecdc:	2b00      	cmp	r3, #0
 800ecde:	d108      	bne.n	800ecf2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800ece0:	687b      	ldr	r3, [r7, #4]
 800ece2:	2201      	movs	r2, #1
 800ece4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800ece8:	687b      	ldr	r3, [r7, #4]
 800ecea:	2201      	movs	r2, #1
 800ecec:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800ecf0:	e031      	b.n	800ed56 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800ecf2:	2310      	movs	r3, #16
 800ecf4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800ecf6:	2310      	movs	r3, #16
 800ecf8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800ecfa:	687b      	ldr	r3, [r7, #4]
 800ecfc:	681b      	ldr	r3, [r3, #0]
 800ecfe:	689b      	ldr	r3, [r3, #8]
 800ed00:	0e5b      	lsrs	r3, r3, #25
 800ed02:	b2db      	uxtb	r3, r3
 800ed04:	f003 0307 	and.w	r3, r3, #7
 800ed08:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	681b      	ldr	r3, [r3, #0]
 800ed0e:	689b      	ldr	r3, [r3, #8]
 800ed10:	0f5b      	lsrs	r3, r3, #29
 800ed12:	b2db      	uxtb	r3, r3
 800ed14:	f003 0307 	and.w	r3, r3, #7
 800ed18:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ed1a:	7bbb      	ldrb	r3, [r7, #14]
 800ed1c:	7b3a      	ldrb	r2, [r7, #12]
 800ed1e:	4911      	ldr	r1, [pc, #68]	@ (800ed64 <UARTEx_SetNbDataToProcess+0x94>)
 800ed20:	5c8a      	ldrb	r2, [r1, r2]
 800ed22:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800ed26:	7b3a      	ldrb	r2, [r7, #12]
 800ed28:	490f      	ldr	r1, [pc, #60]	@ (800ed68 <UARTEx_SetNbDataToProcess+0x98>)
 800ed2a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ed2c:	fb93 f3f2 	sdiv	r3, r3, r2
 800ed30:	b29a      	uxth	r2, r3
 800ed32:	687b      	ldr	r3, [r7, #4]
 800ed34:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ed38:	7bfb      	ldrb	r3, [r7, #15]
 800ed3a:	7b7a      	ldrb	r2, [r7, #13]
 800ed3c:	4909      	ldr	r1, [pc, #36]	@ (800ed64 <UARTEx_SetNbDataToProcess+0x94>)
 800ed3e:	5c8a      	ldrb	r2, [r1, r2]
 800ed40:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800ed44:	7b7a      	ldrb	r2, [r7, #13]
 800ed46:	4908      	ldr	r1, [pc, #32]	@ (800ed68 <UARTEx_SetNbDataToProcess+0x98>)
 800ed48:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ed4a:	fb93 f3f2 	sdiv	r3, r3, r2
 800ed4e:	b29a      	uxth	r2, r3
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800ed56:	bf00      	nop
 800ed58:	3714      	adds	r7, #20
 800ed5a:	46bd      	mov	sp, r7
 800ed5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed60:	4770      	bx	lr
 800ed62:	bf00      	nop
 800ed64:	08013af0 	.word	0x08013af0
 800ed68:	08013af8 	.word	0x08013af8

0800ed6c <_strtol_l.constprop.0>:
 800ed6c:	2b24      	cmp	r3, #36	@ 0x24
 800ed6e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ed72:	4686      	mov	lr, r0
 800ed74:	4690      	mov	r8, r2
 800ed76:	d801      	bhi.n	800ed7c <_strtol_l.constprop.0+0x10>
 800ed78:	2b01      	cmp	r3, #1
 800ed7a:	d106      	bne.n	800ed8a <_strtol_l.constprop.0+0x1e>
 800ed7c:	f001 f87e 	bl	800fe7c <__errno>
 800ed80:	2316      	movs	r3, #22
 800ed82:	6003      	str	r3, [r0, #0]
 800ed84:	2000      	movs	r0, #0
 800ed86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ed8a:	4834      	ldr	r0, [pc, #208]	@ (800ee5c <_strtol_l.constprop.0+0xf0>)
 800ed8c:	460d      	mov	r5, r1
 800ed8e:	462a      	mov	r2, r5
 800ed90:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ed94:	5d06      	ldrb	r6, [r0, r4]
 800ed96:	f016 0608 	ands.w	r6, r6, #8
 800ed9a:	d1f8      	bne.n	800ed8e <_strtol_l.constprop.0+0x22>
 800ed9c:	2c2d      	cmp	r4, #45	@ 0x2d
 800ed9e:	d12d      	bne.n	800edfc <_strtol_l.constprop.0+0x90>
 800eda0:	782c      	ldrb	r4, [r5, #0]
 800eda2:	2601      	movs	r6, #1
 800eda4:	1c95      	adds	r5, r2, #2
 800eda6:	f033 0210 	bics.w	r2, r3, #16
 800edaa:	d109      	bne.n	800edc0 <_strtol_l.constprop.0+0x54>
 800edac:	2c30      	cmp	r4, #48	@ 0x30
 800edae:	d12a      	bne.n	800ee06 <_strtol_l.constprop.0+0x9a>
 800edb0:	782a      	ldrb	r2, [r5, #0]
 800edb2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800edb6:	2a58      	cmp	r2, #88	@ 0x58
 800edb8:	d125      	bne.n	800ee06 <_strtol_l.constprop.0+0x9a>
 800edba:	786c      	ldrb	r4, [r5, #1]
 800edbc:	2310      	movs	r3, #16
 800edbe:	3502      	adds	r5, #2
 800edc0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800edc4:	f10c 3cff 	add.w	ip, ip, #4294967295
 800edc8:	2200      	movs	r2, #0
 800edca:	fbbc f9f3 	udiv	r9, ip, r3
 800edce:	4610      	mov	r0, r2
 800edd0:	fb03 ca19 	mls	sl, r3, r9, ip
 800edd4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800edd8:	2f09      	cmp	r7, #9
 800edda:	d81b      	bhi.n	800ee14 <_strtol_l.constprop.0+0xa8>
 800eddc:	463c      	mov	r4, r7
 800edde:	42a3      	cmp	r3, r4
 800ede0:	dd27      	ble.n	800ee32 <_strtol_l.constprop.0+0xc6>
 800ede2:	1c57      	adds	r7, r2, #1
 800ede4:	d007      	beq.n	800edf6 <_strtol_l.constprop.0+0x8a>
 800ede6:	4581      	cmp	r9, r0
 800ede8:	d320      	bcc.n	800ee2c <_strtol_l.constprop.0+0xc0>
 800edea:	d101      	bne.n	800edf0 <_strtol_l.constprop.0+0x84>
 800edec:	45a2      	cmp	sl, r4
 800edee:	db1d      	blt.n	800ee2c <_strtol_l.constprop.0+0xc0>
 800edf0:	fb00 4003 	mla	r0, r0, r3, r4
 800edf4:	2201      	movs	r2, #1
 800edf6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800edfa:	e7eb      	b.n	800edd4 <_strtol_l.constprop.0+0x68>
 800edfc:	2c2b      	cmp	r4, #43	@ 0x2b
 800edfe:	bf04      	itt	eq
 800ee00:	782c      	ldrbeq	r4, [r5, #0]
 800ee02:	1c95      	addeq	r5, r2, #2
 800ee04:	e7cf      	b.n	800eda6 <_strtol_l.constprop.0+0x3a>
 800ee06:	2b00      	cmp	r3, #0
 800ee08:	d1da      	bne.n	800edc0 <_strtol_l.constprop.0+0x54>
 800ee0a:	2c30      	cmp	r4, #48	@ 0x30
 800ee0c:	bf0c      	ite	eq
 800ee0e:	2308      	moveq	r3, #8
 800ee10:	230a      	movne	r3, #10
 800ee12:	e7d5      	b.n	800edc0 <_strtol_l.constprop.0+0x54>
 800ee14:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800ee18:	2f19      	cmp	r7, #25
 800ee1a:	d801      	bhi.n	800ee20 <_strtol_l.constprop.0+0xb4>
 800ee1c:	3c37      	subs	r4, #55	@ 0x37
 800ee1e:	e7de      	b.n	800edde <_strtol_l.constprop.0+0x72>
 800ee20:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800ee24:	2f19      	cmp	r7, #25
 800ee26:	d804      	bhi.n	800ee32 <_strtol_l.constprop.0+0xc6>
 800ee28:	3c57      	subs	r4, #87	@ 0x57
 800ee2a:	e7d8      	b.n	800edde <_strtol_l.constprop.0+0x72>
 800ee2c:	f04f 32ff 	mov.w	r2, #4294967295
 800ee30:	e7e1      	b.n	800edf6 <_strtol_l.constprop.0+0x8a>
 800ee32:	1c53      	adds	r3, r2, #1
 800ee34:	d108      	bne.n	800ee48 <_strtol_l.constprop.0+0xdc>
 800ee36:	2322      	movs	r3, #34	@ 0x22
 800ee38:	f8ce 3000 	str.w	r3, [lr]
 800ee3c:	4660      	mov	r0, ip
 800ee3e:	f1b8 0f00 	cmp.w	r8, #0
 800ee42:	d0a0      	beq.n	800ed86 <_strtol_l.constprop.0+0x1a>
 800ee44:	1e69      	subs	r1, r5, #1
 800ee46:	e006      	b.n	800ee56 <_strtol_l.constprop.0+0xea>
 800ee48:	b106      	cbz	r6, 800ee4c <_strtol_l.constprop.0+0xe0>
 800ee4a:	4240      	negs	r0, r0
 800ee4c:	f1b8 0f00 	cmp.w	r8, #0
 800ee50:	d099      	beq.n	800ed86 <_strtol_l.constprop.0+0x1a>
 800ee52:	2a00      	cmp	r2, #0
 800ee54:	d1f6      	bne.n	800ee44 <_strtol_l.constprop.0+0xd8>
 800ee56:	f8c8 1000 	str.w	r1, [r8]
 800ee5a:	e794      	b.n	800ed86 <_strtol_l.constprop.0+0x1a>
 800ee5c:	08013b01 	.word	0x08013b01

0800ee60 <_strtol_r>:
 800ee60:	f7ff bf84 	b.w	800ed6c <_strtol_l.constprop.0>

0800ee64 <strtol>:
 800ee64:	4613      	mov	r3, r2
 800ee66:	460a      	mov	r2, r1
 800ee68:	4601      	mov	r1, r0
 800ee6a:	4802      	ldr	r0, [pc, #8]	@ (800ee74 <strtol+0x10>)
 800ee6c:	6800      	ldr	r0, [r0, #0]
 800ee6e:	f7ff bf7d 	b.w	800ed6c <_strtol_l.constprop.0>
 800ee72:	bf00      	nop
 800ee74:	2400002c 	.word	0x2400002c

0800ee78 <__cvt>:
 800ee78:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ee7a:	ed2d 8b02 	vpush	{d8}
 800ee7e:	eeb0 8b40 	vmov.f64	d8, d0
 800ee82:	b085      	sub	sp, #20
 800ee84:	4617      	mov	r7, r2
 800ee86:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 800ee88:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ee8a:	ee18 2a90 	vmov	r2, s17
 800ee8e:	f025 0520 	bic.w	r5, r5, #32
 800ee92:	2a00      	cmp	r2, #0
 800ee94:	bfb6      	itet	lt
 800ee96:	222d      	movlt	r2, #45	@ 0x2d
 800ee98:	2200      	movge	r2, #0
 800ee9a:	eeb1 8b40 	vneglt.f64	d8, d0
 800ee9e:	2d46      	cmp	r5, #70	@ 0x46
 800eea0:	460c      	mov	r4, r1
 800eea2:	701a      	strb	r2, [r3, #0]
 800eea4:	d004      	beq.n	800eeb0 <__cvt+0x38>
 800eea6:	2d45      	cmp	r5, #69	@ 0x45
 800eea8:	d100      	bne.n	800eeac <__cvt+0x34>
 800eeaa:	3401      	adds	r4, #1
 800eeac:	2102      	movs	r1, #2
 800eeae:	e000      	b.n	800eeb2 <__cvt+0x3a>
 800eeb0:	2103      	movs	r1, #3
 800eeb2:	ab03      	add	r3, sp, #12
 800eeb4:	9301      	str	r3, [sp, #4]
 800eeb6:	ab02      	add	r3, sp, #8
 800eeb8:	9300      	str	r3, [sp, #0]
 800eeba:	4622      	mov	r2, r4
 800eebc:	4633      	mov	r3, r6
 800eebe:	eeb0 0b48 	vmov.f64	d0, d8
 800eec2:	f001 f8a5 	bl	8010010 <_dtoa_r>
 800eec6:	2d47      	cmp	r5, #71	@ 0x47
 800eec8:	d114      	bne.n	800eef4 <__cvt+0x7c>
 800eeca:	07fb      	lsls	r3, r7, #31
 800eecc:	d50a      	bpl.n	800eee4 <__cvt+0x6c>
 800eece:	1902      	adds	r2, r0, r4
 800eed0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800eed4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eed8:	bf08      	it	eq
 800eeda:	9203      	streq	r2, [sp, #12]
 800eedc:	2130      	movs	r1, #48	@ 0x30
 800eede:	9b03      	ldr	r3, [sp, #12]
 800eee0:	4293      	cmp	r3, r2
 800eee2:	d319      	bcc.n	800ef18 <__cvt+0xa0>
 800eee4:	9b03      	ldr	r3, [sp, #12]
 800eee6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800eee8:	1a1b      	subs	r3, r3, r0
 800eeea:	6013      	str	r3, [r2, #0]
 800eeec:	b005      	add	sp, #20
 800eeee:	ecbd 8b02 	vpop	{d8}
 800eef2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eef4:	2d46      	cmp	r5, #70	@ 0x46
 800eef6:	eb00 0204 	add.w	r2, r0, r4
 800eefa:	d1e9      	bne.n	800eed0 <__cvt+0x58>
 800eefc:	7803      	ldrb	r3, [r0, #0]
 800eefe:	2b30      	cmp	r3, #48	@ 0x30
 800ef00:	d107      	bne.n	800ef12 <__cvt+0x9a>
 800ef02:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800ef06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef0a:	bf1c      	itt	ne
 800ef0c:	f1c4 0401 	rsbne	r4, r4, #1
 800ef10:	6034      	strne	r4, [r6, #0]
 800ef12:	6833      	ldr	r3, [r6, #0]
 800ef14:	441a      	add	r2, r3
 800ef16:	e7db      	b.n	800eed0 <__cvt+0x58>
 800ef18:	1c5c      	adds	r4, r3, #1
 800ef1a:	9403      	str	r4, [sp, #12]
 800ef1c:	7019      	strb	r1, [r3, #0]
 800ef1e:	e7de      	b.n	800eede <__cvt+0x66>

0800ef20 <__exponent>:
 800ef20:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ef22:	2900      	cmp	r1, #0
 800ef24:	bfba      	itte	lt
 800ef26:	4249      	neglt	r1, r1
 800ef28:	232d      	movlt	r3, #45	@ 0x2d
 800ef2a:	232b      	movge	r3, #43	@ 0x2b
 800ef2c:	2909      	cmp	r1, #9
 800ef2e:	7002      	strb	r2, [r0, #0]
 800ef30:	7043      	strb	r3, [r0, #1]
 800ef32:	dd29      	ble.n	800ef88 <__exponent+0x68>
 800ef34:	f10d 0307 	add.w	r3, sp, #7
 800ef38:	461d      	mov	r5, r3
 800ef3a:	270a      	movs	r7, #10
 800ef3c:	461a      	mov	r2, r3
 800ef3e:	fbb1 f6f7 	udiv	r6, r1, r7
 800ef42:	fb07 1416 	mls	r4, r7, r6, r1
 800ef46:	3430      	adds	r4, #48	@ 0x30
 800ef48:	f802 4c01 	strb.w	r4, [r2, #-1]
 800ef4c:	460c      	mov	r4, r1
 800ef4e:	2c63      	cmp	r4, #99	@ 0x63
 800ef50:	f103 33ff 	add.w	r3, r3, #4294967295
 800ef54:	4631      	mov	r1, r6
 800ef56:	dcf1      	bgt.n	800ef3c <__exponent+0x1c>
 800ef58:	3130      	adds	r1, #48	@ 0x30
 800ef5a:	1e94      	subs	r4, r2, #2
 800ef5c:	f803 1c01 	strb.w	r1, [r3, #-1]
 800ef60:	1c41      	adds	r1, r0, #1
 800ef62:	4623      	mov	r3, r4
 800ef64:	42ab      	cmp	r3, r5
 800ef66:	d30a      	bcc.n	800ef7e <__exponent+0x5e>
 800ef68:	f10d 0309 	add.w	r3, sp, #9
 800ef6c:	1a9b      	subs	r3, r3, r2
 800ef6e:	42ac      	cmp	r4, r5
 800ef70:	bf88      	it	hi
 800ef72:	2300      	movhi	r3, #0
 800ef74:	3302      	adds	r3, #2
 800ef76:	4403      	add	r3, r0
 800ef78:	1a18      	subs	r0, r3, r0
 800ef7a:	b003      	add	sp, #12
 800ef7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ef7e:	f813 6b01 	ldrb.w	r6, [r3], #1
 800ef82:	f801 6f01 	strb.w	r6, [r1, #1]!
 800ef86:	e7ed      	b.n	800ef64 <__exponent+0x44>
 800ef88:	2330      	movs	r3, #48	@ 0x30
 800ef8a:	3130      	adds	r1, #48	@ 0x30
 800ef8c:	7083      	strb	r3, [r0, #2]
 800ef8e:	70c1      	strb	r1, [r0, #3]
 800ef90:	1d03      	adds	r3, r0, #4
 800ef92:	e7f1      	b.n	800ef78 <__exponent+0x58>
 800ef94:	0000      	movs	r0, r0
	...

0800ef98 <_printf_float>:
 800ef98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef9c:	b08d      	sub	sp, #52	@ 0x34
 800ef9e:	460c      	mov	r4, r1
 800efa0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800efa4:	4616      	mov	r6, r2
 800efa6:	461f      	mov	r7, r3
 800efa8:	4605      	mov	r5, r0
 800efaa:	f000 ff1d 	bl	800fde8 <_localeconv_r>
 800efae:	f8d0 b000 	ldr.w	fp, [r0]
 800efb2:	4658      	mov	r0, fp
 800efb4:	f7f1 f9f4 	bl	80003a0 <strlen>
 800efb8:	2300      	movs	r3, #0
 800efba:	930a      	str	r3, [sp, #40]	@ 0x28
 800efbc:	f8d8 3000 	ldr.w	r3, [r8]
 800efc0:	f894 9018 	ldrb.w	r9, [r4, #24]
 800efc4:	6822      	ldr	r2, [r4, #0]
 800efc6:	9005      	str	r0, [sp, #20]
 800efc8:	3307      	adds	r3, #7
 800efca:	f023 0307 	bic.w	r3, r3, #7
 800efce:	f103 0108 	add.w	r1, r3, #8
 800efd2:	f8c8 1000 	str.w	r1, [r8]
 800efd6:	ed93 0b00 	vldr	d0, [r3]
 800efda:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 800f238 <_printf_float+0x2a0>
 800efde:	eeb0 7bc0 	vabs.f64	d7, d0
 800efe2:	eeb4 7b46 	vcmp.f64	d7, d6
 800efe6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800efea:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 800efee:	dd24      	ble.n	800f03a <_printf_float+0xa2>
 800eff0:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800eff4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eff8:	d502      	bpl.n	800f000 <_printf_float+0x68>
 800effa:	232d      	movs	r3, #45	@ 0x2d
 800effc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f000:	498f      	ldr	r1, [pc, #572]	@ (800f240 <_printf_float+0x2a8>)
 800f002:	4b90      	ldr	r3, [pc, #576]	@ (800f244 <_printf_float+0x2ac>)
 800f004:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 800f008:	bf94      	ite	ls
 800f00a:	4688      	movls	r8, r1
 800f00c:	4698      	movhi	r8, r3
 800f00e:	f022 0204 	bic.w	r2, r2, #4
 800f012:	2303      	movs	r3, #3
 800f014:	6123      	str	r3, [r4, #16]
 800f016:	6022      	str	r2, [r4, #0]
 800f018:	f04f 0a00 	mov.w	sl, #0
 800f01c:	9700      	str	r7, [sp, #0]
 800f01e:	4633      	mov	r3, r6
 800f020:	aa0b      	add	r2, sp, #44	@ 0x2c
 800f022:	4621      	mov	r1, r4
 800f024:	4628      	mov	r0, r5
 800f026:	f000 f9d1 	bl	800f3cc <_printf_common>
 800f02a:	3001      	adds	r0, #1
 800f02c:	f040 8089 	bne.w	800f142 <_printf_float+0x1aa>
 800f030:	f04f 30ff 	mov.w	r0, #4294967295
 800f034:	b00d      	add	sp, #52	@ 0x34
 800f036:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f03a:	eeb4 0b40 	vcmp.f64	d0, d0
 800f03e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f042:	d709      	bvc.n	800f058 <_printf_float+0xc0>
 800f044:	ee10 3a90 	vmov	r3, s1
 800f048:	2b00      	cmp	r3, #0
 800f04a:	bfbc      	itt	lt
 800f04c:	232d      	movlt	r3, #45	@ 0x2d
 800f04e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800f052:	497d      	ldr	r1, [pc, #500]	@ (800f248 <_printf_float+0x2b0>)
 800f054:	4b7d      	ldr	r3, [pc, #500]	@ (800f24c <_printf_float+0x2b4>)
 800f056:	e7d5      	b.n	800f004 <_printf_float+0x6c>
 800f058:	6863      	ldr	r3, [r4, #4]
 800f05a:	1c59      	adds	r1, r3, #1
 800f05c:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 800f060:	d139      	bne.n	800f0d6 <_printf_float+0x13e>
 800f062:	2306      	movs	r3, #6
 800f064:	6063      	str	r3, [r4, #4]
 800f066:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800f06a:	2300      	movs	r3, #0
 800f06c:	6022      	str	r2, [r4, #0]
 800f06e:	9303      	str	r3, [sp, #12]
 800f070:	ab0a      	add	r3, sp, #40	@ 0x28
 800f072:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800f076:	ab09      	add	r3, sp, #36	@ 0x24
 800f078:	9300      	str	r3, [sp, #0]
 800f07a:	6861      	ldr	r1, [r4, #4]
 800f07c:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800f080:	4628      	mov	r0, r5
 800f082:	f7ff fef9 	bl	800ee78 <__cvt>
 800f086:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800f08a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800f08c:	4680      	mov	r8, r0
 800f08e:	d129      	bne.n	800f0e4 <_printf_float+0x14c>
 800f090:	1cc8      	adds	r0, r1, #3
 800f092:	db02      	blt.n	800f09a <_printf_float+0x102>
 800f094:	6863      	ldr	r3, [r4, #4]
 800f096:	4299      	cmp	r1, r3
 800f098:	dd41      	ble.n	800f11e <_printf_float+0x186>
 800f09a:	f1a9 0902 	sub.w	r9, r9, #2
 800f09e:	fa5f f989 	uxtb.w	r9, r9
 800f0a2:	3901      	subs	r1, #1
 800f0a4:	464a      	mov	r2, r9
 800f0a6:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800f0aa:	9109      	str	r1, [sp, #36]	@ 0x24
 800f0ac:	f7ff ff38 	bl	800ef20 <__exponent>
 800f0b0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f0b2:	1813      	adds	r3, r2, r0
 800f0b4:	2a01      	cmp	r2, #1
 800f0b6:	4682      	mov	sl, r0
 800f0b8:	6123      	str	r3, [r4, #16]
 800f0ba:	dc02      	bgt.n	800f0c2 <_printf_float+0x12a>
 800f0bc:	6822      	ldr	r2, [r4, #0]
 800f0be:	07d2      	lsls	r2, r2, #31
 800f0c0:	d501      	bpl.n	800f0c6 <_printf_float+0x12e>
 800f0c2:	3301      	adds	r3, #1
 800f0c4:	6123      	str	r3, [r4, #16]
 800f0c6:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800f0ca:	2b00      	cmp	r3, #0
 800f0cc:	d0a6      	beq.n	800f01c <_printf_float+0x84>
 800f0ce:	232d      	movs	r3, #45	@ 0x2d
 800f0d0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f0d4:	e7a2      	b.n	800f01c <_printf_float+0x84>
 800f0d6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800f0da:	d1c4      	bne.n	800f066 <_printf_float+0xce>
 800f0dc:	2b00      	cmp	r3, #0
 800f0de:	d1c2      	bne.n	800f066 <_printf_float+0xce>
 800f0e0:	2301      	movs	r3, #1
 800f0e2:	e7bf      	b.n	800f064 <_printf_float+0xcc>
 800f0e4:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800f0e8:	d9db      	bls.n	800f0a2 <_printf_float+0x10a>
 800f0ea:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 800f0ee:	d118      	bne.n	800f122 <_printf_float+0x18a>
 800f0f0:	2900      	cmp	r1, #0
 800f0f2:	6863      	ldr	r3, [r4, #4]
 800f0f4:	dd0b      	ble.n	800f10e <_printf_float+0x176>
 800f0f6:	6121      	str	r1, [r4, #16]
 800f0f8:	b913      	cbnz	r3, 800f100 <_printf_float+0x168>
 800f0fa:	6822      	ldr	r2, [r4, #0]
 800f0fc:	07d0      	lsls	r0, r2, #31
 800f0fe:	d502      	bpl.n	800f106 <_printf_float+0x16e>
 800f100:	3301      	adds	r3, #1
 800f102:	440b      	add	r3, r1
 800f104:	6123      	str	r3, [r4, #16]
 800f106:	65a1      	str	r1, [r4, #88]	@ 0x58
 800f108:	f04f 0a00 	mov.w	sl, #0
 800f10c:	e7db      	b.n	800f0c6 <_printf_float+0x12e>
 800f10e:	b913      	cbnz	r3, 800f116 <_printf_float+0x17e>
 800f110:	6822      	ldr	r2, [r4, #0]
 800f112:	07d2      	lsls	r2, r2, #31
 800f114:	d501      	bpl.n	800f11a <_printf_float+0x182>
 800f116:	3302      	adds	r3, #2
 800f118:	e7f4      	b.n	800f104 <_printf_float+0x16c>
 800f11a:	2301      	movs	r3, #1
 800f11c:	e7f2      	b.n	800f104 <_printf_float+0x16c>
 800f11e:	f04f 0967 	mov.w	r9, #103	@ 0x67
 800f122:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f124:	4299      	cmp	r1, r3
 800f126:	db05      	blt.n	800f134 <_printf_float+0x19c>
 800f128:	6823      	ldr	r3, [r4, #0]
 800f12a:	6121      	str	r1, [r4, #16]
 800f12c:	07d8      	lsls	r0, r3, #31
 800f12e:	d5ea      	bpl.n	800f106 <_printf_float+0x16e>
 800f130:	1c4b      	adds	r3, r1, #1
 800f132:	e7e7      	b.n	800f104 <_printf_float+0x16c>
 800f134:	2900      	cmp	r1, #0
 800f136:	bfd4      	ite	le
 800f138:	f1c1 0202 	rsble	r2, r1, #2
 800f13c:	2201      	movgt	r2, #1
 800f13e:	4413      	add	r3, r2
 800f140:	e7e0      	b.n	800f104 <_printf_float+0x16c>
 800f142:	6823      	ldr	r3, [r4, #0]
 800f144:	055a      	lsls	r2, r3, #21
 800f146:	d407      	bmi.n	800f158 <_printf_float+0x1c0>
 800f148:	6923      	ldr	r3, [r4, #16]
 800f14a:	4642      	mov	r2, r8
 800f14c:	4631      	mov	r1, r6
 800f14e:	4628      	mov	r0, r5
 800f150:	47b8      	blx	r7
 800f152:	3001      	adds	r0, #1
 800f154:	d12a      	bne.n	800f1ac <_printf_float+0x214>
 800f156:	e76b      	b.n	800f030 <_printf_float+0x98>
 800f158:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800f15c:	f240 80e0 	bls.w	800f320 <_printf_float+0x388>
 800f160:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800f164:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800f168:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f16c:	d133      	bne.n	800f1d6 <_printf_float+0x23e>
 800f16e:	4a38      	ldr	r2, [pc, #224]	@ (800f250 <_printf_float+0x2b8>)
 800f170:	2301      	movs	r3, #1
 800f172:	4631      	mov	r1, r6
 800f174:	4628      	mov	r0, r5
 800f176:	47b8      	blx	r7
 800f178:	3001      	adds	r0, #1
 800f17a:	f43f af59 	beq.w	800f030 <_printf_float+0x98>
 800f17e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800f182:	4543      	cmp	r3, r8
 800f184:	db02      	blt.n	800f18c <_printf_float+0x1f4>
 800f186:	6823      	ldr	r3, [r4, #0]
 800f188:	07d8      	lsls	r0, r3, #31
 800f18a:	d50f      	bpl.n	800f1ac <_printf_float+0x214>
 800f18c:	9b05      	ldr	r3, [sp, #20]
 800f18e:	465a      	mov	r2, fp
 800f190:	4631      	mov	r1, r6
 800f192:	4628      	mov	r0, r5
 800f194:	47b8      	blx	r7
 800f196:	3001      	adds	r0, #1
 800f198:	f43f af4a 	beq.w	800f030 <_printf_float+0x98>
 800f19c:	f04f 0900 	mov.w	r9, #0
 800f1a0:	f108 38ff 	add.w	r8, r8, #4294967295
 800f1a4:	f104 0a1a 	add.w	sl, r4, #26
 800f1a8:	45c8      	cmp	r8, r9
 800f1aa:	dc09      	bgt.n	800f1c0 <_printf_float+0x228>
 800f1ac:	6823      	ldr	r3, [r4, #0]
 800f1ae:	079b      	lsls	r3, r3, #30
 800f1b0:	f100 8107 	bmi.w	800f3c2 <_printf_float+0x42a>
 800f1b4:	68e0      	ldr	r0, [r4, #12]
 800f1b6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f1b8:	4298      	cmp	r0, r3
 800f1ba:	bfb8      	it	lt
 800f1bc:	4618      	movlt	r0, r3
 800f1be:	e739      	b.n	800f034 <_printf_float+0x9c>
 800f1c0:	2301      	movs	r3, #1
 800f1c2:	4652      	mov	r2, sl
 800f1c4:	4631      	mov	r1, r6
 800f1c6:	4628      	mov	r0, r5
 800f1c8:	47b8      	blx	r7
 800f1ca:	3001      	adds	r0, #1
 800f1cc:	f43f af30 	beq.w	800f030 <_printf_float+0x98>
 800f1d0:	f109 0901 	add.w	r9, r9, #1
 800f1d4:	e7e8      	b.n	800f1a8 <_printf_float+0x210>
 800f1d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f1d8:	2b00      	cmp	r3, #0
 800f1da:	dc3b      	bgt.n	800f254 <_printf_float+0x2bc>
 800f1dc:	4a1c      	ldr	r2, [pc, #112]	@ (800f250 <_printf_float+0x2b8>)
 800f1de:	2301      	movs	r3, #1
 800f1e0:	4631      	mov	r1, r6
 800f1e2:	4628      	mov	r0, r5
 800f1e4:	47b8      	blx	r7
 800f1e6:	3001      	adds	r0, #1
 800f1e8:	f43f af22 	beq.w	800f030 <_printf_float+0x98>
 800f1ec:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800f1f0:	ea59 0303 	orrs.w	r3, r9, r3
 800f1f4:	d102      	bne.n	800f1fc <_printf_float+0x264>
 800f1f6:	6823      	ldr	r3, [r4, #0]
 800f1f8:	07d9      	lsls	r1, r3, #31
 800f1fa:	d5d7      	bpl.n	800f1ac <_printf_float+0x214>
 800f1fc:	9b05      	ldr	r3, [sp, #20]
 800f1fe:	465a      	mov	r2, fp
 800f200:	4631      	mov	r1, r6
 800f202:	4628      	mov	r0, r5
 800f204:	47b8      	blx	r7
 800f206:	3001      	adds	r0, #1
 800f208:	f43f af12 	beq.w	800f030 <_printf_float+0x98>
 800f20c:	f04f 0a00 	mov.w	sl, #0
 800f210:	f104 0b1a 	add.w	fp, r4, #26
 800f214:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f216:	425b      	negs	r3, r3
 800f218:	4553      	cmp	r3, sl
 800f21a:	dc01      	bgt.n	800f220 <_printf_float+0x288>
 800f21c:	464b      	mov	r3, r9
 800f21e:	e794      	b.n	800f14a <_printf_float+0x1b2>
 800f220:	2301      	movs	r3, #1
 800f222:	465a      	mov	r2, fp
 800f224:	4631      	mov	r1, r6
 800f226:	4628      	mov	r0, r5
 800f228:	47b8      	blx	r7
 800f22a:	3001      	adds	r0, #1
 800f22c:	f43f af00 	beq.w	800f030 <_printf_float+0x98>
 800f230:	f10a 0a01 	add.w	sl, sl, #1
 800f234:	e7ee      	b.n	800f214 <_printf_float+0x27c>
 800f236:	bf00      	nop
 800f238:	ffffffff 	.word	0xffffffff
 800f23c:	7fefffff 	.word	0x7fefffff
 800f240:	08013c01 	.word	0x08013c01
 800f244:	08013c05 	.word	0x08013c05
 800f248:	08013c09 	.word	0x08013c09
 800f24c:	08013c0d 	.word	0x08013c0d
 800f250:	08013c11 	.word	0x08013c11
 800f254:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800f256:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800f25a:	4553      	cmp	r3, sl
 800f25c:	bfa8      	it	ge
 800f25e:	4653      	movge	r3, sl
 800f260:	2b00      	cmp	r3, #0
 800f262:	4699      	mov	r9, r3
 800f264:	dc37      	bgt.n	800f2d6 <_printf_float+0x33e>
 800f266:	2300      	movs	r3, #0
 800f268:	9307      	str	r3, [sp, #28]
 800f26a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f26e:	f104 021a 	add.w	r2, r4, #26
 800f272:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800f274:	9907      	ldr	r1, [sp, #28]
 800f276:	9306      	str	r3, [sp, #24]
 800f278:	eba3 0309 	sub.w	r3, r3, r9
 800f27c:	428b      	cmp	r3, r1
 800f27e:	dc31      	bgt.n	800f2e4 <_printf_float+0x34c>
 800f280:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f282:	459a      	cmp	sl, r3
 800f284:	dc3b      	bgt.n	800f2fe <_printf_float+0x366>
 800f286:	6823      	ldr	r3, [r4, #0]
 800f288:	07da      	lsls	r2, r3, #31
 800f28a:	d438      	bmi.n	800f2fe <_printf_float+0x366>
 800f28c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f28e:	ebaa 0903 	sub.w	r9, sl, r3
 800f292:	9b06      	ldr	r3, [sp, #24]
 800f294:	ebaa 0303 	sub.w	r3, sl, r3
 800f298:	4599      	cmp	r9, r3
 800f29a:	bfa8      	it	ge
 800f29c:	4699      	movge	r9, r3
 800f29e:	f1b9 0f00 	cmp.w	r9, #0
 800f2a2:	dc34      	bgt.n	800f30e <_printf_float+0x376>
 800f2a4:	f04f 0800 	mov.w	r8, #0
 800f2a8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f2ac:	f104 0b1a 	add.w	fp, r4, #26
 800f2b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f2b2:	ebaa 0303 	sub.w	r3, sl, r3
 800f2b6:	eba3 0309 	sub.w	r3, r3, r9
 800f2ba:	4543      	cmp	r3, r8
 800f2bc:	f77f af76 	ble.w	800f1ac <_printf_float+0x214>
 800f2c0:	2301      	movs	r3, #1
 800f2c2:	465a      	mov	r2, fp
 800f2c4:	4631      	mov	r1, r6
 800f2c6:	4628      	mov	r0, r5
 800f2c8:	47b8      	blx	r7
 800f2ca:	3001      	adds	r0, #1
 800f2cc:	f43f aeb0 	beq.w	800f030 <_printf_float+0x98>
 800f2d0:	f108 0801 	add.w	r8, r8, #1
 800f2d4:	e7ec      	b.n	800f2b0 <_printf_float+0x318>
 800f2d6:	4642      	mov	r2, r8
 800f2d8:	4631      	mov	r1, r6
 800f2da:	4628      	mov	r0, r5
 800f2dc:	47b8      	blx	r7
 800f2de:	3001      	adds	r0, #1
 800f2e0:	d1c1      	bne.n	800f266 <_printf_float+0x2ce>
 800f2e2:	e6a5      	b.n	800f030 <_printf_float+0x98>
 800f2e4:	2301      	movs	r3, #1
 800f2e6:	4631      	mov	r1, r6
 800f2e8:	4628      	mov	r0, r5
 800f2ea:	9206      	str	r2, [sp, #24]
 800f2ec:	47b8      	blx	r7
 800f2ee:	3001      	adds	r0, #1
 800f2f0:	f43f ae9e 	beq.w	800f030 <_printf_float+0x98>
 800f2f4:	9b07      	ldr	r3, [sp, #28]
 800f2f6:	9a06      	ldr	r2, [sp, #24]
 800f2f8:	3301      	adds	r3, #1
 800f2fa:	9307      	str	r3, [sp, #28]
 800f2fc:	e7b9      	b.n	800f272 <_printf_float+0x2da>
 800f2fe:	9b05      	ldr	r3, [sp, #20]
 800f300:	465a      	mov	r2, fp
 800f302:	4631      	mov	r1, r6
 800f304:	4628      	mov	r0, r5
 800f306:	47b8      	blx	r7
 800f308:	3001      	adds	r0, #1
 800f30a:	d1bf      	bne.n	800f28c <_printf_float+0x2f4>
 800f30c:	e690      	b.n	800f030 <_printf_float+0x98>
 800f30e:	9a06      	ldr	r2, [sp, #24]
 800f310:	464b      	mov	r3, r9
 800f312:	4442      	add	r2, r8
 800f314:	4631      	mov	r1, r6
 800f316:	4628      	mov	r0, r5
 800f318:	47b8      	blx	r7
 800f31a:	3001      	adds	r0, #1
 800f31c:	d1c2      	bne.n	800f2a4 <_printf_float+0x30c>
 800f31e:	e687      	b.n	800f030 <_printf_float+0x98>
 800f320:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 800f324:	f1b9 0f01 	cmp.w	r9, #1
 800f328:	dc01      	bgt.n	800f32e <_printf_float+0x396>
 800f32a:	07db      	lsls	r3, r3, #31
 800f32c:	d536      	bpl.n	800f39c <_printf_float+0x404>
 800f32e:	2301      	movs	r3, #1
 800f330:	4642      	mov	r2, r8
 800f332:	4631      	mov	r1, r6
 800f334:	4628      	mov	r0, r5
 800f336:	47b8      	blx	r7
 800f338:	3001      	adds	r0, #1
 800f33a:	f43f ae79 	beq.w	800f030 <_printf_float+0x98>
 800f33e:	9b05      	ldr	r3, [sp, #20]
 800f340:	465a      	mov	r2, fp
 800f342:	4631      	mov	r1, r6
 800f344:	4628      	mov	r0, r5
 800f346:	47b8      	blx	r7
 800f348:	3001      	adds	r0, #1
 800f34a:	f43f ae71 	beq.w	800f030 <_printf_float+0x98>
 800f34e:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800f352:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800f356:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f35a:	f109 39ff 	add.w	r9, r9, #4294967295
 800f35e:	d018      	beq.n	800f392 <_printf_float+0x3fa>
 800f360:	464b      	mov	r3, r9
 800f362:	f108 0201 	add.w	r2, r8, #1
 800f366:	4631      	mov	r1, r6
 800f368:	4628      	mov	r0, r5
 800f36a:	47b8      	blx	r7
 800f36c:	3001      	adds	r0, #1
 800f36e:	d10c      	bne.n	800f38a <_printf_float+0x3f2>
 800f370:	e65e      	b.n	800f030 <_printf_float+0x98>
 800f372:	2301      	movs	r3, #1
 800f374:	465a      	mov	r2, fp
 800f376:	4631      	mov	r1, r6
 800f378:	4628      	mov	r0, r5
 800f37a:	47b8      	blx	r7
 800f37c:	3001      	adds	r0, #1
 800f37e:	f43f ae57 	beq.w	800f030 <_printf_float+0x98>
 800f382:	f108 0801 	add.w	r8, r8, #1
 800f386:	45c8      	cmp	r8, r9
 800f388:	dbf3      	blt.n	800f372 <_printf_float+0x3da>
 800f38a:	4653      	mov	r3, sl
 800f38c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800f390:	e6dc      	b.n	800f14c <_printf_float+0x1b4>
 800f392:	f04f 0800 	mov.w	r8, #0
 800f396:	f104 0b1a 	add.w	fp, r4, #26
 800f39a:	e7f4      	b.n	800f386 <_printf_float+0x3ee>
 800f39c:	2301      	movs	r3, #1
 800f39e:	4642      	mov	r2, r8
 800f3a0:	e7e1      	b.n	800f366 <_printf_float+0x3ce>
 800f3a2:	2301      	movs	r3, #1
 800f3a4:	464a      	mov	r2, r9
 800f3a6:	4631      	mov	r1, r6
 800f3a8:	4628      	mov	r0, r5
 800f3aa:	47b8      	blx	r7
 800f3ac:	3001      	adds	r0, #1
 800f3ae:	f43f ae3f 	beq.w	800f030 <_printf_float+0x98>
 800f3b2:	f108 0801 	add.w	r8, r8, #1
 800f3b6:	68e3      	ldr	r3, [r4, #12]
 800f3b8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800f3ba:	1a5b      	subs	r3, r3, r1
 800f3bc:	4543      	cmp	r3, r8
 800f3be:	dcf0      	bgt.n	800f3a2 <_printf_float+0x40a>
 800f3c0:	e6f8      	b.n	800f1b4 <_printf_float+0x21c>
 800f3c2:	f04f 0800 	mov.w	r8, #0
 800f3c6:	f104 0919 	add.w	r9, r4, #25
 800f3ca:	e7f4      	b.n	800f3b6 <_printf_float+0x41e>

0800f3cc <_printf_common>:
 800f3cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f3d0:	4616      	mov	r6, r2
 800f3d2:	4698      	mov	r8, r3
 800f3d4:	688a      	ldr	r2, [r1, #8]
 800f3d6:	690b      	ldr	r3, [r1, #16]
 800f3d8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800f3dc:	4293      	cmp	r3, r2
 800f3de:	bfb8      	it	lt
 800f3e0:	4613      	movlt	r3, r2
 800f3e2:	6033      	str	r3, [r6, #0]
 800f3e4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800f3e8:	4607      	mov	r7, r0
 800f3ea:	460c      	mov	r4, r1
 800f3ec:	b10a      	cbz	r2, 800f3f2 <_printf_common+0x26>
 800f3ee:	3301      	adds	r3, #1
 800f3f0:	6033      	str	r3, [r6, #0]
 800f3f2:	6823      	ldr	r3, [r4, #0]
 800f3f4:	0699      	lsls	r1, r3, #26
 800f3f6:	bf42      	ittt	mi
 800f3f8:	6833      	ldrmi	r3, [r6, #0]
 800f3fa:	3302      	addmi	r3, #2
 800f3fc:	6033      	strmi	r3, [r6, #0]
 800f3fe:	6825      	ldr	r5, [r4, #0]
 800f400:	f015 0506 	ands.w	r5, r5, #6
 800f404:	d106      	bne.n	800f414 <_printf_common+0x48>
 800f406:	f104 0a19 	add.w	sl, r4, #25
 800f40a:	68e3      	ldr	r3, [r4, #12]
 800f40c:	6832      	ldr	r2, [r6, #0]
 800f40e:	1a9b      	subs	r3, r3, r2
 800f410:	42ab      	cmp	r3, r5
 800f412:	dc26      	bgt.n	800f462 <_printf_common+0x96>
 800f414:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800f418:	6822      	ldr	r2, [r4, #0]
 800f41a:	3b00      	subs	r3, #0
 800f41c:	bf18      	it	ne
 800f41e:	2301      	movne	r3, #1
 800f420:	0692      	lsls	r2, r2, #26
 800f422:	d42b      	bmi.n	800f47c <_printf_common+0xb0>
 800f424:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800f428:	4641      	mov	r1, r8
 800f42a:	4638      	mov	r0, r7
 800f42c:	47c8      	blx	r9
 800f42e:	3001      	adds	r0, #1
 800f430:	d01e      	beq.n	800f470 <_printf_common+0xa4>
 800f432:	6823      	ldr	r3, [r4, #0]
 800f434:	6922      	ldr	r2, [r4, #16]
 800f436:	f003 0306 	and.w	r3, r3, #6
 800f43a:	2b04      	cmp	r3, #4
 800f43c:	bf02      	ittt	eq
 800f43e:	68e5      	ldreq	r5, [r4, #12]
 800f440:	6833      	ldreq	r3, [r6, #0]
 800f442:	1aed      	subeq	r5, r5, r3
 800f444:	68a3      	ldr	r3, [r4, #8]
 800f446:	bf0c      	ite	eq
 800f448:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f44c:	2500      	movne	r5, #0
 800f44e:	4293      	cmp	r3, r2
 800f450:	bfc4      	itt	gt
 800f452:	1a9b      	subgt	r3, r3, r2
 800f454:	18ed      	addgt	r5, r5, r3
 800f456:	2600      	movs	r6, #0
 800f458:	341a      	adds	r4, #26
 800f45a:	42b5      	cmp	r5, r6
 800f45c:	d11a      	bne.n	800f494 <_printf_common+0xc8>
 800f45e:	2000      	movs	r0, #0
 800f460:	e008      	b.n	800f474 <_printf_common+0xa8>
 800f462:	2301      	movs	r3, #1
 800f464:	4652      	mov	r2, sl
 800f466:	4641      	mov	r1, r8
 800f468:	4638      	mov	r0, r7
 800f46a:	47c8      	blx	r9
 800f46c:	3001      	adds	r0, #1
 800f46e:	d103      	bne.n	800f478 <_printf_common+0xac>
 800f470:	f04f 30ff 	mov.w	r0, #4294967295
 800f474:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f478:	3501      	adds	r5, #1
 800f47a:	e7c6      	b.n	800f40a <_printf_common+0x3e>
 800f47c:	18e1      	adds	r1, r4, r3
 800f47e:	1c5a      	adds	r2, r3, #1
 800f480:	2030      	movs	r0, #48	@ 0x30
 800f482:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800f486:	4422      	add	r2, r4
 800f488:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800f48c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800f490:	3302      	adds	r3, #2
 800f492:	e7c7      	b.n	800f424 <_printf_common+0x58>
 800f494:	2301      	movs	r3, #1
 800f496:	4622      	mov	r2, r4
 800f498:	4641      	mov	r1, r8
 800f49a:	4638      	mov	r0, r7
 800f49c:	47c8      	blx	r9
 800f49e:	3001      	adds	r0, #1
 800f4a0:	d0e6      	beq.n	800f470 <_printf_common+0xa4>
 800f4a2:	3601      	adds	r6, #1
 800f4a4:	e7d9      	b.n	800f45a <_printf_common+0x8e>
	...

0800f4a8 <_printf_i>:
 800f4a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f4ac:	7e0f      	ldrb	r7, [r1, #24]
 800f4ae:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800f4b0:	2f78      	cmp	r7, #120	@ 0x78
 800f4b2:	4691      	mov	r9, r2
 800f4b4:	4680      	mov	r8, r0
 800f4b6:	460c      	mov	r4, r1
 800f4b8:	469a      	mov	sl, r3
 800f4ba:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800f4be:	d807      	bhi.n	800f4d0 <_printf_i+0x28>
 800f4c0:	2f62      	cmp	r7, #98	@ 0x62
 800f4c2:	d80a      	bhi.n	800f4da <_printf_i+0x32>
 800f4c4:	2f00      	cmp	r7, #0
 800f4c6:	f000 80d2 	beq.w	800f66e <_printf_i+0x1c6>
 800f4ca:	2f58      	cmp	r7, #88	@ 0x58
 800f4cc:	f000 80b9 	beq.w	800f642 <_printf_i+0x19a>
 800f4d0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f4d4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800f4d8:	e03a      	b.n	800f550 <_printf_i+0xa8>
 800f4da:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800f4de:	2b15      	cmp	r3, #21
 800f4e0:	d8f6      	bhi.n	800f4d0 <_printf_i+0x28>
 800f4e2:	a101      	add	r1, pc, #4	@ (adr r1, 800f4e8 <_printf_i+0x40>)
 800f4e4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f4e8:	0800f541 	.word	0x0800f541
 800f4ec:	0800f555 	.word	0x0800f555
 800f4f0:	0800f4d1 	.word	0x0800f4d1
 800f4f4:	0800f4d1 	.word	0x0800f4d1
 800f4f8:	0800f4d1 	.word	0x0800f4d1
 800f4fc:	0800f4d1 	.word	0x0800f4d1
 800f500:	0800f555 	.word	0x0800f555
 800f504:	0800f4d1 	.word	0x0800f4d1
 800f508:	0800f4d1 	.word	0x0800f4d1
 800f50c:	0800f4d1 	.word	0x0800f4d1
 800f510:	0800f4d1 	.word	0x0800f4d1
 800f514:	0800f655 	.word	0x0800f655
 800f518:	0800f57f 	.word	0x0800f57f
 800f51c:	0800f60f 	.word	0x0800f60f
 800f520:	0800f4d1 	.word	0x0800f4d1
 800f524:	0800f4d1 	.word	0x0800f4d1
 800f528:	0800f677 	.word	0x0800f677
 800f52c:	0800f4d1 	.word	0x0800f4d1
 800f530:	0800f57f 	.word	0x0800f57f
 800f534:	0800f4d1 	.word	0x0800f4d1
 800f538:	0800f4d1 	.word	0x0800f4d1
 800f53c:	0800f617 	.word	0x0800f617
 800f540:	6833      	ldr	r3, [r6, #0]
 800f542:	1d1a      	adds	r2, r3, #4
 800f544:	681b      	ldr	r3, [r3, #0]
 800f546:	6032      	str	r2, [r6, #0]
 800f548:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f54c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800f550:	2301      	movs	r3, #1
 800f552:	e09d      	b.n	800f690 <_printf_i+0x1e8>
 800f554:	6833      	ldr	r3, [r6, #0]
 800f556:	6820      	ldr	r0, [r4, #0]
 800f558:	1d19      	adds	r1, r3, #4
 800f55a:	6031      	str	r1, [r6, #0]
 800f55c:	0606      	lsls	r6, r0, #24
 800f55e:	d501      	bpl.n	800f564 <_printf_i+0xbc>
 800f560:	681d      	ldr	r5, [r3, #0]
 800f562:	e003      	b.n	800f56c <_printf_i+0xc4>
 800f564:	0645      	lsls	r5, r0, #25
 800f566:	d5fb      	bpl.n	800f560 <_printf_i+0xb8>
 800f568:	f9b3 5000 	ldrsh.w	r5, [r3]
 800f56c:	2d00      	cmp	r5, #0
 800f56e:	da03      	bge.n	800f578 <_printf_i+0xd0>
 800f570:	232d      	movs	r3, #45	@ 0x2d
 800f572:	426d      	negs	r5, r5
 800f574:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f578:	4859      	ldr	r0, [pc, #356]	@ (800f6e0 <_printf_i+0x238>)
 800f57a:	230a      	movs	r3, #10
 800f57c:	e011      	b.n	800f5a2 <_printf_i+0xfa>
 800f57e:	6821      	ldr	r1, [r4, #0]
 800f580:	6833      	ldr	r3, [r6, #0]
 800f582:	0608      	lsls	r0, r1, #24
 800f584:	f853 5b04 	ldr.w	r5, [r3], #4
 800f588:	d402      	bmi.n	800f590 <_printf_i+0xe8>
 800f58a:	0649      	lsls	r1, r1, #25
 800f58c:	bf48      	it	mi
 800f58e:	b2ad      	uxthmi	r5, r5
 800f590:	2f6f      	cmp	r7, #111	@ 0x6f
 800f592:	4853      	ldr	r0, [pc, #332]	@ (800f6e0 <_printf_i+0x238>)
 800f594:	6033      	str	r3, [r6, #0]
 800f596:	bf14      	ite	ne
 800f598:	230a      	movne	r3, #10
 800f59a:	2308      	moveq	r3, #8
 800f59c:	2100      	movs	r1, #0
 800f59e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800f5a2:	6866      	ldr	r6, [r4, #4]
 800f5a4:	60a6      	str	r6, [r4, #8]
 800f5a6:	2e00      	cmp	r6, #0
 800f5a8:	bfa2      	ittt	ge
 800f5aa:	6821      	ldrge	r1, [r4, #0]
 800f5ac:	f021 0104 	bicge.w	r1, r1, #4
 800f5b0:	6021      	strge	r1, [r4, #0]
 800f5b2:	b90d      	cbnz	r5, 800f5b8 <_printf_i+0x110>
 800f5b4:	2e00      	cmp	r6, #0
 800f5b6:	d04b      	beq.n	800f650 <_printf_i+0x1a8>
 800f5b8:	4616      	mov	r6, r2
 800f5ba:	fbb5 f1f3 	udiv	r1, r5, r3
 800f5be:	fb03 5711 	mls	r7, r3, r1, r5
 800f5c2:	5dc7      	ldrb	r7, [r0, r7]
 800f5c4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800f5c8:	462f      	mov	r7, r5
 800f5ca:	42bb      	cmp	r3, r7
 800f5cc:	460d      	mov	r5, r1
 800f5ce:	d9f4      	bls.n	800f5ba <_printf_i+0x112>
 800f5d0:	2b08      	cmp	r3, #8
 800f5d2:	d10b      	bne.n	800f5ec <_printf_i+0x144>
 800f5d4:	6823      	ldr	r3, [r4, #0]
 800f5d6:	07df      	lsls	r7, r3, #31
 800f5d8:	d508      	bpl.n	800f5ec <_printf_i+0x144>
 800f5da:	6923      	ldr	r3, [r4, #16]
 800f5dc:	6861      	ldr	r1, [r4, #4]
 800f5de:	4299      	cmp	r1, r3
 800f5e0:	bfde      	ittt	le
 800f5e2:	2330      	movle	r3, #48	@ 0x30
 800f5e4:	f806 3c01 	strble.w	r3, [r6, #-1]
 800f5e8:	f106 36ff 	addle.w	r6, r6, #4294967295
 800f5ec:	1b92      	subs	r2, r2, r6
 800f5ee:	6122      	str	r2, [r4, #16]
 800f5f0:	f8cd a000 	str.w	sl, [sp]
 800f5f4:	464b      	mov	r3, r9
 800f5f6:	aa03      	add	r2, sp, #12
 800f5f8:	4621      	mov	r1, r4
 800f5fa:	4640      	mov	r0, r8
 800f5fc:	f7ff fee6 	bl	800f3cc <_printf_common>
 800f600:	3001      	adds	r0, #1
 800f602:	d14a      	bne.n	800f69a <_printf_i+0x1f2>
 800f604:	f04f 30ff 	mov.w	r0, #4294967295
 800f608:	b004      	add	sp, #16
 800f60a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f60e:	6823      	ldr	r3, [r4, #0]
 800f610:	f043 0320 	orr.w	r3, r3, #32
 800f614:	6023      	str	r3, [r4, #0]
 800f616:	4833      	ldr	r0, [pc, #204]	@ (800f6e4 <_printf_i+0x23c>)
 800f618:	2778      	movs	r7, #120	@ 0x78
 800f61a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800f61e:	6823      	ldr	r3, [r4, #0]
 800f620:	6831      	ldr	r1, [r6, #0]
 800f622:	061f      	lsls	r7, r3, #24
 800f624:	f851 5b04 	ldr.w	r5, [r1], #4
 800f628:	d402      	bmi.n	800f630 <_printf_i+0x188>
 800f62a:	065f      	lsls	r7, r3, #25
 800f62c:	bf48      	it	mi
 800f62e:	b2ad      	uxthmi	r5, r5
 800f630:	6031      	str	r1, [r6, #0]
 800f632:	07d9      	lsls	r1, r3, #31
 800f634:	bf44      	itt	mi
 800f636:	f043 0320 	orrmi.w	r3, r3, #32
 800f63a:	6023      	strmi	r3, [r4, #0]
 800f63c:	b11d      	cbz	r5, 800f646 <_printf_i+0x19e>
 800f63e:	2310      	movs	r3, #16
 800f640:	e7ac      	b.n	800f59c <_printf_i+0xf4>
 800f642:	4827      	ldr	r0, [pc, #156]	@ (800f6e0 <_printf_i+0x238>)
 800f644:	e7e9      	b.n	800f61a <_printf_i+0x172>
 800f646:	6823      	ldr	r3, [r4, #0]
 800f648:	f023 0320 	bic.w	r3, r3, #32
 800f64c:	6023      	str	r3, [r4, #0]
 800f64e:	e7f6      	b.n	800f63e <_printf_i+0x196>
 800f650:	4616      	mov	r6, r2
 800f652:	e7bd      	b.n	800f5d0 <_printf_i+0x128>
 800f654:	6833      	ldr	r3, [r6, #0]
 800f656:	6825      	ldr	r5, [r4, #0]
 800f658:	6961      	ldr	r1, [r4, #20]
 800f65a:	1d18      	adds	r0, r3, #4
 800f65c:	6030      	str	r0, [r6, #0]
 800f65e:	062e      	lsls	r6, r5, #24
 800f660:	681b      	ldr	r3, [r3, #0]
 800f662:	d501      	bpl.n	800f668 <_printf_i+0x1c0>
 800f664:	6019      	str	r1, [r3, #0]
 800f666:	e002      	b.n	800f66e <_printf_i+0x1c6>
 800f668:	0668      	lsls	r0, r5, #25
 800f66a:	d5fb      	bpl.n	800f664 <_printf_i+0x1bc>
 800f66c:	8019      	strh	r1, [r3, #0]
 800f66e:	2300      	movs	r3, #0
 800f670:	6123      	str	r3, [r4, #16]
 800f672:	4616      	mov	r6, r2
 800f674:	e7bc      	b.n	800f5f0 <_printf_i+0x148>
 800f676:	6833      	ldr	r3, [r6, #0]
 800f678:	1d1a      	adds	r2, r3, #4
 800f67a:	6032      	str	r2, [r6, #0]
 800f67c:	681e      	ldr	r6, [r3, #0]
 800f67e:	6862      	ldr	r2, [r4, #4]
 800f680:	2100      	movs	r1, #0
 800f682:	4630      	mov	r0, r6
 800f684:	f7f0 fe3c 	bl	8000300 <memchr>
 800f688:	b108      	cbz	r0, 800f68e <_printf_i+0x1e6>
 800f68a:	1b80      	subs	r0, r0, r6
 800f68c:	6060      	str	r0, [r4, #4]
 800f68e:	6863      	ldr	r3, [r4, #4]
 800f690:	6123      	str	r3, [r4, #16]
 800f692:	2300      	movs	r3, #0
 800f694:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f698:	e7aa      	b.n	800f5f0 <_printf_i+0x148>
 800f69a:	6923      	ldr	r3, [r4, #16]
 800f69c:	4632      	mov	r2, r6
 800f69e:	4649      	mov	r1, r9
 800f6a0:	4640      	mov	r0, r8
 800f6a2:	47d0      	blx	sl
 800f6a4:	3001      	adds	r0, #1
 800f6a6:	d0ad      	beq.n	800f604 <_printf_i+0x15c>
 800f6a8:	6823      	ldr	r3, [r4, #0]
 800f6aa:	079b      	lsls	r3, r3, #30
 800f6ac:	d413      	bmi.n	800f6d6 <_printf_i+0x22e>
 800f6ae:	68e0      	ldr	r0, [r4, #12]
 800f6b0:	9b03      	ldr	r3, [sp, #12]
 800f6b2:	4298      	cmp	r0, r3
 800f6b4:	bfb8      	it	lt
 800f6b6:	4618      	movlt	r0, r3
 800f6b8:	e7a6      	b.n	800f608 <_printf_i+0x160>
 800f6ba:	2301      	movs	r3, #1
 800f6bc:	4632      	mov	r2, r6
 800f6be:	4649      	mov	r1, r9
 800f6c0:	4640      	mov	r0, r8
 800f6c2:	47d0      	blx	sl
 800f6c4:	3001      	adds	r0, #1
 800f6c6:	d09d      	beq.n	800f604 <_printf_i+0x15c>
 800f6c8:	3501      	adds	r5, #1
 800f6ca:	68e3      	ldr	r3, [r4, #12]
 800f6cc:	9903      	ldr	r1, [sp, #12]
 800f6ce:	1a5b      	subs	r3, r3, r1
 800f6d0:	42ab      	cmp	r3, r5
 800f6d2:	dcf2      	bgt.n	800f6ba <_printf_i+0x212>
 800f6d4:	e7eb      	b.n	800f6ae <_printf_i+0x206>
 800f6d6:	2500      	movs	r5, #0
 800f6d8:	f104 0619 	add.w	r6, r4, #25
 800f6dc:	e7f5      	b.n	800f6ca <_printf_i+0x222>
 800f6de:	bf00      	nop
 800f6e0:	08013c13 	.word	0x08013c13
 800f6e4:	08013c24 	.word	0x08013c24

0800f6e8 <_scanf_float>:
 800f6e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f6ec:	b087      	sub	sp, #28
 800f6ee:	4617      	mov	r7, r2
 800f6f0:	9303      	str	r3, [sp, #12]
 800f6f2:	688b      	ldr	r3, [r1, #8]
 800f6f4:	1e5a      	subs	r2, r3, #1
 800f6f6:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800f6fa:	bf81      	itttt	hi
 800f6fc:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800f700:	eb03 0b05 	addhi.w	fp, r3, r5
 800f704:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800f708:	608b      	strhi	r3, [r1, #8]
 800f70a:	680b      	ldr	r3, [r1, #0]
 800f70c:	460a      	mov	r2, r1
 800f70e:	f04f 0500 	mov.w	r5, #0
 800f712:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800f716:	f842 3b1c 	str.w	r3, [r2], #28
 800f71a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800f71e:	4680      	mov	r8, r0
 800f720:	460c      	mov	r4, r1
 800f722:	bf98      	it	ls
 800f724:	f04f 0b00 	movls.w	fp, #0
 800f728:	9201      	str	r2, [sp, #4]
 800f72a:	4616      	mov	r6, r2
 800f72c:	46aa      	mov	sl, r5
 800f72e:	46a9      	mov	r9, r5
 800f730:	9502      	str	r5, [sp, #8]
 800f732:	68a2      	ldr	r2, [r4, #8]
 800f734:	b152      	cbz	r2, 800f74c <_scanf_float+0x64>
 800f736:	683b      	ldr	r3, [r7, #0]
 800f738:	781b      	ldrb	r3, [r3, #0]
 800f73a:	2b4e      	cmp	r3, #78	@ 0x4e
 800f73c:	d864      	bhi.n	800f808 <_scanf_float+0x120>
 800f73e:	2b40      	cmp	r3, #64	@ 0x40
 800f740:	d83c      	bhi.n	800f7bc <_scanf_float+0xd4>
 800f742:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800f746:	b2c8      	uxtb	r0, r1
 800f748:	280e      	cmp	r0, #14
 800f74a:	d93a      	bls.n	800f7c2 <_scanf_float+0xda>
 800f74c:	f1b9 0f00 	cmp.w	r9, #0
 800f750:	d003      	beq.n	800f75a <_scanf_float+0x72>
 800f752:	6823      	ldr	r3, [r4, #0]
 800f754:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800f758:	6023      	str	r3, [r4, #0]
 800f75a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f75e:	f1ba 0f01 	cmp.w	sl, #1
 800f762:	f200 8117 	bhi.w	800f994 <_scanf_float+0x2ac>
 800f766:	9b01      	ldr	r3, [sp, #4]
 800f768:	429e      	cmp	r6, r3
 800f76a:	f200 8108 	bhi.w	800f97e <_scanf_float+0x296>
 800f76e:	2001      	movs	r0, #1
 800f770:	b007      	add	sp, #28
 800f772:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f776:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800f77a:	2a0d      	cmp	r2, #13
 800f77c:	d8e6      	bhi.n	800f74c <_scanf_float+0x64>
 800f77e:	a101      	add	r1, pc, #4	@ (adr r1, 800f784 <_scanf_float+0x9c>)
 800f780:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800f784:	0800f8cb 	.word	0x0800f8cb
 800f788:	0800f74d 	.word	0x0800f74d
 800f78c:	0800f74d 	.word	0x0800f74d
 800f790:	0800f74d 	.word	0x0800f74d
 800f794:	0800f92b 	.word	0x0800f92b
 800f798:	0800f903 	.word	0x0800f903
 800f79c:	0800f74d 	.word	0x0800f74d
 800f7a0:	0800f74d 	.word	0x0800f74d
 800f7a4:	0800f8d9 	.word	0x0800f8d9
 800f7a8:	0800f74d 	.word	0x0800f74d
 800f7ac:	0800f74d 	.word	0x0800f74d
 800f7b0:	0800f74d 	.word	0x0800f74d
 800f7b4:	0800f74d 	.word	0x0800f74d
 800f7b8:	0800f891 	.word	0x0800f891
 800f7bc:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800f7c0:	e7db      	b.n	800f77a <_scanf_float+0x92>
 800f7c2:	290e      	cmp	r1, #14
 800f7c4:	d8c2      	bhi.n	800f74c <_scanf_float+0x64>
 800f7c6:	a001      	add	r0, pc, #4	@ (adr r0, 800f7cc <_scanf_float+0xe4>)
 800f7c8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800f7cc:	0800f881 	.word	0x0800f881
 800f7d0:	0800f74d 	.word	0x0800f74d
 800f7d4:	0800f881 	.word	0x0800f881
 800f7d8:	0800f917 	.word	0x0800f917
 800f7dc:	0800f74d 	.word	0x0800f74d
 800f7e0:	0800f829 	.word	0x0800f829
 800f7e4:	0800f867 	.word	0x0800f867
 800f7e8:	0800f867 	.word	0x0800f867
 800f7ec:	0800f867 	.word	0x0800f867
 800f7f0:	0800f867 	.word	0x0800f867
 800f7f4:	0800f867 	.word	0x0800f867
 800f7f8:	0800f867 	.word	0x0800f867
 800f7fc:	0800f867 	.word	0x0800f867
 800f800:	0800f867 	.word	0x0800f867
 800f804:	0800f867 	.word	0x0800f867
 800f808:	2b6e      	cmp	r3, #110	@ 0x6e
 800f80a:	d809      	bhi.n	800f820 <_scanf_float+0x138>
 800f80c:	2b60      	cmp	r3, #96	@ 0x60
 800f80e:	d8b2      	bhi.n	800f776 <_scanf_float+0x8e>
 800f810:	2b54      	cmp	r3, #84	@ 0x54
 800f812:	d07b      	beq.n	800f90c <_scanf_float+0x224>
 800f814:	2b59      	cmp	r3, #89	@ 0x59
 800f816:	d199      	bne.n	800f74c <_scanf_float+0x64>
 800f818:	2d07      	cmp	r5, #7
 800f81a:	d197      	bne.n	800f74c <_scanf_float+0x64>
 800f81c:	2508      	movs	r5, #8
 800f81e:	e02c      	b.n	800f87a <_scanf_float+0x192>
 800f820:	2b74      	cmp	r3, #116	@ 0x74
 800f822:	d073      	beq.n	800f90c <_scanf_float+0x224>
 800f824:	2b79      	cmp	r3, #121	@ 0x79
 800f826:	e7f6      	b.n	800f816 <_scanf_float+0x12e>
 800f828:	6821      	ldr	r1, [r4, #0]
 800f82a:	05c8      	lsls	r0, r1, #23
 800f82c:	d51b      	bpl.n	800f866 <_scanf_float+0x17e>
 800f82e:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800f832:	6021      	str	r1, [r4, #0]
 800f834:	f109 0901 	add.w	r9, r9, #1
 800f838:	f1bb 0f00 	cmp.w	fp, #0
 800f83c:	d003      	beq.n	800f846 <_scanf_float+0x15e>
 800f83e:	3201      	adds	r2, #1
 800f840:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f844:	60a2      	str	r2, [r4, #8]
 800f846:	68a3      	ldr	r3, [r4, #8]
 800f848:	3b01      	subs	r3, #1
 800f84a:	60a3      	str	r3, [r4, #8]
 800f84c:	6923      	ldr	r3, [r4, #16]
 800f84e:	3301      	adds	r3, #1
 800f850:	6123      	str	r3, [r4, #16]
 800f852:	687b      	ldr	r3, [r7, #4]
 800f854:	3b01      	subs	r3, #1
 800f856:	2b00      	cmp	r3, #0
 800f858:	607b      	str	r3, [r7, #4]
 800f85a:	f340 8087 	ble.w	800f96c <_scanf_float+0x284>
 800f85e:	683b      	ldr	r3, [r7, #0]
 800f860:	3301      	adds	r3, #1
 800f862:	603b      	str	r3, [r7, #0]
 800f864:	e765      	b.n	800f732 <_scanf_float+0x4a>
 800f866:	eb1a 0105 	adds.w	r1, sl, r5
 800f86a:	f47f af6f 	bne.w	800f74c <_scanf_float+0x64>
 800f86e:	6822      	ldr	r2, [r4, #0]
 800f870:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800f874:	6022      	str	r2, [r4, #0]
 800f876:	460d      	mov	r5, r1
 800f878:	468a      	mov	sl, r1
 800f87a:	f806 3b01 	strb.w	r3, [r6], #1
 800f87e:	e7e2      	b.n	800f846 <_scanf_float+0x15e>
 800f880:	6822      	ldr	r2, [r4, #0]
 800f882:	0610      	lsls	r0, r2, #24
 800f884:	f57f af62 	bpl.w	800f74c <_scanf_float+0x64>
 800f888:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800f88c:	6022      	str	r2, [r4, #0]
 800f88e:	e7f4      	b.n	800f87a <_scanf_float+0x192>
 800f890:	f1ba 0f00 	cmp.w	sl, #0
 800f894:	d10e      	bne.n	800f8b4 <_scanf_float+0x1cc>
 800f896:	f1b9 0f00 	cmp.w	r9, #0
 800f89a:	d10e      	bne.n	800f8ba <_scanf_float+0x1d2>
 800f89c:	6822      	ldr	r2, [r4, #0]
 800f89e:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800f8a2:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800f8a6:	d108      	bne.n	800f8ba <_scanf_float+0x1d2>
 800f8a8:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800f8ac:	6022      	str	r2, [r4, #0]
 800f8ae:	f04f 0a01 	mov.w	sl, #1
 800f8b2:	e7e2      	b.n	800f87a <_scanf_float+0x192>
 800f8b4:	f1ba 0f02 	cmp.w	sl, #2
 800f8b8:	d055      	beq.n	800f966 <_scanf_float+0x27e>
 800f8ba:	2d01      	cmp	r5, #1
 800f8bc:	d002      	beq.n	800f8c4 <_scanf_float+0x1dc>
 800f8be:	2d04      	cmp	r5, #4
 800f8c0:	f47f af44 	bne.w	800f74c <_scanf_float+0x64>
 800f8c4:	3501      	adds	r5, #1
 800f8c6:	b2ed      	uxtb	r5, r5
 800f8c8:	e7d7      	b.n	800f87a <_scanf_float+0x192>
 800f8ca:	f1ba 0f01 	cmp.w	sl, #1
 800f8ce:	f47f af3d 	bne.w	800f74c <_scanf_float+0x64>
 800f8d2:	f04f 0a02 	mov.w	sl, #2
 800f8d6:	e7d0      	b.n	800f87a <_scanf_float+0x192>
 800f8d8:	b97d      	cbnz	r5, 800f8fa <_scanf_float+0x212>
 800f8da:	f1b9 0f00 	cmp.w	r9, #0
 800f8de:	f47f af38 	bne.w	800f752 <_scanf_float+0x6a>
 800f8e2:	6822      	ldr	r2, [r4, #0]
 800f8e4:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800f8e8:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800f8ec:	f040 8101 	bne.w	800faf2 <_scanf_float+0x40a>
 800f8f0:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800f8f4:	6022      	str	r2, [r4, #0]
 800f8f6:	2501      	movs	r5, #1
 800f8f8:	e7bf      	b.n	800f87a <_scanf_float+0x192>
 800f8fa:	2d03      	cmp	r5, #3
 800f8fc:	d0e2      	beq.n	800f8c4 <_scanf_float+0x1dc>
 800f8fe:	2d05      	cmp	r5, #5
 800f900:	e7de      	b.n	800f8c0 <_scanf_float+0x1d8>
 800f902:	2d02      	cmp	r5, #2
 800f904:	f47f af22 	bne.w	800f74c <_scanf_float+0x64>
 800f908:	2503      	movs	r5, #3
 800f90a:	e7b6      	b.n	800f87a <_scanf_float+0x192>
 800f90c:	2d06      	cmp	r5, #6
 800f90e:	f47f af1d 	bne.w	800f74c <_scanf_float+0x64>
 800f912:	2507      	movs	r5, #7
 800f914:	e7b1      	b.n	800f87a <_scanf_float+0x192>
 800f916:	6822      	ldr	r2, [r4, #0]
 800f918:	0591      	lsls	r1, r2, #22
 800f91a:	f57f af17 	bpl.w	800f74c <_scanf_float+0x64>
 800f91e:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800f922:	6022      	str	r2, [r4, #0]
 800f924:	f8cd 9008 	str.w	r9, [sp, #8]
 800f928:	e7a7      	b.n	800f87a <_scanf_float+0x192>
 800f92a:	6822      	ldr	r2, [r4, #0]
 800f92c:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800f930:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800f934:	d006      	beq.n	800f944 <_scanf_float+0x25c>
 800f936:	0550      	lsls	r0, r2, #21
 800f938:	f57f af08 	bpl.w	800f74c <_scanf_float+0x64>
 800f93c:	f1b9 0f00 	cmp.w	r9, #0
 800f940:	f000 80d7 	beq.w	800faf2 <_scanf_float+0x40a>
 800f944:	0591      	lsls	r1, r2, #22
 800f946:	bf58      	it	pl
 800f948:	9902      	ldrpl	r1, [sp, #8]
 800f94a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800f94e:	bf58      	it	pl
 800f950:	eba9 0101 	subpl.w	r1, r9, r1
 800f954:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800f958:	bf58      	it	pl
 800f95a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800f95e:	6022      	str	r2, [r4, #0]
 800f960:	f04f 0900 	mov.w	r9, #0
 800f964:	e789      	b.n	800f87a <_scanf_float+0x192>
 800f966:	f04f 0a03 	mov.w	sl, #3
 800f96a:	e786      	b.n	800f87a <_scanf_float+0x192>
 800f96c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800f970:	4639      	mov	r1, r7
 800f972:	4640      	mov	r0, r8
 800f974:	4798      	blx	r3
 800f976:	2800      	cmp	r0, #0
 800f978:	f43f aedb 	beq.w	800f732 <_scanf_float+0x4a>
 800f97c:	e6e6      	b.n	800f74c <_scanf_float+0x64>
 800f97e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f982:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f986:	463a      	mov	r2, r7
 800f988:	4640      	mov	r0, r8
 800f98a:	4798      	blx	r3
 800f98c:	6923      	ldr	r3, [r4, #16]
 800f98e:	3b01      	subs	r3, #1
 800f990:	6123      	str	r3, [r4, #16]
 800f992:	e6e8      	b.n	800f766 <_scanf_float+0x7e>
 800f994:	1e6b      	subs	r3, r5, #1
 800f996:	2b06      	cmp	r3, #6
 800f998:	d824      	bhi.n	800f9e4 <_scanf_float+0x2fc>
 800f99a:	2d02      	cmp	r5, #2
 800f99c:	d836      	bhi.n	800fa0c <_scanf_float+0x324>
 800f99e:	9b01      	ldr	r3, [sp, #4]
 800f9a0:	429e      	cmp	r6, r3
 800f9a2:	f67f aee4 	bls.w	800f76e <_scanf_float+0x86>
 800f9a6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f9aa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f9ae:	463a      	mov	r2, r7
 800f9b0:	4640      	mov	r0, r8
 800f9b2:	4798      	blx	r3
 800f9b4:	6923      	ldr	r3, [r4, #16]
 800f9b6:	3b01      	subs	r3, #1
 800f9b8:	6123      	str	r3, [r4, #16]
 800f9ba:	e7f0      	b.n	800f99e <_scanf_float+0x2b6>
 800f9bc:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f9c0:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800f9c4:	463a      	mov	r2, r7
 800f9c6:	4640      	mov	r0, r8
 800f9c8:	4798      	blx	r3
 800f9ca:	6923      	ldr	r3, [r4, #16]
 800f9cc:	3b01      	subs	r3, #1
 800f9ce:	6123      	str	r3, [r4, #16]
 800f9d0:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f9d4:	fa5f fa8a 	uxtb.w	sl, sl
 800f9d8:	f1ba 0f02 	cmp.w	sl, #2
 800f9dc:	d1ee      	bne.n	800f9bc <_scanf_float+0x2d4>
 800f9de:	3d03      	subs	r5, #3
 800f9e0:	b2ed      	uxtb	r5, r5
 800f9e2:	1b76      	subs	r6, r6, r5
 800f9e4:	6823      	ldr	r3, [r4, #0]
 800f9e6:	05da      	lsls	r2, r3, #23
 800f9e8:	d530      	bpl.n	800fa4c <_scanf_float+0x364>
 800f9ea:	055b      	lsls	r3, r3, #21
 800f9ec:	d511      	bpl.n	800fa12 <_scanf_float+0x32a>
 800f9ee:	9b01      	ldr	r3, [sp, #4]
 800f9f0:	429e      	cmp	r6, r3
 800f9f2:	f67f aebc 	bls.w	800f76e <_scanf_float+0x86>
 800f9f6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f9fa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f9fe:	463a      	mov	r2, r7
 800fa00:	4640      	mov	r0, r8
 800fa02:	4798      	blx	r3
 800fa04:	6923      	ldr	r3, [r4, #16]
 800fa06:	3b01      	subs	r3, #1
 800fa08:	6123      	str	r3, [r4, #16]
 800fa0a:	e7f0      	b.n	800f9ee <_scanf_float+0x306>
 800fa0c:	46aa      	mov	sl, r5
 800fa0e:	46b3      	mov	fp, r6
 800fa10:	e7de      	b.n	800f9d0 <_scanf_float+0x2e8>
 800fa12:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800fa16:	6923      	ldr	r3, [r4, #16]
 800fa18:	2965      	cmp	r1, #101	@ 0x65
 800fa1a:	f103 33ff 	add.w	r3, r3, #4294967295
 800fa1e:	f106 35ff 	add.w	r5, r6, #4294967295
 800fa22:	6123      	str	r3, [r4, #16]
 800fa24:	d00c      	beq.n	800fa40 <_scanf_float+0x358>
 800fa26:	2945      	cmp	r1, #69	@ 0x45
 800fa28:	d00a      	beq.n	800fa40 <_scanf_float+0x358>
 800fa2a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800fa2e:	463a      	mov	r2, r7
 800fa30:	4640      	mov	r0, r8
 800fa32:	4798      	blx	r3
 800fa34:	6923      	ldr	r3, [r4, #16]
 800fa36:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800fa3a:	3b01      	subs	r3, #1
 800fa3c:	1eb5      	subs	r5, r6, #2
 800fa3e:	6123      	str	r3, [r4, #16]
 800fa40:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800fa44:	463a      	mov	r2, r7
 800fa46:	4640      	mov	r0, r8
 800fa48:	4798      	blx	r3
 800fa4a:	462e      	mov	r6, r5
 800fa4c:	6822      	ldr	r2, [r4, #0]
 800fa4e:	f012 0210 	ands.w	r2, r2, #16
 800fa52:	d001      	beq.n	800fa58 <_scanf_float+0x370>
 800fa54:	2000      	movs	r0, #0
 800fa56:	e68b      	b.n	800f770 <_scanf_float+0x88>
 800fa58:	7032      	strb	r2, [r6, #0]
 800fa5a:	6823      	ldr	r3, [r4, #0]
 800fa5c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800fa60:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800fa64:	d11a      	bne.n	800fa9c <_scanf_float+0x3b4>
 800fa66:	9b02      	ldr	r3, [sp, #8]
 800fa68:	454b      	cmp	r3, r9
 800fa6a:	eba3 0209 	sub.w	r2, r3, r9
 800fa6e:	d121      	bne.n	800fab4 <_scanf_float+0x3cc>
 800fa70:	9901      	ldr	r1, [sp, #4]
 800fa72:	2200      	movs	r2, #0
 800fa74:	4640      	mov	r0, r8
 800fa76:	f002 fb81 	bl	801217c <_strtod_r>
 800fa7a:	9b03      	ldr	r3, [sp, #12]
 800fa7c:	6821      	ldr	r1, [r4, #0]
 800fa7e:	681b      	ldr	r3, [r3, #0]
 800fa80:	f011 0f02 	tst.w	r1, #2
 800fa84:	f103 0204 	add.w	r2, r3, #4
 800fa88:	d01f      	beq.n	800faca <_scanf_float+0x3e2>
 800fa8a:	9903      	ldr	r1, [sp, #12]
 800fa8c:	600a      	str	r2, [r1, #0]
 800fa8e:	681b      	ldr	r3, [r3, #0]
 800fa90:	ed83 0b00 	vstr	d0, [r3]
 800fa94:	68e3      	ldr	r3, [r4, #12]
 800fa96:	3301      	adds	r3, #1
 800fa98:	60e3      	str	r3, [r4, #12]
 800fa9a:	e7db      	b.n	800fa54 <_scanf_float+0x36c>
 800fa9c:	9b04      	ldr	r3, [sp, #16]
 800fa9e:	2b00      	cmp	r3, #0
 800faa0:	d0e6      	beq.n	800fa70 <_scanf_float+0x388>
 800faa2:	9905      	ldr	r1, [sp, #20]
 800faa4:	230a      	movs	r3, #10
 800faa6:	3101      	adds	r1, #1
 800faa8:	4640      	mov	r0, r8
 800faaa:	f7ff f9d9 	bl	800ee60 <_strtol_r>
 800faae:	9b04      	ldr	r3, [sp, #16]
 800fab0:	9e05      	ldr	r6, [sp, #20]
 800fab2:	1ac2      	subs	r2, r0, r3
 800fab4:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800fab8:	429e      	cmp	r6, r3
 800faba:	bf28      	it	cs
 800fabc:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800fac0:	490d      	ldr	r1, [pc, #52]	@ (800faf8 <_scanf_float+0x410>)
 800fac2:	4630      	mov	r0, r6
 800fac4:	f000 f912 	bl	800fcec <siprintf>
 800fac8:	e7d2      	b.n	800fa70 <_scanf_float+0x388>
 800faca:	f011 0f04 	tst.w	r1, #4
 800face:	9903      	ldr	r1, [sp, #12]
 800fad0:	600a      	str	r2, [r1, #0]
 800fad2:	d1dc      	bne.n	800fa8e <_scanf_float+0x3a6>
 800fad4:	eeb4 0b40 	vcmp.f64	d0, d0
 800fad8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fadc:	681d      	ldr	r5, [r3, #0]
 800fade:	d705      	bvc.n	800faec <_scanf_float+0x404>
 800fae0:	4806      	ldr	r0, [pc, #24]	@ (800fafc <_scanf_float+0x414>)
 800fae2:	f000 fa07 	bl	800fef4 <nanf>
 800fae6:	ed85 0a00 	vstr	s0, [r5]
 800faea:	e7d3      	b.n	800fa94 <_scanf_float+0x3ac>
 800faec:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800faf0:	e7f9      	b.n	800fae6 <_scanf_float+0x3fe>
 800faf2:	f04f 0900 	mov.w	r9, #0
 800faf6:	e630      	b.n	800f75a <_scanf_float+0x72>
 800faf8:	08013c35 	.word	0x08013c35
 800fafc:	08013ecc 	.word	0x08013ecc

0800fb00 <std>:
 800fb00:	2300      	movs	r3, #0
 800fb02:	b510      	push	{r4, lr}
 800fb04:	4604      	mov	r4, r0
 800fb06:	e9c0 3300 	strd	r3, r3, [r0]
 800fb0a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800fb0e:	6083      	str	r3, [r0, #8]
 800fb10:	8181      	strh	r1, [r0, #12]
 800fb12:	6643      	str	r3, [r0, #100]	@ 0x64
 800fb14:	81c2      	strh	r2, [r0, #14]
 800fb16:	6183      	str	r3, [r0, #24]
 800fb18:	4619      	mov	r1, r3
 800fb1a:	2208      	movs	r2, #8
 800fb1c:	305c      	adds	r0, #92	@ 0x5c
 800fb1e:	f000 f948 	bl	800fdb2 <memset>
 800fb22:	4b0d      	ldr	r3, [pc, #52]	@ (800fb58 <std+0x58>)
 800fb24:	6263      	str	r3, [r4, #36]	@ 0x24
 800fb26:	4b0d      	ldr	r3, [pc, #52]	@ (800fb5c <std+0x5c>)
 800fb28:	62a3      	str	r3, [r4, #40]	@ 0x28
 800fb2a:	4b0d      	ldr	r3, [pc, #52]	@ (800fb60 <std+0x60>)
 800fb2c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800fb2e:	4b0d      	ldr	r3, [pc, #52]	@ (800fb64 <std+0x64>)
 800fb30:	6323      	str	r3, [r4, #48]	@ 0x30
 800fb32:	4b0d      	ldr	r3, [pc, #52]	@ (800fb68 <std+0x68>)
 800fb34:	6224      	str	r4, [r4, #32]
 800fb36:	429c      	cmp	r4, r3
 800fb38:	d006      	beq.n	800fb48 <std+0x48>
 800fb3a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800fb3e:	4294      	cmp	r4, r2
 800fb40:	d002      	beq.n	800fb48 <std+0x48>
 800fb42:	33d0      	adds	r3, #208	@ 0xd0
 800fb44:	429c      	cmp	r4, r3
 800fb46:	d105      	bne.n	800fb54 <std+0x54>
 800fb48:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800fb4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fb50:	f000 b9be 	b.w	800fed0 <__retarget_lock_init_recursive>
 800fb54:	bd10      	pop	{r4, pc}
 800fb56:	bf00      	nop
 800fb58:	0800fd2d 	.word	0x0800fd2d
 800fb5c:	0800fd4f 	.word	0x0800fd4f
 800fb60:	0800fd87 	.word	0x0800fd87
 800fb64:	0800fdab 	.word	0x0800fdab
 800fb68:	24000484 	.word	0x24000484

0800fb6c <stdio_exit_handler>:
 800fb6c:	4a02      	ldr	r2, [pc, #8]	@ (800fb78 <stdio_exit_handler+0xc>)
 800fb6e:	4903      	ldr	r1, [pc, #12]	@ (800fb7c <stdio_exit_handler+0x10>)
 800fb70:	4803      	ldr	r0, [pc, #12]	@ (800fb80 <stdio_exit_handler+0x14>)
 800fb72:	f000 b869 	b.w	800fc48 <_fwalk_sglue>
 800fb76:	bf00      	nop
 800fb78:	24000020 	.word	0x24000020
 800fb7c:	08012541 	.word	0x08012541
 800fb80:	24000030 	.word	0x24000030

0800fb84 <cleanup_stdio>:
 800fb84:	6841      	ldr	r1, [r0, #4]
 800fb86:	4b0c      	ldr	r3, [pc, #48]	@ (800fbb8 <cleanup_stdio+0x34>)
 800fb88:	4299      	cmp	r1, r3
 800fb8a:	b510      	push	{r4, lr}
 800fb8c:	4604      	mov	r4, r0
 800fb8e:	d001      	beq.n	800fb94 <cleanup_stdio+0x10>
 800fb90:	f002 fcd6 	bl	8012540 <_fflush_r>
 800fb94:	68a1      	ldr	r1, [r4, #8]
 800fb96:	4b09      	ldr	r3, [pc, #36]	@ (800fbbc <cleanup_stdio+0x38>)
 800fb98:	4299      	cmp	r1, r3
 800fb9a:	d002      	beq.n	800fba2 <cleanup_stdio+0x1e>
 800fb9c:	4620      	mov	r0, r4
 800fb9e:	f002 fccf 	bl	8012540 <_fflush_r>
 800fba2:	68e1      	ldr	r1, [r4, #12]
 800fba4:	4b06      	ldr	r3, [pc, #24]	@ (800fbc0 <cleanup_stdio+0x3c>)
 800fba6:	4299      	cmp	r1, r3
 800fba8:	d004      	beq.n	800fbb4 <cleanup_stdio+0x30>
 800fbaa:	4620      	mov	r0, r4
 800fbac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fbb0:	f002 bcc6 	b.w	8012540 <_fflush_r>
 800fbb4:	bd10      	pop	{r4, pc}
 800fbb6:	bf00      	nop
 800fbb8:	24000484 	.word	0x24000484
 800fbbc:	240004ec 	.word	0x240004ec
 800fbc0:	24000554 	.word	0x24000554

0800fbc4 <global_stdio_init.part.0>:
 800fbc4:	b510      	push	{r4, lr}
 800fbc6:	4b0b      	ldr	r3, [pc, #44]	@ (800fbf4 <global_stdio_init.part.0+0x30>)
 800fbc8:	4c0b      	ldr	r4, [pc, #44]	@ (800fbf8 <global_stdio_init.part.0+0x34>)
 800fbca:	4a0c      	ldr	r2, [pc, #48]	@ (800fbfc <global_stdio_init.part.0+0x38>)
 800fbcc:	601a      	str	r2, [r3, #0]
 800fbce:	4620      	mov	r0, r4
 800fbd0:	2200      	movs	r2, #0
 800fbd2:	2104      	movs	r1, #4
 800fbd4:	f7ff ff94 	bl	800fb00 <std>
 800fbd8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800fbdc:	2201      	movs	r2, #1
 800fbde:	2109      	movs	r1, #9
 800fbe0:	f7ff ff8e 	bl	800fb00 <std>
 800fbe4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800fbe8:	2202      	movs	r2, #2
 800fbea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fbee:	2112      	movs	r1, #18
 800fbf0:	f7ff bf86 	b.w	800fb00 <std>
 800fbf4:	240005bc 	.word	0x240005bc
 800fbf8:	24000484 	.word	0x24000484
 800fbfc:	0800fb6d 	.word	0x0800fb6d

0800fc00 <__sfp_lock_acquire>:
 800fc00:	4801      	ldr	r0, [pc, #4]	@ (800fc08 <__sfp_lock_acquire+0x8>)
 800fc02:	f000 b966 	b.w	800fed2 <__retarget_lock_acquire_recursive>
 800fc06:	bf00      	nop
 800fc08:	240005c5 	.word	0x240005c5

0800fc0c <__sfp_lock_release>:
 800fc0c:	4801      	ldr	r0, [pc, #4]	@ (800fc14 <__sfp_lock_release+0x8>)
 800fc0e:	f000 b961 	b.w	800fed4 <__retarget_lock_release_recursive>
 800fc12:	bf00      	nop
 800fc14:	240005c5 	.word	0x240005c5

0800fc18 <__sinit>:
 800fc18:	b510      	push	{r4, lr}
 800fc1a:	4604      	mov	r4, r0
 800fc1c:	f7ff fff0 	bl	800fc00 <__sfp_lock_acquire>
 800fc20:	6a23      	ldr	r3, [r4, #32]
 800fc22:	b11b      	cbz	r3, 800fc2c <__sinit+0x14>
 800fc24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fc28:	f7ff bff0 	b.w	800fc0c <__sfp_lock_release>
 800fc2c:	4b04      	ldr	r3, [pc, #16]	@ (800fc40 <__sinit+0x28>)
 800fc2e:	6223      	str	r3, [r4, #32]
 800fc30:	4b04      	ldr	r3, [pc, #16]	@ (800fc44 <__sinit+0x2c>)
 800fc32:	681b      	ldr	r3, [r3, #0]
 800fc34:	2b00      	cmp	r3, #0
 800fc36:	d1f5      	bne.n	800fc24 <__sinit+0xc>
 800fc38:	f7ff ffc4 	bl	800fbc4 <global_stdio_init.part.0>
 800fc3c:	e7f2      	b.n	800fc24 <__sinit+0xc>
 800fc3e:	bf00      	nop
 800fc40:	0800fb85 	.word	0x0800fb85
 800fc44:	240005bc 	.word	0x240005bc

0800fc48 <_fwalk_sglue>:
 800fc48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fc4c:	4607      	mov	r7, r0
 800fc4e:	4688      	mov	r8, r1
 800fc50:	4614      	mov	r4, r2
 800fc52:	2600      	movs	r6, #0
 800fc54:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800fc58:	f1b9 0901 	subs.w	r9, r9, #1
 800fc5c:	d505      	bpl.n	800fc6a <_fwalk_sglue+0x22>
 800fc5e:	6824      	ldr	r4, [r4, #0]
 800fc60:	2c00      	cmp	r4, #0
 800fc62:	d1f7      	bne.n	800fc54 <_fwalk_sglue+0xc>
 800fc64:	4630      	mov	r0, r6
 800fc66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fc6a:	89ab      	ldrh	r3, [r5, #12]
 800fc6c:	2b01      	cmp	r3, #1
 800fc6e:	d907      	bls.n	800fc80 <_fwalk_sglue+0x38>
 800fc70:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800fc74:	3301      	adds	r3, #1
 800fc76:	d003      	beq.n	800fc80 <_fwalk_sglue+0x38>
 800fc78:	4629      	mov	r1, r5
 800fc7a:	4638      	mov	r0, r7
 800fc7c:	47c0      	blx	r8
 800fc7e:	4306      	orrs	r6, r0
 800fc80:	3568      	adds	r5, #104	@ 0x68
 800fc82:	e7e9      	b.n	800fc58 <_fwalk_sglue+0x10>

0800fc84 <sniprintf>:
 800fc84:	b40c      	push	{r2, r3}
 800fc86:	b530      	push	{r4, r5, lr}
 800fc88:	4b17      	ldr	r3, [pc, #92]	@ (800fce8 <sniprintf+0x64>)
 800fc8a:	1e0c      	subs	r4, r1, #0
 800fc8c:	681d      	ldr	r5, [r3, #0]
 800fc8e:	b09d      	sub	sp, #116	@ 0x74
 800fc90:	da08      	bge.n	800fca4 <sniprintf+0x20>
 800fc92:	238b      	movs	r3, #139	@ 0x8b
 800fc94:	602b      	str	r3, [r5, #0]
 800fc96:	f04f 30ff 	mov.w	r0, #4294967295
 800fc9a:	b01d      	add	sp, #116	@ 0x74
 800fc9c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fca0:	b002      	add	sp, #8
 800fca2:	4770      	bx	lr
 800fca4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800fca8:	f8ad 3014 	strh.w	r3, [sp, #20]
 800fcac:	bf14      	ite	ne
 800fcae:	f104 33ff 	addne.w	r3, r4, #4294967295
 800fcb2:	4623      	moveq	r3, r4
 800fcb4:	9304      	str	r3, [sp, #16]
 800fcb6:	9307      	str	r3, [sp, #28]
 800fcb8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800fcbc:	9002      	str	r0, [sp, #8]
 800fcbe:	9006      	str	r0, [sp, #24]
 800fcc0:	f8ad 3016 	strh.w	r3, [sp, #22]
 800fcc4:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800fcc6:	ab21      	add	r3, sp, #132	@ 0x84
 800fcc8:	a902      	add	r1, sp, #8
 800fcca:	4628      	mov	r0, r5
 800fccc:	9301      	str	r3, [sp, #4]
 800fcce:	f002 fab7 	bl	8012240 <_svfiprintf_r>
 800fcd2:	1c43      	adds	r3, r0, #1
 800fcd4:	bfbc      	itt	lt
 800fcd6:	238b      	movlt	r3, #139	@ 0x8b
 800fcd8:	602b      	strlt	r3, [r5, #0]
 800fcda:	2c00      	cmp	r4, #0
 800fcdc:	d0dd      	beq.n	800fc9a <sniprintf+0x16>
 800fcde:	9b02      	ldr	r3, [sp, #8]
 800fce0:	2200      	movs	r2, #0
 800fce2:	701a      	strb	r2, [r3, #0]
 800fce4:	e7d9      	b.n	800fc9a <sniprintf+0x16>
 800fce6:	bf00      	nop
 800fce8:	2400002c 	.word	0x2400002c

0800fcec <siprintf>:
 800fcec:	b40e      	push	{r1, r2, r3}
 800fcee:	b500      	push	{lr}
 800fcf0:	b09c      	sub	sp, #112	@ 0x70
 800fcf2:	ab1d      	add	r3, sp, #116	@ 0x74
 800fcf4:	9002      	str	r0, [sp, #8]
 800fcf6:	9006      	str	r0, [sp, #24]
 800fcf8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800fcfc:	4809      	ldr	r0, [pc, #36]	@ (800fd24 <siprintf+0x38>)
 800fcfe:	9107      	str	r1, [sp, #28]
 800fd00:	9104      	str	r1, [sp, #16]
 800fd02:	4909      	ldr	r1, [pc, #36]	@ (800fd28 <siprintf+0x3c>)
 800fd04:	f853 2b04 	ldr.w	r2, [r3], #4
 800fd08:	9105      	str	r1, [sp, #20]
 800fd0a:	6800      	ldr	r0, [r0, #0]
 800fd0c:	9301      	str	r3, [sp, #4]
 800fd0e:	a902      	add	r1, sp, #8
 800fd10:	f002 fa96 	bl	8012240 <_svfiprintf_r>
 800fd14:	9b02      	ldr	r3, [sp, #8]
 800fd16:	2200      	movs	r2, #0
 800fd18:	701a      	strb	r2, [r3, #0]
 800fd1a:	b01c      	add	sp, #112	@ 0x70
 800fd1c:	f85d eb04 	ldr.w	lr, [sp], #4
 800fd20:	b003      	add	sp, #12
 800fd22:	4770      	bx	lr
 800fd24:	2400002c 	.word	0x2400002c
 800fd28:	ffff0208 	.word	0xffff0208

0800fd2c <__sread>:
 800fd2c:	b510      	push	{r4, lr}
 800fd2e:	460c      	mov	r4, r1
 800fd30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fd34:	f000 f87e 	bl	800fe34 <_read_r>
 800fd38:	2800      	cmp	r0, #0
 800fd3a:	bfab      	itete	ge
 800fd3c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800fd3e:	89a3      	ldrhlt	r3, [r4, #12]
 800fd40:	181b      	addge	r3, r3, r0
 800fd42:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800fd46:	bfac      	ite	ge
 800fd48:	6563      	strge	r3, [r4, #84]	@ 0x54
 800fd4a:	81a3      	strhlt	r3, [r4, #12]
 800fd4c:	bd10      	pop	{r4, pc}

0800fd4e <__swrite>:
 800fd4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fd52:	461f      	mov	r7, r3
 800fd54:	898b      	ldrh	r3, [r1, #12]
 800fd56:	05db      	lsls	r3, r3, #23
 800fd58:	4605      	mov	r5, r0
 800fd5a:	460c      	mov	r4, r1
 800fd5c:	4616      	mov	r6, r2
 800fd5e:	d505      	bpl.n	800fd6c <__swrite+0x1e>
 800fd60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fd64:	2302      	movs	r3, #2
 800fd66:	2200      	movs	r2, #0
 800fd68:	f000 f852 	bl	800fe10 <_lseek_r>
 800fd6c:	89a3      	ldrh	r3, [r4, #12]
 800fd6e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fd72:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800fd76:	81a3      	strh	r3, [r4, #12]
 800fd78:	4632      	mov	r2, r6
 800fd7a:	463b      	mov	r3, r7
 800fd7c:	4628      	mov	r0, r5
 800fd7e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fd82:	f000 b869 	b.w	800fe58 <_write_r>

0800fd86 <__sseek>:
 800fd86:	b510      	push	{r4, lr}
 800fd88:	460c      	mov	r4, r1
 800fd8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fd8e:	f000 f83f 	bl	800fe10 <_lseek_r>
 800fd92:	1c43      	adds	r3, r0, #1
 800fd94:	89a3      	ldrh	r3, [r4, #12]
 800fd96:	bf15      	itete	ne
 800fd98:	6560      	strne	r0, [r4, #84]	@ 0x54
 800fd9a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800fd9e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800fda2:	81a3      	strheq	r3, [r4, #12]
 800fda4:	bf18      	it	ne
 800fda6:	81a3      	strhne	r3, [r4, #12]
 800fda8:	bd10      	pop	{r4, pc}

0800fdaa <__sclose>:
 800fdaa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fdae:	f000 b81f 	b.w	800fdf0 <_close_r>

0800fdb2 <memset>:
 800fdb2:	4402      	add	r2, r0
 800fdb4:	4603      	mov	r3, r0
 800fdb6:	4293      	cmp	r3, r2
 800fdb8:	d100      	bne.n	800fdbc <memset+0xa>
 800fdba:	4770      	bx	lr
 800fdbc:	f803 1b01 	strb.w	r1, [r3], #1
 800fdc0:	e7f9      	b.n	800fdb6 <memset+0x4>

0800fdc2 <strncmp>:
 800fdc2:	b510      	push	{r4, lr}
 800fdc4:	b16a      	cbz	r2, 800fde2 <strncmp+0x20>
 800fdc6:	3901      	subs	r1, #1
 800fdc8:	1884      	adds	r4, r0, r2
 800fdca:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fdce:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800fdd2:	429a      	cmp	r2, r3
 800fdd4:	d103      	bne.n	800fdde <strncmp+0x1c>
 800fdd6:	42a0      	cmp	r0, r4
 800fdd8:	d001      	beq.n	800fdde <strncmp+0x1c>
 800fdda:	2a00      	cmp	r2, #0
 800fddc:	d1f5      	bne.n	800fdca <strncmp+0x8>
 800fdde:	1ad0      	subs	r0, r2, r3
 800fde0:	bd10      	pop	{r4, pc}
 800fde2:	4610      	mov	r0, r2
 800fde4:	e7fc      	b.n	800fde0 <strncmp+0x1e>
	...

0800fde8 <_localeconv_r>:
 800fde8:	4800      	ldr	r0, [pc, #0]	@ (800fdec <_localeconv_r+0x4>)
 800fdea:	4770      	bx	lr
 800fdec:	2400016c 	.word	0x2400016c

0800fdf0 <_close_r>:
 800fdf0:	b538      	push	{r3, r4, r5, lr}
 800fdf2:	4d06      	ldr	r5, [pc, #24]	@ (800fe0c <_close_r+0x1c>)
 800fdf4:	2300      	movs	r3, #0
 800fdf6:	4604      	mov	r4, r0
 800fdf8:	4608      	mov	r0, r1
 800fdfa:	602b      	str	r3, [r5, #0]
 800fdfc:	f7f2 fc06 	bl	800260c <_close>
 800fe00:	1c43      	adds	r3, r0, #1
 800fe02:	d102      	bne.n	800fe0a <_close_r+0x1a>
 800fe04:	682b      	ldr	r3, [r5, #0]
 800fe06:	b103      	cbz	r3, 800fe0a <_close_r+0x1a>
 800fe08:	6023      	str	r3, [r4, #0]
 800fe0a:	bd38      	pop	{r3, r4, r5, pc}
 800fe0c:	240005c0 	.word	0x240005c0

0800fe10 <_lseek_r>:
 800fe10:	b538      	push	{r3, r4, r5, lr}
 800fe12:	4d07      	ldr	r5, [pc, #28]	@ (800fe30 <_lseek_r+0x20>)
 800fe14:	4604      	mov	r4, r0
 800fe16:	4608      	mov	r0, r1
 800fe18:	4611      	mov	r1, r2
 800fe1a:	2200      	movs	r2, #0
 800fe1c:	602a      	str	r2, [r5, #0]
 800fe1e:	461a      	mov	r2, r3
 800fe20:	f7f2 fc1b 	bl	800265a <_lseek>
 800fe24:	1c43      	adds	r3, r0, #1
 800fe26:	d102      	bne.n	800fe2e <_lseek_r+0x1e>
 800fe28:	682b      	ldr	r3, [r5, #0]
 800fe2a:	b103      	cbz	r3, 800fe2e <_lseek_r+0x1e>
 800fe2c:	6023      	str	r3, [r4, #0]
 800fe2e:	bd38      	pop	{r3, r4, r5, pc}
 800fe30:	240005c0 	.word	0x240005c0

0800fe34 <_read_r>:
 800fe34:	b538      	push	{r3, r4, r5, lr}
 800fe36:	4d07      	ldr	r5, [pc, #28]	@ (800fe54 <_read_r+0x20>)
 800fe38:	4604      	mov	r4, r0
 800fe3a:	4608      	mov	r0, r1
 800fe3c:	4611      	mov	r1, r2
 800fe3e:	2200      	movs	r2, #0
 800fe40:	602a      	str	r2, [r5, #0]
 800fe42:	461a      	mov	r2, r3
 800fe44:	f7f2 fba9 	bl	800259a <_read>
 800fe48:	1c43      	adds	r3, r0, #1
 800fe4a:	d102      	bne.n	800fe52 <_read_r+0x1e>
 800fe4c:	682b      	ldr	r3, [r5, #0]
 800fe4e:	b103      	cbz	r3, 800fe52 <_read_r+0x1e>
 800fe50:	6023      	str	r3, [r4, #0]
 800fe52:	bd38      	pop	{r3, r4, r5, pc}
 800fe54:	240005c0 	.word	0x240005c0

0800fe58 <_write_r>:
 800fe58:	b538      	push	{r3, r4, r5, lr}
 800fe5a:	4d07      	ldr	r5, [pc, #28]	@ (800fe78 <_write_r+0x20>)
 800fe5c:	4604      	mov	r4, r0
 800fe5e:	4608      	mov	r0, r1
 800fe60:	4611      	mov	r1, r2
 800fe62:	2200      	movs	r2, #0
 800fe64:	602a      	str	r2, [r5, #0]
 800fe66:	461a      	mov	r2, r3
 800fe68:	f7f2 fbb4 	bl	80025d4 <_write>
 800fe6c:	1c43      	adds	r3, r0, #1
 800fe6e:	d102      	bne.n	800fe76 <_write_r+0x1e>
 800fe70:	682b      	ldr	r3, [r5, #0]
 800fe72:	b103      	cbz	r3, 800fe76 <_write_r+0x1e>
 800fe74:	6023      	str	r3, [r4, #0]
 800fe76:	bd38      	pop	{r3, r4, r5, pc}
 800fe78:	240005c0 	.word	0x240005c0

0800fe7c <__errno>:
 800fe7c:	4b01      	ldr	r3, [pc, #4]	@ (800fe84 <__errno+0x8>)
 800fe7e:	6818      	ldr	r0, [r3, #0]
 800fe80:	4770      	bx	lr
 800fe82:	bf00      	nop
 800fe84:	2400002c 	.word	0x2400002c

0800fe88 <__libc_init_array>:
 800fe88:	b570      	push	{r4, r5, r6, lr}
 800fe8a:	4d0d      	ldr	r5, [pc, #52]	@ (800fec0 <__libc_init_array+0x38>)
 800fe8c:	4c0d      	ldr	r4, [pc, #52]	@ (800fec4 <__libc_init_array+0x3c>)
 800fe8e:	1b64      	subs	r4, r4, r5
 800fe90:	10a4      	asrs	r4, r4, #2
 800fe92:	2600      	movs	r6, #0
 800fe94:	42a6      	cmp	r6, r4
 800fe96:	d109      	bne.n	800feac <__libc_init_array+0x24>
 800fe98:	4d0b      	ldr	r5, [pc, #44]	@ (800fec8 <__libc_init_array+0x40>)
 800fe9a:	4c0c      	ldr	r4, [pc, #48]	@ (800fecc <__libc_init_array+0x44>)
 800fe9c:	f003 fd1c 	bl	80138d8 <_init>
 800fea0:	1b64      	subs	r4, r4, r5
 800fea2:	10a4      	asrs	r4, r4, #2
 800fea4:	2600      	movs	r6, #0
 800fea6:	42a6      	cmp	r6, r4
 800fea8:	d105      	bne.n	800feb6 <__libc_init_array+0x2e>
 800feaa:	bd70      	pop	{r4, r5, r6, pc}
 800feac:	f855 3b04 	ldr.w	r3, [r5], #4
 800feb0:	4798      	blx	r3
 800feb2:	3601      	adds	r6, #1
 800feb4:	e7ee      	b.n	800fe94 <__libc_init_array+0xc>
 800feb6:	f855 3b04 	ldr.w	r3, [r5], #4
 800feba:	4798      	blx	r3
 800febc:	3601      	adds	r6, #1
 800febe:	e7f2      	b.n	800fea6 <__libc_init_array+0x1e>
 800fec0:	080157f0 	.word	0x080157f0
 800fec4:	080157f0 	.word	0x080157f0
 800fec8:	080157f0 	.word	0x080157f0
 800fecc:	080157f4 	.word	0x080157f4

0800fed0 <__retarget_lock_init_recursive>:
 800fed0:	4770      	bx	lr

0800fed2 <__retarget_lock_acquire_recursive>:
 800fed2:	4770      	bx	lr

0800fed4 <__retarget_lock_release_recursive>:
 800fed4:	4770      	bx	lr

0800fed6 <memcpy>:
 800fed6:	440a      	add	r2, r1
 800fed8:	4291      	cmp	r1, r2
 800feda:	f100 33ff 	add.w	r3, r0, #4294967295
 800fede:	d100      	bne.n	800fee2 <memcpy+0xc>
 800fee0:	4770      	bx	lr
 800fee2:	b510      	push	{r4, lr}
 800fee4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fee8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800feec:	4291      	cmp	r1, r2
 800feee:	d1f9      	bne.n	800fee4 <memcpy+0xe>
 800fef0:	bd10      	pop	{r4, pc}
	...

0800fef4 <nanf>:
 800fef4:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800fefc <nanf+0x8>
 800fef8:	4770      	bx	lr
 800fefa:	bf00      	nop
 800fefc:	7fc00000 	.word	0x7fc00000

0800ff00 <quorem>:
 800ff00:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff04:	6903      	ldr	r3, [r0, #16]
 800ff06:	690c      	ldr	r4, [r1, #16]
 800ff08:	42a3      	cmp	r3, r4
 800ff0a:	4607      	mov	r7, r0
 800ff0c:	db7e      	blt.n	801000c <quorem+0x10c>
 800ff0e:	3c01      	subs	r4, #1
 800ff10:	f101 0814 	add.w	r8, r1, #20
 800ff14:	00a3      	lsls	r3, r4, #2
 800ff16:	f100 0514 	add.w	r5, r0, #20
 800ff1a:	9300      	str	r3, [sp, #0]
 800ff1c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ff20:	9301      	str	r3, [sp, #4]
 800ff22:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ff26:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ff2a:	3301      	adds	r3, #1
 800ff2c:	429a      	cmp	r2, r3
 800ff2e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ff32:	fbb2 f6f3 	udiv	r6, r2, r3
 800ff36:	d32e      	bcc.n	800ff96 <quorem+0x96>
 800ff38:	f04f 0a00 	mov.w	sl, #0
 800ff3c:	46c4      	mov	ip, r8
 800ff3e:	46ae      	mov	lr, r5
 800ff40:	46d3      	mov	fp, sl
 800ff42:	f85c 3b04 	ldr.w	r3, [ip], #4
 800ff46:	b298      	uxth	r0, r3
 800ff48:	fb06 a000 	mla	r0, r6, r0, sl
 800ff4c:	0c02      	lsrs	r2, r0, #16
 800ff4e:	0c1b      	lsrs	r3, r3, #16
 800ff50:	fb06 2303 	mla	r3, r6, r3, r2
 800ff54:	f8de 2000 	ldr.w	r2, [lr]
 800ff58:	b280      	uxth	r0, r0
 800ff5a:	b292      	uxth	r2, r2
 800ff5c:	1a12      	subs	r2, r2, r0
 800ff5e:	445a      	add	r2, fp
 800ff60:	f8de 0000 	ldr.w	r0, [lr]
 800ff64:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ff68:	b29b      	uxth	r3, r3
 800ff6a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800ff6e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800ff72:	b292      	uxth	r2, r2
 800ff74:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800ff78:	45e1      	cmp	r9, ip
 800ff7a:	f84e 2b04 	str.w	r2, [lr], #4
 800ff7e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800ff82:	d2de      	bcs.n	800ff42 <quorem+0x42>
 800ff84:	9b00      	ldr	r3, [sp, #0]
 800ff86:	58eb      	ldr	r3, [r5, r3]
 800ff88:	b92b      	cbnz	r3, 800ff96 <quorem+0x96>
 800ff8a:	9b01      	ldr	r3, [sp, #4]
 800ff8c:	3b04      	subs	r3, #4
 800ff8e:	429d      	cmp	r5, r3
 800ff90:	461a      	mov	r2, r3
 800ff92:	d32f      	bcc.n	800fff4 <quorem+0xf4>
 800ff94:	613c      	str	r4, [r7, #16]
 800ff96:	4638      	mov	r0, r7
 800ff98:	f001 f954 	bl	8011244 <__mcmp>
 800ff9c:	2800      	cmp	r0, #0
 800ff9e:	db25      	blt.n	800ffec <quorem+0xec>
 800ffa0:	4629      	mov	r1, r5
 800ffa2:	2000      	movs	r0, #0
 800ffa4:	f858 2b04 	ldr.w	r2, [r8], #4
 800ffa8:	f8d1 c000 	ldr.w	ip, [r1]
 800ffac:	fa1f fe82 	uxth.w	lr, r2
 800ffb0:	fa1f f38c 	uxth.w	r3, ip
 800ffb4:	eba3 030e 	sub.w	r3, r3, lr
 800ffb8:	4403      	add	r3, r0
 800ffba:	0c12      	lsrs	r2, r2, #16
 800ffbc:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800ffc0:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800ffc4:	b29b      	uxth	r3, r3
 800ffc6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ffca:	45c1      	cmp	r9, r8
 800ffcc:	f841 3b04 	str.w	r3, [r1], #4
 800ffd0:	ea4f 4022 	mov.w	r0, r2, asr #16
 800ffd4:	d2e6      	bcs.n	800ffa4 <quorem+0xa4>
 800ffd6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ffda:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ffde:	b922      	cbnz	r2, 800ffea <quorem+0xea>
 800ffe0:	3b04      	subs	r3, #4
 800ffe2:	429d      	cmp	r5, r3
 800ffe4:	461a      	mov	r2, r3
 800ffe6:	d30b      	bcc.n	8010000 <quorem+0x100>
 800ffe8:	613c      	str	r4, [r7, #16]
 800ffea:	3601      	adds	r6, #1
 800ffec:	4630      	mov	r0, r6
 800ffee:	b003      	add	sp, #12
 800fff0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fff4:	6812      	ldr	r2, [r2, #0]
 800fff6:	3b04      	subs	r3, #4
 800fff8:	2a00      	cmp	r2, #0
 800fffa:	d1cb      	bne.n	800ff94 <quorem+0x94>
 800fffc:	3c01      	subs	r4, #1
 800fffe:	e7c6      	b.n	800ff8e <quorem+0x8e>
 8010000:	6812      	ldr	r2, [r2, #0]
 8010002:	3b04      	subs	r3, #4
 8010004:	2a00      	cmp	r2, #0
 8010006:	d1ef      	bne.n	800ffe8 <quorem+0xe8>
 8010008:	3c01      	subs	r4, #1
 801000a:	e7ea      	b.n	800ffe2 <quorem+0xe2>
 801000c:	2000      	movs	r0, #0
 801000e:	e7ee      	b.n	800ffee <quorem+0xee>

08010010 <_dtoa_r>:
 8010010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010014:	ed2d 8b02 	vpush	{d8}
 8010018:	69c7      	ldr	r7, [r0, #28]
 801001a:	b091      	sub	sp, #68	@ 0x44
 801001c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8010020:	ec55 4b10 	vmov	r4, r5, d0
 8010024:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 8010026:	9107      	str	r1, [sp, #28]
 8010028:	4681      	mov	r9, r0
 801002a:	9209      	str	r2, [sp, #36]	@ 0x24
 801002c:	930d      	str	r3, [sp, #52]	@ 0x34
 801002e:	b97f      	cbnz	r7, 8010050 <_dtoa_r+0x40>
 8010030:	2010      	movs	r0, #16
 8010032:	f000 fd8d 	bl	8010b50 <malloc>
 8010036:	4602      	mov	r2, r0
 8010038:	f8c9 001c 	str.w	r0, [r9, #28]
 801003c:	b920      	cbnz	r0, 8010048 <_dtoa_r+0x38>
 801003e:	4ba0      	ldr	r3, [pc, #640]	@ (80102c0 <_dtoa_r+0x2b0>)
 8010040:	21ef      	movs	r1, #239	@ 0xef
 8010042:	48a0      	ldr	r0, [pc, #640]	@ (80102c4 <_dtoa_r+0x2b4>)
 8010044:	f002 fad8 	bl	80125f8 <__assert_func>
 8010048:	e9c0 7701 	strd	r7, r7, [r0, #4]
 801004c:	6007      	str	r7, [r0, #0]
 801004e:	60c7      	str	r7, [r0, #12]
 8010050:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8010054:	6819      	ldr	r1, [r3, #0]
 8010056:	b159      	cbz	r1, 8010070 <_dtoa_r+0x60>
 8010058:	685a      	ldr	r2, [r3, #4]
 801005a:	604a      	str	r2, [r1, #4]
 801005c:	2301      	movs	r3, #1
 801005e:	4093      	lsls	r3, r2
 8010060:	608b      	str	r3, [r1, #8]
 8010062:	4648      	mov	r0, r9
 8010064:	f000 fe6a 	bl	8010d3c <_Bfree>
 8010068:	f8d9 301c 	ldr.w	r3, [r9, #28]
 801006c:	2200      	movs	r2, #0
 801006e:	601a      	str	r2, [r3, #0]
 8010070:	1e2b      	subs	r3, r5, #0
 8010072:	bfbb      	ittet	lt
 8010074:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8010078:	9303      	strlt	r3, [sp, #12]
 801007a:	2300      	movge	r3, #0
 801007c:	2201      	movlt	r2, #1
 801007e:	bfac      	ite	ge
 8010080:	6033      	strge	r3, [r6, #0]
 8010082:	6032      	strlt	r2, [r6, #0]
 8010084:	4b90      	ldr	r3, [pc, #576]	@ (80102c8 <_dtoa_r+0x2b8>)
 8010086:	9e03      	ldr	r6, [sp, #12]
 8010088:	43b3      	bics	r3, r6
 801008a:	d110      	bne.n	80100ae <_dtoa_r+0x9e>
 801008c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801008e:	f242 730f 	movw	r3, #9999	@ 0x270f
 8010092:	6013      	str	r3, [r2, #0]
 8010094:	f3c6 0313 	ubfx	r3, r6, #0, #20
 8010098:	4323      	orrs	r3, r4
 801009a:	f000 84de 	beq.w	8010a5a <_dtoa_r+0xa4a>
 801009e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80100a0:	4f8a      	ldr	r7, [pc, #552]	@ (80102cc <_dtoa_r+0x2bc>)
 80100a2:	2b00      	cmp	r3, #0
 80100a4:	f000 84e0 	beq.w	8010a68 <_dtoa_r+0xa58>
 80100a8:	1cfb      	adds	r3, r7, #3
 80100aa:	f000 bcdb 	b.w	8010a64 <_dtoa_r+0xa54>
 80100ae:	ed9d 8b02 	vldr	d8, [sp, #8]
 80100b2:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80100b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80100ba:	d10a      	bne.n	80100d2 <_dtoa_r+0xc2>
 80100bc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80100be:	2301      	movs	r3, #1
 80100c0:	6013      	str	r3, [r2, #0]
 80100c2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80100c4:	b113      	cbz	r3, 80100cc <_dtoa_r+0xbc>
 80100c6:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 80100c8:	4b81      	ldr	r3, [pc, #516]	@ (80102d0 <_dtoa_r+0x2c0>)
 80100ca:	6013      	str	r3, [r2, #0]
 80100cc:	4f81      	ldr	r7, [pc, #516]	@ (80102d4 <_dtoa_r+0x2c4>)
 80100ce:	f000 bccb 	b.w	8010a68 <_dtoa_r+0xa58>
 80100d2:	aa0e      	add	r2, sp, #56	@ 0x38
 80100d4:	a90f      	add	r1, sp, #60	@ 0x3c
 80100d6:	4648      	mov	r0, r9
 80100d8:	eeb0 0b48 	vmov.f64	d0, d8
 80100dc:	f001 f9d2 	bl	8011484 <__d2b>
 80100e0:	f3c6 530a 	ubfx	r3, r6, #20, #11
 80100e4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80100e6:	9001      	str	r0, [sp, #4]
 80100e8:	2b00      	cmp	r3, #0
 80100ea:	d045      	beq.n	8010178 <_dtoa_r+0x168>
 80100ec:	eeb0 7b48 	vmov.f64	d7, d8
 80100f0:	ee18 1a90 	vmov	r1, s17
 80100f4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 80100f8:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 80100fc:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8010100:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8010104:	2500      	movs	r5, #0
 8010106:	ee07 1a90 	vmov	s15, r1
 801010a:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 801010e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 80102a8 <_dtoa_r+0x298>
 8010112:	ee37 7b46 	vsub.f64	d7, d7, d6
 8010116:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 80102b0 <_dtoa_r+0x2a0>
 801011a:	eea7 6b05 	vfma.f64	d6, d7, d5
 801011e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 80102b8 <_dtoa_r+0x2a8>
 8010122:	ee07 3a90 	vmov	s15, r3
 8010126:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 801012a:	eeb0 7b46 	vmov.f64	d7, d6
 801012e:	eea4 7b05 	vfma.f64	d7, d4, d5
 8010132:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8010136:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 801013a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801013e:	ee16 8a90 	vmov	r8, s13
 8010142:	d508      	bpl.n	8010156 <_dtoa_r+0x146>
 8010144:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8010148:	eeb4 6b47 	vcmp.f64	d6, d7
 801014c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010150:	bf18      	it	ne
 8010152:	f108 38ff 	addne.w	r8, r8, #4294967295
 8010156:	f1b8 0f16 	cmp.w	r8, #22
 801015a:	d82b      	bhi.n	80101b4 <_dtoa_r+0x1a4>
 801015c:	495e      	ldr	r1, [pc, #376]	@ (80102d8 <_dtoa_r+0x2c8>)
 801015e:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 8010162:	ed91 7b00 	vldr	d7, [r1]
 8010166:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801016a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801016e:	d501      	bpl.n	8010174 <_dtoa_r+0x164>
 8010170:	f108 38ff 	add.w	r8, r8, #4294967295
 8010174:	2100      	movs	r1, #0
 8010176:	e01e      	b.n	80101b6 <_dtoa_r+0x1a6>
 8010178:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801017a:	4413      	add	r3, r2
 801017c:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 8010180:	2920      	cmp	r1, #32
 8010182:	bfc1      	itttt	gt
 8010184:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 8010188:	408e      	lslgt	r6, r1
 801018a:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 801018e:	fa24 f101 	lsrgt.w	r1, r4, r1
 8010192:	bfd6      	itet	le
 8010194:	f1c1 0120 	rsble	r1, r1, #32
 8010198:	4331      	orrgt	r1, r6
 801019a:	fa04 f101 	lslle.w	r1, r4, r1
 801019e:	ee07 1a90 	vmov	s15, r1
 80101a2:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80101a6:	3b01      	subs	r3, #1
 80101a8:	ee17 1a90 	vmov	r1, s15
 80101ac:	2501      	movs	r5, #1
 80101ae:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 80101b2:	e7a8      	b.n	8010106 <_dtoa_r+0xf6>
 80101b4:	2101      	movs	r1, #1
 80101b6:	1ad2      	subs	r2, r2, r3
 80101b8:	1e53      	subs	r3, r2, #1
 80101ba:	9306      	str	r3, [sp, #24]
 80101bc:	bf45      	ittet	mi
 80101be:	f1c2 0301 	rsbmi	r3, r2, #1
 80101c2:	9305      	strmi	r3, [sp, #20]
 80101c4:	2300      	movpl	r3, #0
 80101c6:	2300      	movmi	r3, #0
 80101c8:	bf4c      	ite	mi
 80101ca:	9306      	strmi	r3, [sp, #24]
 80101cc:	9305      	strpl	r3, [sp, #20]
 80101ce:	f1b8 0f00 	cmp.w	r8, #0
 80101d2:	910c      	str	r1, [sp, #48]	@ 0x30
 80101d4:	db18      	blt.n	8010208 <_dtoa_r+0x1f8>
 80101d6:	9b06      	ldr	r3, [sp, #24]
 80101d8:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 80101dc:	4443      	add	r3, r8
 80101de:	9306      	str	r3, [sp, #24]
 80101e0:	2300      	movs	r3, #0
 80101e2:	9a07      	ldr	r2, [sp, #28]
 80101e4:	2a09      	cmp	r2, #9
 80101e6:	d849      	bhi.n	801027c <_dtoa_r+0x26c>
 80101e8:	2a05      	cmp	r2, #5
 80101ea:	bfc4      	itt	gt
 80101ec:	3a04      	subgt	r2, #4
 80101ee:	9207      	strgt	r2, [sp, #28]
 80101f0:	9a07      	ldr	r2, [sp, #28]
 80101f2:	f1a2 0202 	sub.w	r2, r2, #2
 80101f6:	bfcc      	ite	gt
 80101f8:	2400      	movgt	r4, #0
 80101fa:	2401      	movle	r4, #1
 80101fc:	2a03      	cmp	r2, #3
 80101fe:	d848      	bhi.n	8010292 <_dtoa_r+0x282>
 8010200:	e8df f002 	tbb	[pc, r2]
 8010204:	3a2c2e0b 	.word	0x3a2c2e0b
 8010208:	9b05      	ldr	r3, [sp, #20]
 801020a:	2200      	movs	r2, #0
 801020c:	eba3 0308 	sub.w	r3, r3, r8
 8010210:	9305      	str	r3, [sp, #20]
 8010212:	920a      	str	r2, [sp, #40]	@ 0x28
 8010214:	f1c8 0300 	rsb	r3, r8, #0
 8010218:	e7e3      	b.n	80101e2 <_dtoa_r+0x1d2>
 801021a:	2200      	movs	r2, #0
 801021c:	9208      	str	r2, [sp, #32]
 801021e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010220:	2a00      	cmp	r2, #0
 8010222:	dc39      	bgt.n	8010298 <_dtoa_r+0x288>
 8010224:	f04f 0b01 	mov.w	fp, #1
 8010228:	46da      	mov	sl, fp
 801022a:	465a      	mov	r2, fp
 801022c:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8010230:	f8d9 701c 	ldr.w	r7, [r9, #28]
 8010234:	2100      	movs	r1, #0
 8010236:	2004      	movs	r0, #4
 8010238:	f100 0614 	add.w	r6, r0, #20
 801023c:	4296      	cmp	r6, r2
 801023e:	d930      	bls.n	80102a2 <_dtoa_r+0x292>
 8010240:	6079      	str	r1, [r7, #4]
 8010242:	4648      	mov	r0, r9
 8010244:	9304      	str	r3, [sp, #16]
 8010246:	f000 fd39 	bl	8010cbc <_Balloc>
 801024a:	9b04      	ldr	r3, [sp, #16]
 801024c:	4607      	mov	r7, r0
 801024e:	2800      	cmp	r0, #0
 8010250:	d146      	bne.n	80102e0 <_dtoa_r+0x2d0>
 8010252:	4b22      	ldr	r3, [pc, #136]	@ (80102dc <_dtoa_r+0x2cc>)
 8010254:	4602      	mov	r2, r0
 8010256:	f240 11af 	movw	r1, #431	@ 0x1af
 801025a:	e6f2      	b.n	8010042 <_dtoa_r+0x32>
 801025c:	2201      	movs	r2, #1
 801025e:	e7dd      	b.n	801021c <_dtoa_r+0x20c>
 8010260:	2200      	movs	r2, #0
 8010262:	9208      	str	r2, [sp, #32]
 8010264:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010266:	eb08 0b02 	add.w	fp, r8, r2
 801026a:	f10b 0a01 	add.w	sl, fp, #1
 801026e:	4652      	mov	r2, sl
 8010270:	2a01      	cmp	r2, #1
 8010272:	bfb8      	it	lt
 8010274:	2201      	movlt	r2, #1
 8010276:	e7db      	b.n	8010230 <_dtoa_r+0x220>
 8010278:	2201      	movs	r2, #1
 801027a:	e7f2      	b.n	8010262 <_dtoa_r+0x252>
 801027c:	2401      	movs	r4, #1
 801027e:	2200      	movs	r2, #0
 8010280:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8010284:	f04f 3bff 	mov.w	fp, #4294967295
 8010288:	2100      	movs	r1, #0
 801028a:	46da      	mov	sl, fp
 801028c:	2212      	movs	r2, #18
 801028e:	9109      	str	r1, [sp, #36]	@ 0x24
 8010290:	e7ce      	b.n	8010230 <_dtoa_r+0x220>
 8010292:	2201      	movs	r2, #1
 8010294:	9208      	str	r2, [sp, #32]
 8010296:	e7f5      	b.n	8010284 <_dtoa_r+0x274>
 8010298:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 801029c:	46da      	mov	sl, fp
 801029e:	465a      	mov	r2, fp
 80102a0:	e7c6      	b.n	8010230 <_dtoa_r+0x220>
 80102a2:	3101      	adds	r1, #1
 80102a4:	0040      	lsls	r0, r0, #1
 80102a6:	e7c7      	b.n	8010238 <_dtoa_r+0x228>
 80102a8:	636f4361 	.word	0x636f4361
 80102ac:	3fd287a7 	.word	0x3fd287a7
 80102b0:	8b60c8b3 	.word	0x8b60c8b3
 80102b4:	3fc68a28 	.word	0x3fc68a28
 80102b8:	509f79fb 	.word	0x509f79fb
 80102bc:	3fd34413 	.word	0x3fd34413
 80102c0:	08013c47 	.word	0x08013c47
 80102c4:	08013c5e 	.word	0x08013c5e
 80102c8:	7ff00000 	.word	0x7ff00000
 80102cc:	08013c43 	.word	0x08013c43
 80102d0:	08013c12 	.word	0x08013c12
 80102d4:	08013c11 	.word	0x08013c11
 80102d8:	08013d58 	.word	0x08013d58
 80102dc:	08013cb6 	.word	0x08013cb6
 80102e0:	f8d9 201c 	ldr.w	r2, [r9, #28]
 80102e4:	f1ba 0f0e 	cmp.w	sl, #14
 80102e8:	6010      	str	r0, [r2, #0]
 80102ea:	d86f      	bhi.n	80103cc <_dtoa_r+0x3bc>
 80102ec:	2c00      	cmp	r4, #0
 80102ee:	d06d      	beq.n	80103cc <_dtoa_r+0x3bc>
 80102f0:	f1b8 0f00 	cmp.w	r8, #0
 80102f4:	f340 80c2 	ble.w	801047c <_dtoa_r+0x46c>
 80102f8:	4aca      	ldr	r2, [pc, #808]	@ (8010624 <_dtoa_r+0x614>)
 80102fa:	f008 010f 	and.w	r1, r8, #15
 80102fe:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8010302:	f418 7f80 	tst.w	r8, #256	@ 0x100
 8010306:	ed92 7b00 	vldr	d7, [r2]
 801030a:	ea4f 1128 	mov.w	r1, r8, asr #4
 801030e:	f000 80a9 	beq.w	8010464 <_dtoa_r+0x454>
 8010312:	4ac5      	ldr	r2, [pc, #788]	@ (8010628 <_dtoa_r+0x618>)
 8010314:	ed92 6b08 	vldr	d6, [r2, #32]
 8010318:	ee88 6b06 	vdiv.f64	d6, d8, d6
 801031c:	ed8d 6b02 	vstr	d6, [sp, #8]
 8010320:	f001 010f 	and.w	r1, r1, #15
 8010324:	2203      	movs	r2, #3
 8010326:	48c0      	ldr	r0, [pc, #768]	@ (8010628 <_dtoa_r+0x618>)
 8010328:	2900      	cmp	r1, #0
 801032a:	f040 809d 	bne.w	8010468 <_dtoa_r+0x458>
 801032e:	ed9d 6b02 	vldr	d6, [sp, #8]
 8010332:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8010336:	ed8d 7b02 	vstr	d7, [sp, #8]
 801033a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801033c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010340:	2900      	cmp	r1, #0
 8010342:	f000 80c1 	beq.w	80104c8 <_dtoa_r+0x4b8>
 8010346:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 801034a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801034e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010352:	f140 80b9 	bpl.w	80104c8 <_dtoa_r+0x4b8>
 8010356:	f1ba 0f00 	cmp.w	sl, #0
 801035a:	f000 80b5 	beq.w	80104c8 <_dtoa_r+0x4b8>
 801035e:	f1bb 0f00 	cmp.w	fp, #0
 8010362:	dd31      	ble.n	80103c8 <_dtoa_r+0x3b8>
 8010364:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8010368:	ee27 7b06 	vmul.f64	d7, d7, d6
 801036c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010370:	f108 31ff 	add.w	r1, r8, #4294967295
 8010374:	9104      	str	r1, [sp, #16]
 8010376:	3201      	adds	r2, #1
 8010378:	465c      	mov	r4, fp
 801037a:	ed9d 6b02 	vldr	d6, [sp, #8]
 801037e:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 8010382:	ee07 2a90 	vmov	s15, r2
 8010386:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801038a:	eea7 5b06 	vfma.f64	d5, d7, d6
 801038e:	ee15 2a90 	vmov	r2, s11
 8010392:	ec51 0b15 	vmov	r0, r1, d5
 8010396:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 801039a:	2c00      	cmp	r4, #0
 801039c:	f040 8098 	bne.w	80104d0 <_dtoa_r+0x4c0>
 80103a0:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 80103a4:	ee36 6b47 	vsub.f64	d6, d6, d7
 80103a8:	ec41 0b17 	vmov	d7, r0, r1
 80103ac:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80103b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80103b4:	f300 8261 	bgt.w	801087a <_dtoa_r+0x86a>
 80103b8:	eeb1 7b47 	vneg.f64	d7, d7
 80103bc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80103c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80103c4:	f100 80f5 	bmi.w	80105b2 <_dtoa_r+0x5a2>
 80103c8:	ed8d 8b02 	vstr	d8, [sp, #8]
 80103cc:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80103ce:	2a00      	cmp	r2, #0
 80103d0:	f2c0 812c 	blt.w	801062c <_dtoa_r+0x61c>
 80103d4:	f1b8 0f0e 	cmp.w	r8, #14
 80103d8:	f300 8128 	bgt.w	801062c <_dtoa_r+0x61c>
 80103dc:	4b91      	ldr	r3, [pc, #580]	@ (8010624 <_dtoa_r+0x614>)
 80103de:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80103e2:	ed93 6b00 	vldr	d6, [r3]
 80103e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80103e8:	2b00      	cmp	r3, #0
 80103ea:	da03      	bge.n	80103f4 <_dtoa_r+0x3e4>
 80103ec:	f1ba 0f00 	cmp.w	sl, #0
 80103f0:	f340 80d2 	ble.w	8010598 <_dtoa_r+0x588>
 80103f4:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 80103f8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80103fc:	463e      	mov	r6, r7
 80103fe:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8010402:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8010406:	ee15 3a10 	vmov	r3, s10
 801040a:	3330      	adds	r3, #48	@ 0x30
 801040c:	f806 3b01 	strb.w	r3, [r6], #1
 8010410:	1bf3      	subs	r3, r6, r7
 8010412:	459a      	cmp	sl, r3
 8010414:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8010418:	eea3 7b46 	vfms.f64	d7, d3, d6
 801041c:	f040 80f8 	bne.w	8010610 <_dtoa_r+0x600>
 8010420:	ee37 7b07 	vadd.f64	d7, d7, d7
 8010424:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8010428:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801042c:	f300 80dd 	bgt.w	80105ea <_dtoa_r+0x5da>
 8010430:	eeb4 7b46 	vcmp.f64	d7, d6
 8010434:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010438:	d104      	bne.n	8010444 <_dtoa_r+0x434>
 801043a:	ee15 3a10 	vmov	r3, s10
 801043e:	07db      	lsls	r3, r3, #31
 8010440:	f100 80d3 	bmi.w	80105ea <_dtoa_r+0x5da>
 8010444:	9901      	ldr	r1, [sp, #4]
 8010446:	4648      	mov	r0, r9
 8010448:	f000 fc78 	bl	8010d3c <_Bfree>
 801044c:	2300      	movs	r3, #0
 801044e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8010450:	7033      	strb	r3, [r6, #0]
 8010452:	f108 0301 	add.w	r3, r8, #1
 8010456:	6013      	str	r3, [r2, #0]
 8010458:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801045a:	2b00      	cmp	r3, #0
 801045c:	f000 8304 	beq.w	8010a68 <_dtoa_r+0xa58>
 8010460:	601e      	str	r6, [r3, #0]
 8010462:	e301      	b.n	8010a68 <_dtoa_r+0xa58>
 8010464:	2202      	movs	r2, #2
 8010466:	e75e      	b.n	8010326 <_dtoa_r+0x316>
 8010468:	07cc      	lsls	r4, r1, #31
 801046a:	d504      	bpl.n	8010476 <_dtoa_r+0x466>
 801046c:	ed90 6b00 	vldr	d6, [r0]
 8010470:	3201      	adds	r2, #1
 8010472:	ee27 7b06 	vmul.f64	d7, d7, d6
 8010476:	1049      	asrs	r1, r1, #1
 8010478:	3008      	adds	r0, #8
 801047a:	e755      	b.n	8010328 <_dtoa_r+0x318>
 801047c:	d022      	beq.n	80104c4 <_dtoa_r+0x4b4>
 801047e:	f1c8 0100 	rsb	r1, r8, #0
 8010482:	4a68      	ldr	r2, [pc, #416]	@ (8010624 <_dtoa_r+0x614>)
 8010484:	f001 000f 	and.w	r0, r1, #15
 8010488:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 801048c:	ed92 7b00 	vldr	d7, [r2]
 8010490:	ee28 7b07 	vmul.f64	d7, d8, d7
 8010494:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010498:	4863      	ldr	r0, [pc, #396]	@ (8010628 <_dtoa_r+0x618>)
 801049a:	1109      	asrs	r1, r1, #4
 801049c:	2400      	movs	r4, #0
 801049e:	2202      	movs	r2, #2
 80104a0:	b929      	cbnz	r1, 80104ae <_dtoa_r+0x49e>
 80104a2:	2c00      	cmp	r4, #0
 80104a4:	f43f af49 	beq.w	801033a <_dtoa_r+0x32a>
 80104a8:	ed8d 7b02 	vstr	d7, [sp, #8]
 80104ac:	e745      	b.n	801033a <_dtoa_r+0x32a>
 80104ae:	07ce      	lsls	r6, r1, #31
 80104b0:	d505      	bpl.n	80104be <_dtoa_r+0x4ae>
 80104b2:	ed90 6b00 	vldr	d6, [r0]
 80104b6:	3201      	adds	r2, #1
 80104b8:	2401      	movs	r4, #1
 80104ba:	ee27 7b06 	vmul.f64	d7, d7, d6
 80104be:	1049      	asrs	r1, r1, #1
 80104c0:	3008      	adds	r0, #8
 80104c2:	e7ed      	b.n	80104a0 <_dtoa_r+0x490>
 80104c4:	2202      	movs	r2, #2
 80104c6:	e738      	b.n	801033a <_dtoa_r+0x32a>
 80104c8:	f8cd 8010 	str.w	r8, [sp, #16]
 80104cc:	4654      	mov	r4, sl
 80104ce:	e754      	b.n	801037a <_dtoa_r+0x36a>
 80104d0:	4a54      	ldr	r2, [pc, #336]	@ (8010624 <_dtoa_r+0x614>)
 80104d2:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 80104d6:	ed12 4b02 	vldr	d4, [r2, #-8]
 80104da:	9a08      	ldr	r2, [sp, #32]
 80104dc:	ec41 0b17 	vmov	d7, r0, r1
 80104e0:	443c      	add	r4, r7
 80104e2:	b34a      	cbz	r2, 8010538 <_dtoa_r+0x528>
 80104e4:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 80104e8:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 80104ec:	463e      	mov	r6, r7
 80104ee:	ee83 5b04 	vdiv.f64	d5, d3, d4
 80104f2:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 80104f6:	ee35 7b47 	vsub.f64	d7, d5, d7
 80104fa:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80104fe:	ee14 2a90 	vmov	r2, s9
 8010502:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8010506:	3230      	adds	r2, #48	@ 0x30
 8010508:	ee36 6b45 	vsub.f64	d6, d6, d5
 801050c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8010510:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010514:	f806 2b01 	strb.w	r2, [r6], #1
 8010518:	d438      	bmi.n	801058c <_dtoa_r+0x57c>
 801051a:	ee32 5b46 	vsub.f64	d5, d2, d6
 801051e:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8010522:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010526:	d462      	bmi.n	80105ee <_dtoa_r+0x5de>
 8010528:	42a6      	cmp	r6, r4
 801052a:	f43f af4d 	beq.w	80103c8 <_dtoa_r+0x3b8>
 801052e:	ee27 7b03 	vmul.f64	d7, d7, d3
 8010532:	ee26 6b03 	vmul.f64	d6, d6, d3
 8010536:	e7e0      	b.n	80104fa <_dtoa_r+0x4ea>
 8010538:	4621      	mov	r1, r4
 801053a:	463e      	mov	r6, r7
 801053c:	ee27 7b04 	vmul.f64	d7, d7, d4
 8010540:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8010544:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8010548:	ee14 2a90 	vmov	r2, s9
 801054c:	3230      	adds	r2, #48	@ 0x30
 801054e:	f806 2b01 	strb.w	r2, [r6], #1
 8010552:	42a6      	cmp	r6, r4
 8010554:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8010558:	ee36 6b45 	vsub.f64	d6, d6, d5
 801055c:	d119      	bne.n	8010592 <_dtoa_r+0x582>
 801055e:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 8010562:	ee37 4b05 	vadd.f64	d4, d7, d5
 8010566:	eeb4 6bc4 	vcmpe.f64	d6, d4
 801056a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801056e:	dc3e      	bgt.n	80105ee <_dtoa_r+0x5de>
 8010570:	ee35 5b47 	vsub.f64	d5, d5, d7
 8010574:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8010578:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801057c:	f57f af24 	bpl.w	80103c8 <_dtoa_r+0x3b8>
 8010580:	460e      	mov	r6, r1
 8010582:	3901      	subs	r1, #1
 8010584:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8010588:	2b30      	cmp	r3, #48	@ 0x30
 801058a:	d0f9      	beq.n	8010580 <_dtoa_r+0x570>
 801058c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8010590:	e758      	b.n	8010444 <_dtoa_r+0x434>
 8010592:	ee26 6b03 	vmul.f64	d6, d6, d3
 8010596:	e7d5      	b.n	8010544 <_dtoa_r+0x534>
 8010598:	d10b      	bne.n	80105b2 <_dtoa_r+0x5a2>
 801059a:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 801059e:	ee26 6b07 	vmul.f64	d6, d6, d7
 80105a2:	ed9d 7b02 	vldr	d7, [sp, #8]
 80105a6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80105aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80105ae:	f2c0 8161 	blt.w	8010874 <_dtoa_r+0x864>
 80105b2:	2400      	movs	r4, #0
 80105b4:	4625      	mov	r5, r4
 80105b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80105b8:	43db      	mvns	r3, r3
 80105ba:	9304      	str	r3, [sp, #16]
 80105bc:	463e      	mov	r6, r7
 80105be:	f04f 0800 	mov.w	r8, #0
 80105c2:	4621      	mov	r1, r4
 80105c4:	4648      	mov	r0, r9
 80105c6:	f000 fbb9 	bl	8010d3c <_Bfree>
 80105ca:	2d00      	cmp	r5, #0
 80105cc:	d0de      	beq.n	801058c <_dtoa_r+0x57c>
 80105ce:	f1b8 0f00 	cmp.w	r8, #0
 80105d2:	d005      	beq.n	80105e0 <_dtoa_r+0x5d0>
 80105d4:	45a8      	cmp	r8, r5
 80105d6:	d003      	beq.n	80105e0 <_dtoa_r+0x5d0>
 80105d8:	4641      	mov	r1, r8
 80105da:	4648      	mov	r0, r9
 80105dc:	f000 fbae 	bl	8010d3c <_Bfree>
 80105e0:	4629      	mov	r1, r5
 80105e2:	4648      	mov	r0, r9
 80105e4:	f000 fbaa 	bl	8010d3c <_Bfree>
 80105e8:	e7d0      	b.n	801058c <_dtoa_r+0x57c>
 80105ea:	f8cd 8010 	str.w	r8, [sp, #16]
 80105ee:	4633      	mov	r3, r6
 80105f0:	461e      	mov	r6, r3
 80105f2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80105f6:	2a39      	cmp	r2, #57	@ 0x39
 80105f8:	d106      	bne.n	8010608 <_dtoa_r+0x5f8>
 80105fa:	429f      	cmp	r7, r3
 80105fc:	d1f8      	bne.n	80105f0 <_dtoa_r+0x5e0>
 80105fe:	9a04      	ldr	r2, [sp, #16]
 8010600:	3201      	adds	r2, #1
 8010602:	9204      	str	r2, [sp, #16]
 8010604:	2230      	movs	r2, #48	@ 0x30
 8010606:	703a      	strb	r2, [r7, #0]
 8010608:	781a      	ldrb	r2, [r3, #0]
 801060a:	3201      	adds	r2, #1
 801060c:	701a      	strb	r2, [r3, #0]
 801060e:	e7bd      	b.n	801058c <_dtoa_r+0x57c>
 8010610:	ee27 7b04 	vmul.f64	d7, d7, d4
 8010614:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8010618:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801061c:	f47f aeef 	bne.w	80103fe <_dtoa_r+0x3ee>
 8010620:	e710      	b.n	8010444 <_dtoa_r+0x434>
 8010622:	bf00      	nop
 8010624:	08013d58 	.word	0x08013d58
 8010628:	08013d30 	.word	0x08013d30
 801062c:	9908      	ldr	r1, [sp, #32]
 801062e:	2900      	cmp	r1, #0
 8010630:	f000 80e3 	beq.w	80107fa <_dtoa_r+0x7ea>
 8010634:	9907      	ldr	r1, [sp, #28]
 8010636:	2901      	cmp	r1, #1
 8010638:	f300 80c8 	bgt.w	80107cc <_dtoa_r+0x7bc>
 801063c:	2d00      	cmp	r5, #0
 801063e:	f000 80c1 	beq.w	80107c4 <_dtoa_r+0x7b4>
 8010642:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8010646:	9e05      	ldr	r6, [sp, #20]
 8010648:	461c      	mov	r4, r3
 801064a:	9304      	str	r3, [sp, #16]
 801064c:	9b05      	ldr	r3, [sp, #20]
 801064e:	4413      	add	r3, r2
 8010650:	9305      	str	r3, [sp, #20]
 8010652:	9b06      	ldr	r3, [sp, #24]
 8010654:	2101      	movs	r1, #1
 8010656:	4413      	add	r3, r2
 8010658:	4648      	mov	r0, r9
 801065a:	9306      	str	r3, [sp, #24]
 801065c:	f000 fc6c 	bl	8010f38 <__i2b>
 8010660:	9b04      	ldr	r3, [sp, #16]
 8010662:	4605      	mov	r5, r0
 8010664:	b166      	cbz	r6, 8010680 <_dtoa_r+0x670>
 8010666:	9a06      	ldr	r2, [sp, #24]
 8010668:	2a00      	cmp	r2, #0
 801066a:	dd09      	ble.n	8010680 <_dtoa_r+0x670>
 801066c:	42b2      	cmp	r2, r6
 801066e:	9905      	ldr	r1, [sp, #20]
 8010670:	bfa8      	it	ge
 8010672:	4632      	movge	r2, r6
 8010674:	1a89      	subs	r1, r1, r2
 8010676:	9105      	str	r1, [sp, #20]
 8010678:	9906      	ldr	r1, [sp, #24]
 801067a:	1ab6      	subs	r6, r6, r2
 801067c:	1a8a      	subs	r2, r1, r2
 801067e:	9206      	str	r2, [sp, #24]
 8010680:	b1fb      	cbz	r3, 80106c2 <_dtoa_r+0x6b2>
 8010682:	9a08      	ldr	r2, [sp, #32]
 8010684:	2a00      	cmp	r2, #0
 8010686:	f000 80bc 	beq.w	8010802 <_dtoa_r+0x7f2>
 801068a:	b19c      	cbz	r4, 80106b4 <_dtoa_r+0x6a4>
 801068c:	4629      	mov	r1, r5
 801068e:	4622      	mov	r2, r4
 8010690:	4648      	mov	r0, r9
 8010692:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010694:	f000 fd10 	bl	80110b8 <__pow5mult>
 8010698:	9a01      	ldr	r2, [sp, #4]
 801069a:	4601      	mov	r1, r0
 801069c:	4605      	mov	r5, r0
 801069e:	4648      	mov	r0, r9
 80106a0:	f000 fc60 	bl	8010f64 <__multiply>
 80106a4:	9901      	ldr	r1, [sp, #4]
 80106a6:	9004      	str	r0, [sp, #16]
 80106a8:	4648      	mov	r0, r9
 80106aa:	f000 fb47 	bl	8010d3c <_Bfree>
 80106ae:	9a04      	ldr	r2, [sp, #16]
 80106b0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80106b2:	9201      	str	r2, [sp, #4]
 80106b4:	1b1a      	subs	r2, r3, r4
 80106b6:	d004      	beq.n	80106c2 <_dtoa_r+0x6b2>
 80106b8:	9901      	ldr	r1, [sp, #4]
 80106ba:	4648      	mov	r0, r9
 80106bc:	f000 fcfc 	bl	80110b8 <__pow5mult>
 80106c0:	9001      	str	r0, [sp, #4]
 80106c2:	2101      	movs	r1, #1
 80106c4:	4648      	mov	r0, r9
 80106c6:	f000 fc37 	bl	8010f38 <__i2b>
 80106ca:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80106cc:	4604      	mov	r4, r0
 80106ce:	2b00      	cmp	r3, #0
 80106d0:	f000 81d0 	beq.w	8010a74 <_dtoa_r+0xa64>
 80106d4:	461a      	mov	r2, r3
 80106d6:	4601      	mov	r1, r0
 80106d8:	4648      	mov	r0, r9
 80106da:	f000 fced 	bl	80110b8 <__pow5mult>
 80106de:	9b07      	ldr	r3, [sp, #28]
 80106e0:	2b01      	cmp	r3, #1
 80106e2:	4604      	mov	r4, r0
 80106e4:	f300 8095 	bgt.w	8010812 <_dtoa_r+0x802>
 80106e8:	9b02      	ldr	r3, [sp, #8]
 80106ea:	2b00      	cmp	r3, #0
 80106ec:	f040 808b 	bne.w	8010806 <_dtoa_r+0x7f6>
 80106f0:	9b03      	ldr	r3, [sp, #12]
 80106f2:	f3c3 0213 	ubfx	r2, r3, #0, #20
 80106f6:	2a00      	cmp	r2, #0
 80106f8:	f040 8087 	bne.w	801080a <_dtoa_r+0x7fa>
 80106fc:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8010700:	0d12      	lsrs	r2, r2, #20
 8010702:	0512      	lsls	r2, r2, #20
 8010704:	2a00      	cmp	r2, #0
 8010706:	f000 8082 	beq.w	801080e <_dtoa_r+0x7fe>
 801070a:	9b05      	ldr	r3, [sp, #20]
 801070c:	3301      	adds	r3, #1
 801070e:	9305      	str	r3, [sp, #20]
 8010710:	9b06      	ldr	r3, [sp, #24]
 8010712:	3301      	adds	r3, #1
 8010714:	9306      	str	r3, [sp, #24]
 8010716:	2301      	movs	r3, #1
 8010718:	930b      	str	r3, [sp, #44]	@ 0x2c
 801071a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801071c:	2b00      	cmp	r3, #0
 801071e:	f000 81af 	beq.w	8010a80 <_dtoa_r+0xa70>
 8010722:	6922      	ldr	r2, [r4, #16]
 8010724:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8010728:	6910      	ldr	r0, [r2, #16]
 801072a:	f000 fbb9 	bl	8010ea0 <__hi0bits>
 801072e:	f1c0 0020 	rsb	r0, r0, #32
 8010732:	9b06      	ldr	r3, [sp, #24]
 8010734:	4418      	add	r0, r3
 8010736:	f010 001f 	ands.w	r0, r0, #31
 801073a:	d076      	beq.n	801082a <_dtoa_r+0x81a>
 801073c:	f1c0 0220 	rsb	r2, r0, #32
 8010740:	2a04      	cmp	r2, #4
 8010742:	dd69      	ble.n	8010818 <_dtoa_r+0x808>
 8010744:	9b05      	ldr	r3, [sp, #20]
 8010746:	f1c0 001c 	rsb	r0, r0, #28
 801074a:	4403      	add	r3, r0
 801074c:	9305      	str	r3, [sp, #20]
 801074e:	9b06      	ldr	r3, [sp, #24]
 8010750:	4406      	add	r6, r0
 8010752:	4403      	add	r3, r0
 8010754:	9306      	str	r3, [sp, #24]
 8010756:	9b05      	ldr	r3, [sp, #20]
 8010758:	2b00      	cmp	r3, #0
 801075a:	dd05      	ble.n	8010768 <_dtoa_r+0x758>
 801075c:	9901      	ldr	r1, [sp, #4]
 801075e:	461a      	mov	r2, r3
 8010760:	4648      	mov	r0, r9
 8010762:	f000 fd03 	bl	801116c <__lshift>
 8010766:	9001      	str	r0, [sp, #4]
 8010768:	9b06      	ldr	r3, [sp, #24]
 801076a:	2b00      	cmp	r3, #0
 801076c:	dd05      	ble.n	801077a <_dtoa_r+0x76a>
 801076e:	4621      	mov	r1, r4
 8010770:	461a      	mov	r2, r3
 8010772:	4648      	mov	r0, r9
 8010774:	f000 fcfa 	bl	801116c <__lshift>
 8010778:	4604      	mov	r4, r0
 801077a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801077c:	2b00      	cmp	r3, #0
 801077e:	d056      	beq.n	801082e <_dtoa_r+0x81e>
 8010780:	9801      	ldr	r0, [sp, #4]
 8010782:	4621      	mov	r1, r4
 8010784:	f000 fd5e 	bl	8011244 <__mcmp>
 8010788:	2800      	cmp	r0, #0
 801078a:	da50      	bge.n	801082e <_dtoa_r+0x81e>
 801078c:	f108 33ff 	add.w	r3, r8, #4294967295
 8010790:	9304      	str	r3, [sp, #16]
 8010792:	9901      	ldr	r1, [sp, #4]
 8010794:	2300      	movs	r3, #0
 8010796:	220a      	movs	r2, #10
 8010798:	4648      	mov	r0, r9
 801079a:	f000 faf1 	bl	8010d80 <__multadd>
 801079e:	9b08      	ldr	r3, [sp, #32]
 80107a0:	9001      	str	r0, [sp, #4]
 80107a2:	2b00      	cmp	r3, #0
 80107a4:	f000 816e 	beq.w	8010a84 <_dtoa_r+0xa74>
 80107a8:	4629      	mov	r1, r5
 80107aa:	2300      	movs	r3, #0
 80107ac:	220a      	movs	r2, #10
 80107ae:	4648      	mov	r0, r9
 80107b0:	f000 fae6 	bl	8010d80 <__multadd>
 80107b4:	f1bb 0f00 	cmp.w	fp, #0
 80107b8:	4605      	mov	r5, r0
 80107ba:	dc64      	bgt.n	8010886 <_dtoa_r+0x876>
 80107bc:	9b07      	ldr	r3, [sp, #28]
 80107be:	2b02      	cmp	r3, #2
 80107c0:	dc3e      	bgt.n	8010840 <_dtoa_r+0x830>
 80107c2:	e060      	b.n	8010886 <_dtoa_r+0x876>
 80107c4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80107c6:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80107ca:	e73c      	b.n	8010646 <_dtoa_r+0x636>
 80107cc:	f10a 34ff 	add.w	r4, sl, #4294967295
 80107d0:	42a3      	cmp	r3, r4
 80107d2:	bfbf      	itttt	lt
 80107d4:	1ae2      	sublt	r2, r4, r3
 80107d6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80107d8:	189b      	addlt	r3, r3, r2
 80107da:	930a      	strlt	r3, [sp, #40]	@ 0x28
 80107dc:	bfae      	itee	ge
 80107de:	1b1c      	subge	r4, r3, r4
 80107e0:	4623      	movlt	r3, r4
 80107e2:	2400      	movlt	r4, #0
 80107e4:	f1ba 0f00 	cmp.w	sl, #0
 80107e8:	bfb5      	itete	lt
 80107ea:	9a05      	ldrlt	r2, [sp, #20]
 80107ec:	9e05      	ldrge	r6, [sp, #20]
 80107ee:	eba2 060a 	sublt.w	r6, r2, sl
 80107f2:	4652      	movge	r2, sl
 80107f4:	bfb8      	it	lt
 80107f6:	2200      	movlt	r2, #0
 80107f8:	e727      	b.n	801064a <_dtoa_r+0x63a>
 80107fa:	9e05      	ldr	r6, [sp, #20]
 80107fc:	9d08      	ldr	r5, [sp, #32]
 80107fe:	461c      	mov	r4, r3
 8010800:	e730      	b.n	8010664 <_dtoa_r+0x654>
 8010802:	461a      	mov	r2, r3
 8010804:	e758      	b.n	80106b8 <_dtoa_r+0x6a8>
 8010806:	2300      	movs	r3, #0
 8010808:	e786      	b.n	8010718 <_dtoa_r+0x708>
 801080a:	9b02      	ldr	r3, [sp, #8]
 801080c:	e784      	b.n	8010718 <_dtoa_r+0x708>
 801080e:	920b      	str	r2, [sp, #44]	@ 0x2c
 8010810:	e783      	b.n	801071a <_dtoa_r+0x70a>
 8010812:	2300      	movs	r3, #0
 8010814:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010816:	e784      	b.n	8010722 <_dtoa_r+0x712>
 8010818:	d09d      	beq.n	8010756 <_dtoa_r+0x746>
 801081a:	9b05      	ldr	r3, [sp, #20]
 801081c:	321c      	adds	r2, #28
 801081e:	4413      	add	r3, r2
 8010820:	9305      	str	r3, [sp, #20]
 8010822:	9b06      	ldr	r3, [sp, #24]
 8010824:	4416      	add	r6, r2
 8010826:	4413      	add	r3, r2
 8010828:	e794      	b.n	8010754 <_dtoa_r+0x744>
 801082a:	4602      	mov	r2, r0
 801082c:	e7f5      	b.n	801081a <_dtoa_r+0x80a>
 801082e:	f1ba 0f00 	cmp.w	sl, #0
 8010832:	f8cd 8010 	str.w	r8, [sp, #16]
 8010836:	46d3      	mov	fp, sl
 8010838:	dc21      	bgt.n	801087e <_dtoa_r+0x86e>
 801083a:	9b07      	ldr	r3, [sp, #28]
 801083c:	2b02      	cmp	r3, #2
 801083e:	dd1e      	ble.n	801087e <_dtoa_r+0x86e>
 8010840:	f1bb 0f00 	cmp.w	fp, #0
 8010844:	f47f aeb7 	bne.w	80105b6 <_dtoa_r+0x5a6>
 8010848:	4621      	mov	r1, r4
 801084a:	465b      	mov	r3, fp
 801084c:	2205      	movs	r2, #5
 801084e:	4648      	mov	r0, r9
 8010850:	f000 fa96 	bl	8010d80 <__multadd>
 8010854:	4601      	mov	r1, r0
 8010856:	4604      	mov	r4, r0
 8010858:	9801      	ldr	r0, [sp, #4]
 801085a:	f000 fcf3 	bl	8011244 <__mcmp>
 801085e:	2800      	cmp	r0, #0
 8010860:	f77f aea9 	ble.w	80105b6 <_dtoa_r+0x5a6>
 8010864:	463e      	mov	r6, r7
 8010866:	2331      	movs	r3, #49	@ 0x31
 8010868:	f806 3b01 	strb.w	r3, [r6], #1
 801086c:	9b04      	ldr	r3, [sp, #16]
 801086e:	3301      	adds	r3, #1
 8010870:	9304      	str	r3, [sp, #16]
 8010872:	e6a4      	b.n	80105be <_dtoa_r+0x5ae>
 8010874:	f8cd 8010 	str.w	r8, [sp, #16]
 8010878:	4654      	mov	r4, sl
 801087a:	4625      	mov	r5, r4
 801087c:	e7f2      	b.n	8010864 <_dtoa_r+0x854>
 801087e:	9b08      	ldr	r3, [sp, #32]
 8010880:	2b00      	cmp	r3, #0
 8010882:	f000 8103 	beq.w	8010a8c <_dtoa_r+0xa7c>
 8010886:	2e00      	cmp	r6, #0
 8010888:	dd05      	ble.n	8010896 <_dtoa_r+0x886>
 801088a:	4629      	mov	r1, r5
 801088c:	4632      	mov	r2, r6
 801088e:	4648      	mov	r0, r9
 8010890:	f000 fc6c 	bl	801116c <__lshift>
 8010894:	4605      	mov	r5, r0
 8010896:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010898:	2b00      	cmp	r3, #0
 801089a:	d058      	beq.n	801094e <_dtoa_r+0x93e>
 801089c:	6869      	ldr	r1, [r5, #4]
 801089e:	4648      	mov	r0, r9
 80108a0:	f000 fa0c 	bl	8010cbc <_Balloc>
 80108a4:	4606      	mov	r6, r0
 80108a6:	b928      	cbnz	r0, 80108b4 <_dtoa_r+0x8a4>
 80108a8:	4b82      	ldr	r3, [pc, #520]	@ (8010ab4 <_dtoa_r+0xaa4>)
 80108aa:	4602      	mov	r2, r0
 80108ac:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80108b0:	f7ff bbc7 	b.w	8010042 <_dtoa_r+0x32>
 80108b4:	692a      	ldr	r2, [r5, #16]
 80108b6:	3202      	adds	r2, #2
 80108b8:	0092      	lsls	r2, r2, #2
 80108ba:	f105 010c 	add.w	r1, r5, #12
 80108be:	300c      	adds	r0, #12
 80108c0:	f7ff fb09 	bl	800fed6 <memcpy>
 80108c4:	2201      	movs	r2, #1
 80108c6:	4631      	mov	r1, r6
 80108c8:	4648      	mov	r0, r9
 80108ca:	f000 fc4f 	bl	801116c <__lshift>
 80108ce:	1c7b      	adds	r3, r7, #1
 80108d0:	9305      	str	r3, [sp, #20]
 80108d2:	eb07 030b 	add.w	r3, r7, fp
 80108d6:	9309      	str	r3, [sp, #36]	@ 0x24
 80108d8:	9b02      	ldr	r3, [sp, #8]
 80108da:	f003 0301 	and.w	r3, r3, #1
 80108de:	46a8      	mov	r8, r5
 80108e0:	9308      	str	r3, [sp, #32]
 80108e2:	4605      	mov	r5, r0
 80108e4:	9b05      	ldr	r3, [sp, #20]
 80108e6:	9801      	ldr	r0, [sp, #4]
 80108e8:	4621      	mov	r1, r4
 80108ea:	f103 3bff 	add.w	fp, r3, #4294967295
 80108ee:	f7ff fb07 	bl	800ff00 <quorem>
 80108f2:	4641      	mov	r1, r8
 80108f4:	9002      	str	r0, [sp, #8]
 80108f6:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 80108fa:	9801      	ldr	r0, [sp, #4]
 80108fc:	f000 fca2 	bl	8011244 <__mcmp>
 8010900:	462a      	mov	r2, r5
 8010902:	9006      	str	r0, [sp, #24]
 8010904:	4621      	mov	r1, r4
 8010906:	4648      	mov	r0, r9
 8010908:	f000 fcb8 	bl	801127c <__mdiff>
 801090c:	68c2      	ldr	r2, [r0, #12]
 801090e:	4606      	mov	r6, r0
 8010910:	b9fa      	cbnz	r2, 8010952 <_dtoa_r+0x942>
 8010912:	4601      	mov	r1, r0
 8010914:	9801      	ldr	r0, [sp, #4]
 8010916:	f000 fc95 	bl	8011244 <__mcmp>
 801091a:	4602      	mov	r2, r0
 801091c:	4631      	mov	r1, r6
 801091e:	4648      	mov	r0, r9
 8010920:	920a      	str	r2, [sp, #40]	@ 0x28
 8010922:	f000 fa0b 	bl	8010d3c <_Bfree>
 8010926:	9b07      	ldr	r3, [sp, #28]
 8010928:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801092a:	9e05      	ldr	r6, [sp, #20]
 801092c:	ea43 0102 	orr.w	r1, r3, r2
 8010930:	9b08      	ldr	r3, [sp, #32]
 8010932:	4319      	orrs	r1, r3
 8010934:	d10f      	bne.n	8010956 <_dtoa_r+0x946>
 8010936:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 801093a:	d028      	beq.n	801098e <_dtoa_r+0x97e>
 801093c:	9b06      	ldr	r3, [sp, #24]
 801093e:	2b00      	cmp	r3, #0
 8010940:	dd02      	ble.n	8010948 <_dtoa_r+0x938>
 8010942:	9b02      	ldr	r3, [sp, #8]
 8010944:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 8010948:	f88b a000 	strb.w	sl, [fp]
 801094c:	e639      	b.n	80105c2 <_dtoa_r+0x5b2>
 801094e:	4628      	mov	r0, r5
 8010950:	e7bd      	b.n	80108ce <_dtoa_r+0x8be>
 8010952:	2201      	movs	r2, #1
 8010954:	e7e2      	b.n	801091c <_dtoa_r+0x90c>
 8010956:	9b06      	ldr	r3, [sp, #24]
 8010958:	2b00      	cmp	r3, #0
 801095a:	db04      	blt.n	8010966 <_dtoa_r+0x956>
 801095c:	9907      	ldr	r1, [sp, #28]
 801095e:	430b      	orrs	r3, r1
 8010960:	9908      	ldr	r1, [sp, #32]
 8010962:	430b      	orrs	r3, r1
 8010964:	d120      	bne.n	80109a8 <_dtoa_r+0x998>
 8010966:	2a00      	cmp	r2, #0
 8010968:	ddee      	ble.n	8010948 <_dtoa_r+0x938>
 801096a:	9901      	ldr	r1, [sp, #4]
 801096c:	2201      	movs	r2, #1
 801096e:	4648      	mov	r0, r9
 8010970:	f000 fbfc 	bl	801116c <__lshift>
 8010974:	4621      	mov	r1, r4
 8010976:	9001      	str	r0, [sp, #4]
 8010978:	f000 fc64 	bl	8011244 <__mcmp>
 801097c:	2800      	cmp	r0, #0
 801097e:	dc03      	bgt.n	8010988 <_dtoa_r+0x978>
 8010980:	d1e2      	bne.n	8010948 <_dtoa_r+0x938>
 8010982:	f01a 0f01 	tst.w	sl, #1
 8010986:	d0df      	beq.n	8010948 <_dtoa_r+0x938>
 8010988:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 801098c:	d1d9      	bne.n	8010942 <_dtoa_r+0x932>
 801098e:	2339      	movs	r3, #57	@ 0x39
 8010990:	f88b 3000 	strb.w	r3, [fp]
 8010994:	4633      	mov	r3, r6
 8010996:	461e      	mov	r6, r3
 8010998:	3b01      	subs	r3, #1
 801099a:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 801099e:	2a39      	cmp	r2, #57	@ 0x39
 80109a0:	d053      	beq.n	8010a4a <_dtoa_r+0xa3a>
 80109a2:	3201      	adds	r2, #1
 80109a4:	701a      	strb	r2, [r3, #0]
 80109a6:	e60c      	b.n	80105c2 <_dtoa_r+0x5b2>
 80109a8:	2a00      	cmp	r2, #0
 80109aa:	dd07      	ble.n	80109bc <_dtoa_r+0x9ac>
 80109ac:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 80109b0:	d0ed      	beq.n	801098e <_dtoa_r+0x97e>
 80109b2:	f10a 0301 	add.w	r3, sl, #1
 80109b6:	f88b 3000 	strb.w	r3, [fp]
 80109ba:	e602      	b.n	80105c2 <_dtoa_r+0x5b2>
 80109bc:	9b05      	ldr	r3, [sp, #20]
 80109be:	9a05      	ldr	r2, [sp, #20]
 80109c0:	f803 ac01 	strb.w	sl, [r3, #-1]
 80109c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80109c6:	4293      	cmp	r3, r2
 80109c8:	d029      	beq.n	8010a1e <_dtoa_r+0xa0e>
 80109ca:	9901      	ldr	r1, [sp, #4]
 80109cc:	2300      	movs	r3, #0
 80109ce:	220a      	movs	r2, #10
 80109d0:	4648      	mov	r0, r9
 80109d2:	f000 f9d5 	bl	8010d80 <__multadd>
 80109d6:	45a8      	cmp	r8, r5
 80109d8:	9001      	str	r0, [sp, #4]
 80109da:	f04f 0300 	mov.w	r3, #0
 80109de:	f04f 020a 	mov.w	r2, #10
 80109e2:	4641      	mov	r1, r8
 80109e4:	4648      	mov	r0, r9
 80109e6:	d107      	bne.n	80109f8 <_dtoa_r+0x9e8>
 80109e8:	f000 f9ca 	bl	8010d80 <__multadd>
 80109ec:	4680      	mov	r8, r0
 80109ee:	4605      	mov	r5, r0
 80109f0:	9b05      	ldr	r3, [sp, #20]
 80109f2:	3301      	adds	r3, #1
 80109f4:	9305      	str	r3, [sp, #20]
 80109f6:	e775      	b.n	80108e4 <_dtoa_r+0x8d4>
 80109f8:	f000 f9c2 	bl	8010d80 <__multadd>
 80109fc:	4629      	mov	r1, r5
 80109fe:	4680      	mov	r8, r0
 8010a00:	2300      	movs	r3, #0
 8010a02:	220a      	movs	r2, #10
 8010a04:	4648      	mov	r0, r9
 8010a06:	f000 f9bb 	bl	8010d80 <__multadd>
 8010a0a:	4605      	mov	r5, r0
 8010a0c:	e7f0      	b.n	80109f0 <_dtoa_r+0x9e0>
 8010a0e:	f1bb 0f00 	cmp.w	fp, #0
 8010a12:	bfcc      	ite	gt
 8010a14:	465e      	movgt	r6, fp
 8010a16:	2601      	movle	r6, #1
 8010a18:	443e      	add	r6, r7
 8010a1a:	f04f 0800 	mov.w	r8, #0
 8010a1e:	9901      	ldr	r1, [sp, #4]
 8010a20:	2201      	movs	r2, #1
 8010a22:	4648      	mov	r0, r9
 8010a24:	f000 fba2 	bl	801116c <__lshift>
 8010a28:	4621      	mov	r1, r4
 8010a2a:	9001      	str	r0, [sp, #4]
 8010a2c:	f000 fc0a 	bl	8011244 <__mcmp>
 8010a30:	2800      	cmp	r0, #0
 8010a32:	dcaf      	bgt.n	8010994 <_dtoa_r+0x984>
 8010a34:	d102      	bne.n	8010a3c <_dtoa_r+0xa2c>
 8010a36:	f01a 0f01 	tst.w	sl, #1
 8010a3a:	d1ab      	bne.n	8010994 <_dtoa_r+0x984>
 8010a3c:	4633      	mov	r3, r6
 8010a3e:	461e      	mov	r6, r3
 8010a40:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010a44:	2a30      	cmp	r2, #48	@ 0x30
 8010a46:	d0fa      	beq.n	8010a3e <_dtoa_r+0xa2e>
 8010a48:	e5bb      	b.n	80105c2 <_dtoa_r+0x5b2>
 8010a4a:	429f      	cmp	r7, r3
 8010a4c:	d1a3      	bne.n	8010996 <_dtoa_r+0x986>
 8010a4e:	9b04      	ldr	r3, [sp, #16]
 8010a50:	3301      	adds	r3, #1
 8010a52:	9304      	str	r3, [sp, #16]
 8010a54:	2331      	movs	r3, #49	@ 0x31
 8010a56:	703b      	strb	r3, [r7, #0]
 8010a58:	e5b3      	b.n	80105c2 <_dtoa_r+0x5b2>
 8010a5a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8010a5c:	4f16      	ldr	r7, [pc, #88]	@ (8010ab8 <_dtoa_r+0xaa8>)
 8010a5e:	b11b      	cbz	r3, 8010a68 <_dtoa_r+0xa58>
 8010a60:	f107 0308 	add.w	r3, r7, #8
 8010a64:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8010a66:	6013      	str	r3, [r2, #0]
 8010a68:	4638      	mov	r0, r7
 8010a6a:	b011      	add	sp, #68	@ 0x44
 8010a6c:	ecbd 8b02 	vpop	{d8}
 8010a70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010a74:	9b07      	ldr	r3, [sp, #28]
 8010a76:	2b01      	cmp	r3, #1
 8010a78:	f77f ae36 	ble.w	80106e8 <_dtoa_r+0x6d8>
 8010a7c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010a7e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010a80:	2001      	movs	r0, #1
 8010a82:	e656      	b.n	8010732 <_dtoa_r+0x722>
 8010a84:	f1bb 0f00 	cmp.w	fp, #0
 8010a88:	f77f aed7 	ble.w	801083a <_dtoa_r+0x82a>
 8010a8c:	463e      	mov	r6, r7
 8010a8e:	9801      	ldr	r0, [sp, #4]
 8010a90:	4621      	mov	r1, r4
 8010a92:	f7ff fa35 	bl	800ff00 <quorem>
 8010a96:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8010a9a:	f806 ab01 	strb.w	sl, [r6], #1
 8010a9e:	1bf2      	subs	r2, r6, r7
 8010aa0:	4593      	cmp	fp, r2
 8010aa2:	ddb4      	ble.n	8010a0e <_dtoa_r+0x9fe>
 8010aa4:	9901      	ldr	r1, [sp, #4]
 8010aa6:	2300      	movs	r3, #0
 8010aa8:	220a      	movs	r2, #10
 8010aaa:	4648      	mov	r0, r9
 8010aac:	f000 f968 	bl	8010d80 <__multadd>
 8010ab0:	9001      	str	r0, [sp, #4]
 8010ab2:	e7ec      	b.n	8010a8e <_dtoa_r+0xa7e>
 8010ab4:	08013cb6 	.word	0x08013cb6
 8010ab8:	08013c3a 	.word	0x08013c3a

08010abc <_free_r>:
 8010abc:	b538      	push	{r3, r4, r5, lr}
 8010abe:	4605      	mov	r5, r0
 8010ac0:	2900      	cmp	r1, #0
 8010ac2:	d041      	beq.n	8010b48 <_free_r+0x8c>
 8010ac4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010ac8:	1f0c      	subs	r4, r1, #4
 8010aca:	2b00      	cmp	r3, #0
 8010acc:	bfb8      	it	lt
 8010ace:	18e4      	addlt	r4, r4, r3
 8010ad0:	f000 f8e8 	bl	8010ca4 <__malloc_lock>
 8010ad4:	4a1d      	ldr	r2, [pc, #116]	@ (8010b4c <_free_r+0x90>)
 8010ad6:	6813      	ldr	r3, [r2, #0]
 8010ad8:	b933      	cbnz	r3, 8010ae8 <_free_r+0x2c>
 8010ada:	6063      	str	r3, [r4, #4]
 8010adc:	6014      	str	r4, [r2, #0]
 8010ade:	4628      	mov	r0, r5
 8010ae0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010ae4:	f000 b8e4 	b.w	8010cb0 <__malloc_unlock>
 8010ae8:	42a3      	cmp	r3, r4
 8010aea:	d908      	bls.n	8010afe <_free_r+0x42>
 8010aec:	6820      	ldr	r0, [r4, #0]
 8010aee:	1821      	adds	r1, r4, r0
 8010af0:	428b      	cmp	r3, r1
 8010af2:	bf01      	itttt	eq
 8010af4:	6819      	ldreq	r1, [r3, #0]
 8010af6:	685b      	ldreq	r3, [r3, #4]
 8010af8:	1809      	addeq	r1, r1, r0
 8010afa:	6021      	streq	r1, [r4, #0]
 8010afc:	e7ed      	b.n	8010ada <_free_r+0x1e>
 8010afe:	461a      	mov	r2, r3
 8010b00:	685b      	ldr	r3, [r3, #4]
 8010b02:	b10b      	cbz	r3, 8010b08 <_free_r+0x4c>
 8010b04:	42a3      	cmp	r3, r4
 8010b06:	d9fa      	bls.n	8010afe <_free_r+0x42>
 8010b08:	6811      	ldr	r1, [r2, #0]
 8010b0a:	1850      	adds	r0, r2, r1
 8010b0c:	42a0      	cmp	r0, r4
 8010b0e:	d10b      	bne.n	8010b28 <_free_r+0x6c>
 8010b10:	6820      	ldr	r0, [r4, #0]
 8010b12:	4401      	add	r1, r0
 8010b14:	1850      	adds	r0, r2, r1
 8010b16:	4283      	cmp	r3, r0
 8010b18:	6011      	str	r1, [r2, #0]
 8010b1a:	d1e0      	bne.n	8010ade <_free_r+0x22>
 8010b1c:	6818      	ldr	r0, [r3, #0]
 8010b1e:	685b      	ldr	r3, [r3, #4]
 8010b20:	6053      	str	r3, [r2, #4]
 8010b22:	4408      	add	r0, r1
 8010b24:	6010      	str	r0, [r2, #0]
 8010b26:	e7da      	b.n	8010ade <_free_r+0x22>
 8010b28:	d902      	bls.n	8010b30 <_free_r+0x74>
 8010b2a:	230c      	movs	r3, #12
 8010b2c:	602b      	str	r3, [r5, #0]
 8010b2e:	e7d6      	b.n	8010ade <_free_r+0x22>
 8010b30:	6820      	ldr	r0, [r4, #0]
 8010b32:	1821      	adds	r1, r4, r0
 8010b34:	428b      	cmp	r3, r1
 8010b36:	bf04      	itt	eq
 8010b38:	6819      	ldreq	r1, [r3, #0]
 8010b3a:	685b      	ldreq	r3, [r3, #4]
 8010b3c:	6063      	str	r3, [r4, #4]
 8010b3e:	bf04      	itt	eq
 8010b40:	1809      	addeq	r1, r1, r0
 8010b42:	6021      	streq	r1, [r4, #0]
 8010b44:	6054      	str	r4, [r2, #4]
 8010b46:	e7ca      	b.n	8010ade <_free_r+0x22>
 8010b48:	bd38      	pop	{r3, r4, r5, pc}
 8010b4a:	bf00      	nop
 8010b4c:	240005cc 	.word	0x240005cc

08010b50 <malloc>:
 8010b50:	4b02      	ldr	r3, [pc, #8]	@ (8010b5c <malloc+0xc>)
 8010b52:	4601      	mov	r1, r0
 8010b54:	6818      	ldr	r0, [r3, #0]
 8010b56:	f000 b825 	b.w	8010ba4 <_malloc_r>
 8010b5a:	bf00      	nop
 8010b5c:	2400002c 	.word	0x2400002c

08010b60 <sbrk_aligned>:
 8010b60:	b570      	push	{r4, r5, r6, lr}
 8010b62:	4e0f      	ldr	r6, [pc, #60]	@ (8010ba0 <sbrk_aligned+0x40>)
 8010b64:	460c      	mov	r4, r1
 8010b66:	6831      	ldr	r1, [r6, #0]
 8010b68:	4605      	mov	r5, r0
 8010b6a:	b911      	cbnz	r1, 8010b72 <sbrk_aligned+0x12>
 8010b6c:	f001 fd2a 	bl	80125c4 <_sbrk_r>
 8010b70:	6030      	str	r0, [r6, #0]
 8010b72:	4621      	mov	r1, r4
 8010b74:	4628      	mov	r0, r5
 8010b76:	f001 fd25 	bl	80125c4 <_sbrk_r>
 8010b7a:	1c43      	adds	r3, r0, #1
 8010b7c:	d103      	bne.n	8010b86 <sbrk_aligned+0x26>
 8010b7e:	f04f 34ff 	mov.w	r4, #4294967295
 8010b82:	4620      	mov	r0, r4
 8010b84:	bd70      	pop	{r4, r5, r6, pc}
 8010b86:	1cc4      	adds	r4, r0, #3
 8010b88:	f024 0403 	bic.w	r4, r4, #3
 8010b8c:	42a0      	cmp	r0, r4
 8010b8e:	d0f8      	beq.n	8010b82 <sbrk_aligned+0x22>
 8010b90:	1a21      	subs	r1, r4, r0
 8010b92:	4628      	mov	r0, r5
 8010b94:	f001 fd16 	bl	80125c4 <_sbrk_r>
 8010b98:	3001      	adds	r0, #1
 8010b9a:	d1f2      	bne.n	8010b82 <sbrk_aligned+0x22>
 8010b9c:	e7ef      	b.n	8010b7e <sbrk_aligned+0x1e>
 8010b9e:	bf00      	nop
 8010ba0:	240005c8 	.word	0x240005c8

08010ba4 <_malloc_r>:
 8010ba4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010ba8:	1ccd      	adds	r5, r1, #3
 8010baa:	f025 0503 	bic.w	r5, r5, #3
 8010bae:	3508      	adds	r5, #8
 8010bb0:	2d0c      	cmp	r5, #12
 8010bb2:	bf38      	it	cc
 8010bb4:	250c      	movcc	r5, #12
 8010bb6:	2d00      	cmp	r5, #0
 8010bb8:	4606      	mov	r6, r0
 8010bba:	db01      	blt.n	8010bc0 <_malloc_r+0x1c>
 8010bbc:	42a9      	cmp	r1, r5
 8010bbe:	d904      	bls.n	8010bca <_malloc_r+0x26>
 8010bc0:	230c      	movs	r3, #12
 8010bc2:	6033      	str	r3, [r6, #0]
 8010bc4:	2000      	movs	r0, #0
 8010bc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010bca:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8010ca0 <_malloc_r+0xfc>
 8010bce:	f000 f869 	bl	8010ca4 <__malloc_lock>
 8010bd2:	f8d8 3000 	ldr.w	r3, [r8]
 8010bd6:	461c      	mov	r4, r3
 8010bd8:	bb44      	cbnz	r4, 8010c2c <_malloc_r+0x88>
 8010bda:	4629      	mov	r1, r5
 8010bdc:	4630      	mov	r0, r6
 8010bde:	f7ff ffbf 	bl	8010b60 <sbrk_aligned>
 8010be2:	1c43      	adds	r3, r0, #1
 8010be4:	4604      	mov	r4, r0
 8010be6:	d158      	bne.n	8010c9a <_malloc_r+0xf6>
 8010be8:	f8d8 4000 	ldr.w	r4, [r8]
 8010bec:	4627      	mov	r7, r4
 8010bee:	2f00      	cmp	r7, #0
 8010bf0:	d143      	bne.n	8010c7a <_malloc_r+0xd6>
 8010bf2:	2c00      	cmp	r4, #0
 8010bf4:	d04b      	beq.n	8010c8e <_malloc_r+0xea>
 8010bf6:	6823      	ldr	r3, [r4, #0]
 8010bf8:	4639      	mov	r1, r7
 8010bfa:	4630      	mov	r0, r6
 8010bfc:	eb04 0903 	add.w	r9, r4, r3
 8010c00:	f001 fce0 	bl	80125c4 <_sbrk_r>
 8010c04:	4581      	cmp	r9, r0
 8010c06:	d142      	bne.n	8010c8e <_malloc_r+0xea>
 8010c08:	6821      	ldr	r1, [r4, #0]
 8010c0a:	1a6d      	subs	r5, r5, r1
 8010c0c:	4629      	mov	r1, r5
 8010c0e:	4630      	mov	r0, r6
 8010c10:	f7ff ffa6 	bl	8010b60 <sbrk_aligned>
 8010c14:	3001      	adds	r0, #1
 8010c16:	d03a      	beq.n	8010c8e <_malloc_r+0xea>
 8010c18:	6823      	ldr	r3, [r4, #0]
 8010c1a:	442b      	add	r3, r5
 8010c1c:	6023      	str	r3, [r4, #0]
 8010c1e:	f8d8 3000 	ldr.w	r3, [r8]
 8010c22:	685a      	ldr	r2, [r3, #4]
 8010c24:	bb62      	cbnz	r2, 8010c80 <_malloc_r+0xdc>
 8010c26:	f8c8 7000 	str.w	r7, [r8]
 8010c2a:	e00f      	b.n	8010c4c <_malloc_r+0xa8>
 8010c2c:	6822      	ldr	r2, [r4, #0]
 8010c2e:	1b52      	subs	r2, r2, r5
 8010c30:	d420      	bmi.n	8010c74 <_malloc_r+0xd0>
 8010c32:	2a0b      	cmp	r2, #11
 8010c34:	d917      	bls.n	8010c66 <_malloc_r+0xc2>
 8010c36:	1961      	adds	r1, r4, r5
 8010c38:	42a3      	cmp	r3, r4
 8010c3a:	6025      	str	r5, [r4, #0]
 8010c3c:	bf18      	it	ne
 8010c3e:	6059      	strne	r1, [r3, #4]
 8010c40:	6863      	ldr	r3, [r4, #4]
 8010c42:	bf08      	it	eq
 8010c44:	f8c8 1000 	streq.w	r1, [r8]
 8010c48:	5162      	str	r2, [r4, r5]
 8010c4a:	604b      	str	r3, [r1, #4]
 8010c4c:	4630      	mov	r0, r6
 8010c4e:	f000 f82f 	bl	8010cb0 <__malloc_unlock>
 8010c52:	f104 000b 	add.w	r0, r4, #11
 8010c56:	1d23      	adds	r3, r4, #4
 8010c58:	f020 0007 	bic.w	r0, r0, #7
 8010c5c:	1ac2      	subs	r2, r0, r3
 8010c5e:	bf1c      	itt	ne
 8010c60:	1a1b      	subne	r3, r3, r0
 8010c62:	50a3      	strne	r3, [r4, r2]
 8010c64:	e7af      	b.n	8010bc6 <_malloc_r+0x22>
 8010c66:	6862      	ldr	r2, [r4, #4]
 8010c68:	42a3      	cmp	r3, r4
 8010c6a:	bf0c      	ite	eq
 8010c6c:	f8c8 2000 	streq.w	r2, [r8]
 8010c70:	605a      	strne	r2, [r3, #4]
 8010c72:	e7eb      	b.n	8010c4c <_malloc_r+0xa8>
 8010c74:	4623      	mov	r3, r4
 8010c76:	6864      	ldr	r4, [r4, #4]
 8010c78:	e7ae      	b.n	8010bd8 <_malloc_r+0x34>
 8010c7a:	463c      	mov	r4, r7
 8010c7c:	687f      	ldr	r7, [r7, #4]
 8010c7e:	e7b6      	b.n	8010bee <_malloc_r+0x4a>
 8010c80:	461a      	mov	r2, r3
 8010c82:	685b      	ldr	r3, [r3, #4]
 8010c84:	42a3      	cmp	r3, r4
 8010c86:	d1fb      	bne.n	8010c80 <_malloc_r+0xdc>
 8010c88:	2300      	movs	r3, #0
 8010c8a:	6053      	str	r3, [r2, #4]
 8010c8c:	e7de      	b.n	8010c4c <_malloc_r+0xa8>
 8010c8e:	230c      	movs	r3, #12
 8010c90:	6033      	str	r3, [r6, #0]
 8010c92:	4630      	mov	r0, r6
 8010c94:	f000 f80c 	bl	8010cb0 <__malloc_unlock>
 8010c98:	e794      	b.n	8010bc4 <_malloc_r+0x20>
 8010c9a:	6005      	str	r5, [r0, #0]
 8010c9c:	e7d6      	b.n	8010c4c <_malloc_r+0xa8>
 8010c9e:	bf00      	nop
 8010ca0:	240005cc 	.word	0x240005cc

08010ca4 <__malloc_lock>:
 8010ca4:	4801      	ldr	r0, [pc, #4]	@ (8010cac <__malloc_lock+0x8>)
 8010ca6:	f7ff b914 	b.w	800fed2 <__retarget_lock_acquire_recursive>
 8010caa:	bf00      	nop
 8010cac:	240005c4 	.word	0x240005c4

08010cb0 <__malloc_unlock>:
 8010cb0:	4801      	ldr	r0, [pc, #4]	@ (8010cb8 <__malloc_unlock+0x8>)
 8010cb2:	f7ff b90f 	b.w	800fed4 <__retarget_lock_release_recursive>
 8010cb6:	bf00      	nop
 8010cb8:	240005c4 	.word	0x240005c4

08010cbc <_Balloc>:
 8010cbc:	b570      	push	{r4, r5, r6, lr}
 8010cbe:	69c6      	ldr	r6, [r0, #28]
 8010cc0:	4604      	mov	r4, r0
 8010cc2:	460d      	mov	r5, r1
 8010cc4:	b976      	cbnz	r6, 8010ce4 <_Balloc+0x28>
 8010cc6:	2010      	movs	r0, #16
 8010cc8:	f7ff ff42 	bl	8010b50 <malloc>
 8010ccc:	4602      	mov	r2, r0
 8010cce:	61e0      	str	r0, [r4, #28]
 8010cd0:	b920      	cbnz	r0, 8010cdc <_Balloc+0x20>
 8010cd2:	4b18      	ldr	r3, [pc, #96]	@ (8010d34 <_Balloc+0x78>)
 8010cd4:	4818      	ldr	r0, [pc, #96]	@ (8010d38 <_Balloc+0x7c>)
 8010cd6:	216b      	movs	r1, #107	@ 0x6b
 8010cd8:	f001 fc8e 	bl	80125f8 <__assert_func>
 8010cdc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010ce0:	6006      	str	r6, [r0, #0]
 8010ce2:	60c6      	str	r6, [r0, #12]
 8010ce4:	69e6      	ldr	r6, [r4, #28]
 8010ce6:	68f3      	ldr	r3, [r6, #12]
 8010ce8:	b183      	cbz	r3, 8010d0c <_Balloc+0x50>
 8010cea:	69e3      	ldr	r3, [r4, #28]
 8010cec:	68db      	ldr	r3, [r3, #12]
 8010cee:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8010cf2:	b9b8      	cbnz	r0, 8010d24 <_Balloc+0x68>
 8010cf4:	2101      	movs	r1, #1
 8010cf6:	fa01 f605 	lsl.w	r6, r1, r5
 8010cfa:	1d72      	adds	r2, r6, #5
 8010cfc:	0092      	lsls	r2, r2, #2
 8010cfe:	4620      	mov	r0, r4
 8010d00:	f001 fc98 	bl	8012634 <_calloc_r>
 8010d04:	b160      	cbz	r0, 8010d20 <_Balloc+0x64>
 8010d06:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8010d0a:	e00e      	b.n	8010d2a <_Balloc+0x6e>
 8010d0c:	2221      	movs	r2, #33	@ 0x21
 8010d0e:	2104      	movs	r1, #4
 8010d10:	4620      	mov	r0, r4
 8010d12:	f001 fc8f 	bl	8012634 <_calloc_r>
 8010d16:	69e3      	ldr	r3, [r4, #28]
 8010d18:	60f0      	str	r0, [r6, #12]
 8010d1a:	68db      	ldr	r3, [r3, #12]
 8010d1c:	2b00      	cmp	r3, #0
 8010d1e:	d1e4      	bne.n	8010cea <_Balloc+0x2e>
 8010d20:	2000      	movs	r0, #0
 8010d22:	bd70      	pop	{r4, r5, r6, pc}
 8010d24:	6802      	ldr	r2, [r0, #0]
 8010d26:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8010d2a:	2300      	movs	r3, #0
 8010d2c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010d30:	e7f7      	b.n	8010d22 <_Balloc+0x66>
 8010d32:	bf00      	nop
 8010d34:	08013c47 	.word	0x08013c47
 8010d38:	08013cc7 	.word	0x08013cc7

08010d3c <_Bfree>:
 8010d3c:	b570      	push	{r4, r5, r6, lr}
 8010d3e:	69c6      	ldr	r6, [r0, #28]
 8010d40:	4605      	mov	r5, r0
 8010d42:	460c      	mov	r4, r1
 8010d44:	b976      	cbnz	r6, 8010d64 <_Bfree+0x28>
 8010d46:	2010      	movs	r0, #16
 8010d48:	f7ff ff02 	bl	8010b50 <malloc>
 8010d4c:	4602      	mov	r2, r0
 8010d4e:	61e8      	str	r0, [r5, #28]
 8010d50:	b920      	cbnz	r0, 8010d5c <_Bfree+0x20>
 8010d52:	4b09      	ldr	r3, [pc, #36]	@ (8010d78 <_Bfree+0x3c>)
 8010d54:	4809      	ldr	r0, [pc, #36]	@ (8010d7c <_Bfree+0x40>)
 8010d56:	218f      	movs	r1, #143	@ 0x8f
 8010d58:	f001 fc4e 	bl	80125f8 <__assert_func>
 8010d5c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010d60:	6006      	str	r6, [r0, #0]
 8010d62:	60c6      	str	r6, [r0, #12]
 8010d64:	b13c      	cbz	r4, 8010d76 <_Bfree+0x3a>
 8010d66:	69eb      	ldr	r3, [r5, #28]
 8010d68:	6862      	ldr	r2, [r4, #4]
 8010d6a:	68db      	ldr	r3, [r3, #12]
 8010d6c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010d70:	6021      	str	r1, [r4, #0]
 8010d72:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8010d76:	bd70      	pop	{r4, r5, r6, pc}
 8010d78:	08013c47 	.word	0x08013c47
 8010d7c:	08013cc7 	.word	0x08013cc7

08010d80 <__multadd>:
 8010d80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010d84:	690d      	ldr	r5, [r1, #16]
 8010d86:	4607      	mov	r7, r0
 8010d88:	460c      	mov	r4, r1
 8010d8a:	461e      	mov	r6, r3
 8010d8c:	f101 0c14 	add.w	ip, r1, #20
 8010d90:	2000      	movs	r0, #0
 8010d92:	f8dc 3000 	ldr.w	r3, [ip]
 8010d96:	b299      	uxth	r1, r3
 8010d98:	fb02 6101 	mla	r1, r2, r1, r6
 8010d9c:	0c1e      	lsrs	r6, r3, #16
 8010d9e:	0c0b      	lsrs	r3, r1, #16
 8010da0:	fb02 3306 	mla	r3, r2, r6, r3
 8010da4:	b289      	uxth	r1, r1
 8010da6:	3001      	adds	r0, #1
 8010da8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8010dac:	4285      	cmp	r5, r0
 8010dae:	f84c 1b04 	str.w	r1, [ip], #4
 8010db2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8010db6:	dcec      	bgt.n	8010d92 <__multadd+0x12>
 8010db8:	b30e      	cbz	r6, 8010dfe <__multadd+0x7e>
 8010dba:	68a3      	ldr	r3, [r4, #8]
 8010dbc:	42ab      	cmp	r3, r5
 8010dbe:	dc19      	bgt.n	8010df4 <__multadd+0x74>
 8010dc0:	6861      	ldr	r1, [r4, #4]
 8010dc2:	4638      	mov	r0, r7
 8010dc4:	3101      	adds	r1, #1
 8010dc6:	f7ff ff79 	bl	8010cbc <_Balloc>
 8010dca:	4680      	mov	r8, r0
 8010dcc:	b928      	cbnz	r0, 8010dda <__multadd+0x5a>
 8010dce:	4602      	mov	r2, r0
 8010dd0:	4b0c      	ldr	r3, [pc, #48]	@ (8010e04 <__multadd+0x84>)
 8010dd2:	480d      	ldr	r0, [pc, #52]	@ (8010e08 <__multadd+0x88>)
 8010dd4:	21ba      	movs	r1, #186	@ 0xba
 8010dd6:	f001 fc0f 	bl	80125f8 <__assert_func>
 8010dda:	6922      	ldr	r2, [r4, #16]
 8010ddc:	3202      	adds	r2, #2
 8010dde:	f104 010c 	add.w	r1, r4, #12
 8010de2:	0092      	lsls	r2, r2, #2
 8010de4:	300c      	adds	r0, #12
 8010de6:	f7ff f876 	bl	800fed6 <memcpy>
 8010dea:	4621      	mov	r1, r4
 8010dec:	4638      	mov	r0, r7
 8010dee:	f7ff ffa5 	bl	8010d3c <_Bfree>
 8010df2:	4644      	mov	r4, r8
 8010df4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8010df8:	3501      	adds	r5, #1
 8010dfa:	615e      	str	r6, [r3, #20]
 8010dfc:	6125      	str	r5, [r4, #16]
 8010dfe:	4620      	mov	r0, r4
 8010e00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010e04:	08013cb6 	.word	0x08013cb6
 8010e08:	08013cc7 	.word	0x08013cc7

08010e0c <__s2b>:
 8010e0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010e10:	460c      	mov	r4, r1
 8010e12:	4615      	mov	r5, r2
 8010e14:	461f      	mov	r7, r3
 8010e16:	2209      	movs	r2, #9
 8010e18:	3308      	adds	r3, #8
 8010e1a:	4606      	mov	r6, r0
 8010e1c:	fb93 f3f2 	sdiv	r3, r3, r2
 8010e20:	2100      	movs	r1, #0
 8010e22:	2201      	movs	r2, #1
 8010e24:	429a      	cmp	r2, r3
 8010e26:	db09      	blt.n	8010e3c <__s2b+0x30>
 8010e28:	4630      	mov	r0, r6
 8010e2a:	f7ff ff47 	bl	8010cbc <_Balloc>
 8010e2e:	b940      	cbnz	r0, 8010e42 <__s2b+0x36>
 8010e30:	4602      	mov	r2, r0
 8010e32:	4b19      	ldr	r3, [pc, #100]	@ (8010e98 <__s2b+0x8c>)
 8010e34:	4819      	ldr	r0, [pc, #100]	@ (8010e9c <__s2b+0x90>)
 8010e36:	21d3      	movs	r1, #211	@ 0xd3
 8010e38:	f001 fbde 	bl	80125f8 <__assert_func>
 8010e3c:	0052      	lsls	r2, r2, #1
 8010e3e:	3101      	adds	r1, #1
 8010e40:	e7f0      	b.n	8010e24 <__s2b+0x18>
 8010e42:	9b08      	ldr	r3, [sp, #32]
 8010e44:	6143      	str	r3, [r0, #20]
 8010e46:	2d09      	cmp	r5, #9
 8010e48:	f04f 0301 	mov.w	r3, #1
 8010e4c:	6103      	str	r3, [r0, #16]
 8010e4e:	dd16      	ble.n	8010e7e <__s2b+0x72>
 8010e50:	f104 0909 	add.w	r9, r4, #9
 8010e54:	46c8      	mov	r8, r9
 8010e56:	442c      	add	r4, r5
 8010e58:	f818 3b01 	ldrb.w	r3, [r8], #1
 8010e5c:	4601      	mov	r1, r0
 8010e5e:	3b30      	subs	r3, #48	@ 0x30
 8010e60:	220a      	movs	r2, #10
 8010e62:	4630      	mov	r0, r6
 8010e64:	f7ff ff8c 	bl	8010d80 <__multadd>
 8010e68:	45a0      	cmp	r8, r4
 8010e6a:	d1f5      	bne.n	8010e58 <__s2b+0x4c>
 8010e6c:	f1a5 0408 	sub.w	r4, r5, #8
 8010e70:	444c      	add	r4, r9
 8010e72:	1b2d      	subs	r5, r5, r4
 8010e74:	1963      	adds	r3, r4, r5
 8010e76:	42bb      	cmp	r3, r7
 8010e78:	db04      	blt.n	8010e84 <__s2b+0x78>
 8010e7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010e7e:	340a      	adds	r4, #10
 8010e80:	2509      	movs	r5, #9
 8010e82:	e7f6      	b.n	8010e72 <__s2b+0x66>
 8010e84:	f814 3b01 	ldrb.w	r3, [r4], #1
 8010e88:	4601      	mov	r1, r0
 8010e8a:	3b30      	subs	r3, #48	@ 0x30
 8010e8c:	220a      	movs	r2, #10
 8010e8e:	4630      	mov	r0, r6
 8010e90:	f7ff ff76 	bl	8010d80 <__multadd>
 8010e94:	e7ee      	b.n	8010e74 <__s2b+0x68>
 8010e96:	bf00      	nop
 8010e98:	08013cb6 	.word	0x08013cb6
 8010e9c:	08013cc7 	.word	0x08013cc7

08010ea0 <__hi0bits>:
 8010ea0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8010ea4:	4603      	mov	r3, r0
 8010ea6:	bf36      	itet	cc
 8010ea8:	0403      	lslcc	r3, r0, #16
 8010eaa:	2000      	movcs	r0, #0
 8010eac:	2010      	movcc	r0, #16
 8010eae:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8010eb2:	bf3c      	itt	cc
 8010eb4:	021b      	lslcc	r3, r3, #8
 8010eb6:	3008      	addcc	r0, #8
 8010eb8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8010ebc:	bf3c      	itt	cc
 8010ebe:	011b      	lslcc	r3, r3, #4
 8010ec0:	3004      	addcc	r0, #4
 8010ec2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010ec6:	bf3c      	itt	cc
 8010ec8:	009b      	lslcc	r3, r3, #2
 8010eca:	3002      	addcc	r0, #2
 8010ecc:	2b00      	cmp	r3, #0
 8010ece:	db05      	blt.n	8010edc <__hi0bits+0x3c>
 8010ed0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8010ed4:	f100 0001 	add.w	r0, r0, #1
 8010ed8:	bf08      	it	eq
 8010eda:	2020      	moveq	r0, #32
 8010edc:	4770      	bx	lr

08010ede <__lo0bits>:
 8010ede:	6803      	ldr	r3, [r0, #0]
 8010ee0:	4602      	mov	r2, r0
 8010ee2:	f013 0007 	ands.w	r0, r3, #7
 8010ee6:	d00b      	beq.n	8010f00 <__lo0bits+0x22>
 8010ee8:	07d9      	lsls	r1, r3, #31
 8010eea:	d421      	bmi.n	8010f30 <__lo0bits+0x52>
 8010eec:	0798      	lsls	r0, r3, #30
 8010eee:	bf49      	itett	mi
 8010ef0:	085b      	lsrmi	r3, r3, #1
 8010ef2:	089b      	lsrpl	r3, r3, #2
 8010ef4:	2001      	movmi	r0, #1
 8010ef6:	6013      	strmi	r3, [r2, #0]
 8010ef8:	bf5c      	itt	pl
 8010efa:	6013      	strpl	r3, [r2, #0]
 8010efc:	2002      	movpl	r0, #2
 8010efe:	4770      	bx	lr
 8010f00:	b299      	uxth	r1, r3
 8010f02:	b909      	cbnz	r1, 8010f08 <__lo0bits+0x2a>
 8010f04:	0c1b      	lsrs	r3, r3, #16
 8010f06:	2010      	movs	r0, #16
 8010f08:	b2d9      	uxtb	r1, r3
 8010f0a:	b909      	cbnz	r1, 8010f10 <__lo0bits+0x32>
 8010f0c:	3008      	adds	r0, #8
 8010f0e:	0a1b      	lsrs	r3, r3, #8
 8010f10:	0719      	lsls	r1, r3, #28
 8010f12:	bf04      	itt	eq
 8010f14:	091b      	lsreq	r3, r3, #4
 8010f16:	3004      	addeq	r0, #4
 8010f18:	0799      	lsls	r1, r3, #30
 8010f1a:	bf04      	itt	eq
 8010f1c:	089b      	lsreq	r3, r3, #2
 8010f1e:	3002      	addeq	r0, #2
 8010f20:	07d9      	lsls	r1, r3, #31
 8010f22:	d403      	bmi.n	8010f2c <__lo0bits+0x4e>
 8010f24:	085b      	lsrs	r3, r3, #1
 8010f26:	f100 0001 	add.w	r0, r0, #1
 8010f2a:	d003      	beq.n	8010f34 <__lo0bits+0x56>
 8010f2c:	6013      	str	r3, [r2, #0]
 8010f2e:	4770      	bx	lr
 8010f30:	2000      	movs	r0, #0
 8010f32:	4770      	bx	lr
 8010f34:	2020      	movs	r0, #32
 8010f36:	4770      	bx	lr

08010f38 <__i2b>:
 8010f38:	b510      	push	{r4, lr}
 8010f3a:	460c      	mov	r4, r1
 8010f3c:	2101      	movs	r1, #1
 8010f3e:	f7ff febd 	bl	8010cbc <_Balloc>
 8010f42:	4602      	mov	r2, r0
 8010f44:	b928      	cbnz	r0, 8010f52 <__i2b+0x1a>
 8010f46:	4b05      	ldr	r3, [pc, #20]	@ (8010f5c <__i2b+0x24>)
 8010f48:	4805      	ldr	r0, [pc, #20]	@ (8010f60 <__i2b+0x28>)
 8010f4a:	f240 1145 	movw	r1, #325	@ 0x145
 8010f4e:	f001 fb53 	bl	80125f8 <__assert_func>
 8010f52:	2301      	movs	r3, #1
 8010f54:	6144      	str	r4, [r0, #20]
 8010f56:	6103      	str	r3, [r0, #16]
 8010f58:	bd10      	pop	{r4, pc}
 8010f5a:	bf00      	nop
 8010f5c:	08013cb6 	.word	0x08013cb6
 8010f60:	08013cc7 	.word	0x08013cc7

08010f64 <__multiply>:
 8010f64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010f68:	4614      	mov	r4, r2
 8010f6a:	690a      	ldr	r2, [r1, #16]
 8010f6c:	6923      	ldr	r3, [r4, #16]
 8010f6e:	429a      	cmp	r2, r3
 8010f70:	bfa8      	it	ge
 8010f72:	4623      	movge	r3, r4
 8010f74:	460f      	mov	r7, r1
 8010f76:	bfa4      	itt	ge
 8010f78:	460c      	movge	r4, r1
 8010f7a:	461f      	movge	r7, r3
 8010f7c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8010f80:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8010f84:	68a3      	ldr	r3, [r4, #8]
 8010f86:	6861      	ldr	r1, [r4, #4]
 8010f88:	eb0a 0609 	add.w	r6, sl, r9
 8010f8c:	42b3      	cmp	r3, r6
 8010f8e:	b085      	sub	sp, #20
 8010f90:	bfb8      	it	lt
 8010f92:	3101      	addlt	r1, #1
 8010f94:	f7ff fe92 	bl	8010cbc <_Balloc>
 8010f98:	b930      	cbnz	r0, 8010fa8 <__multiply+0x44>
 8010f9a:	4602      	mov	r2, r0
 8010f9c:	4b44      	ldr	r3, [pc, #272]	@ (80110b0 <__multiply+0x14c>)
 8010f9e:	4845      	ldr	r0, [pc, #276]	@ (80110b4 <__multiply+0x150>)
 8010fa0:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8010fa4:	f001 fb28 	bl	80125f8 <__assert_func>
 8010fa8:	f100 0514 	add.w	r5, r0, #20
 8010fac:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8010fb0:	462b      	mov	r3, r5
 8010fb2:	2200      	movs	r2, #0
 8010fb4:	4543      	cmp	r3, r8
 8010fb6:	d321      	bcc.n	8010ffc <__multiply+0x98>
 8010fb8:	f107 0114 	add.w	r1, r7, #20
 8010fbc:	f104 0214 	add.w	r2, r4, #20
 8010fc0:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8010fc4:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8010fc8:	9302      	str	r3, [sp, #8]
 8010fca:	1b13      	subs	r3, r2, r4
 8010fcc:	3b15      	subs	r3, #21
 8010fce:	f023 0303 	bic.w	r3, r3, #3
 8010fd2:	3304      	adds	r3, #4
 8010fd4:	f104 0715 	add.w	r7, r4, #21
 8010fd8:	42ba      	cmp	r2, r7
 8010fda:	bf38      	it	cc
 8010fdc:	2304      	movcc	r3, #4
 8010fde:	9301      	str	r3, [sp, #4]
 8010fe0:	9b02      	ldr	r3, [sp, #8]
 8010fe2:	9103      	str	r1, [sp, #12]
 8010fe4:	428b      	cmp	r3, r1
 8010fe6:	d80c      	bhi.n	8011002 <__multiply+0x9e>
 8010fe8:	2e00      	cmp	r6, #0
 8010fea:	dd03      	ble.n	8010ff4 <__multiply+0x90>
 8010fec:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8010ff0:	2b00      	cmp	r3, #0
 8010ff2:	d05b      	beq.n	80110ac <__multiply+0x148>
 8010ff4:	6106      	str	r6, [r0, #16]
 8010ff6:	b005      	add	sp, #20
 8010ff8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ffc:	f843 2b04 	str.w	r2, [r3], #4
 8011000:	e7d8      	b.n	8010fb4 <__multiply+0x50>
 8011002:	f8b1 a000 	ldrh.w	sl, [r1]
 8011006:	f1ba 0f00 	cmp.w	sl, #0
 801100a:	d024      	beq.n	8011056 <__multiply+0xf2>
 801100c:	f104 0e14 	add.w	lr, r4, #20
 8011010:	46a9      	mov	r9, r5
 8011012:	f04f 0c00 	mov.w	ip, #0
 8011016:	f85e 7b04 	ldr.w	r7, [lr], #4
 801101a:	f8d9 3000 	ldr.w	r3, [r9]
 801101e:	fa1f fb87 	uxth.w	fp, r7
 8011022:	b29b      	uxth	r3, r3
 8011024:	fb0a 330b 	mla	r3, sl, fp, r3
 8011028:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 801102c:	f8d9 7000 	ldr.w	r7, [r9]
 8011030:	4463      	add	r3, ip
 8011032:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8011036:	fb0a c70b 	mla	r7, sl, fp, ip
 801103a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 801103e:	b29b      	uxth	r3, r3
 8011040:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8011044:	4572      	cmp	r2, lr
 8011046:	f849 3b04 	str.w	r3, [r9], #4
 801104a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801104e:	d8e2      	bhi.n	8011016 <__multiply+0xb2>
 8011050:	9b01      	ldr	r3, [sp, #4]
 8011052:	f845 c003 	str.w	ip, [r5, r3]
 8011056:	9b03      	ldr	r3, [sp, #12]
 8011058:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 801105c:	3104      	adds	r1, #4
 801105e:	f1b9 0f00 	cmp.w	r9, #0
 8011062:	d021      	beq.n	80110a8 <__multiply+0x144>
 8011064:	682b      	ldr	r3, [r5, #0]
 8011066:	f104 0c14 	add.w	ip, r4, #20
 801106a:	46ae      	mov	lr, r5
 801106c:	f04f 0a00 	mov.w	sl, #0
 8011070:	f8bc b000 	ldrh.w	fp, [ip]
 8011074:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8011078:	fb09 770b 	mla	r7, r9, fp, r7
 801107c:	4457      	add	r7, sl
 801107e:	b29b      	uxth	r3, r3
 8011080:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8011084:	f84e 3b04 	str.w	r3, [lr], #4
 8011088:	f85c 3b04 	ldr.w	r3, [ip], #4
 801108c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8011090:	f8be 3000 	ldrh.w	r3, [lr]
 8011094:	fb09 330a 	mla	r3, r9, sl, r3
 8011098:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 801109c:	4562      	cmp	r2, ip
 801109e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80110a2:	d8e5      	bhi.n	8011070 <__multiply+0x10c>
 80110a4:	9f01      	ldr	r7, [sp, #4]
 80110a6:	51eb      	str	r3, [r5, r7]
 80110a8:	3504      	adds	r5, #4
 80110aa:	e799      	b.n	8010fe0 <__multiply+0x7c>
 80110ac:	3e01      	subs	r6, #1
 80110ae:	e79b      	b.n	8010fe8 <__multiply+0x84>
 80110b0:	08013cb6 	.word	0x08013cb6
 80110b4:	08013cc7 	.word	0x08013cc7

080110b8 <__pow5mult>:
 80110b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80110bc:	4615      	mov	r5, r2
 80110be:	f012 0203 	ands.w	r2, r2, #3
 80110c2:	4607      	mov	r7, r0
 80110c4:	460e      	mov	r6, r1
 80110c6:	d007      	beq.n	80110d8 <__pow5mult+0x20>
 80110c8:	4c25      	ldr	r4, [pc, #148]	@ (8011160 <__pow5mult+0xa8>)
 80110ca:	3a01      	subs	r2, #1
 80110cc:	2300      	movs	r3, #0
 80110ce:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80110d2:	f7ff fe55 	bl	8010d80 <__multadd>
 80110d6:	4606      	mov	r6, r0
 80110d8:	10ad      	asrs	r5, r5, #2
 80110da:	d03d      	beq.n	8011158 <__pow5mult+0xa0>
 80110dc:	69fc      	ldr	r4, [r7, #28]
 80110de:	b97c      	cbnz	r4, 8011100 <__pow5mult+0x48>
 80110e0:	2010      	movs	r0, #16
 80110e2:	f7ff fd35 	bl	8010b50 <malloc>
 80110e6:	4602      	mov	r2, r0
 80110e8:	61f8      	str	r0, [r7, #28]
 80110ea:	b928      	cbnz	r0, 80110f8 <__pow5mult+0x40>
 80110ec:	4b1d      	ldr	r3, [pc, #116]	@ (8011164 <__pow5mult+0xac>)
 80110ee:	481e      	ldr	r0, [pc, #120]	@ (8011168 <__pow5mult+0xb0>)
 80110f0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80110f4:	f001 fa80 	bl	80125f8 <__assert_func>
 80110f8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80110fc:	6004      	str	r4, [r0, #0]
 80110fe:	60c4      	str	r4, [r0, #12]
 8011100:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8011104:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8011108:	b94c      	cbnz	r4, 801111e <__pow5mult+0x66>
 801110a:	f240 2171 	movw	r1, #625	@ 0x271
 801110e:	4638      	mov	r0, r7
 8011110:	f7ff ff12 	bl	8010f38 <__i2b>
 8011114:	2300      	movs	r3, #0
 8011116:	f8c8 0008 	str.w	r0, [r8, #8]
 801111a:	4604      	mov	r4, r0
 801111c:	6003      	str	r3, [r0, #0]
 801111e:	f04f 0900 	mov.w	r9, #0
 8011122:	07eb      	lsls	r3, r5, #31
 8011124:	d50a      	bpl.n	801113c <__pow5mult+0x84>
 8011126:	4631      	mov	r1, r6
 8011128:	4622      	mov	r2, r4
 801112a:	4638      	mov	r0, r7
 801112c:	f7ff ff1a 	bl	8010f64 <__multiply>
 8011130:	4631      	mov	r1, r6
 8011132:	4680      	mov	r8, r0
 8011134:	4638      	mov	r0, r7
 8011136:	f7ff fe01 	bl	8010d3c <_Bfree>
 801113a:	4646      	mov	r6, r8
 801113c:	106d      	asrs	r5, r5, #1
 801113e:	d00b      	beq.n	8011158 <__pow5mult+0xa0>
 8011140:	6820      	ldr	r0, [r4, #0]
 8011142:	b938      	cbnz	r0, 8011154 <__pow5mult+0x9c>
 8011144:	4622      	mov	r2, r4
 8011146:	4621      	mov	r1, r4
 8011148:	4638      	mov	r0, r7
 801114a:	f7ff ff0b 	bl	8010f64 <__multiply>
 801114e:	6020      	str	r0, [r4, #0]
 8011150:	f8c0 9000 	str.w	r9, [r0]
 8011154:	4604      	mov	r4, r0
 8011156:	e7e4      	b.n	8011122 <__pow5mult+0x6a>
 8011158:	4630      	mov	r0, r6
 801115a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801115e:	bf00      	nop
 8011160:	08013d20 	.word	0x08013d20
 8011164:	08013c47 	.word	0x08013c47
 8011168:	08013cc7 	.word	0x08013cc7

0801116c <__lshift>:
 801116c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011170:	460c      	mov	r4, r1
 8011172:	6849      	ldr	r1, [r1, #4]
 8011174:	6923      	ldr	r3, [r4, #16]
 8011176:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801117a:	68a3      	ldr	r3, [r4, #8]
 801117c:	4607      	mov	r7, r0
 801117e:	4691      	mov	r9, r2
 8011180:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8011184:	f108 0601 	add.w	r6, r8, #1
 8011188:	42b3      	cmp	r3, r6
 801118a:	db0b      	blt.n	80111a4 <__lshift+0x38>
 801118c:	4638      	mov	r0, r7
 801118e:	f7ff fd95 	bl	8010cbc <_Balloc>
 8011192:	4605      	mov	r5, r0
 8011194:	b948      	cbnz	r0, 80111aa <__lshift+0x3e>
 8011196:	4602      	mov	r2, r0
 8011198:	4b28      	ldr	r3, [pc, #160]	@ (801123c <__lshift+0xd0>)
 801119a:	4829      	ldr	r0, [pc, #164]	@ (8011240 <__lshift+0xd4>)
 801119c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80111a0:	f001 fa2a 	bl	80125f8 <__assert_func>
 80111a4:	3101      	adds	r1, #1
 80111a6:	005b      	lsls	r3, r3, #1
 80111a8:	e7ee      	b.n	8011188 <__lshift+0x1c>
 80111aa:	2300      	movs	r3, #0
 80111ac:	f100 0114 	add.w	r1, r0, #20
 80111b0:	f100 0210 	add.w	r2, r0, #16
 80111b4:	4618      	mov	r0, r3
 80111b6:	4553      	cmp	r3, sl
 80111b8:	db33      	blt.n	8011222 <__lshift+0xb6>
 80111ba:	6920      	ldr	r0, [r4, #16]
 80111bc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80111c0:	f104 0314 	add.w	r3, r4, #20
 80111c4:	f019 091f 	ands.w	r9, r9, #31
 80111c8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80111cc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80111d0:	d02b      	beq.n	801122a <__lshift+0xbe>
 80111d2:	f1c9 0e20 	rsb	lr, r9, #32
 80111d6:	468a      	mov	sl, r1
 80111d8:	2200      	movs	r2, #0
 80111da:	6818      	ldr	r0, [r3, #0]
 80111dc:	fa00 f009 	lsl.w	r0, r0, r9
 80111e0:	4310      	orrs	r0, r2
 80111e2:	f84a 0b04 	str.w	r0, [sl], #4
 80111e6:	f853 2b04 	ldr.w	r2, [r3], #4
 80111ea:	459c      	cmp	ip, r3
 80111ec:	fa22 f20e 	lsr.w	r2, r2, lr
 80111f0:	d8f3      	bhi.n	80111da <__lshift+0x6e>
 80111f2:	ebac 0304 	sub.w	r3, ip, r4
 80111f6:	3b15      	subs	r3, #21
 80111f8:	f023 0303 	bic.w	r3, r3, #3
 80111fc:	3304      	adds	r3, #4
 80111fe:	f104 0015 	add.w	r0, r4, #21
 8011202:	4584      	cmp	ip, r0
 8011204:	bf38      	it	cc
 8011206:	2304      	movcc	r3, #4
 8011208:	50ca      	str	r2, [r1, r3]
 801120a:	b10a      	cbz	r2, 8011210 <__lshift+0xa4>
 801120c:	f108 0602 	add.w	r6, r8, #2
 8011210:	3e01      	subs	r6, #1
 8011212:	4638      	mov	r0, r7
 8011214:	612e      	str	r6, [r5, #16]
 8011216:	4621      	mov	r1, r4
 8011218:	f7ff fd90 	bl	8010d3c <_Bfree>
 801121c:	4628      	mov	r0, r5
 801121e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011222:	f842 0f04 	str.w	r0, [r2, #4]!
 8011226:	3301      	adds	r3, #1
 8011228:	e7c5      	b.n	80111b6 <__lshift+0x4a>
 801122a:	3904      	subs	r1, #4
 801122c:	f853 2b04 	ldr.w	r2, [r3], #4
 8011230:	f841 2f04 	str.w	r2, [r1, #4]!
 8011234:	459c      	cmp	ip, r3
 8011236:	d8f9      	bhi.n	801122c <__lshift+0xc0>
 8011238:	e7ea      	b.n	8011210 <__lshift+0xa4>
 801123a:	bf00      	nop
 801123c:	08013cb6 	.word	0x08013cb6
 8011240:	08013cc7 	.word	0x08013cc7

08011244 <__mcmp>:
 8011244:	690a      	ldr	r2, [r1, #16]
 8011246:	4603      	mov	r3, r0
 8011248:	6900      	ldr	r0, [r0, #16]
 801124a:	1a80      	subs	r0, r0, r2
 801124c:	b530      	push	{r4, r5, lr}
 801124e:	d10e      	bne.n	801126e <__mcmp+0x2a>
 8011250:	3314      	adds	r3, #20
 8011252:	3114      	adds	r1, #20
 8011254:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8011258:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 801125c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8011260:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8011264:	4295      	cmp	r5, r2
 8011266:	d003      	beq.n	8011270 <__mcmp+0x2c>
 8011268:	d205      	bcs.n	8011276 <__mcmp+0x32>
 801126a:	f04f 30ff 	mov.w	r0, #4294967295
 801126e:	bd30      	pop	{r4, r5, pc}
 8011270:	42a3      	cmp	r3, r4
 8011272:	d3f3      	bcc.n	801125c <__mcmp+0x18>
 8011274:	e7fb      	b.n	801126e <__mcmp+0x2a>
 8011276:	2001      	movs	r0, #1
 8011278:	e7f9      	b.n	801126e <__mcmp+0x2a>
	...

0801127c <__mdiff>:
 801127c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011280:	4689      	mov	r9, r1
 8011282:	4606      	mov	r6, r0
 8011284:	4611      	mov	r1, r2
 8011286:	4648      	mov	r0, r9
 8011288:	4614      	mov	r4, r2
 801128a:	f7ff ffdb 	bl	8011244 <__mcmp>
 801128e:	1e05      	subs	r5, r0, #0
 8011290:	d112      	bne.n	80112b8 <__mdiff+0x3c>
 8011292:	4629      	mov	r1, r5
 8011294:	4630      	mov	r0, r6
 8011296:	f7ff fd11 	bl	8010cbc <_Balloc>
 801129a:	4602      	mov	r2, r0
 801129c:	b928      	cbnz	r0, 80112aa <__mdiff+0x2e>
 801129e:	4b3f      	ldr	r3, [pc, #252]	@ (801139c <__mdiff+0x120>)
 80112a0:	f240 2137 	movw	r1, #567	@ 0x237
 80112a4:	483e      	ldr	r0, [pc, #248]	@ (80113a0 <__mdiff+0x124>)
 80112a6:	f001 f9a7 	bl	80125f8 <__assert_func>
 80112aa:	2301      	movs	r3, #1
 80112ac:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80112b0:	4610      	mov	r0, r2
 80112b2:	b003      	add	sp, #12
 80112b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80112b8:	bfbc      	itt	lt
 80112ba:	464b      	movlt	r3, r9
 80112bc:	46a1      	movlt	r9, r4
 80112be:	4630      	mov	r0, r6
 80112c0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80112c4:	bfba      	itte	lt
 80112c6:	461c      	movlt	r4, r3
 80112c8:	2501      	movlt	r5, #1
 80112ca:	2500      	movge	r5, #0
 80112cc:	f7ff fcf6 	bl	8010cbc <_Balloc>
 80112d0:	4602      	mov	r2, r0
 80112d2:	b918      	cbnz	r0, 80112dc <__mdiff+0x60>
 80112d4:	4b31      	ldr	r3, [pc, #196]	@ (801139c <__mdiff+0x120>)
 80112d6:	f240 2145 	movw	r1, #581	@ 0x245
 80112da:	e7e3      	b.n	80112a4 <__mdiff+0x28>
 80112dc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80112e0:	6926      	ldr	r6, [r4, #16]
 80112e2:	60c5      	str	r5, [r0, #12]
 80112e4:	f109 0310 	add.w	r3, r9, #16
 80112e8:	f109 0514 	add.w	r5, r9, #20
 80112ec:	f104 0e14 	add.w	lr, r4, #20
 80112f0:	f100 0b14 	add.w	fp, r0, #20
 80112f4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80112f8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80112fc:	9301      	str	r3, [sp, #4]
 80112fe:	46d9      	mov	r9, fp
 8011300:	f04f 0c00 	mov.w	ip, #0
 8011304:	9b01      	ldr	r3, [sp, #4]
 8011306:	f85e 0b04 	ldr.w	r0, [lr], #4
 801130a:	f853 af04 	ldr.w	sl, [r3, #4]!
 801130e:	9301      	str	r3, [sp, #4]
 8011310:	fa1f f38a 	uxth.w	r3, sl
 8011314:	4619      	mov	r1, r3
 8011316:	b283      	uxth	r3, r0
 8011318:	1acb      	subs	r3, r1, r3
 801131a:	0c00      	lsrs	r0, r0, #16
 801131c:	4463      	add	r3, ip
 801131e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8011322:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8011326:	b29b      	uxth	r3, r3
 8011328:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 801132c:	4576      	cmp	r6, lr
 801132e:	f849 3b04 	str.w	r3, [r9], #4
 8011332:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8011336:	d8e5      	bhi.n	8011304 <__mdiff+0x88>
 8011338:	1b33      	subs	r3, r6, r4
 801133a:	3b15      	subs	r3, #21
 801133c:	f023 0303 	bic.w	r3, r3, #3
 8011340:	3415      	adds	r4, #21
 8011342:	3304      	adds	r3, #4
 8011344:	42a6      	cmp	r6, r4
 8011346:	bf38      	it	cc
 8011348:	2304      	movcc	r3, #4
 801134a:	441d      	add	r5, r3
 801134c:	445b      	add	r3, fp
 801134e:	461e      	mov	r6, r3
 8011350:	462c      	mov	r4, r5
 8011352:	4544      	cmp	r4, r8
 8011354:	d30e      	bcc.n	8011374 <__mdiff+0xf8>
 8011356:	f108 0103 	add.w	r1, r8, #3
 801135a:	1b49      	subs	r1, r1, r5
 801135c:	f021 0103 	bic.w	r1, r1, #3
 8011360:	3d03      	subs	r5, #3
 8011362:	45a8      	cmp	r8, r5
 8011364:	bf38      	it	cc
 8011366:	2100      	movcc	r1, #0
 8011368:	440b      	add	r3, r1
 801136a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801136e:	b191      	cbz	r1, 8011396 <__mdiff+0x11a>
 8011370:	6117      	str	r7, [r2, #16]
 8011372:	e79d      	b.n	80112b0 <__mdiff+0x34>
 8011374:	f854 1b04 	ldr.w	r1, [r4], #4
 8011378:	46e6      	mov	lr, ip
 801137a:	0c08      	lsrs	r0, r1, #16
 801137c:	fa1c fc81 	uxtah	ip, ip, r1
 8011380:	4471      	add	r1, lr
 8011382:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8011386:	b289      	uxth	r1, r1
 8011388:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 801138c:	f846 1b04 	str.w	r1, [r6], #4
 8011390:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8011394:	e7dd      	b.n	8011352 <__mdiff+0xd6>
 8011396:	3f01      	subs	r7, #1
 8011398:	e7e7      	b.n	801136a <__mdiff+0xee>
 801139a:	bf00      	nop
 801139c:	08013cb6 	.word	0x08013cb6
 80113a0:	08013cc7 	.word	0x08013cc7

080113a4 <__ulp>:
 80113a4:	b082      	sub	sp, #8
 80113a6:	ed8d 0b00 	vstr	d0, [sp]
 80113aa:	9a01      	ldr	r2, [sp, #4]
 80113ac:	4b0f      	ldr	r3, [pc, #60]	@ (80113ec <__ulp+0x48>)
 80113ae:	4013      	ands	r3, r2
 80113b0:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 80113b4:	2b00      	cmp	r3, #0
 80113b6:	dc08      	bgt.n	80113ca <__ulp+0x26>
 80113b8:	425b      	negs	r3, r3
 80113ba:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80113be:	ea4f 5223 	mov.w	r2, r3, asr #20
 80113c2:	da04      	bge.n	80113ce <__ulp+0x2a>
 80113c4:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80113c8:	4113      	asrs	r3, r2
 80113ca:	2200      	movs	r2, #0
 80113cc:	e008      	b.n	80113e0 <__ulp+0x3c>
 80113ce:	f1a2 0314 	sub.w	r3, r2, #20
 80113d2:	2b1e      	cmp	r3, #30
 80113d4:	bfda      	itte	le
 80113d6:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 80113da:	40da      	lsrle	r2, r3
 80113dc:	2201      	movgt	r2, #1
 80113de:	2300      	movs	r3, #0
 80113e0:	4619      	mov	r1, r3
 80113e2:	4610      	mov	r0, r2
 80113e4:	ec41 0b10 	vmov	d0, r0, r1
 80113e8:	b002      	add	sp, #8
 80113ea:	4770      	bx	lr
 80113ec:	7ff00000 	.word	0x7ff00000

080113f0 <__b2d>:
 80113f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80113f4:	6906      	ldr	r6, [r0, #16]
 80113f6:	f100 0814 	add.w	r8, r0, #20
 80113fa:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80113fe:	1f37      	subs	r7, r6, #4
 8011400:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8011404:	4610      	mov	r0, r2
 8011406:	f7ff fd4b 	bl	8010ea0 <__hi0bits>
 801140a:	f1c0 0320 	rsb	r3, r0, #32
 801140e:	280a      	cmp	r0, #10
 8011410:	600b      	str	r3, [r1, #0]
 8011412:	491b      	ldr	r1, [pc, #108]	@ (8011480 <__b2d+0x90>)
 8011414:	dc15      	bgt.n	8011442 <__b2d+0x52>
 8011416:	f1c0 0c0b 	rsb	ip, r0, #11
 801141a:	fa22 f30c 	lsr.w	r3, r2, ip
 801141e:	45b8      	cmp	r8, r7
 8011420:	ea43 0501 	orr.w	r5, r3, r1
 8011424:	bf34      	ite	cc
 8011426:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801142a:	2300      	movcs	r3, #0
 801142c:	3015      	adds	r0, #21
 801142e:	fa02 f000 	lsl.w	r0, r2, r0
 8011432:	fa23 f30c 	lsr.w	r3, r3, ip
 8011436:	4303      	orrs	r3, r0
 8011438:	461c      	mov	r4, r3
 801143a:	ec45 4b10 	vmov	d0, r4, r5
 801143e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011442:	45b8      	cmp	r8, r7
 8011444:	bf3a      	itte	cc
 8011446:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801144a:	f1a6 0708 	subcc.w	r7, r6, #8
 801144e:	2300      	movcs	r3, #0
 8011450:	380b      	subs	r0, #11
 8011452:	d012      	beq.n	801147a <__b2d+0x8a>
 8011454:	f1c0 0120 	rsb	r1, r0, #32
 8011458:	fa23 f401 	lsr.w	r4, r3, r1
 801145c:	4082      	lsls	r2, r0
 801145e:	4322      	orrs	r2, r4
 8011460:	4547      	cmp	r7, r8
 8011462:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8011466:	bf8c      	ite	hi
 8011468:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 801146c:	2200      	movls	r2, #0
 801146e:	4083      	lsls	r3, r0
 8011470:	40ca      	lsrs	r2, r1
 8011472:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8011476:	4313      	orrs	r3, r2
 8011478:	e7de      	b.n	8011438 <__b2d+0x48>
 801147a:	ea42 0501 	orr.w	r5, r2, r1
 801147e:	e7db      	b.n	8011438 <__b2d+0x48>
 8011480:	3ff00000 	.word	0x3ff00000

08011484 <__d2b>:
 8011484:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011488:	460f      	mov	r7, r1
 801148a:	2101      	movs	r1, #1
 801148c:	ec59 8b10 	vmov	r8, r9, d0
 8011490:	4616      	mov	r6, r2
 8011492:	f7ff fc13 	bl	8010cbc <_Balloc>
 8011496:	4604      	mov	r4, r0
 8011498:	b930      	cbnz	r0, 80114a8 <__d2b+0x24>
 801149a:	4602      	mov	r2, r0
 801149c:	4b23      	ldr	r3, [pc, #140]	@ (801152c <__d2b+0xa8>)
 801149e:	4824      	ldr	r0, [pc, #144]	@ (8011530 <__d2b+0xac>)
 80114a0:	f240 310f 	movw	r1, #783	@ 0x30f
 80114a4:	f001 f8a8 	bl	80125f8 <__assert_func>
 80114a8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80114ac:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80114b0:	b10d      	cbz	r5, 80114b6 <__d2b+0x32>
 80114b2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80114b6:	9301      	str	r3, [sp, #4]
 80114b8:	f1b8 0300 	subs.w	r3, r8, #0
 80114bc:	d023      	beq.n	8011506 <__d2b+0x82>
 80114be:	4668      	mov	r0, sp
 80114c0:	9300      	str	r3, [sp, #0]
 80114c2:	f7ff fd0c 	bl	8010ede <__lo0bits>
 80114c6:	e9dd 1200 	ldrd	r1, r2, [sp]
 80114ca:	b1d0      	cbz	r0, 8011502 <__d2b+0x7e>
 80114cc:	f1c0 0320 	rsb	r3, r0, #32
 80114d0:	fa02 f303 	lsl.w	r3, r2, r3
 80114d4:	430b      	orrs	r3, r1
 80114d6:	40c2      	lsrs	r2, r0
 80114d8:	6163      	str	r3, [r4, #20]
 80114da:	9201      	str	r2, [sp, #4]
 80114dc:	9b01      	ldr	r3, [sp, #4]
 80114de:	61a3      	str	r3, [r4, #24]
 80114e0:	2b00      	cmp	r3, #0
 80114e2:	bf0c      	ite	eq
 80114e4:	2201      	moveq	r2, #1
 80114e6:	2202      	movne	r2, #2
 80114e8:	6122      	str	r2, [r4, #16]
 80114ea:	b1a5      	cbz	r5, 8011516 <__d2b+0x92>
 80114ec:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80114f0:	4405      	add	r5, r0
 80114f2:	603d      	str	r5, [r7, #0]
 80114f4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80114f8:	6030      	str	r0, [r6, #0]
 80114fa:	4620      	mov	r0, r4
 80114fc:	b003      	add	sp, #12
 80114fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011502:	6161      	str	r1, [r4, #20]
 8011504:	e7ea      	b.n	80114dc <__d2b+0x58>
 8011506:	a801      	add	r0, sp, #4
 8011508:	f7ff fce9 	bl	8010ede <__lo0bits>
 801150c:	9b01      	ldr	r3, [sp, #4]
 801150e:	6163      	str	r3, [r4, #20]
 8011510:	3020      	adds	r0, #32
 8011512:	2201      	movs	r2, #1
 8011514:	e7e8      	b.n	80114e8 <__d2b+0x64>
 8011516:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801151a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801151e:	6038      	str	r0, [r7, #0]
 8011520:	6918      	ldr	r0, [r3, #16]
 8011522:	f7ff fcbd 	bl	8010ea0 <__hi0bits>
 8011526:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801152a:	e7e5      	b.n	80114f8 <__d2b+0x74>
 801152c:	08013cb6 	.word	0x08013cb6
 8011530:	08013cc7 	.word	0x08013cc7

08011534 <__ratio>:
 8011534:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011538:	4688      	mov	r8, r1
 801153a:	4669      	mov	r1, sp
 801153c:	4681      	mov	r9, r0
 801153e:	f7ff ff57 	bl	80113f0 <__b2d>
 8011542:	a901      	add	r1, sp, #4
 8011544:	4640      	mov	r0, r8
 8011546:	ec55 4b10 	vmov	r4, r5, d0
 801154a:	f7ff ff51 	bl	80113f0 <__b2d>
 801154e:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8011552:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8011556:	1ad2      	subs	r2, r2, r3
 8011558:	e9dd 3100 	ldrd	r3, r1, [sp]
 801155c:	1a5b      	subs	r3, r3, r1
 801155e:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 8011562:	ec57 6b10 	vmov	r6, r7, d0
 8011566:	2b00      	cmp	r3, #0
 8011568:	bfd6      	itet	le
 801156a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801156e:	462a      	movgt	r2, r5
 8011570:	463a      	movle	r2, r7
 8011572:	46ab      	mov	fp, r5
 8011574:	46a2      	mov	sl, r4
 8011576:	bfce      	itee	gt
 8011578:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 801157c:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 8011580:	ee00 3a90 	vmovle	s1, r3
 8011584:	ec4b ab17 	vmov	d7, sl, fp
 8011588:	ee87 0b00 	vdiv.f64	d0, d7, d0
 801158c:	b003      	add	sp, #12
 801158e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011592 <__copybits>:
 8011592:	3901      	subs	r1, #1
 8011594:	b570      	push	{r4, r5, r6, lr}
 8011596:	1149      	asrs	r1, r1, #5
 8011598:	6914      	ldr	r4, [r2, #16]
 801159a:	3101      	adds	r1, #1
 801159c:	f102 0314 	add.w	r3, r2, #20
 80115a0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80115a4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80115a8:	1f05      	subs	r5, r0, #4
 80115aa:	42a3      	cmp	r3, r4
 80115ac:	d30c      	bcc.n	80115c8 <__copybits+0x36>
 80115ae:	1aa3      	subs	r3, r4, r2
 80115b0:	3b11      	subs	r3, #17
 80115b2:	f023 0303 	bic.w	r3, r3, #3
 80115b6:	3211      	adds	r2, #17
 80115b8:	42a2      	cmp	r2, r4
 80115ba:	bf88      	it	hi
 80115bc:	2300      	movhi	r3, #0
 80115be:	4418      	add	r0, r3
 80115c0:	2300      	movs	r3, #0
 80115c2:	4288      	cmp	r0, r1
 80115c4:	d305      	bcc.n	80115d2 <__copybits+0x40>
 80115c6:	bd70      	pop	{r4, r5, r6, pc}
 80115c8:	f853 6b04 	ldr.w	r6, [r3], #4
 80115cc:	f845 6f04 	str.w	r6, [r5, #4]!
 80115d0:	e7eb      	b.n	80115aa <__copybits+0x18>
 80115d2:	f840 3b04 	str.w	r3, [r0], #4
 80115d6:	e7f4      	b.n	80115c2 <__copybits+0x30>

080115d8 <__any_on>:
 80115d8:	f100 0214 	add.w	r2, r0, #20
 80115dc:	6900      	ldr	r0, [r0, #16]
 80115de:	114b      	asrs	r3, r1, #5
 80115e0:	4298      	cmp	r0, r3
 80115e2:	b510      	push	{r4, lr}
 80115e4:	db11      	blt.n	801160a <__any_on+0x32>
 80115e6:	dd0a      	ble.n	80115fe <__any_on+0x26>
 80115e8:	f011 011f 	ands.w	r1, r1, #31
 80115ec:	d007      	beq.n	80115fe <__any_on+0x26>
 80115ee:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80115f2:	fa24 f001 	lsr.w	r0, r4, r1
 80115f6:	fa00 f101 	lsl.w	r1, r0, r1
 80115fa:	428c      	cmp	r4, r1
 80115fc:	d10b      	bne.n	8011616 <__any_on+0x3e>
 80115fe:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8011602:	4293      	cmp	r3, r2
 8011604:	d803      	bhi.n	801160e <__any_on+0x36>
 8011606:	2000      	movs	r0, #0
 8011608:	bd10      	pop	{r4, pc}
 801160a:	4603      	mov	r3, r0
 801160c:	e7f7      	b.n	80115fe <__any_on+0x26>
 801160e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8011612:	2900      	cmp	r1, #0
 8011614:	d0f5      	beq.n	8011602 <__any_on+0x2a>
 8011616:	2001      	movs	r0, #1
 8011618:	e7f6      	b.n	8011608 <__any_on+0x30>

0801161a <sulp>:
 801161a:	b570      	push	{r4, r5, r6, lr}
 801161c:	4604      	mov	r4, r0
 801161e:	460d      	mov	r5, r1
 8011620:	4616      	mov	r6, r2
 8011622:	ec45 4b10 	vmov	d0, r4, r5
 8011626:	f7ff febd 	bl	80113a4 <__ulp>
 801162a:	b17e      	cbz	r6, 801164c <sulp+0x32>
 801162c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8011630:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8011634:	2b00      	cmp	r3, #0
 8011636:	dd09      	ble.n	801164c <sulp+0x32>
 8011638:	051b      	lsls	r3, r3, #20
 801163a:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 801163e:	2000      	movs	r0, #0
 8011640:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 8011644:	ec41 0b17 	vmov	d7, r0, r1
 8011648:	ee20 0b07 	vmul.f64	d0, d0, d7
 801164c:	bd70      	pop	{r4, r5, r6, pc}
	...

08011650 <_strtod_l>:
 8011650:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011654:	ed2d 8b0a 	vpush	{d8-d12}
 8011658:	b097      	sub	sp, #92	@ 0x5c
 801165a:	4688      	mov	r8, r1
 801165c:	920e      	str	r2, [sp, #56]	@ 0x38
 801165e:	2200      	movs	r2, #0
 8011660:	9212      	str	r2, [sp, #72]	@ 0x48
 8011662:	9005      	str	r0, [sp, #20]
 8011664:	f04f 0a00 	mov.w	sl, #0
 8011668:	f04f 0b00 	mov.w	fp, #0
 801166c:	460a      	mov	r2, r1
 801166e:	9211      	str	r2, [sp, #68]	@ 0x44
 8011670:	7811      	ldrb	r1, [r2, #0]
 8011672:	292b      	cmp	r1, #43	@ 0x2b
 8011674:	d04c      	beq.n	8011710 <_strtod_l+0xc0>
 8011676:	d839      	bhi.n	80116ec <_strtod_l+0x9c>
 8011678:	290d      	cmp	r1, #13
 801167a:	d833      	bhi.n	80116e4 <_strtod_l+0x94>
 801167c:	2908      	cmp	r1, #8
 801167e:	d833      	bhi.n	80116e8 <_strtod_l+0x98>
 8011680:	2900      	cmp	r1, #0
 8011682:	d03c      	beq.n	80116fe <_strtod_l+0xae>
 8011684:	2200      	movs	r2, #0
 8011686:	9208      	str	r2, [sp, #32]
 8011688:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 801168a:	782a      	ldrb	r2, [r5, #0]
 801168c:	2a30      	cmp	r2, #48	@ 0x30
 801168e:	f040 80b5 	bne.w	80117fc <_strtod_l+0x1ac>
 8011692:	786a      	ldrb	r2, [r5, #1]
 8011694:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8011698:	2a58      	cmp	r2, #88	@ 0x58
 801169a:	d170      	bne.n	801177e <_strtod_l+0x12e>
 801169c:	9302      	str	r3, [sp, #8]
 801169e:	9b08      	ldr	r3, [sp, #32]
 80116a0:	9301      	str	r3, [sp, #4]
 80116a2:	ab12      	add	r3, sp, #72	@ 0x48
 80116a4:	9300      	str	r3, [sp, #0]
 80116a6:	4a8b      	ldr	r2, [pc, #556]	@ (80118d4 <_strtod_l+0x284>)
 80116a8:	9805      	ldr	r0, [sp, #20]
 80116aa:	ab13      	add	r3, sp, #76	@ 0x4c
 80116ac:	a911      	add	r1, sp, #68	@ 0x44
 80116ae:	f001 f83d 	bl	801272c <__gethex>
 80116b2:	f010 060f 	ands.w	r6, r0, #15
 80116b6:	4604      	mov	r4, r0
 80116b8:	d005      	beq.n	80116c6 <_strtod_l+0x76>
 80116ba:	2e06      	cmp	r6, #6
 80116bc:	d12a      	bne.n	8011714 <_strtod_l+0xc4>
 80116be:	3501      	adds	r5, #1
 80116c0:	2300      	movs	r3, #0
 80116c2:	9511      	str	r5, [sp, #68]	@ 0x44
 80116c4:	9308      	str	r3, [sp, #32]
 80116c6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80116c8:	2b00      	cmp	r3, #0
 80116ca:	f040 852f 	bne.w	801212c <_strtod_l+0xadc>
 80116ce:	9b08      	ldr	r3, [sp, #32]
 80116d0:	ec4b ab10 	vmov	d0, sl, fp
 80116d4:	b1cb      	cbz	r3, 801170a <_strtod_l+0xba>
 80116d6:	eeb1 0b40 	vneg.f64	d0, d0
 80116da:	b017      	add	sp, #92	@ 0x5c
 80116dc:	ecbd 8b0a 	vpop	{d8-d12}
 80116e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80116e4:	2920      	cmp	r1, #32
 80116e6:	d1cd      	bne.n	8011684 <_strtod_l+0x34>
 80116e8:	3201      	adds	r2, #1
 80116ea:	e7c0      	b.n	801166e <_strtod_l+0x1e>
 80116ec:	292d      	cmp	r1, #45	@ 0x2d
 80116ee:	d1c9      	bne.n	8011684 <_strtod_l+0x34>
 80116f0:	2101      	movs	r1, #1
 80116f2:	9108      	str	r1, [sp, #32]
 80116f4:	1c51      	adds	r1, r2, #1
 80116f6:	9111      	str	r1, [sp, #68]	@ 0x44
 80116f8:	7852      	ldrb	r2, [r2, #1]
 80116fa:	2a00      	cmp	r2, #0
 80116fc:	d1c4      	bne.n	8011688 <_strtod_l+0x38>
 80116fe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011700:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 8011704:	2b00      	cmp	r3, #0
 8011706:	f040 850f 	bne.w	8012128 <_strtod_l+0xad8>
 801170a:	ec4b ab10 	vmov	d0, sl, fp
 801170e:	e7e4      	b.n	80116da <_strtod_l+0x8a>
 8011710:	2100      	movs	r1, #0
 8011712:	e7ee      	b.n	80116f2 <_strtod_l+0xa2>
 8011714:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8011716:	b13a      	cbz	r2, 8011728 <_strtod_l+0xd8>
 8011718:	2135      	movs	r1, #53	@ 0x35
 801171a:	a814      	add	r0, sp, #80	@ 0x50
 801171c:	f7ff ff39 	bl	8011592 <__copybits>
 8011720:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8011722:	9805      	ldr	r0, [sp, #20]
 8011724:	f7ff fb0a 	bl	8010d3c <_Bfree>
 8011728:	1e73      	subs	r3, r6, #1
 801172a:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801172c:	2b04      	cmp	r3, #4
 801172e:	d806      	bhi.n	801173e <_strtod_l+0xee>
 8011730:	e8df f003 	tbb	[pc, r3]
 8011734:	201d0314 	.word	0x201d0314
 8011738:	14          	.byte	0x14
 8011739:	00          	.byte	0x00
 801173a:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	@ 0x50
 801173e:	05e3      	lsls	r3, r4, #23
 8011740:	bf48      	it	mi
 8011742:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8011746:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801174a:	0d1b      	lsrs	r3, r3, #20
 801174c:	051b      	lsls	r3, r3, #20
 801174e:	2b00      	cmp	r3, #0
 8011750:	d1b9      	bne.n	80116c6 <_strtod_l+0x76>
 8011752:	f7fe fb93 	bl	800fe7c <__errno>
 8011756:	2322      	movs	r3, #34	@ 0x22
 8011758:	6003      	str	r3, [r0, #0]
 801175a:	e7b4      	b.n	80116c6 <_strtod_l+0x76>
 801175c:	e9dd a314 	ldrd	sl, r3, [sp, #80]	@ 0x50
 8011760:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8011764:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8011768:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801176c:	e7e7      	b.n	801173e <_strtod_l+0xee>
 801176e:	f8df b16c 	ldr.w	fp, [pc, #364]	@ 80118dc <_strtod_l+0x28c>
 8011772:	e7e4      	b.n	801173e <_strtod_l+0xee>
 8011774:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8011778:	f04f 3aff 	mov.w	sl, #4294967295
 801177c:	e7df      	b.n	801173e <_strtod_l+0xee>
 801177e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8011780:	1c5a      	adds	r2, r3, #1
 8011782:	9211      	str	r2, [sp, #68]	@ 0x44
 8011784:	785b      	ldrb	r3, [r3, #1]
 8011786:	2b30      	cmp	r3, #48	@ 0x30
 8011788:	d0f9      	beq.n	801177e <_strtod_l+0x12e>
 801178a:	2b00      	cmp	r3, #0
 801178c:	d09b      	beq.n	80116c6 <_strtod_l+0x76>
 801178e:	2301      	movs	r3, #1
 8011790:	2600      	movs	r6, #0
 8011792:	9307      	str	r3, [sp, #28]
 8011794:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8011796:	930a      	str	r3, [sp, #40]	@ 0x28
 8011798:	46b1      	mov	r9, r6
 801179a:	4635      	mov	r5, r6
 801179c:	220a      	movs	r2, #10
 801179e:	9811      	ldr	r0, [sp, #68]	@ 0x44
 80117a0:	7804      	ldrb	r4, [r0, #0]
 80117a2:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 80117a6:	b2d9      	uxtb	r1, r3
 80117a8:	2909      	cmp	r1, #9
 80117aa:	d929      	bls.n	8011800 <_strtod_l+0x1b0>
 80117ac:	494a      	ldr	r1, [pc, #296]	@ (80118d8 <_strtod_l+0x288>)
 80117ae:	2201      	movs	r2, #1
 80117b0:	f7fe fb07 	bl	800fdc2 <strncmp>
 80117b4:	b378      	cbz	r0, 8011816 <_strtod_l+0x1c6>
 80117b6:	2000      	movs	r0, #0
 80117b8:	4622      	mov	r2, r4
 80117ba:	462b      	mov	r3, r5
 80117bc:	4607      	mov	r7, r0
 80117be:	9006      	str	r0, [sp, #24]
 80117c0:	2a65      	cmp	r2, #101	@ 0x65
 80117c2:	d001      	beq.n	80117c8 <_strtod_l+0x178>
 80117c4:	2a45      	cmp	r2, #69	@ 0x45
 80117c6:	d117      	bne.n	80117f8 <_strtod_l+0x1a8>
 80117c8:	b91b      	cbnz	r3, 80117d2 <_strtod_l+0x182>
 80117ca:	9b07      	ldr	r3, [sp, #28]
 80117cc:	4303      	orrs	r3, r0
 80117ce:	d096      	beq.n	80116fe <_strtod_l+0xae>
 80117d0:	2300      	movs	r3, #0
 80117d2:	f8dd 8044 	ldr.w	r8, [sp, #68]	@ 0x44
 80117d6:	f108 0201 	add.w	r2, r8, #1
 80117da:	9211      	str	r2, [sp, #68]	@ 0x44
 80117dc:	f898 2001 	ldrb.w	r2, [r8, #1]
 80117e0:	2a2b      	cmp	r2, #43	@ 0x2b
 80117e2:	d06b      	beq.n	80118bc <_strtod_l+0x26c>
 80117e4:	2a2d      	cmp	r2, #45	@ 0x2d
 80117e6:	d071      	beq.n	80118cc <_strtod_l+0x27c>
 80117e8:	f04f 0e00 	mov.w	lr, #0
 80117ec:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 80117f0:	2c09      	cmp	r4, #9
 80117f2:	d979      	bls.n	80118e8 <_strtod_l+0x298>
 80117f4:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 80117f8:	2400      	movs	r4, #0
 80117fa:	e094      	b.n	8011926 <_strtod_l+0x2d6>
 80117fc:	2300      	movs	r3, #0
 80117fe:	e7c7      	b.n	8011790 <_strtod_l+0x140>
 8011800:	2d08      	cmp	r5, #8
 8011802:	f100 0001 	add.w	r0, r0, #1
 8011806:	bfd4      	ite	le
 8011808:	fb02 3909 	mlale	r9, r2, r9, r3
 801180c:	fb02 3606 	mlagt	r6, r2, r6, r3
 8011810:	3501      	adds	r5, #1
 8011812:	9011      	str	r0, [sp, #68]	@ 0x44
 8011814:	e7c3      	b.n	801179e <_strtod_l+0x14e>
 8011816:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8011818:	1c5a      	adds	r2, r3, #1
 801181a:	9211      	str	r2, [sp, #68]	@ 0x44
 801181c:	785a      	ldrb	r2, [r3, #1]
 801181e:	b375      	cbz	r5, 801187e <_strtod_l+0x22e>
 8011820:	4607      	mov	r7, r0
 8011822:	462b      	mov	r3, r5
 8011824:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8011828:	2909      	cmp	r1, #9
 801182a:	d913      	bls.n	8011854 <_strtod_l+0x204>
 801182c:	2101      	movs	r1, #1
 801182e:	9106      	str	r1, [sp, #24]
 8011830:	e7c6      	b.n	80117c0 <_strtod_l+0x170>
 8011832:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8011834:	1c5a      	adds	r2, r3, #1
 8011836:	9211      	str	r2, [sp, #68]	@ 0x44
 8011838:	785a      	ldrb	r2, [r3, #1]
 801183a:	3001      	adds	r0, #1
 801183c:	2a30      	cmp	r2, #48	@ 0x30
 801183e:	d0f8      	beq.n	8011832 <_strtod_l+0x1e2>
 8011840:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8011844:	2b08      	cmp	r3, #8
 8011846:	f200 8476 	bhi.w	8012136 <_strtod_l+0xae6>
 801184a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801184c:	930a      	str	r3, [sp, #40]	@ 0x28
 801184e:	4607      	mov	r7, r0
 8011850:	2000      	movs	r0, #0
 8011852:	4603      	mov	r3, r0
 8011854:	3a30      	subs	r2, #48	@ 0x30
 8011856:	f100 0101 	add.w	r1, r0, #1
 801185a:	d023      	beq.n	80118a4 <_strtod_l+0x254>
 801185c:	440f      	add	r7, r1
 801185e:	eb00 0c03 	add.w	ip, r0, r3
 8011862:	4619      	mov	r1, r3
 8011864:	240a      	movs	r4, #10
 8011866:	4561      	cmp	r1, ip
 8011868:	d10b      	bne.n	8011882 <_strtod_l+0x232>
 801186a:	1c5c      	adds	r4, r3, #1
 801186c:	4403      	add	r3, r0
 801186e:	2b08      	cmp	r3, #8
 8011870:	4404      	add	r4, r0
 8011872:	dc11      	bgt.n	8011898 <_strtod_l+0x248>
 8011874:	230a      	movs	r3, #10
 8011876:	fb03 2909 	mla	r9, r3, r9, r2
 801187a:	2100      	movs	r1, #0
 801187c:	e013      	b.n	80118a6 <_strtod_l+0x256>
 801187e:	4628      	mov	r0, r5
 8011880:	e7dc      	b.n	801183c <_strtod_l+0x1ec>
 8011882:	2908      	cmp	r1, #8
 8011884:	f101 0101 	add.w	r1, r1, #1
 8011888:	dc02      	bgt.n	8011890 <_strtod_l+0x240>
 801188a:	fb04 f909 	mul.w	r9, r4, r9
 801188e:	e7ea      	b.n	8011866 <_strtod_l+0x216>
 8011890:	2910      	cmp	r1, #16
 8011892:	bfd8      	it	le
 8011894:	4366      	mulle	r6, r4
 8011896:	e7e6      	b.n	8011866 <_strtod_l+0x216>
 8011898:	2b0f      	cmp	r3, #15
 801189a:	dcee      	bgt.n	801187a <_strtod_l+0x22a>
 801189c:	230a      	movs	r3, #10
 801189e:	fb03 2606 	mla	r6, r3, r6, r2
 80118a2:	e7ea      	b.n	801187a <_strtod_l+0x22a>
 80118a4:	461c      	mov	r4, r3
 80118a6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80118a8:	1c5a      	adds	r2, r3, #1
 80118aa:	9211      	str	r2, [sp, #68]	@ 0x44
 80118ac:	785a      	ldrb	r2, [r3, #1]
 80118ae:	4608      	mov	r0, r1
 80118b0:	4623      	mov	r3, r4
 80118b2:	e7b7      	b.n	8011824 <_strtod_l+0x1d4>
 80118b4:	2301      	movs	r3, #1
 80118b6:	2700      	movs	r7, #0
 80118b8:	9306      	str	r3, [sp, #24]
 80118ba:	e786      	b.n	80117ca <_strtod_l+0x17a>
 80118bc:	f04f 0e00 	mov.w	lr, #0
 80118c0:	f108 0202 	add.w	r2, r8, #2
 80118c4:	9211      	str	r2, [sp, #68]	@ 0x44
 80118c6:	f898 2002 	ldrb.w	r2, [r8, #2]
 80118ca:	e78f      	b.n	80117ec <_strtod_l+0x19c>
 80118cc:	f04f 0e01 	mov.w	lr, #1
 80118d0:	e7f6      	b.n	80118c0 <_strtod_l+0x270>
 80118d2:	bf00      	nop
 80118d4:	08013e38 	.word	0x08013e38
 80118d8:	08013e20 	.word	0x08013e20
 80118dc:	7ff00000 	.word	0x7ff00000
 80118e0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80118e2:	1c54      	adds	r4, r2, #1
 80118e4:	9411      	str	r4, [sp, #68]	@ 0x44
 80118e6:	7852      	ldrb	r2, [r2, #1]
 80118e8:	2a30      	cmp	r2, #48	@ 0x30
 80118ea:	d0f9      	beq.n	80118e0 <_strtod_l+0x290>
 80118ec:	f1a2 0431 	sub.w	r4, r2, #49	@ 0x31
 80118f0:	2c08      	cmp	r4, #8
 80118f2:	d881      	bhi.n	80117f8 <_strtod_l+0x1a8>
 80118f4:	f1a2 0c30 	sub.w	ip, r2, #48	@ 0x30
 80118f8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80118fa:	9209      	str	r2, [sp, #36]	@ 0x24
 80118fc:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80118fe:	1c51      	adds	r1, r2, #1
 8011900:	9111      	str	r1, [sp, #68]	@ 0x44
 8011902:	7852      	ldrb	r2, [r2, #1]
 8011904:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 8011908:	2c09      	cmp	r4, #9
 801190a:	d938      	bls.n	801197e <_strtod_l+0x32e>
 801190c:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801190e:	1b0c      	subs	r4, r1, r4
 8011910:	2c08      	cmp	r4, #8
 8011912:	f644 641f 	movw	r4, #19999	@ 0x4e1f
 8011916:	dc02      	bgt.n	801191e <_strtod_l+0x2ce>
 8011918:	4564      	cmp	r4, ip
 801191a:	bfa8      	it	ge
 801191c:	4664      	movge	r4, ip
 801191e:	f1be 0f00 	cmp.w	lr, #0
 8011922:	d000      	beq.n	8011926 <_strtod_l+0x2d6>
 8011924:	4264      	negs	r4, r4
 8011926:	2b00      	cmp	r3, #0
 8011928:	d14e      	bne.n	80119c8 <_strtod_l+0x378>
 801192a:	9b07      	ldr	r3, [sp, #28]
 801192c:	4318      	orrs	r0, r3
 801192e:	f47f aeca 	bne.w	80116c6 <_strtod_l+0x76>
 8011932:	9b06      	ldr	r3, [sp, #24]
 8011934:	2b00      	cmp	r3, #0
 8011936:	f47f aee2 	bne.w	80116fe <_strtod_l+0xae>
 801193a:	2a69      	cmp	r2, #105	@ 0x69
 801193c:	d027      	beq.n	801198e <_strtod_l+0x33e>
 801193e:	dc24      	bgt.n	801198a <_strtod_l+0x33a>
 8011940:	2a49      	cmp	r2, #73	@ 0x49
 8011942:	d024      	beq.n	801198e <_strtod_l+0x33e>
 8011944:	2a4e      	cmp	r2, #78	@ 0x4e
 8011946:	f47f aeda 	bne.w	80116fe <_strtod_l+0xae>
 801194a:	4997      	ldr	r1, [pc, #604]	@ (8011ba8 <_strtod_l+0x558>)
 801194c:	a811      	add	r0, sp, #68	@ 0x44
 801194e:	f001 f90f 	bl	8012b70 <__match>
 8011952:	2800      	cmp	r0, #0
 8011954:	f43f aed3 	beq.w	80116fe <_strtod_l+0xae>
 8011958:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801195a:	781b      	ldrb	r3, [r3, #0]
 801195c:	2b28      	cmp	r3, #40	@ 0x28
 801195e:	d12d      	bne.n	80119bc <_strtod_l+0x36c>
 8011960:	4992      	ldr	r1, [pc, #584]	@ (8011bac <_strtod_l+0x55c>)
 8011962:	aa14      	add	r2, sp, #80	@ 0x50
 8011964:	a811      	add	r0, sp, #68	@ 0x44
 8011966:	f001 f917 	bl	8012b98 <__hexnan>
 801196a:	2805      	cmp	r0, #5
 801196c:	d126      	bne.n	80119bc <_strtod_l+0x36c>
 801196e:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8011970:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
 8011974:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8011978:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 801197c:	e6a3      	b.n	80116c6 <_strtod_l+0x76>
 801197e:	240a      	movs	r4, #10
 8011980:	fb04 2c0c 	mla	ip, r4, ip, r2
 8011984:	f1ac 0c30 	sub.w	ip, ip, #48	@ 0x30
 8011988:	e7b8      	b.n	80118fc <_strtod_l+0x2ac>
 801198a:	2a6e      	cmp	r2, #110	@ 0x6e
 801198c:	e7db      	b.n	8011946 <_strtod_l+0x2f6>
 801198e:	4988      	ldr	r1, [pc, #544]	@ (8011bb0 <_strtod_l+0x560>)
 8011990:	a811      	add	r0, sp, #68	@ 0x44
 8011992:	f001 f8ed 	bl	8012b70 <__match>
 8011996:	2800      	cmp	r0, #0
 8011998:	f43f aeb1 	beq.w	80116fe <_strtod_l+0xae>
 801199c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801199e:	4985      	ldr	r1, [pc, #532]	@ (8011bb4 <_strtod_l+0x564>)
 80119a0:	3b01      	subs	r3, #1
 80119a2:	a811      	add	r0, sp, #68	@ 0x44
 80119a4:	9311      	str	r3, [sp, #68]	@ 0x44
 80119a6:	f001 f8e3 	bl	8012b70 <__match>
 80119aa:	b910      	cbnz	r0, 80119b2 <_strtod_l+0x362>
 80119ac:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80119ae:	3301      	adds	r3, #1
 80119b0:	9311      	str	r3, [sp, #68]	@ 0x44
 80119b2:	f8df b214 	ldr.w	fp, [pc, #532]	@ 8011bc8 <_strtod_l+0x578>
 80119b6:	f04f 0a00 	mov.w	sl, #0
 80119ba:	e684      	b.n	80116c6 <_strtod_l+0x76>
 80119bc:	487e      	ldr	r0, [pc, #504]	@ (8011bb8 <_strtod_l+0x568>)
 80119be:	f000 fe13 	bl	80125e8 <nan>
 80119c2:	ec5b ab10 	vmov	sl, fp, d0
 80119c6:	e67e      	b.n	80116c6 <_strtod_l+0x76>
 80119c8:	ee07 9a90 	vmov	s15, r9
 80119cc:	1be2      	subs	r2, r4, r7
 80119ce:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80119d2:	2d00      	cmp	r5, #0
 80119d4:	bf08      	it	eq
 80119d6:	461d      	moveq	r5, r3
 80119d8:	2b10      	cmp	r3, #16
 80119da:	9209      	str	r2, [sp, #36]	@ 0x24
 80119dc:	461a      	mov	r2, r3
 80119de:	bfa8      	it	ge
 80119e0:	2210      	movge	r2, #16
 80119e2:	2b09      	cmp	r3, #9
 80119e4:	ec5b ab17 	vmov	sl, fp, d7
 80119e8:	dc15      	bgt.n	8011a16 <_strtod_l+0x3c6>
 80119ea:	1be1      	subs	r1, r4, r7
 80119ec:	2900      	cmp	r1, #0
 80119ee:	f43f ae6a 	beq.w	80116c6 <_strtod_l+0x76>
 80119f2:	eba4 0107 	sub.w	r1, r4, r7
 80119f6:	dd72      	ble.n	8011ade <_strtod_l+0x48e>
 80119f8:	2916      	cmp	r1, #22
 80119fa:	dc59      	bgt.n	8011ab0 <_strtod_l+0x460>
 80119fc:	4b6f      	ldr	r3, [pc, #444]	@ (8011bbc <_strtod_l+0x56c>)
 80119fe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011a00:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011a04:	ed93 7b00 	vldr	d7, [r3]
 8011a08:	ec4b ab16 	vmov	d6, sl, fp
 8011a0c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8011a10:	ec5b ab17 	vmov	sl, fp, d7
 8011a14:	e657      	b.n	80116c6 <_strtod_l+0x76>
 8011a16:	4969      	ldr	r1, [pc, #420]	@ (8011bbc <_strtod_l+0x56c>)
 8011a18:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8011a1c:	ed11 5b12 	vldr	d5, [r1, #-72]	@ 0xffffffb8
 8011a20:	ee06 6a90 	vmov	s13, r6
 8011a24:	2b0f      	cmp	r3, #15
 8011a26:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 8011a2a:	eea7 6b05 	vfma.f64	d6, d7, d5
 8011a2e:	ec5b ab16 	vmov	sl, fp, d6
 8011a32:	ddda      	ble.n	80119ea <_strtod_l+0x39a>
 8011a34:	1a9a      	subs	r2, r3, r2
 8011a36:	1be1      	subs	r1, r4, r7
 8011a38:	440a      	add	r2, r1
 8011a3a:	2a00      	cmp	r2, #0
 8011a3c:	f340 8094 	ble.w	8011b68 <_strtod_l+0x518>
 8011a40:	f012 000f 	ands.w	r0, r2, #15
 8011a44:	d00a      	beq.n	8011a5c <_strtod_l+0x40c>
 8011a46:	495d      	ldr	r1, [pc, #372]	@ (8011bbc <_strtod_l+0x56c>)
 8011a48:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8011a4c:	ed91 7b00 	vldr	d7, [r1]
 8011a50:	ec4b ab16 	vmov	d6, sl, fp
 8011a54:	ee27 7b06 	vmul.f64	d7, d7, d6
 8011a58:	ec5b ab17 	vmov	sl, fp, d7
 8011a5c:	f032 020f 	bics.w	r2, r2, #15
 8011a60:	d073      	beq.n	8011b4a <_strtod_l+0x4fa>
 8011a62:	f5b2 7f9a 	cmp.w	r2, #308	@ 0x134
 8011a66:	dd47      	ble.n	8011af8 <_strtod_l+0x4a8>
 8011a68:	2400      	movs	r4, #0
 8011a6a:	4625      	mov	r5, r4
 8011a6c:	9407      	str	r4, [sp, #28]
 8011a6e:	4626      	mov	r6, r4
 8011a70:	9a05      	ldr	r2, [sp, #20]
 8011a72:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8011bc8 <_strtod_l+0x578>
 8011a76:	2322      	movs	r3, #34	@ 0x22
 8011a78:	6013      	str	r3, [r2, #0]
 8011a7a:	f04f 0a00 	mov.w	sl, #0
 8011a7e:	9b07      	ldr	r3, [sp, #28]
 8011a80:	2b00      	cmp	r3, #0
 8011a82:	f43f ae20 	beq.w	80116c6 <_strtod_l+0x76>
 8011a86:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8011a88:	9805      	ldr	r0, [sp, #20]
 8011a8a:	f7ff f957 	bl	8010d3c <_Bfree>
 8011a8e:	9805      	ldr	r0, [sp, #20]
 8011a90:	4631      	mov	r1, r6
 8011a92:	f7ff f953 	bl	8010d3c <_Bfree>
 8011a96:	9805      	ldr	r0, [sp, #20]
 8011a98:	4629      	mov	r1, r5
 8011a9a:	f7ff f94f 	bl	8010d3c <_Bfree>
 8011a9e:	9907      	ldr	r1, [sp, #28]
 8011aa0:	9805      	ldr	r0, [sp, #20]
 8011aa2:	f7ff f94b 	bl	8010d3c <_Bfree>
 8011aa6:	9805      	ldr	r0, [sp, #20]
 8011aa8:	4621      	mov	r1, r4
 8011aaa:	f7ff f947 	bl	8010d3c <_Bfree>
 8011aae:	e60a      	b.n	80116c6 <_strtod_l+0x76>
 8011ab0:	f1c3 0125 	rsb	r1, r3, #37	@ 0x25
 8011ab4:	1be0      	subs	r0, r4, r7
 8011ab6:	4281      	cmp	r1, r0
 8011ab8:	dbbc      	blt.n	8011a34 <_strtod_l+0x3e4>
 8011aba:	4a40      	ldr	r2, [pc, #256]	@ (8011bbc <_strtod_l+0x56c>)
 8011abc:	f1c3 030f 	rsb	r3, r3, #15
 8011ac0:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8011ac4:	ed91 7b00 	vldr	d7, [r1]
 8011ac8:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8011aca:	ec4b ab16 	vmov	d6, sl, fp
 8011ace:	1acb      	subs	r3, r1, r3
 8011ad0:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8011ad4:	ee27 7b06 	vmul.f64	d7, d7, d6
 8011ad8:	ed92 6b00 	vldr	d6, [r2]
 8011adc:	e796      	b.n	8011a0c <_strtod_l+0x3bc>
 8011ade:	3116      	adds	r1, #22
 8011ae0:	dba8      	blt.n	8011a34 <_strtod_l+0x3e4>
 8011ae2:	4b36      	ldr	r3, [pc, #216]	@ (8011bbc <_strtod_l+0x56c>)
 8011ae4:	1b3c      	subs	r4, r7, r4
 8011ae6:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8011aea:	ed94 7b00 	vldr	d7, [r4]
 8011aee:	ec4b ab16 	vmov	d6, sl, fp
 8011af2:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8011af6:	e78b      	b.n	8011a10 <_strtod_l+0x3c0>
 8011af8:	2000      	movs	r0, #0
 8011afa:	ec4b ab17 	vmov	d7, sl, fp
 8011afe:	4e30      	ldr	r6, [pc, #192]	@ (8011bc0 <_strtod_l+0x570>)
 8011b00:	1112      	asrs	r2, r2, #4
 8011b02:	4601      	mov	r1, r0
 8011b04:	2a01      	cmp	r2, #1
 8011b06:	dc23      	bgt.n	8011b50 <_strtod_l+0x500>
 8011b08:	b108      	cbz	r0, 8011b0e <_strtod_l+0x4be>
 8011b0a:	ec5b ab17 	vmov	sl, fp, d7
 8011b0e:	4a2c      	ldr	r2, [pc, #176]	@ (8011bc0 <_strtod_l+0x570>)
 8011b10:	482c      	ldr	r0, [pc, #176]	@ (8011bc4 <_strtod_l+0x574>)
 8011b12:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8011b16:	ed92 7b00 	vldr	d7, [r2]
 8011b1a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8011b1e:	ec4b ab16 	vmov	d6, sl, fp
 8011b22:	4a29      	ldr	r2, [pc, #164]	@ (8011bc8 <_strtod_l+0x578>)
 8011b24:	ee27 7b06 	vmul.f64	d7, d7, d6
 8011b28:	ee17 1a90 	vmov	r1, s15
 8011b2c:	400a      	ands	r2, r1
 8011b2e:	4282      	cmp	r2, r0
 8011b30:	ec5b ab17 	vmov	sl, fp, d7
 8011b34:	d898      	bhi.n	8011a68 <_strtod_l+0x418>
 8011b36:	f5a0 1080 	sub.w	r0, r0, #1048576	@ 0x100000
 8011b3a:	4282      	cmp	r2, r0
 8011b3c:	bf86      	itte	hi
 8011b3e:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 8011bcc <_strtod_l+0x57c>
 8011b42:	f04f 3aff 	movhi.w	sl, #4294967295
 8011b46:	f101 7b54 	addls.w	fp, r1, #55574528	@ 0x3500000
 8011b4a:	2200      	movs	r2, #0
 8011b4c:	9206      	str	r2, [sp, #24]
 8011b4e:	e076      	b.n	8011c3e <_strtod_l+0x5ee>
 8011b50:	f012 0f01 	tst.w	r2, #1
 8011b54:	d004      	beq.n	8011b60 <_strtod_l+0x510>
 8011b56:	ed96 6b00 	vldr	d6, [r6]
 8011b5a:	2001      	movs	r0, #1
 8011b5c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8011b60:	3101      	adds	r1, #1
 8011b62:	1052      	asrs	r2, r2, #1
 8011b64:	3608      	adds	r6, #8
 8011b66:	e7cd      	b.n	8011b04 <_strtod_l+0x4b4>
 8011b68:	d0ef      	beq.n	8011b4a <_strtod_l+0x4fa>
 8011b6a:	4252      	negs	r2, r2
 8011b6c:	f012 000f 	ands.w	r0, r2, #15
 8011b70:	d00a      	beq.n	8011b88 <_strtod_l+0x538>
 8011b72:	4912      	ldr	r1, [pc, #72]	@ (8011bbc <_strtod_l+0x56c>)
 8011b74:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8011b78:	ed91 7b00 	vldr	d7, [r1]
 8011b7c:	ec4b ab16 	vmov	d6, sl, fp
 8011b80:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8011b84:	ec5b ab17 	vmov	sl, fp, d7
 8011b88:	1112      	asrs	r2, r2, #4
 8011b8a:	d0de      	beq.n	8011b4a <_strtod_l+0x4fa>
 8011b8c:	2a1f      	cmp	r2, #31
 8011b8e:	dd1f      	ble.n	8011bd0 <_strtod_l+0x580>
 8011b90:	2400      	movs	r4, #0
 8011b92:	4625      	mov	r5, r4
 8011b94:	9407      	str	r4, [sp, #28]
 8011b96:	4626      	mov	r6, r4
 8011b98:	9a05      	ldr	r2, [sp, #20]
 8011b9a:	2322      	movs	r3, #34	@ 0x22
 8011b9c:	f04f 0a00 	mov.w	sl, #0
 8011ba0:	f04f 0b00 	mov.w	fp, #0
 8011ba4:	6013      	str	r3, [r2, #0]
 8011ba6:	e76a      	b.n	8011a7e <_strtod_l+0x42e>
 8011ba8:	08013c0e 	.word	0x08013c0e
 8011bac:	08013e24 	.word	0x08013e24
 8011bb0:	08013c06 	.word	0x08013c06
 8011bb4:	08013c3d 	.word	0x08013c3d
 8011bb8:	08013ecc 	.word	0x08013ecc
 8011bbc:	08013d58 	.word	0x08013d58
 8011bc0:	08013d30 	.word	0x08013d30
 8011bc4:	7ca00000 	.word	0x7ca00000
 8011bc8:	7ff00000 	.word	0x7ff00000
 8011bcc:	7fefffff 	.word	0x7fefffff
 8011bd0:	f012 0110 	ands.w	r1, r2, #16
 8011bd4:	bf18      	it	ne
 8011bd6:	216a      	movne	r1, #106	@ 0x6a
 8011bd8:	9106      	str	r1, [sp, #24]
 8011bda:	ec4b ab17 	vmov	d7, sl, fp
 8011bde:	49b0      	ldr	r1, [pc, #704]	@ (8011ea0 <_strtod_l+0x850>)
 8011be0:	2000      	movs	r0, #0
 8011be2:	07d6      	lsls	r6, r2, #31
 8011be4:	d504      	bpl.n	8011bf0 <_strtod_l+0x5a0>
 8011be6:	ed91 6b00 	vldr	d6, [r1]
 8011bea:	2001      	movs	r0, #1
 8011bec:	ee27 7b06 	vmul.f64	d7, d7, d6
 8011bf0:	1052      	asrs	r2, r2, #1
 8011bf2:	f101 0108 	add.w	r1, r1, #8
 8011bf6:	d1f4      	bne.n	8011be2 <_strtod_l+0x592>
 8011bf8:	b108      	cbz	r0, 8011bfe <_strtod_l+0x5ae>
 8011bfa:	ec5b ab17 	vmov	sl, fp, d7
 8011bfe:	9a06      	ldr	r2, [sp, #24]
 8011c00:	b1b2      	cbz	r2, 8011c30 <_strtod_l+0x5e0>
 8011c02:	f3cb 510a 	ubfx	r1, fp, #20, #11
 8011c06:	f1c1 026b 	rsb	r2, r1, #107	@ 0x6b
 8011c0a:	2a00      	cmp	r2, #0
 8011c0c:	4658      	mov	r0, fp
 8011c0e:	dd0f      	ble.n	8011c30 <_strtod_l+0x5e0>
 8011c10:	2a1f      	cmp	r2, #31
 8011c12:	dd55      	ble.n	8011cc0 <_strtod_l+0x670>
 8011c14:	2a34      	cmp	r2, #52	@ 0x34
 8011c16:	bfde      	ittt	le
 8011c18:	f04f 32ff 	movle.w	r2, #4294967295
 8011c1c:	f1c1 014b 	rsble	r1, r1, #75	@ 0x4b
 8011c20:	408a      	lslle	r2, r1
 8011c22:	f04f 0a00 	mov.w	sl, #0
 8011c26:	bfcc      	ite	gt
 8011c28:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8011c2c:	ea02 0b00 	andle.w	fp, r2, r0
 8011c30:	ec4b ab17 	vmov	d7, sl, fp
 8011c34:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8011c38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c3c:	d0a8      	beq.n	8011b90 <_strtod_l+0x540>
 8011c3e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8011c40:	9805      	ldr	r0, [sp, #20]
 8011c42:	f8cd 9000 	str.w	r9, [sp]
 8011c46:	462a      	mov	r2, r5
 8011c48:	f7ff f8e0 	bl	8010e0c <__s2b>
 8011c4c:	9007      	str	r0, [sp, #28]
 8011c4e:	2800      	cmp	r0, #0
 8011c50:	f43f af0a 	beq.w	8011a68 <_strtod_l+0x418>
 8011c54:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011c56:	1b3f      	subs	r7, r7, r4
 8011c58:	2b00      	cmp	r3, #0
 8011c5a:	bfb4      	ite	lt
 8011c5c:	463b      	movlt	r3, r7
 8011c5e:	2300      	movge	r3, #0
 8011c60:	930a      	str	r3, [sp, #40]	@ 0x28
 8011c62:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011c64:	ed9f bb8a 	vldr	d11, [pc, #552]	@ 8011e90 <_strtod_l+0x840>
 8011c68:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8011c6c:	2400      	movs	r4, #0
 8011c6e:	930d      	str	r3, [sp, #52]	@ 0x34
 8011c70:	4625      	mov	r5, r4
 8011c72:	9b07      	ldr	r3, [sp, #28]
 8011c74:	9805      	ldr	r0, [sp, #20]
 8011c76:	6859      	ldr	r1, [r3, #4]
 8011c78:	f7ff f820 	bl	8010cbc <_Balloc>
 8011c7c:	4606      	mov	r6, r0
 8011c7e:	2800      	cmp	r0, #0
 8011c80:	f43f aef6 	beq.w	8011a70 <_strtod_l+0x420>
 8011c84:	9b07      	ldr	r3, [sp, #28]
 8011c86:	691a      	ldr	r2, [r3, #16]
 8011c88:	ec4b ab19 	vmov	d9, sl, fp
 8011c8c:	3202      	adds	r2, #2
 8011c8e:	f103 010c 	add.w	r1, r3, #12
 8011c92:	0092      	lsls	r2, r2, #2
 8011c94:	300c      	adds	r0, #12
 8011c96:	f7fe f91e 	bl	800fed6 <memcpy>
 8011c9a:	eeb0 0b49 	vmov.f64	d0, d9
 8011c9e:	9805      	ldr	r0, [sp, #20]
 8011ca0:	aa14      	add	r2, sp, #80	@ 0x50
 8011ca2:	a913      	add	r1, sp, #76	@ 0x4c
 8011ca4:	f7ff fbee 	bl	8011484 <__d2b>
 8011ca8:	9012      	str	r0, [sp, #72]	@ 0x48
 8011caa:	2800      	cmp	r0, #0
 8011cac:	f43f aee0 	beq.w	8011a70 <_strtod_l+0x420>
 8011cb0:	9805      	ldr	r0, [sp, #20]
 8011cb2:	2101      	movs	r1, #1
 8011cb4:	f7ff f940 	bl	8010f38 <__i2b>
 8011cb8:	4605      	mov	r5, r0
 8011cba:	b940      	cbnz	r0, 8011cce <_strtod_l+0x67e>
 8011cbc:	2500      	movs	r5, #0
 8011cbe:	e6d7      	b.n	8011a70 <_strtod_l+0x420>
 8011cc0:	f04f 31ff 	mov.w	r1, #4294967295
 8011cc4:	fa01 f202 	lsl.w	r2, r1, r2
 8011cc8:	ea02 0a0a 	and.w	sl, r2, sl
 8011ccc:	e7b0      	b.n	8011c30 <_strtod_l+0x5e0>
 8011cce:	9f13      	ldr	r7, [sp, #76]	@ 0x4c
 8011cd0:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8011cd2:	2f00      	cmp	r7, #0
 8011cd4:	bfab      	itete	ge
 8011cd6:	9b0a      	ldrge	r3, [sp, #40]	@ 0x28
 8011cd8:	9b0d      	ldrlt	r3, [sp, #52]	@ 0x34
 8011cda:	f8dd 8034 	ldrge.w	r8, [sp, #52]	@ 0x34
 8011cde:	f8dd 9028 	ldrlt.w	r9, [sp, #40]	@ 0x28
 8011ce2:	bfac      	ite	ge
 8011ce4:	eb07 0903 	addge.w	r9, r7, r3
 8011ce8:	eba3 0807 	sublt.w	r8, r3, r7
 8011cec:	9b06      	ldr	r3, [sp, #24]
 8011cee:	1aff      	subs	r7, r7, r3
 8011cf0:	4417      	add	r7, r2
 8011cf2:	f1c2 0336 	rsb	r3, r2, #54	@ 0x36
 8011cf6:	4a6b      	ldr	r2, [pc, #428]	@ (8011ea4 <_strtod_l+0x854>)
 8011cf8:	3f01      	subs	r7, #1
 8011cfa:	4297      	cmp	r7, r2
 8011cfc:	da51      	bge.n	8011da2 <_strtod_l+0x752>
 8011cfe:	1bd1      	subs	r1, r2, r7
 8011d00:	291f      	cmp	r1, #31
 8011d02:	eba3 0301 	sub.w	r3, r3, r1
 8011d06:	f04f 0201 	mov.w	r2, #1
 8011d0a:	dc3e      	bgt.n	8011d8a <_strtod_l+0x73a>
 8011d0c:	408a      	lsls	r2, r1
 8011d0e:	920c      	str	r2, [sp, #48]	@ 0x30
 8011d10:	2200      	movs	r2, #0
 8011d12:	920b      	str	r2, [sp, #44]	@ 0x2c
 8011d14:	eb09 0703 	add.w	r7, r9, r3
 8011d18:	4498      	add	r8, r3
 8011d1a:	9b06      	ldr	r3, [sp, #24]
 8011d1c:	45b9      	cmp	r9, r7
 8011d1e:	4498      	add	r8, r3
 8011d20:	464b      	mov	r3, r9
 8011d22:	bfa8      	it	ge
 8011d24:	463b      	movge	r3, r7
 8011d26:	4543      	cmp	r3, r8
 8011d28:	bfa8      	it	ge
 8011d2a:	4643      	movge	r3, r8
 8011d2c:	2b00      	cmp	r3, #0
 8011d2e:	bfc2      	ittt	gt
 8011d30:	1aff      	subgt	r7, r7, r3
 8011d32:	eba8 0803 	subgt.w	r8, r8, r3
 8011d36:	eba9 0903 	subgt.w	r9, r9, r3
 8011d3a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011d3c:	2b00      	cmp	r3, #0
 8011d3e:	dd16      	ble.n	8011d6e <_strtod_l+0x71e>
 8011d40:	4629      	mov	r1, r5
 8011d42:	9805      	ldr	r0, [sp, #20]
 8011d44:	461a      	mov	r2, r3
 8011d46:	f7ff f9b7 	bl	80110b8 <__pow5mult>
 8011d4a:	4605      	mov	r5, r0
 8011d4c:	2800      	cmp	r0, #0
 8011d4e:	d0b5      	beq.n	8011cbc <_strtod_l+0x66c>
 8011d50:	4601      	mov	r1, r0
 8011d52:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8011d54:	9805      	ldr	r0, [sp, #20]
 8011d56:	f7ff f905 	bl	8010f64 <__multiply>
 8011d5a:	900f      	str	r0, [sp, #60]	@ 0x3c
 8011d5c:	2800      	cmp	r0, #0
 8011d5e:	f43f ae87 	beq.w	8011a70 <_strtod_l+0x420>
 8011d62:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8011d64:	9805      	ldr	r0, [sp, #20]
 8011d66:	f7fe ffe9 	bl	8010d3c <_Bfree>
 8011d6a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011d6c:	9312      	str	r3, [sp, #72]	@ 0x48
 8011d6e:	2f00      	cmp	r7, #0
 8011d70:	dc1b      	bgt.n	8011daa <_strtod_l+0x75a>
 8011d72:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011d74:	2b00      	cmp	r3, #0
 8011d76:	dd21      	ble.n	8011dbc <_strtod_l+0x76c>
 8011d78:	4631      	mov	r1, r6
 8011d7a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8011d7c:	9805      	ldr	r0, [sp, #20]
 8011d7e:	f7ff f99b 	bl	80110b8 <__pow5mult>
 8011d82:	4606      	mov	r6, r0
 8011d84:	b9d0      	cbnz	r0, 8011dbc <_strtod_l+0x76c>
 8011d86:	2600      	movs	r6, #0
 8011d88:	e672      	b.n	8011a70 <_strtod_l+0x420>
 8011d8a:	f1c7 477f 	rsb	r7, r7, #4278190080	@ 0xff000000
 8011d8e:	f507 077f 	add.w	r7, r7, #16711680	@ 0xff0000
 8011d92:	f507 477b 	add.w	r7, r7, #64256	@ 0xfb00
 8011d96:	37e2      	adds	r7, #226	@ 0xe2
 8011d98:	fa02 f107 	lsl.w	r1, r2, r7
 8011d9c:	910b      	str	r1, [sp, #44]	@ 0x2c
 8011d9e:	920c      	str	r2, [sp, #48]	@ 0x30
 8011da0:	e7b8      	b.n	8011d14 <_strtod_l+0x6c4>
 8011da2:	2200      	movs	r2, #0
 8011da4:	920b      	str	r2, [sp, #44]	@ 0x2c
 8011da6:	2201      	movs	r2, #1
 8011da8:	e7f9      	b.n	8011d9e <_strtod_l+0x74e>
 8011daa:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8011dac:	9805      	ldr	r0, [sp, #20]
 8011dae:	463a      	mov	r2, r7
 8011db0:	f7ff f9dc 	bl	801116c <__lshift>
 8011db4:	9012      	str	r0, [sp, #72]	@ 0x48
 8011db6:	2800      	cmp	r0, #0
 8011db8:	d1db      	bne.n	8011d72 <_strtod_l+0x722>
 8011dba:	e659      	b.n	8011a70 <_strtod_l+0x420>
 8011dbc:	f1b8 0f00 	cmp.w	r8, #0
 8011dc0:	dd07      	ble.n	8011dd2 <_strtod_l+0x782>
 8011dc2:	4631      	mov	r1, r6
 8011dc4:	9805      	ldr	r0, [sp, #20]
 8011dc6:	4642      	mov	r2, r8
 8011dc8:	f7ff f9d0 	bl	801116c <__lshift>
 8011dcc:	4606      	mov	r6, r0
 8011dce:	2800      	cmp	r0, #0
 8011dd0:	d0d9      	beq.n	8011d86 <_strtod_l+0x736>
 8011dd2:	f1b9 0f00 	cmp.w	r9, #0
 8011dd6:	dd08      	ble.n	8011dea <_strtod_l+0x79a>
 8011dd8:	4629      	mov	r1, r5
 8011dda:	9805      	ldr	r0, [sp, #20]
 8011ddc:	464a      	mov	r2, r9
 8011dde:	f7ff f9c5 	bl	801116c <__lshift>
 8011de2:	4605      	mov	r5, r0
 8011de4:	2800      	cmp	r0, #0
 8011de6:	f43f ae43 	beq.w	8011a70 <_strtod_l+0x420>
 8011dea:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8011dec:	9805      	ldr	r0, [sp, #20]
 8011dee:	4632      	mov	r2, r6
 8011df0:	f7ff fa44 	bl	801127c <__mdiff>
 8011df4:	4604      	mov	r4, r0
 8011df6:	2800      	cmp	r0, #0
 8011df8:	f43f ae3a 	beq.w	8011a70 <_strtod_l+0x420>
 8011dfc:	2300      	movs	r3, #0
 8011dfe:	f8d0 800c 	ldr.w	r8, [r0, #12]
 8011e02:	60c3      	str	r3, [r0, #12]
 8011e04:	4629      	mov	r1, r5
 8011e06:	f7ff fa1d 	bl	8011244 <__mcmp>
 8011e0a:	2800      	cmp	r0, #0
 8011e0c:	da4e      	bge.n	8011eac <_strtod_l+0x85c>
 8011e0e:	ea58 080a 	orrs.w	r8, r8, sl
 8011e12:	d174      	bne.n	8011efe <_strtod_l+0x8ae>
 8011e14:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011e18:	2b00      	cmp	r3, #0
 8011e1a:	d170      	bne.n	8011efe <_strtod_l+0x8ae>
 8011e1c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8011e20:	0d1b      	lsrs	r3, r3, #20
 8011e22:	051b      	lsls	r3, r3, #20
 8011e24:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8011e28:	d969      	bls.n	8011efe <_strtod_l+0x8ae>
 8011e2a:	6963      	ldr	r3, [r4, #20]
 8011e2c:	b913      	cbnz	r3, 8011e34 <_strtod_l+0x7e4>
 8011e2e:	6923      	ldr	r3, [r4, #16]
 8011e30:	2b01      	cmp	r3, #1
 8011e32:	dd64      	ble.n	8011efe <_strtod_l+0x8ae>
 8011e34:	4621      	mov	r1, r4
 8011e36:	2201      	movs	r2, #1
 8011e38:	9805      	ldr	r0, [sp, #20]
 8011e3a:	f7ff f997 	bl	801116c <__lshift>
 8011e3e:	4629      	mov	r1, r5
 8011e40:	4604      	mov	r4, r0
 8011e42:	f7ff f9ff 	bl	8011244 <__mcmp>
 8011e46:	2800      	cmp	r0, #0
 8011e48:	dd59      	ble.n	8011efe <_strtod_l+0x8ae>
 8011e4a:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8011e4e:	9a06      	ldr	r2, [sp, #24]
 8011e50:	0d1b      	lsrs	r3, r3, #20
 8011e52:	051b      	lsls	r3, r3, #20
 8011e54:	2a00      	cmp	r2, #0
 8011e56:	d070      	beq.n	8011f3a <_strtod_l+0x8ea>
 8011e58:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8011e5c:	d86d      	bhi.n	8011f3a <_strtod_l+0x8ea>
 8011e5e:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8011e62:	f67f ae99 	bls.w	8011b98 <_strtod_l+0x548>
 8011e66:	ed9f 7b0c 	vldr	d7, [pc, #48]	@ 8011e98 <_strtod_l+0x848>
 8011e6a:	ec4b ab16 	vmov	d6, sl, fp
 8011e6e:	4b0e      	ldr	r3, [pc, #56]	@ (8011ea8 <_strtod_l+0x858>)
 8011e70:	ee26 7b07 	vmul.f64	d7, d6, d7
 8011e74:	ee17 2a90 	vmov	r2, s15
 8011e78:	4013      	ands	r3, r2
 8011e7a:	ec5b ab17 	vmov	sl, fp, d7
 8011e7e:	2b00      	cmp	r3, #0
 8011e80:	f47f ae01 	bne.w	8011a86 <_strtod_l+0x436>
 8011e84:	9a05      	ldr	r2, [sp, #20]
 8011e86:	2322      	movs	r3, #34	@ 0x22
 8011e88:	6013      	str	r3, [r2, #0]
 8011e8a:	e5fc      	b.n	8011a86 <_strtod_l+0x436>
 8011e8c:	f3af 8000 	nop.w
 8011e90:	ffc00000 	.word	0xffc00000
 8011e94:	41dfffff 	.word	0x41dfffff
 8011e98:	00000000 	.word	0x00000000
 8011e9c:	39500000 	.word	0x39500000
 8011ea0:	08013e50 	.word	0x08013e50
 8011ea4:	fffffc02 	.word	0xfffffc02
 8011ea8:	7ff00000 	.word	0x7ff00000
 8011eac:	46d9      	mov	r9, fp
 8011eae:	d15d      	bne.n	8011f6c <_strtod_l+0x91c>
 8011eb0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011eb4:	f1b8 0f00 	cmp.w	r8, #0
 8011eb8:	d02a      	beq.n	8011f10 <_strtod_l+0x8c0>
 8011eba:	4aab      	ldr	r2, [pc, #684]	@ (8012168 <_strtod_l+0xb18>)
 8011ebc:	4293      	cmp	r3, r2
 8011ebe:	d12a      	bne.n	8011f16 <_strtod_l+0x8c6>
 8011ec0:	9b06      	ldr	r3, [sp, #24]
 8011ec2:	4652      	mov	r2, sl
 8011ec4:	b1fb      	cbz	r3, 8011f06 <_strtod_l+0x8b6>
 8011ec6:	4ba9      	ldr	r3, [pc, #676]	@ (801216c <_strtod_l+0xb1c>)
 8011ec8:	ea0b 0303 	and.w	r3, fp, r3
 8011ecc:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8011ed0:	f04f 31ff 	mov.w	r1, #4294967295
 8011ed4:	d81a      	bhi.n	8011f0c <_strtod_l+0x8bc>
 8011ed6:	0d1b      	lsrs	r3, r3, #20
 8011ed8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8011edc:	fa01 f303 	lsl.w	r3, r1, r3
 8011ee0:	429a      	cmp	r2, r3
 8011ee2:	d118      	bne.n	8011f16 <_strtod_l+0x8c6>
 8011ee4:	4ba2      	ldr	r3, [pc, #648]	@ (8012170 <_strtod_l+0xb20>)
 8011ee6:	4599      	cmp	r9, r3
 8011ee8:	d102      	bne.n	8011ef0 <_strtod_l+0x8a0>
 8011eea:	3201      	adds	r2, #1
 8011eec:	f43f adc0 	beq.w	8011a70 <_strtod_l+0x420>
 8011ef0:	4b9e      	ldr	r3, [pc, #632]	@ (801216c <_strtod_l+0xb1c>)
 8011ef2:	ea09 0303 	and.w	r3, r9, r3
 8011ef6:	f503 1b80 	add.w	fp, r3, #1048576	@ 0x100000
 8011efa:	f04f 0a00 	mov.w	sl, #0
 8011efe:	9b06      	ldr	r3, [sp, #24]
 8011f00:	2b00      	cmp	r3, #0
 8011f02:	d1b0      	bne.n	8011e66 <_strtod_l+0x816>
 8011f04:	e5bf      	b.n	8011a86 <_strtod_l+0x436>
 8011f06:	f04f 33ff 	mov.w	r3, #4294967295
 8011f0a:	e7e9      	b.n	8011ee0 <_strtod_l+0x890>
 8011f0c:	460b      	mov	r3, r1
 8011f0e:	e7e7      	b.n	8011ee0 <_strtod_l+0x890>
 8011f10:	ea53 030a 	orrs.w	r3, r3, sl
 8011f14:	d099      	beq.n	8011e4a <_strtod_l+0x7fa>
 8011f16:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011f18:	b1c3      	cbz	r3, 8011f4c <_strtod_l+0x8fc>
 8011f1a:	ea13 0f09 	tst.w	r3, r9
 8011f1e:	d0ee      	beq.n	8011efe <_strtod_l+0x8ae>
 8011f20:	9a06      	ldr	r2, [sp, #24]
 8011f22:	4650      	mov	r0, sl
 8011f24:	4659      	mov	r1, fp
 8011f26:	f1b8 0f00 	cmp.w	r8, #0
 8011f2a:	d013      	beq.n	8011f54 <_strtod_l+0x904>
 8011f2c:	f7ff fb75 	bl	801161a <sulp>
 8011f30:	ee39 7b00 	vadd.f64	d7, d9, d0
 8011f34:	ec5b ab17 	vmov	sl, fp, d7
 8011f38:	e7e1      	b.n	8011efe <_strtod_l+0x8ae>
 8011f3a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8011f3e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8011f42:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8011f46:	f04f 3aff 	mov.w	sl, #4294967295
 8011f4a:	e7d8      	b.n	8011efe <_strtod_l+0x8ae>
 8011f4c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011f4e:	ea13 0f0a 	tst.w	r3, sl
 8011f52:	e7e4      	b.n	8011f1e <_strtod_l+0x8ce>
 8011f54:	f7ff fb61 	bl	801161a <sulp>
 8011f58:	ee39 0b40 	vsub.f64	d0, d9, d0
 8011f5c:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8011f60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011f64:	ec5b ab10 	vmov	sl, fp, d0
 8011f68:	d1c9      	bne.n	8011efe <_strtod_l+0x8ae>
 8011f6a:	e615      	b.n	8011b98 <_strtod_l+0x548>
 8011f6c:	4629      	mov	r1, r5
 8011f6e:	4620      	mov	r0, r4
 8011f70:	f7ff fae0 	bl	8011534 <__ratio>
 8011f74:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 8011f78:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8011f7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011f80:	d85d      	bhi.n	801203e <_strtod_l+0x9ee>
 8011f82:	f1b8 0f00 	cmp.w	r8, #0
 8011f86:	d164      	bne.n	8012052 <_strtod_l+0xa02>
 8011f88:	f1ba 0f00 	cmp.w	sl, #0
 8011f8c:	d14b      	bne.n	8012026 <_strtod_l+0x9d6>
 8011f8e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011f92:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 8011f96:	2b00      	cmp	r3, #0
 8011f98:	d160      	bne.n	801205c <_strtod_l+0xa0c>
 8011f9a:	eeb4 0bc8 	vcmpe.f64	d0, d8
 8011f9e:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 8011fa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011fa6:	d401      	bmi.n	8011fac <_strtod_l+0x95c>
 8011fa8:	ee20 8b08 	vmul.f64	d8, d0, d8
 8011fac:	eeb1 ab48 	vneg.f64	d10, d8
 8011fb0:	486e      	ldr	r0, [pc, #440]	@ (801216c <_strtod_l+0xb1c>)
 8011fb2:	4970      	ldr	r1, [pc, #448]	@ (8012174 <_strtod_l+0xb24>)
 8011fb4:	ea09 0700 	and.w	r7, r9, r0
 8011fb8:	428f      	cmp	r7, r1
 8011fba:	ec53 2b1a 	vmov	r2, r3, d10
 8011fbe:	d17d      	bne.n	80120bc <_strtod_l+0xa6c>
 8011fc0:	f1a9 7b54 	sub.w	fp, r9, #55574528	@ 0x3500000
 8011fc4:	ec4b ab1c 	vmov	d12, sl, fp
 8011fc8:	eeb0 0b4c 	vmov.f64	d0, d12
 8011fcc:	f7ff f9ea 	bl	80113a4 <__ulp>
 8011fd0:	4866      	ldr	r0, [pc, #408]	@ (801216c <_strtod_l+0xb1c>)
 8011fd2:	eea0 cb0a 	vfma.f64	d12, d0, d10
 8011fd6:	ee1c 3a90 	vmov	r3, s25
 8011fda:	4a67      	ldr	r2, [pc, #412]	@ (8012178 <_strtod_l+0xb28>)
 8011fdc:	ea03 0100 	and.w	r1, r3, r0
 8011fe0:	4291      	cmp	r1, r2
 8011fe2:	ec5b ab1c 	vmov	sl, fp, d12
 8011fe6:	d93c      	bls.n	8012062 <_strtod_l+0xa12>
 8011fe8:	ee19 2a90 	vmov	r2, s19
 8011fec:	4b60      	ldr	r3, [pc, #384]	@ (8012170 <_strtod_l+0xb20>)
 8011fee:	429a      	cmp	r2, r3
 8011ff0:	d104      	bne.n	8011ffc <_strtod_l+0x9ac>
 8011ff2:	ee19 3a10 	vmov	r3, s18
 8011ff6:	3301      	adds	r3, #1
 8011ff8:	f43f ad3a 	beq.w	8011a70 <_strtod_l+0x420>
 8011ffc:	f8df b170 	ldr.w	fp, [pc, #368]	@ 8012170 <_strtod_l+0xb20>
 8012000:	f04f 3aff 	mov.w	sl, #4294967295
 8012004:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8012006:	9805      	ldr	r0, [sp, #20]
 8012008:	f7fe fe98 	bl	8010d3c <_Bfree>
 801200c:	9805      	ldr	r0, [sp, #20]
 801200e:	4631      	mov	r1, r6
 8012010:	f7fe fe94 	bl	8010d3c <_Bfree>
 8012014:	9805      	ldr	r0, [sp, #20]
 8012016:	4629      	mov	r1, r5
 8012018:	f7fe fe90 	bl	8010d3c <_Bfree>
 801201c:	9805      	ldr	r0, [sp, #20]
 801201e:	4621      	mov	r1, r4
 8012020:	f7fe fe8c 	bl	8010d3c <_Bfree>
 8012024:	e625      	b.n	8011c72 <_strtod_l+0x622>
 8012026:	f1ba 0f01 	cmp.w	sl, #1
 801202a:	d103      	bne.n	8012034 <_strtod_l+0x9e4>
 801202c:	f1bb 0f00 	cmp.w	fp, #0
 8012030:	f43f adb2 	beq.w	8011b98 <_strtod_l+0x548>
 8012034:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 8012038:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 801203c:	e7b8      	b.n	8011fb0 <_strtod_l+0x960>
 801203e:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 8012042:	ee20 8b08 	vmul.f64	d8, d0, d8
 8012046:	f1b8 0f00 	cmp.w	r8, #0
 801204a:	d0af      	beq.n	8011fac <_strtod_l+0x95c>
 801204c:	eeb0 ab48 	vmov.f64	d10, d8
 8012050:	e7ae      	b.n	8011fb0 <_strtod_l+0x960>
 8012052:	eeb7 ab00 	vmov.f64	d10, #112	@ 0x3f800000  1.0
 8012056:	eeb0 8b4a 	vmov.f64	d8, d10
 801205a:	e7a9      	b.n	8011fb0 <_strtod_l+0x960>
 801205c:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 8012060:	e7a6      	b.n	8011fb0 <_strtod_l+0x960>
 8012062:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8012066:	9b06      	ldr	r3, [sp, #24]
 8012068:	46d9      	mov	r9, fp
 801206a:	2b00      	cmp	r3, #0
 801206c:	d1ca      	bne.n	8012004 <_strtod_l+0x9b4>
 801206e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8012072:	0d1b      	lsrs	r3, r3, #20
 8012074:	051b      	lsls	r3, r3, #20
 8012076:	429f      	cmp	r7, r3
 8012078:	d1c4      	bne.n	8012004 <_strtod_l+0x9b4>
 801207a:	ec51 0b18 	vmov	r0, r1, d8
 801207e:	f7ee fb6b 	bl	8000758 <__aeabi_d2lz>
 8012082:	f7ee fb23 	bl	80006cc <__aeabi_l2d>
 8012086:	f3cb 0913 	ubfx	r9, fp, #0, #20
 801208a:	ec41 0b17 	vmov	d7, r0, r1
 801208e:	ea49 090a 	orr.w	r9, r9, sl
 8012092:	ea59 0908 	orrs.w	r9, r9, r8
 8012096:	ee38 8b47 	vsub.f64	d8, d8, d7
 801209a:	d03c      	beq.n	8012116 <_strtod_l+0xac6>
 801209c:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 8012150 <_strtod_l+0xb00>
 80120a0:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80120a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80120a8:	f53f aced 	bmi.w	8011a86 <_strtod_l+0x436>
 80120ac:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 8012158 <_strtod_l+0xb08>
 80120b0:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80120b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80120b8:	dda4      	ble.n	8012004 <_strtod_l+0x9b4>
 80120ba:	e4e4      	b.n	8011a86 <_strtod_l+0x436>
 80120bc:	9906      	ldr	r1, [sp, #24]
 80120be:	b1e1      	cbz	r1, 80120fa <_strtod_l+0xaaa>
 80120c0:	f1b7 6fd4 	cmp.w	r7, #111149056	@ 0x6a00000
 80120c4:	d819      	bhi.n	80120fa <_strtod_l+0xaaa>
 80120c6:	eeb4 8bcb 	vcmpe.f64	d8, d11
 80120ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80120ce:	d811      	bhi.n	80120f4 <_strtod_l+0xaa4>
 80120d0:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 80120d4:	ee18 3a10 	vmov	r3, s16
 80120d8:	2b01      	cmp	r3, #1
 80120da:	bf38      	it	cc
 80120dc:	2301      	movcc	r3, #1
 80120de:	ee08 3a10 	vmov	s16, r3
 80120e2:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 80120e6:	f1b8 0f00 	cmp.w	r8, #0
 80120ea:	d111      	bne.n	8012110 <_strtod_l+0xac0>
 80120ec:	eeb1 7b48 	vneg.f64	d7, d8
 80120f0:	ec53 2b17 	vmov	r2, r3, d7
 80120f4:	f103 61d6 	add.w	r1, r3, #112197632	@ 0x6b00000
 80120f8:	1bcb      	subs	r3, r1, r7
 80120fa:	eeb0 0b49 	vmov.f64	d0, d9
 80120fe:	ec43 2b1a 	vmov	d10, r2, r3
 8012102:	f7ff f94f 	bl	80113a4 <__ulp>
 8012106:	eeaa 9b00 	vfma.f64	d9, d10, d0
 801210a:	ec5b ab19 	vmov	sl, fp, d9
 801210e:	e7aa      	b.n	8012066 <_strtod_l+0xa16>
 8012110:	eeb0 7b48 	vmov.f64	d7, d8
 8012114:	e7ec      	b.n	80120f0 <_strtod_l+0xaa0>
 8012116:	ed9f 7b12 	vldr	d7, [pc, #72]	@ 8012160 <_strtod_l+0xb10>
 801211a:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801211e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012122:	f57f af6f 	bpl.w	8012004 <_strtod_l+0x9b4>
 8012126:	e4ae      	b.n	8011a86 <_strtod_l+0x436>
 8012128:	2300      	movs	r3, #0
 801212a:	9308      	str	r3, [sp, #32]
 801212c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801212e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8012130:	6013      	str	r3, [r2, #0]
 8012132:	f7ff bacc 	b.w	80116ce <_strtod_l+0x7e>
 8012136:	2a65      	cmp	r2, #101	@ 0x65
 8012138:	f43f abbc 	beq.w	80118b4 <_strtod_l+0x264>
 801213c:	2a45      	cmp	r2, #69	@ 0x45
 801213e:	f43f abb9 	beq.w	80118b4 <_strtod_l+0x264>
 8012142:	2301      	movs	r3, #1
 8012144:	9306      	str	r3, [sp, #24]
 8012146:	f7ff bbf0 	b.w	801192a <_strtod_l+0x2da>
 801214a:	bf00      	nop
 801214c:	f3af 8000 	nop.w
 8012150:	94a03595 	.word	0x94a03595
 8012154:	3fdfffff 	.word	0x3fdfffff
 8012158:	35afe535 	.word	0x35afe535
 801215c:	3fe00000 	.word	0x3fe00000
 8012160:	94a03595 	.word	0x94a03595
 8012164:	3fcfffff 	.word	0x3fcfffff
 8012168:	000fffff 	.word	0x000fffff
 801216c:	7ff00000 	.word	0x7ff00000
 8012170:	7fefffff 	.word	0x7fefffff
 8012174:	7fe00000 	.word	0x7fe00000
 8012178:	7c9fffff 	.word	0x7c9fffff

0801217c <_strtod_r>:
 801217c:	4b01      	ldr	r3, [pc, #4]	@ (8012184 <_strtod_r+0x8>)
 801217e:	f7ff ba67 	b.w	8011650 <_strtod_l>
 8012182:	bf00      	nop
 8012184:	2400007c 	.word	0x2400007c

08012188 <__ssputs_r>:
 8012188:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801218c:	688e      	ldr	r6, [r1, #8]
 801218e:	461f      	mov	r7, r3
 8012190:	42be      	cmp	r6, r7
 8012192:	680b      	ldr	r3, [r1, #0]
 8012194:	4682      	mov	sl, r0
 8012196:	460c      	mov	r4, r1
 8012198:	4690      	mov	r8, r2
 801219a:	d82d      	bhi.n	80121f8 <__ssputs_r+0x70>
 801219c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80121a0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80121a4:	d026      	beq.n	80121f4 <__ssputs_r+0x6c>
 80121a6:	6965      	ldr	r5, [r4, #20]
 80121a8:	6909      	ldr	r1, [r1, #16]
 80121aa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80121ae:	eba3 0901 	sub.w	r9, r3, r1
 80121b2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80121b6:	1c7b      	adds	r3, r7, #1
 80121b8:	444b      	add	r3, r9
 80121ba:	106d      	asrs	r5, r5, #1
 80121bc:	429d      	cmp	r5, r3
 80121be:	bf38      	it	cc
 80121c0:	461d      	movcc	r5, r3
 80121c2:	0553      	lsls	r3, r2, #21
 80121c4:	d527      	bpl.n	8012216 <__ssputs_r+0x8e>
 80121c6:	4629      	mov	r1, r5
 80121c8:	f7fe fcec 	bl	8010ba4 <_malloc_r>
 80121cc:	4606      	mov	r6, r0
 80121ce:	b360      	cbz	r0, 801222a <__ssputs_r+0xa2>
 80121d0:	6921      	ldr	r1, [r4, #16]
 80121d2:	464a      	mov	r2, r9
 80121d4:	f7fd fe7f 	bl	800fed6 <memcpy>
 80121d8:	89a3      	ldrh	r3, [r4, #12]
 80121da:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80121de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80121e2:	81a3      	strh	r3, [r4, #12]
 80121e4:	6126      	str	r6, [r4, #16]
 80121e6:	6165      	str	r5, [r4, #20]
 80121e8:	444e      	add	r6, r9
 80121ea:	eba5 0509 	sub.w	r5, r5, r9
 80121ee:	6026      	str	r6, [r4, #0]
 80121f0:	60a5      	str	r5, [r4, #8]
 80121f2:	463e      	mov	r6, r7
 80121f4:	42be      	cmp	r6, r7
 80121f6:	d900      	bls.n	80121fa <__ssputs_r+0x72>
 80121f8:	463e      	mov	r6, r7
 80121fa:	6820      	ldr	r0, [r4, #0]
 80121fc:	4632      	mov	r2, r6
 80121fe:	4641      	mov	r1, r8
 8012200:	f000 f9c6 	bl	8012590 <memmove>
 8012204:	68a3      	ldr	r3, [r4, #8]
 8012206:	1b9b      	subs	r3, r3, r6
 8012208:	60a3      	str	r3, [r4, #8]
 801220a:	6823      	ldr	r3, [r4, #0]
 801220c:	4433      	add	r3, r6
 801220e:	6023      	str	r3, [r4, #0]
 8012210:	2000      	movs	r0, #0
 8012212:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012216:	462a      	mov	r2, r5
 8012218:	f000 fd6b 	bl	8012cf2 <_realloc_r>
 801221c:	4606      	mov	r6, r0
 801221e:	2800      	cmp	r0, #0
 8012220:	d1e0      	bne.n	80121e4 <__ssputs_r+0x5c>
 8012222:	6921      	ldr	r1, [r4, #16]
 8012224:	4650      	mov	r0, sl
 8012226:	f7fe fc49 	bl	8010abc <_free_r>
 801222a:	230c      	movs	r3, #12
 801222c:	f8ca 3000 	str.w	r3, [sl]
 8012230:	89a3      	ldrh	r3, [r4, #12]
 8012232:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012236:	81a3      	strh	r3, [r4, #12]
 8012238:	f04f 30ff 	mov.w	r0, #4294967295
 801223c:	e7e9      	b.n	8012212 <__ssputs_r+0x8a>
	...

08012240 <_svfiprintf_r>:
 8012240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012244:	4698      	mov	r8, r3
 8012246:	898b      	ldrh	r3, [r1, #12]
 8012248:	061b      	lsls	r3, r3, #24
 801224a:	b09d      	sub	sp, #116	@ 0x74
 801224c:	4607      	mov	r7, r0
 801224e:	460d      	mov	r5, r1
 8012250:	4614      	mov	r4, r2
 8012252:	d510      	bpl.n	8012276 <_svfiprintf_r+0x36>
 8012254:	690b      	ldr	r3, [r1, #16]
 8012256:	b973      	cbnz	r3, 8012276 <_svfiprintf_r+0x36>
 8012258:	2140      	movs	r1, #64	@ 0x40
 801225a:	f7fe fca3 	bl	8010ba4 <_malloc_r>
 801225e:	6028      	str	r0, [r5, #0]
 8012260:	6128      	str	r0, [r5, #16]
 8012262:	b930      	cbnz	r0, 8012272 <_svfiprintf_r+0x32>
 8012264:	230c      	movs	r3, #12
 8012266:	603b      	str	r3, [r7, #0]
 8012268:	f04f 30ff 	mov.w	r0, #4294967295
 801226c:	b01d      	add	sp, #116	@ 0x74
 801226e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012272:	2340      	movs	r3, #64	@ 0x40
 8012274:	616b      	str	r3, [r5, #20]
 8012276:	2300      	movs	r3, #0
 8012278:	9309      	str	r3, [sp, #36]	@ 0x24
 801227a:	2320      	movs	r3, #32
 801227c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8012280:	f8cd 800c 	str.w	r8, [sp, #12]
 8012284:	2330      	movs	r3, #48	@ 0x30
 8012286:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8012424 <_svfiprintf_r+0x1e4>
 801228a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801228e:	f04f 0901 	mov.w	r9, #1
 8012292:	4623      	mov	r3, r4
 8012294:	469a      	mov	sl, r3
 8012296:	f813 2b01 	ldrb.w	r2, [r3], #1
 801229a:	b10a      	cbz	r2, 80122a0 <_svfiprintf_r+0x60>
 801229c:	2a25      	cmp	r2, #37	@ 0x25
 801229e:	d1f9      	bne.n	8012294 <_svfiprintf_r+0x54>
 80122a0:	ebba 0b04 	subs.w	fp, sl, r4
 80122a4:	d00b      	beq.n	80122be <_svfiprintf_r+0x7e>
 80122a6:	465b      	mov	r3, fp
 80122a8:	4622      	mov	r2, r4
 80122aa:	4629      	mov	r1, r5
 80122ac:	4638      	mov	r0, r7
 80122ae:	f7ff ff6b 	bl	8012188 <__ssputs_r>
 80122b2:	3001      	adds	r0, #1
 80122b4:	f000 80a7 	beq.w	8012406 <_svfiprintf_r+0x1c6>
 80122b8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80122ba:	445a      	add	r2, fp
 80122bc:	9209      	str	r2, [sp, #36]	@ 0x24
 80122be:	f89a 3000 	ldrb.w	r3, [sl]
 80122c2:	2b00      	cmp	r3, #0
 80122c4:	f000 809f 	beq.w	8012406 <_svfiprintf_r+0x1c6>
 80122c8:	2300      	movs	r3, #0
 80122ca:	f04f 32ff 	mov.w	r2, #4294967295
 80122ce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80122d2:	f10a 0a01 	add.w	sl, sl, #1
 80122d6:	9304      	str	r3, [sp, #16]
 80122d8:	9307      	str	r3, [sp, #28]
 80122da:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80122de:	931a      	str	r3, [sp, #104]	@ 0x68
 80122e0:	4654      	mov	r4, sl
 80122e2:	2205      	movs	r2, #5
 80122e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80122e8:	484e      	ldr	r0, [pc, #312]	@ (8012424 <_svfiprintf_r+0x1e4>)
 80122ea:	f7ee f809 	bl	8000300 <memchr>
 80122ee:	9a04      	ldr	r2, [sp, #16]
 80122f0:	b9d8      	cbnz	r0, 801232a <_svfiprintf_r+0xea>
 80122f2:	06d0      	lsls	r0, r2, #27
 80122f4:	bf44      	itt	mi
 80122f6:	2320      	movmi	r3, #32
 80122f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80122fc:	0711      	lsls	r1, r2, #28
 80122fe:	bf44      	itt	mi
 8012300:	232b      	movmi	r3, #43	@ 0x2b
 8012302:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012306:	f89a 3000 	ldrb.w	r3, [sl]
 801230a:	2b2a      	cmp	r3, #42	@ 0x2a
 801230c:	d015      	beq.n	801233a <_svfiprintf_r+0xfa>
 801230e:	9a07      	ldr	r2, [sp, #28]
 8012310:	4654      	mov	r4, sl
 8012312:	2000      	movs	r0, #0
 8012314:	f04f 0c0a 	mov.w	ip, #10
 8012318:	4621      	mov	r1, r4
 801231a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801231e:	3b30      	subs	r3, #48	@ 0x30
 8012320:	2b09      	cmp	r3, #9
 8012322:	d94b      	bls.n	80123bc <_svfiprintf_r+0x17c>
 8012324:	b1b0      	cbz	r0, 8012354 <_svfiprintf_r+0x114>
 8012326:	9207      	str	r2, [sp, #28]
 8012328:	e014      	b.n	8012354 <_svfiprintf_r+0x114>
 801232a:	eba0 0308 	sub.w	r3, r0, r8
 801232e:	fa09 f303 	lsl.w	r3, r9, r3
 8012332:	4313      	orrs	r3, r2
 8012334:	9304      	str	r3, [sp, #16]
 8012336:	46a2      	mov	sl, r4
 8012338:	e7d2      	b.n	80122e0 <_svfiprintf_r+0xa0>
 801233a:	9b03      	ldr	r3, [sp, #12]
 801233c:	1d19      	adds	r1, r3, #4
 801233e:	681b      	ldr	r3, [r3, #0]
 8012340:	9103      	str	r1, [sp, #12]
 8012342:	2b00      	cmp	r3, #0
 8012344:	bfbb      	ittet	lt
 8012346:	425b      	neglt	r3, r3
 8012348:	f042 0202 	orrlt.w	r2, r2, #2
 801234c:	9307      	strge	r3, [sp, #28]
 801234e:	9307      	strlt	r3, [sp, #28]
 8012350:	bfb8      	it	lt
 8012352:	9204      	strlt	r2, [sp, #16]
 8012354:	7823      	ldrb	r3, [r4, #0]
 8012356:	2b2e      	cmp	r3, #46	@ 0x2e
 8012358:	d10a      	bne.n	8012370 <_svfiprintf_r+0x130>
 801235a:	7863      	ldrb	r3, [r4, #1]
 801235c:	2b2a      	cmp	r3, #42	@ 0x2a
 801235e:	d132      	bne.n	80123c6 <_svfiprintf_r+0x186>
 8012360:	9b03      	ldr	r3, [sp, #12]
 8012362:	1d1a      	adds	r2, r3, #4
 8012364:	681b      	ldr	r3, [r3, #0]
 8012366:	9203      	str	r2, [sp, #12]
 8012368:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801236c:	3402      	adds	r4, #2
 801236e:	9305      	str	r3, [sp, #20]
 8012370:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8012434 <_svfiprintf_r+0x1f4>
 8012374:	7821      	ldrb	r1, [r4, #0]
 8012376:	2203      	movs	r2, #3
 8012378:	4650      	mov	r0, sl
 801237a:	f7ed ffc1 	bl	8000300 <memchr>
 801237e:	b138      	cbz	r0, 8012390 <_svfiprintf_r+0x150>
 8012380:	9b04      	ldr	r3, [sp, #16]
 8012382:	eba0 000a 	sub.w	r0, r0, sl
 8012386:	2240      	movs	r2, #64	@ 0x40
 8012388:	4082      	lsls	r2, r0
 801238a:	4313      	orrs	r3, r2
 801238c:	3401      	adds	r4, #1
 801238e:	9304      	str	r3, [sp, #16]
 8012390:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012394:	4824      	ldr	r0, [pc, #144]	@ (8012428 <_svfiprintf_r+0x1e8>)
 8012396:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801239a:	2206      	movs	r2, #6
 801239c:	f7ed ffb0 	bl	8000300 <memchr>
 80123a0:	2800      	cmp	r0, #0
 80123a2:	d036      	beq.n	8012412 <_svfiprintf_r+0x1d2>
 80123a4:	4b21      	ldr	r3, [pc, #132]	@ (801242c <_svfiprintf_r+0x1ec>)
 80123a6:	bb1b      	cbnz	r3, 80123f0 <_svfiprintf_r+0x1b0>
 80123a8:	9b03      	ldr	r3, [sp, #12]
 80123aa:	3307      	adds	r3, #7
 80123ac:	f023 0307 	bic.w	r3, r3, #7
 80123b0:	3308      	adds	r3, #8
 80123b2:	9303      	str	r3, [sp, #12]
 80123b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80123b6:	4433      	add	r3, r6
 80123b8:	9309      	str	r3, [sp, #36]	@ 0x24
 80123ba:	e76a      	b.n	8012292 <_svfiprintf_r+0x52>
 80123bc:	fb0c 3202 	mla	r2, ip, r2, r3
 80123c0:	460c      	mov	r4, r1
 80123c2:	2001      	movs	r0, #1
 80123c4:	e7a8      	b.n	8012318 <_svfiprintf_r+0xd8>
 80123c6:	2300      	movs	r3, #0
 80123c8:	3401      	adds	r4, #1
 80123ca:	9305      	str	r3, [sp, #20]
 80123cc:	4619      	mov	r1, r3
 80123ce:	f04f 0c0a 	mov.w	ip, #10
 80123d2:	4620      	mov	r0, r4
 80123d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80123d8:	3a30      	subs	r2, #48	@ 0x30
 80123da:	2a09      	cmp	r2, #9
 80123dc:	d903      	bls.n	80123e6 <_svfiprintf_r+0x1a6>
 80123de:	2b00      	cmp	r3, #0
 80123e0:	d0c6      	beq.n	8012370 <_svfiprintf_r+0x130>
 80123e2:	9105      	str	r1, [sp, #20]
 80123e4:	e7c4      	b.n	8012370 <_svfiprintf_r+0x130>
 80123e6:	fb0c 2101 	mla	r1, ip, r1, r2
 80123ea:	4604      	mov	r4, r0
 80123ec:	2301      	movs	r3, #1
 80123ee:	e7f0      	b.n	80123d2 <_svfiprintf_r+0x192>
 80123f0:	ab03      	add	r3, sp, #12
 80123f2:	9300      	str	r3, [sp, #0]
 80123f4:	462a      	mov	r2, r5
 80123f6:	4b0e      	ldr	r3, [pc, #56]	@ (8012430 <_svfiprintf_r+0x1f0>)
 80123f8:	a904      	add	r1, sp, #16
 80123fa:	4638      	mov	r0, r7
 80123fc:	f7fc fdcc 	bl	800ef98 <_printf_float>
 8012400:	1c42      	adds	r2, r0, #1
 8012402:	4606      	mov	r6, r0
 8012404:	d1d6      	bne.n	80123b4 <_svfiprintf_r+0x174>
 8012406:	89ab      	ldrh	r3, [r5, #12]
 8012408:	065b      	lsls	r3, r3, #25
 801240a:	f53f af2d 	bmi.w	8012268 <_svfiprintf_r+0x28>
 801240e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012410:	e72c      	b.n	801226c <_svfiprintf_r+0x2c>
 8012412:	ab03      	add	r3, sp, #12
 8012414:	9300      	str	r3, [sp, #0]
 8012416:	462a      	mov	r2, r5
 8012418:	4b05      	ldr	r3, [pc, #20]	@ (8012430 <_svfiprintf_r+0x1f0>)
 801241a:	a904      	add	r1, sp, #16
 801241c:	4638      	mov	r0, r7
 801241e:	f7fd f843 	bl	800f4a8 <_printf_i>
 8012422:	e7ed      	b.n	8012400 <_svfiprintf_r+0x1c0>
 8012424:	08013e78 	.word	0x08013e78
 8012428:	08013e82 	.word	0x08013e82
 801242c:	0800ef99 	.word	0x0800ef99
 8012430:	08012189 	.word	0x08012189
 8012434:	08013e7e 	.word	0x08013e7e

08012438 <__sflush_r>:
 8012438:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801243c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012440:	0716      	lsls	r6, r2, #28
 8012442:	4605      	mov	r5, r0
 8012444:	460c      	mov	r4, r1
 8012446:	d454      	bmi.n	80124f2 <__sflush_r+0xba>
 8012448:	684b      	ldr	r3, [r1, #4]
 801244a:	2b00      	cmp	r3, #0
 801244c:	dc02      	bgt.n	8012454 <__sflush_r+0x1c>
 801244e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8012450:	2b00      	cmp	r3, #0
 8012452:	dd48      	ble.n	80124e6 <__sflush_r+0xae>
 8012454:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8012456:	2e00      	cmp	r6, #0
 8012458:	d045      	beq.n	80124e6 <__sflush_r+0xae>
 801245a:	2300      	movs	r3, #0
 801245c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8012460:	682f      	ldr	r7, [r5, #0]
 8012462:	6a21      	ldr	r1, [r4, #32]
 8012464:	602b      	str	r3, [r5, #0]
 8012466:	d030      	beq.n	80124ca <__sflush_r+0x92>
 8012468:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801246a:	89a3      	ldrh	r3, [r4, #12]
 801246c:	0759      	lsls	r1, r3, #29
 801246e:	d505      	bpl.n	801247c <__sflush_r+0x44>
 8012470:	6863      	ldr	r3, [r4, #4]
 8012472:	1ad2      	subs	r2, r2, r3
 8012474:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8012476:	b10b      	cbz	r3, 801247c <__sflush_r+0x44>
 8012478:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801247a:	1ad2      	subs	r2, r2, r3
 801247c:	2300      	movs	r3, #0
 801247e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8012480:	6a21      	ldr	r1, [r4, #32]
 8012482:	4628      	mov	r0, r5
 8012484:	47b0      	blx	r6
 8012486:	1c43      	adds	r3, r0, #1
 8012488:	89a3      	ldrh	r3, [r4, #12]
 801248a:	d106      	bne.n	801249a <__sflush_r+0x62>
 801248c:	6829      	ldr	r1, [r5, #0]
 801248e:	291d      	cmp	r1, #29
 8012490:	d82b      	bhi.n	80124ea <__sflush_r+0xb2>
 8012492:	4a2a      	ldr	r2, [pc, #168]	@ (801253c <__sflush_r+0x104>)
 8012494:	410a      	asrs	r2, r1
 8012496:	07d6      	lsls	r6, r2, #31
 8012498:	d427      	bmi.n	80124ea <__sflush_r+0xb2>
 801249a:	2200      	movs	r2, #0
 801249c:	6062      	str	r2, [r4, #4]
 801249e:	04d9      	lsls	r1, r3, #19
 80124a0:	6922      	ldr	r2, [r4, #16]
 80124a2:	6022      	str	r2, [r4, #0]
 80124a4:	d504      	bpl.n	80124b0 <__sflush_r+0x78>
 80124a6:	1c42      	adds	r2, r0, #1
 80124a8:	d101      	bne.n	80124ae <__sflush_r+0x76>
 80124aa:	682b      	ldr	r3, [r5, #0]
 80124ac:	b903      	cbnz	r3, 80124b0 <__sflush_r+0x78>
 80124ae:	6560      	str	r0, [r4, #84]	@ 0x54
 80124b0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80124b2:	602f      	str	r7, [r5, #0]
 80124b4:	b1b9      	cbz	r1, 80124e6 <__sflush_r+0xae>
 80124b6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80124ba:	4299      	cmp	r1, r3
 80124bc:	d002      	beq.n	80124c4 <__sflush_r+0x8c>
 80124be:	4628      	mov	r0, r5
 80124c0:	f7fe fafc 	bl	8010abc <_free_r>
 80124c4:	2300      	movs	r3, #0
 80124c6:	6363      	str	r3, [r4, #52]	@ 0x34
 80124c8:	e00d      	b.n	80124e6 <__sflush_r+0xae>
 80124ca:	2301      	movs	r3, #1
 80124cc:	4628      	mov	r0, r5
 80124ce:	47b0      	blx	r6
 80124d0:	4602      	mov	r2, r0
 80124d2:	1c50      	adds	r0, r2, #1
 80124d4:	d1c9      	bne.n	801246a <__sflush_r+0x32>
 80124d6:	682b      	ldr	r3, [r5, #0]
 80124d8:	2b00      	cmp	r3, #0
 80124da:	d0c6      	beq.n	801246a <__sflush_r+0x32>
 80124dc:	2b1d      	cmp	r3, #29
 80124de:	d001      	beq.n	80124e4 <__sflush_r+0xac>
 80124e0:	2b16      	cmp	r3, #22
 80124e2:	d11e      	bne.n	8012522 <__sflush_r+0xea>
 80124e4:	602f      	str	r7, [r5, #0]
 80124e6:	2000      	movs	r0, #0
 80124e8:	e022      	b.n	8012530 <__sflush_r+0xf8>
 80124ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80124ee:	b21b      	sxth	r3, r3
 80124f0:	e01b      	b.n	801252a <__sflush_r+0xf2>
 80124f2:	690f      	ldr	r7, [r1, #16]
 80124f4:	2f00      	cmp	r7, #0
 80124f6:	d0f6      	beq.n	80124e6 <__sflush_r+0xae>
 80124f8:	0793      	lsls	r3, r2, #30
 80124fa:	680e      	ldr	r6, [r1, #0]
 80124fc:	bf08      	it	eq
 80124fe:	694b      	ldreq	r3, [r1, #20]
 8012500:	600f      	str	r7, [r1, #0]
 8012502:	bf18      	it	ne
 8012504:	2300      	movne	r3, #0
 8012506:	eba6 0807 	sub.w	r8, r6, r7
 801250a:	608b      	str	r3, [r1, #8]
 801250c:	f1b8 0f00 	cmp.w	r8, #0
 8012510:	dde9      	ble.n	80124e6 <__sflush_r+0xae>
 8012512:	6a21      	ldr	r1, [r4, #32]
 8012514:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8012516:	4643      	mov	r3, r8
 8012518:	463a      	mov	r2, r7
 801251a:	4628      	mov	r0, r5
 801251c:	47b0      	blx	r6
 801251e:	2800      	cmp	r0, #0
 8012520:	dc08      	bgt.n	8012534 <__sflush_r+0xfc>
 8012522:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012526:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801252a:	81a3      	strh	r3, [r4, #12]
 801252c:	f04f 30ff 	mov.w	r0, #4294967295
 8012530:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012534:	4407      	add	r7, r0
 8012536:	eba8 0800 	sub.w	r8, r8, r0
 801253a:	e7e7      	b.n	801250c <__sflush_r+0xd4>
 801253c:	dfbffffe 	.word	0xdfbffffe

08012540 <_fflush_r>:
 8012540:	b538      	push	{r3, r4, r5, lr}
 8012542:	690b      	ldr	r3, [r1, #16]
 8012544:	4605      	mov	r5, r0
 8012546:	460c      	mov	r4, r1
 8012548:	b913      	cbnz	r3, 8012550 <_fflush_r+0x10>
 801254a:	2500      	movs	r5, #0
 801254c:	4628      	mov	r0, r5
 801254e:	bd38      	pop	{r3, r4, r5, pc}
 8012550:	b118      	cbz	r0, 801255a <_fflush_r+0x1a>
 8012552:	6a03      	ldr	r3, [r0, #32]
 8012554:	b90b      	cbnz	r3, 801255a <_fflush_r+0x1a>
 8012556:	f7fd fb5f 	bl	800fc18 <__sinit>
 801255a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801255e:	2b00      	cmp	r3, #0
 8012560:	d0f3      	beq.n	801254a <_fflush_r+0xa>
 8012562:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8012564:	07d0      	lsls	r0, r2, #31
 8012566:	d404      	bmi.n	8012572 <_fflush_r+0x32>
 8012568:	0599      	lsls	r1, r3, #22
 801256a:	d402      	bmi.n	8012572 <_fflush_r+0x32>
 801256c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801256e:	f7fd fcb0 	bl	800fed2 <__retarget_lock_acquire_recursive>
 8012572:	4628      	mov	r0, r5
 8012574:	4621      	mov	r1, r4
 8012576:	f7ff ff5f 	bl	8012438 <__sflush_r>
 801257a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801257c:	07da      	lsls	r2, r3, #31
 801257e:	4605      	mov	r5, r0
 8012580:	d4e4      	bmi.n	801254c <_fflush_r+0xc>
 8012582:	89a3      	ldrh	r3, [r4, #12]
 8012584:	059b      	lsls	r3, r3, #22
 8012586:	d4e1      	bmi.n	801254c <_fflush_r+0xc>
 8012588:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801258a:	f7fd fca3 	bl	800fed4 <__retarget_lock_release_recursive>
 801258e:	e7dd      	b.n	801254c <_fflush_r+0xc>

08012590 <memmove>:
 8012590:	4288      	cmp	r0, r1
 8012592:	b510      	push	{r4, lr}
 8012594:	eb01 0402 	add.w	r4, r1, r2
 8012598:	d902      	bls.n	80125a0 <memmove+0x10>
 801259a:	4284      	cmp	r4, r0
 801259c:	4623      	mov	r3, r4
 801259e:	d807      	bhi.n	80125b0 <memmove+0x20>
 80125a0:	1e43      	subs	r3, r0, #1
 80125a2:	42a1      	cmp	r1, r4
 80125a4:	d008      	beq.n	80125b8 <memmove+0x28>
 80125a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80125aa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80125ae:	e7f8      	b.n	80125a2 <memmove+0x12>
 80125b0:	4402      	add	r2, r0
 80125b2:	4601      	mov	r1, r0
 80125b4:	428a      	cmp	r2, r1
 80125b6:	d100      	bne.n	80125ba <memmove+0x2a>
 80125b8:	bd10      	pop	{r4, pc}
 80125ba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80125be:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80125c2:	e7f7      	b.n	80125b4 <memmove+0x24>

080125c4 <_sbrk_r>:
 80125c4:	b538      	push	{r3, r4, r5, lr}
 80125c6:	4d06      	ldr	r5, [pc, #24]	@ (80125e0 <_sbrk_r+0x1c>)
 80125c8:	2300      	movs	r3, #0
 80125ca:	4604      	mov	r4, r0
 80125cc:	4608      	mov	r0, r1
 80125ce:	602b      	str	r3, [r5, #0]
 80125d0:	f7f0 f850 	bl	8002674 <_sbrk>
 80125d4:	1c43      	adds	r3, r0, #1
 80125d6:	d102      	bne.n	80125de <_sbrk_r+0x1a>
 80125d8:	682b      	ldr	r3, [r5, #0]
 80125da:	b103      	cbz	r3, 80125de <_sbrk_r+0x1a>
 80125dc:	6023      	str	r3, [r4, #0]
 80125de:	bd38      	pop	{r3, r4, r5, pc}
 80125e0:	240005c0 	.word	0x240005c0
 80125e4:	00000000 	.word	0x00000000

080125e8 <nan>:
 80125e8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80125f0 <nan+0x8>
 80125ec:	4770      	bx	lr
 80125ee:	bf00      	nop
 80125f0:	00000000 	.word	0x00000000
 80125f4:	7ff80000 	.word	0x7ff80000

080125f8 <__assert_func>:
 80125f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80125fa:	4614      	mov	r4, r2
 80125fc:	461a      	mov	r2, r3
 80125fe:	4b09      	ldr	r3, [pc, #36]	@ (8012624 <__assert_func+0x2c>)
 8012600:	681b      	ldr	r3, [r3, #0]
 8012602:	4605      	mov	r5, r0
 8012604:	68d8      	ldr	r0, [r3, #12]
 8012606:	b954      	cbnz	r4, 801261e <__assert_func+0x26>
 8012608:	4b07      	ldr	r3, [pc, #28]	@ (8012628 <__assert_func+0x30>)
 801260a:	461c      	mov	r4, r3
 801260c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012610:	9100      	str	r1, [sp, #0]
 8012612:	462b      	mov	r3, r5
 8012614:	4905      	ldr	r1, [pc, #20]	@ (801262c <__assert_func+0x34>)
 8012616:	f000 fba7 	bl	8012d68 <fiprintf>
 801261a:	f000 fbb7 	bl	8012d8c <abort>
 801261e:	4b04      	ldr	r3, [pc, #16]	@ (8012630 <__assert_func+0x38>)
 8012620:	e7f4      	b.n	801260c <__assert_func+0x14>
 8012622:	bf00      	nop
 8012624:	2400002c 	.word	0x2400002c
 8012628:	08013ecc 	.word	0x08013ecc
 801262c:	08013e9e 	.word	0x08013e9e
 8012630:	08013e91 	.word	0x08013e91

08012634 <_calloc_r>:
 8012634:	b570      	push	{r4, r5, r6, lr}
 8012636:	fba1 5402 	umull	r5, r4, r1, r2
 801263a:	b93c      	cbnz	r4, 801264c <_calloc_r+0x18>
 801263c:	4629      	mov	r1, r5
 801263e:	f7fe fab1 	bl	8010ba4 <_malloc_r>
 8012642:	4606      	mov	r6, r0
 8012644:	b928      	cbnz	r0, 8012652 <_calloc_r+0x1e>
 8012646:	2600      	movs	r6, #0
 8012648:	4630      	mov	r0, r6
 801264a:	bd70      	pop	{r4, r5, r6, pc}
 801264c:	220c      	movs	r2, #12
 801264e:	6002      	str	r2, [r0, #0]
 8012650:	e7f9      	b.n	8012646 <_calloc_r+0x12>
 8012652:	462a      	mov	r2, r5
 8012654:	4621      	mov	r1, r4
 8012656:	f7fd fbac 	bl	800fdb2 <memset>
 801265a:	e7f5      	b.n	8012648 <_calloc_r+0x14>

0801265c <rshift>:
 801265c:	6903      	ldr	r3, [r0, #16]
 801265e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8012662:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012666:	ea4f 1261 	mov.w	r2, r1, asr #5
 801266a:	f100 0414 	add.w	r4, r0, #20
 801266e:	dd45      	ble.n	80126fc <rshift+0xa0>
 8012670:	f011 011f 	ands.w	r1, r1, #31
 8012674:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8012678:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801267c:	d10c      	bne.n	8012698 <rshift+0x3c>
 801267e:	f100 0710 	add.w	r7, r0, #16
 8012682:	4629      	mov	r1, r5
 8012684:	42b1      	cmp	r1, r6
 8012686:	d334      	bcc.n	80126f2 <rshift+0x96>
 8012688:	1a9b      	subs	r3, r3, r2
 801268a:	009b      	lsls	r3, r3, #2
 801268c:	1eea      	subs	r2, r5, #3
 801268e:	4296      	cmp	r6, r2
 8012690:	bf38      	it	cc
 8012692:	2300      	movcc	r3, #0
 8012694:	4423      	add	r3, r4
 8012696:	e015      	b.n	80126c4 <rshift+0x68>
 8012698:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801269c:	f1c1 0820 	rsb	r8, r1, #32
 80126a0:	40cf      	lsrs	r7, r1
 80126a2:	f105 0e04 	add.w	lr, r5, #4
 80126a6:	46a1      	mov	r9, r4
 80126a8:	4576      	cmp	r6, lr
 80126aa:	46f4      	mov	ip, lr
 80126ac:	d815      	bhi.n	80126da <rshift+0x7e>
 80126ae:	1a9a      	subs	r2, r3, r2
 80126b0:	0092      	lsls	r2, r2, #2
 80126b2:	3a04      	subs	r2, #4
 80126b4:	3501      	adds	r5, #1
 80126b6:	42ae      	cmp	r6, r5
 80126b8:	bf38      	it	cc
 80126ba:	2200      	movcc	r2, #0
 80126bc:	18a3      	adds	r3, r4, r2
 80126be:	50a7      	str	r7, [r4, r2]
 80126c0:	b107      	cbz	r7, 80126c4 <rshift+0x68>
 80126c2:	3304      	adds	r3, #4
 80126c4:	1b1a      	subs	r2, r3, r4
 80126c6:	42a3      	cmp	r3, r4
 80126c8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80126cc:	bf08      	it	eq
 80126ce:	2300      	moveq	r3, #0
 80126d0:	6102      	str	r2, [r0, #16]
 80126d2:	bf08      	it	eq
 80126d4:	6143      	streq	r3, [r0, #20]
 80126d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80126da:	f8dc c000 	ldr.w	ip, [ip]
 80126de:	fa0c fc08 	lsl.w	ip, ip, r8
 80126e2:	ea4c 0707 	orr.w	r7, ip, r7
 80126e6:	f849 7b04 	str.w	r7, [r9], #4
 80126ea:	f85e 7b04 	ldr.w	r7, [lr], #4
 80126ee:	40cf      	lsrs	r7, r1
 80126f0:	e7da      	b.n	80126a8 <rshift+0x4c>
 80126f2:	f851 cb04 	ldr.w	ip, [r1], #4
 80126f6:	f847 cf04 	str.w	ip, [r7, #4]!
 80126fa:	e7c3      	b.n	8012684 <rshift+0x28>
 80126fc:	4623      	mov	r3, r4
 80126fe:	e7e1      	b.n	80126c4 <rshift+0x68>

08012700 <__hexdig_fun>:
 8012700:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8012704:	2b09      	cmp	r3, #9
 8012706:	d802      	bhi.n	801270e <__hexdig_fun+0xe>
 8012708:	3820      	subs	r0, #32
 801270a:	b2c0      	uxtb	r0, r0
 801270c:	4770      	bx	lr
 801270e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8012712:	2b05      	cmp	r3, #5
 8012714:	d801      	bhi.n	801271a <__hexdig_fun+0x1a>
 8012716:	3847      	subs	r0, #71	@ 0x47
 8012718:	e7f7      	b.n	801270a <__hexdig_fun+0xa>
 801271a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 801271e:	2b05      	cmp	r3, #5
 8012720:	d801      	bhi.n	8012726 <__hexdig_fun+0x26>
 8012722:	3827      	subs	r0, #39	@ 0x27
 8012724:	e7f1      	b.n	801270a <__hexdig_fun+0xa>
 8012726:	2000      	movs	r0, #0
 8012728:	4770      	bx	lr
	...

0801272c <__gethex>:
 801272c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012730:	b085      	sub	sp, #20
 8012732:	468a      	mov	sl, r1
 8012734:	9302      	str	r3, [sp, #8]
 8012736:	680b      	ldr	r3, [r1, #0]
 8012738:	9001      	str	r0, [sp, #4]
 801273a:	4690      	mov	r8, r2
 801273c:	1c9c      	adds	r4, r3, #2
 801273e:	46a1      	mov	r9, r4
 8012740:	f814 0b01 	ldrb.w	r0, [r4], #1
 8012744:	2830      	cmp	r0, #48	@ 0x30
 8012746:	d0fa      	beq.n	801273e <__gethex+0x12>
 8012748:	eba9 0303 	sub.w	r3, r9, r3
 801274c:	f1a3 0b02 	sub.w	fp, r3, #2
 8012750:	f7ff ffd6 	bl	8012700 <__hexdig_fun>
 8012754:	4605      	mov	r5, r0
 8012756:	2800      	cmp	r0, #0
 8012758:	d168      	bne.n	801282c <__gethex+0x100>
 801275a:	49a0      	ldr	r1, [pc, #640]	@ (80129dc <__gethex+0x2b0>)
 801275c:	2201      	movs	r2, #1
 801275e:	4648      	mov	r0, r9
 8012760:	f7fd fb2f 	bl	800fdc2 <strncmp>
 8012764:	4607      	mov	r7, r0
 8012766:	2800      	cmp	r0, #0
 8012768:	d167      	bne.n	801283a <__gethex+0x10e>
 801276a:	f899 0001 	ldrb.w	r0, [r9, #1]
 801276e:	4626      	mov	r6, r4
 8012770:	f7ff ffc6 	bl	8012700 <__hexdig_fun>
 8012774:	2800      	cmp	r0, #0
 8012776:	d062      	beq.n	801283e <__gethex+0x112>
 8012778:	4623      	mov	r3, r4
 801277a:	7818      	ldrb	r0, [r3, #0]
 801277c:	2830      	cmp	r0, #48	@ 0x30
 801277e:	4699      	mov	r9, r3
 8012780:	f103 0301 	add.w	r3, r3, #1
 8012784:	d0f9      	beq.n	801277a <__gethex+0x4e>
 8012786:	f7ff ffbb 	bl	8012700 <__hexdig_fun>
 801278a:	fab0 f580 	clz	r5, r0
 801278e:	096d      	lsrs	r5, r5, #5
 8012790:	f04f 0b01 	mov.w	fp, #1
 8012794:	464a      	mov	r2, r9
 8012796:	4616      	mov	r6, r2
 8012798:	3201      	adds	r2, #1
 801279a:	7830      	ldrb	r0, [r6, #0]
 801279c:	f7ff ffb0 	bl	8012700 <__hexdig_fun>
 80127a0:	2800      	cmp	r0, #0
 80127a2:	d1f8      	bne.n	8012796 <__gethex+0x6a>
 80127a4:	498d      	ldr	r1, [pc, #564]	@ (80129dc <__gethex+0x2b0>)
 80127a6:	2201      	movs	r2, #1
 80127a8:	4630      	mov	r0, r6
 80127aa:	f7fd fb0a 	bl	800fdc2 <strncmp>
 80127ae:	2800      	cmp	r0, #0
 80127b0:	d13f      	bne.n	8012832 <__gethex+0x106>
 80127b2:	b944      	cbnz	r4, 80127c6 <__gethex+0x9a>
 80127b4:	1c74      	adds	r4, r6, #1
 80127b6:	4622      	mov	r2, r4
 80127b8:	4616      	mov	r6, r2
 80127ba:	3201      	adds	r2, #1
 80127bc:	7830      	ldrb	r0, [r6, #0]
 80127be:	f7ff ff9f 	bl	8012700 <__hexdig_fun>
 80127c2:	2800      	cmp	r0, #0
 80127c4:	d1f8      	bne.n	80127b8 <__gethex+0x8c>
 80127c6:	1ba4      	subs	r4, r4, r6
 80127c8:	00a7      	lsls	r7, r4, #2
 80127ca:	7833      	ldrb	r3, [r6, #0]
 80127cc:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 80127d0:	2b50      	cmp	r3, #80	@ 0x50
 80127d2:	d13e      	bne.n	8012852 <__gethex+0x126>
 80127d4:	7873      	ldrb	r3, [r6, #1]
 80127d6:	2b2b      	cmp	r3, #43	@ 0x2b
 80127d8:	d033      	beq.n	8012842 <__gethex+0x116>
 80127da:	2b2d      	cmp	r3, #45	@ 0x2d
 80127dc:	d034      	beq.n	8012848 <__gethex+0x11c>
 80127de:	1c71      	adds	r1, r6, #1
 80127e0:	2400      	movs	r4, #0
 80127e2:	7808      	ldrb	r0, [r1, #0]
 80127e4:	f7ff ff8c 	bl	8012700 <__hexdig_fun>
 80127e8:	1e43      	subs	r3, r0, #1
 80127ea:	b2db      	uxtb	r3, r3
 80127ec:	2b18      	cmp	r3, #24
 80127ee:	d830      	bhi.n	8012852 <__gethex+0x126>
 80127f0:	f1a0 0210 	sub.w	r2, r0, #16
 80127f4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80127f8:	f7ff ff82 	bl	8012700 <__hexdig_fun>
 80127fc:	f100 3cff 	add.w	ip, r0, #4294967295
 8012800:	fa5f fc8c 	uxtb.w	ip, ip
 8012804:	f1bc 0f18 	cmp.w	ip, #24
 8012808:	f04f 030a 	mov.w	r3, #10
 801280c:	d91e      	bls.n	801284c <__gethex+0x120>
 801280e:	b104      	cbz	r4, 8012812 <__gethex+0xe6>
 8012810:	4252      	negs	r2, r2
 8012812:	4417      	add	r7, r2
 8012814:	f8ca 1000 	str.w	r1, [sl]
 8012818:	b1ed      	cbz	r5, 8012856 <__gethex+0x12a>
 801281a:	f1bb 0f00 	cmp.w	fp, #0
 801281e:	bf0c      	ite	eq
 8012820:	2506      	moveq	r5, #6
 8012822:	2500      	movne	r5, #0
 8012824:	4628      	mov	r0, r5
 8012826:	b005      	add	sp, #20
 8012828:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801282c:	2500      	movs	r5, #0
 801282e:	462c      	mov	r4, r5
 8012830:	e7b0      	b.n	8012794 <__gethex+0x68>
 8012832:	2c00      	cmp	r4, #0
 8012834:	d1c7      	bne.n	80127c6 <__gethex+0x9a>
 8012836:	4627      	mov	r7, r4
 8012838:	e7c7      	b.n	80127ca <__gethex+0x9e>
 801283a:	464e      	mov	r6, r9
 801283c:	462f      	mov	r7, r5
 801283e:	2501      	movs	r5, #1
 8012840:	e7c3      	b.n	80127ca <__gethex+0x9e>
 8012842:	2400      	movs	r4, #0
 8012844:	1cb1      	adds	r1, r6, #2
 8012846:	e7cc      	b.n	80127e2 <__gethex+0xb6>
 8012848:	2401      	movs	r4, #1
 801284a:	e7fb      	b.n	8012844 <__gethex+0x118>
 801284c:	fb03 0002 	mla	r0, r3, r2, r0
 8012850:	e7ce      	b.n	80127f0 <__gethex+0xc4>
 8012852:	4631      	mov	r1, r6
 8012854:	e7de      	b.n	8012814 <__gethex+0xe8>
 8012856:	eba6 0309 	sub.w	r3, r6, r9
 801285a:	3b01      	subs	r3, #1
 801285c:	4629      	mov	r1, r5
 801285e:	2b07      	cmp	r3, #7
 8012860:	dc0a      	bgt.n	8012878 <__gethex+0x14c>
 8012862:	9801      	ldr	r0, [sp, #4]
 8012864:	f7fe fa2a 	bl	8010cbc <_Balloc>
 8012868:	4604      	mov	r4, r0
 801286a:	b940      	cbnz	r0, 801287e <__gethex+0x152>
 801286c:	4b5c      	ldr	r3, [pc, #368]	@ (80129e0 <__gethex+0x2b4>)
 801286e:	4602      	mov	r2, r0
 8012870:	21e4      	movs	r1, #228	@ 0xe4
 8012872:	485c      	ldr	r0, [pc, #368]	@ (80129e4 <__gethex+0x2b8>)
 8012874:	f7ff fec0 	bl	80125f8 <__assert_func>
 8012878:	3101      	adds	r1, #1
 801287a:	105b      	asrs	r3, r3, #1
 801287c:	e7ef      	b.n	801285e <__gethex+0x132>
 801287e:	f100 0a14 	add.w	sl, r0, #20
 8012882:	2300      	movs	r3, #0
 8012884:	4655      	mov	r5, sl
 8012886:	469b      	mov	fp, r3
 8012888:	45b1      	cmp	r9, r6
 801288a:	d337      	bcc.n	80128fc <__gethex+0x1d0>
 801288c:	f845 bb04 	str.w	fp, [r5], #4
 8012890:	eba5 050a 	sub.w	r5, r5, sl
 8012894:	10ad      	asrs	r5, r5, #2
 8012896:	6125      	str	r5, [r4, #16]
 8012898:	4658      	mov	r0, fp
 801289a:	f7fe fb01 	bl	8010ea0 <__hi0bits>
 801289e:	016d      	lsls	r5, r5, #5
 80128a0:	f8d8 6000 	ldr.w	r6, [r8]
 80128a4:	1a2d      	subs	r5, r5, r0
 80128a6:	42b5      	cmp	r5, r6
 80128a8:	dd54      	ble.n	8012954 <__gethex+0x228>
 80128aa:	1bad      	subs	r5, r5, r6
 80128ac:	4629      	mov	r1, r5
 80128ae:	4620      	mov	r0, r4
 80128b0:	f7fe fe92 	bl	80115d8 <__any_on>
 80128b4:	4681      	mov	r9, r0
 80128b6:	b178      	cbz	r0, 80128d8 <__gethex+0x1ac>
 80128b8:	1e6b      	subs	r3, r5, #1
 80128ba:	1159      	asrs	r1, r3, #5
 80128bc:	f003 021f 	and.w	r2, r3, #31
 80128c0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80128c4:	f04f 0901 	mov.w	r9, #1
 80128c8:	fa09 f202 	lsl.w	r2, r9, r2
 80128cc:	420a      	tst	r2, r1
 80128ce:	d003      	beq.n	80128d8 <__gethex+0x1ac>
 80128d0:	454b      	cmp	r3, r9
 80128d2:	dc36      	bgt.n	8012942 <__gethex+0x216>
 80128d4:	f04f 0902 	mov.w	r9, #2
 80128d8:	4629      	mov	r1, r5
 80128da:	4620      	mov	r0, r4
 80128dc:	f7ff febe 	bl	801265c <rshift>
 80128e0:	442f      	add	r7, r5
 80128e2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80128e6:	42bb      	cmp	r3, r7
 80128e8:	da42      	bge.n	8012970 <__gethex+0x244>
 80128ea:	9801      	ldr	r0, [sp, #4]
 80128ec:	4621      	mov	r1, r4
 80128ee:	f7fe fa25 	bl	8010d3c <_Bfree>
 80128f2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80128f4:	2300      	movs	r3, #0
 80128f6:	6013      	str	r3, [r2, #0]
 80128f8:	25a3      	movs	r5, #163	@ 0xa3
 80128fa:	e793      	b.n	8012824 <__gethex+0xf8>
 80128fc:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8012900:	2a2e      	cmp	r2, #46	@ 0x2e
 8012902:	d012      	beq.n	801292a <__gethex+0x1fe>
 8012904:	2b20      	cmp	r3, #32
 8012906:	d104      	bne.n	8012912 <__gethex+0x1e6>
 8012908:	f845 bb04 	str.w	fp, [r5], #4
 801290c:	f04f 0b00 	mov.w	fp, #0
 8012910:	465b      	mov	r3, fp
 8012912:	7830      	ldrb	r0, [r6, #0]
 8012914:	9303      	str	r3, [sp, #12]
 8012916:	f7ff fef3 	bl	8012700 <__hexdig_fun>
 801291a:	9b03      	ldr	r3, [sp, #12]
 801291c:	f000 000f 	and.w	r0, r0, #15
 8012920:	4098      	lsls	r0, r3
 8012922:	ea4b 0b00 	orr.w	fp, fp, r0
 8012926:	3304      	adds	r3, #4
 8012928:	e7ae      	b.n	8012888 <__gethex+0x15c>
 801292a:	45b1      	cmp	r9, r6
 801292c:	d8ea      	bhi.n	8012904 <__gethex+0x1d8>
 801292e:	492b      	ldr	r1, [pc, #172]	@ (80129dc <__gethex+0x2b0>)
 8012930:	9303      	str	r3, [sp, #12]
 8012932:	2201      	movs	r2, #1
 8012934:	4630      	mov	r0, r6
 8012936:	f7fd fa44 	bl	800fdc2 <strncmp>
 801293a:	9b03      	ldr	r3, [sp, #12]
 801293c:	2800      	cmp	r0, #0
 801293e:	d1e1      	bne.n	8012904 <__gethex+0x1d8>
 8012940:	e7a2      	b.n	8012888 <__gethex+0x15c>
 8012942:	1ea9      	subs	r1, r5, #2
 8012944:	4620      	mov	r0, r4
 8012946:	f7fe fe47 	bl	80115d8 <__any_on>
 801294a:	2800      	cmp	r0, #0
 801294c:	d0c2      	beq.n	80128d4 <__gethex+0x1a8>
 801294e:	f04f 0903 	mov.w	r9, #3
 8012952:	e7c1      	b.n	80128d8 <__gethex+0x1ac>
 8012954:	da09      	bge.n	801296a <__gethex+0x23e>
 8012956:	1b75      	subs	r5, r6, r5
 8012958:	4621      	mov	r1, r4
 801295a:	9801      	ldr	r0, [sp, #4]
 801295c:	462a      	mov	r2, r5
 801295e:	f7fe fc05 	bl	801116c <__lshift>
 8012962:	1b7f      	subs	r7, r7, r5
 8012964:	4604      	mov	r4, r0
 8012966:	f100 0a14 	add.w	sl, r0, #20
 801296a:	f04f 0900 	mov.w	r9, #0
 801296e:	e7b8      	b.n	80128e2 <__gethex+0x1b6>
 8012970:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8012974:	42bd      	cmp	r5, r7
 8012976:	dd6f      	ble.n	8012a58 <__gethex+0x32c>
 8012978:	1bed      	subs	r5, r5, r7
 801297a:	42ae      	cmp	r6, r5
 801297c:	dc34      	bgt.n	80129e8 <__gethex+0x2bc>
 801297e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8012982:	2b02      	cmp	r3, #2
 8012984:	d022      	beq.n	80129cc <__gethex+0x2a0>
 8012986:	2b03      	cmp	r3, #3
 8012988:	d024      	beq.n	80129d4 <__gethex+0x2a8>
 801298a:	2b01      	cmp	r3, #1
 801298c:	d115      	bne.n	80129ba <__gethex+0x28e>
 801298e:	42ae      	cmp	r6, r5
 8012990:	d113      	bne.n	80129ba <__gethex+0x28e>
 8012992:	2e01      	cmp	r6, #1
 8012994:	d10b      	bne.n	80129ae <__gethex+0x282>
 8012996:	9a02      	ldr	r2, [sp, #8]
 8012998:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801299c:	6013      	str	r3, [r2, #0]
 801299e:	2301      	movs	r3, #1
 80129a0:	6123      	str	r3, [r4, #16]
 80129a2:	f8ca 3000 	str.w	r3, [sl]
 80129a6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80129a8:	2562      	movs	r5, #98	@ 0x62
 80129aa:	601c      	str	r4, [r3, #0]
 80129ac:	e73a      	b.n	8012824 <__gethex+0xf8>
 80129ae:	1e71      	subs	r1, r6, #1
 80129b0:	4620      	mov	r0, r4
 80129b2:	f7fe fe11 	bl	80115d8 <__any_on>
 80129b6:	2800      	cmp	r0, #0
 80129b8:	d1ed      	bne.n	8012996 <__gethex+0x26a>
 80129ba:	9801      	ldr	r0, [sp, #4]
 80129bc:	4621      	mov	r1, r4
 80129be:	f7fe f9bd 	bl	8010d3c <_Bfree>
 80129c2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80129c4:	2300      	movs	r3, #0
 80129c6:	6013      	str	r3, [r2, #0]
 80129c8:	2550      	movs	r5, #80	@ 0x50
 80129ca:	e72b      	b.n	8012824 <__gethex+0xf8>
 80129cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80129ce:	2b00      	cmp	r3, #0
 80129d0:	d1f3      	bne.n	80129ba <__gethex+0x28e>
 80129d2:	e7e0      	b.n	8012996 <__gethex+0x26a>
 80129d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80129d6:	2b00      	cmp	r3, #0
 80129d8:	d1dd      	bne.n	8012996 <__gethex+0x26a>
 80129da:	e7ee      	b.n	80129ba <__gethex+0x28e>
 80129dc:	08013e20 	.word	0x08013e20
 80129e0:	08013cb6 	.word	0x08013cb6
 80129e4:	08013ecd 	.word	0x08013ecd
 80129e8:	1e6f      	subs	r7, r5, #1
 80129ea:	f1b9 0f00 	cmp.w	r9, #0
 80129ee:	d130      	bne.n	8012a52 <__gethex+0x326>
 80129f0:	b127      	cbz	r7, 80129fc <__gethex+0x2d0>
 80129f2:	4639      	mov	r1, r7
 80129f4:	4620      	mov	r0, r4
 80129f6:	f7fe fdef 	bl	80115d8 <__any_on>
 80129fa:	4681      	mov	r9, r0
 80129fc:	117a      	asrs	r2, r7, #5
 80129fe:	2301      	movs	r3, #1
 8012a00:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8012a04:	f007 071f 	and.w	r7, r7, #31
 8012a08:	40bb      	lsls	r3, r7
 8012a0a:	4213      	tst	r3, r2
 8012a0c:	4629      	mov	r1, r5
 8012a0e:	4620      	mov	r0, r4
 8012a10:	bf18      	it	ne
 8012a12:	f049 0902 	orrne.w	r9, r9, #2
 8012a16:	f7ff fe21 	bl	801265c <rshift>
 8012a1a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8012a1e:	1b76      	subs	r6, r6, r5
 8012a20:	2502      	movs	r5, #2
 8012a22:	f1b9 0f00 	cmp.w	r9, #0
 8012a26:	d047      	beq.n	8012ab8 <__gethex+0x38c>
 8012a28:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8012a2c:	2b02      	cmp	r3, #2
 8012a2e:	d015      	beq.n	8012a5c <__gethex+0x330>
 8012a30:	2b03      	cmp	r3, #3
 8012a32:	d017      	beq.n	8012a64 <__gethex+0x338>
 8012a34:	2b01      	cmp	r3, #1
 8012a36:	d109      	bne.n	8012a4c <__gethex+0x320>
 8012a38:	f019 0f02 	tst.w	r9, #2
 8012a3c:	d006      	beq.n	8012a4c <__gethex+0x320>
 8012a3e:	f8da 3000 	ldr.w	r3, [sl]
 8012a42:	ea49 0903 	orr.w	r9, r9, r3
 8012a46:	f019 0f01 	tst.w	r9, #1
 8012a4a:	d10e      	bne.n	8012a6a <__gethex+0x33e>
 8012a4c:	f045 0510 	orr.w	r5, r5, #16
 8012a50:	e032      	b.n	8012ab8 <__gethex+0x38c>
 8012a52:	f04f 0901 	mov.w	r9, #1
 8012a56:	e7d1      	b.n	80129fc <__gethex+0x2d0>
 8012a58:	2501      	movs	r5, #1
 8012a5a:	e7e2      	b.n	8012a22 <__gethex+0x2f6>
 8012a5c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012a5e:	f1c3 0301 	rsb	r3, r3, #1
 8012a62:	930f      	str	r3, [sp, #60]	@ 0x3c
 8012a64:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012a66:	2b00      	cmp	r3, #0
 8012a68:	d0f0      	beq.n	8012a4c <__gethex+0x320>
 8012a6a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8012a6e:	f104 0314 	add.w	r3, r4, #20
 8012a72:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8012a76:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8012a7a:	f04f 0c00 	mov.w	ip, #0
 8012a7e:	4618      	mov	r0, r3
 8012a80:	f853 2b04 	ldr.w	r2, [r3], #4
 8012a84:	f1b2 3fff 	cmp.w	r2, #4294967295
 8012a88:	d01b      	beq.n	8012ac2 <__gethex+0x396>
 8012a8a:	3201      	adds	r2, #1
 8012a8c:	6002      	str	r2, [r0, #0]
 8012a8e:	2d02      	cmp	r5, #2
 8012a90:	f104 0314 	add.w	r3, r4, #20
 8012a94:	d13c      	bne.n	8012b10 <__gethex+0x3e4>
 8012a96:	f8d8 2000 	ldr.w	r2, [r8]
 8012a9a:	3a01      	subs	r2, #1
 8012a9c:	42b2      	cmp	r2, r6
 8012a9e:	d109      	bne.n	8012ab4 <__gethex+0x388>
 8012aa0:	1171      	asrs	r1, r6, #5
 8012aa2:	2201      	movs	r2, #1
 8012aa4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8012aa8:	f006 061f 	and.w	r6, r6, #31
 8012aac:	fa02 f606 	lsl.w	r6, r2, r6
 8012ab0:	421e      	tst	r6, r3
 8012ab2:	d13a      	bne.n	8012b2a <__gethex+0x3fe>
 8012ab4:	f045 0520 	orr.w	r5, r5, #32
 8012ab8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012aba:	601c      	str	r4, [r3, #0]
 8012abc:	9b02      	ldr	r3, [sp, #8]
 8012abe:	601f      	str	r7, [r3, #0]
 8012ac0:	e6b0      	b.n	8012824 <__gethex+0xf8>
 8012ac2:	4299      	cmp	r1, r3
 8012ac4:	f843 cc04 	str.w	ip, [r3, #-4]
 8012ac8:	d8d9      	bhi.n	8012a7e <__gethex+0x352>
 8012aca:	68a3      	ldr	r3, [r4, #8]
 8012acc:	459b      	cmp	fp, r3
 8012ace:	db17      	blt.n	8012b00 <__gethex+0x3d4>
 8012ad0:	6861      	ldr	r1, [r4, #4]
 8012ad2:	9801      	ldr	r0, [sp, #4]
 8012ad4:	3101      	adds	r1, #1
 8012ad6:	f7fe f8f1 	bl	8010cbc <_Balloc>
 8012ada:	4681      	mov	r9, r0
 8012adc:	b918      	cbnz	r0, 8012ae6 <__gethex+0x3ba>
 8012ade:	4b1a      	ldr	r3, [pc, #104]	@ (8012b48 <__gethex+0x41c>)
 8012ae0:	4602      	mov	r2, r0
 8012ae2:	2184      	movs	r1, #132	@ 0x84
 8012ae4:	e6c5      	b.n	8012872 <__gethex+0x146>
 8012ae6:	6922      	ldr	r2, [r4, #16]
 8012ae8:	3202      	adds	r2, #2
 8012aea:	f104 010c 	add.w	r1, r4, #12
 8012aee:	0092      	lsls	r2, r2, #2
 8012af0:	300c      	adds	r0, #12
 8012af2:	f7fd f9f0 	bl	800fed6 <memcpy>
 8012af6:	4621      	mov	r1, r4
 8012af8:	9801      	ldr	r0, [sp, #4]
 8012afa:	f7fe f91f 	bl	8010d3c <_Bfree>
 8012afe:	464c      	mov	r4, r9
 8012b00:	6923      	ldr	r3, [r4, #16]
 8012b02:	1c5a      	adds	r2, r3, #1
 8012b04:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8012b08:	6122      	str	r2, [r4, #16]
 8012b0a:	2201      	movs	r2, #1
 8012b0c:	615a      	str	r2, [r3, #20]
 8012b0e:	e7be      	b.n	8012a8e <__gethex+0x362>
 8012b10:	6922      	ldr	r2, [r4, #16]
 8012b12:	455a      	cmp	r2, fp
 8012b14:	dd0b      	ble.n	8012b2e <__gethex+0x402>
 8012b16:	2101      	movs	r1, #1
 8012b18:	4620      	mov	r0, r4
 8012b1a:	f7ff fd9f 	bl	801265c <rshift>
 8012b1e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8012b22:	3701      	adds	r7, #1
 8012b24:	42bb      	cmp	r3, r7
 8012b26:	f6ff aee0 	blt.w	80128ea <__gethex+0x1be>
 8012b2a:	2501      	movs	r5, #1
 8012b2c:	e7c2      	b.n	8012ab4 <__gethex+0x388>
 8012b2e:	f016 061f 	ands.w	r6, r6, #31
 8012b32:	d0fa      	beq.n	8012b2a <__gethex+0x3fe>
 8012b34:	4453      	add	r3, sl
 8012b36:	f1c6 0620 	rsb	r6, r6, #32
 8012b3a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8012b3e:	f7fe f9af 	bl	8010ea0 <__hi0bits>
 8012b42:	42b0      	cmp	r0, r6
 8012b44:	dbe7      	blt.n	8012b16 <__gethex+0x3ea>
 8012b46:	e7f0      	b.n	8012b2a <__gethex+0x3fe>
 8012b48:	08013cb6 	.word	0x08013cb6

08012b4c <L_shift>:
 8012b4c:	f1c2 0208 	rsb	r2, r2, #8
 8012b50:	0092      	lsls	r2, r2, #2
 8012b52:	b570      	push	{r4, r5, r6, lr}
 8012b54:	f1c2 0620 	rsb	r6, r2, #32
 8012b58:	6843      	ldr	r3, [r0, #4]
 8012b5a:	6804      	ldr	r4, [r0, #0]
 8012b5c:	fa03 f506 	lsl.w	r5, r3, r6
 8012b60:	432c      	orrs	r4, r5
 8012b62:	40d3      	lsrs	r3, r2
 8012b64:	6004      	str	r4, [r0, #0]
 8012b66:	f840 3f04 	str.w	r3, [r0, #4]!
 8012b6a:	4288      	cmp	r0, r1
 8012b6c:	d3f4      	bcc.n	8012b58 <L_shift+0xc>
 8012b6e:	bd70      	pop	{r4, r5, r6, pc}

08012b70 <__match>:
 8012b70:	b530      	push	{r4, r5, lr}
 8012b72:	6803      	ldr	r3, [r0, #0]
 8012b74:	3301      	adds	r3, #1
 8012b76:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012b7a:	b914      	cbnz	r4, 8012b82 <__match+0x12>
 8012b7c:	6003      	str	r3, [r0, #0]
 8012b7e:	2001      	movs	r0, #1
 8012b80:	bd30      	pop	{r4, r5, pc}
 8012b82:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012b86:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8012b8a:	2d19      	cmp	r5, #25
 8012b8c:	bf98      	it	ls
 8012b8e:	3220      	addls	r2, #32
 8012b90:	42a2      	cmp	r2, r4
 8012b92:	d0f0      	beq.n	8012b76 <__match+0x6>
 8012b94:	2000      	movs	r0, #0
 8012b96:	e7f3      	b.n	8012b80 <__match+0x10>

08012b98 <__hexnan>:
 8012b98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012b9c:	680b      	ldr	r3, [r1, #0]
 8012b9e:	6801      	ldr	r1, [r0, #0]
 8012ba0:	115e      	asrs	r6, r3, #5
 8012ba2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8012ba6:	f013 031f 	ands.w	r3, r3, #31
 8012baa:	b087      	sub	sp, #28
 8012bac:	bf18      	it	ne
 8012bae:	3604      	addne	r6, #4
 8012bb0:	2500      	movs	r5, #0
 8012bb2:	1f37      	subs	r7, r6, #4
 8012bb4:	4682      	mov	sl, r0
 8012bb6:	4690      	mov	r8, r2
 8012bb8:	9301      	str	r3, [sp, #4]
 8012bba:	f846 5c04 	str.w	r5, [r6, #-4]
 8012bbe:	46b9      	mov	r9, r7
 8012bc0:	463c      	mov	r4, r7
 8012bc2:	9502      	str	r5, [sp, #8]
 8012bc4:	46ab      	mov	fp, r5
 8012bc6:	784a      	ldrb	r2, [r1, #1]
 8012bc8:	1c4b      	adds	r3, r1, #1
 8012bca:	9303      	str	r3, [sp, #12]
 8012bcc:	b342      	cbz	r2, 8012c20 <__hexnan+0x88>
 8012bce:	4610      	mov	r0, r2
 8012bd0:	9105      	str	r1, [sp, #20]
 8012bd2:	9204      	str	r2, [sp, #16]
 8012bd4:	f7ff fd94 	bl	8012700 <__hexdig_fun>
 8012bd8:	2800      	cmp	r0, #0
 8012bda:	d151      	bne.n	8012c80 <__hexnan+0xe8>
 8012bdc:	9a04      	ldr	r2, [sp, #16]
 8012bde:	9905      	ldr	r1, [sp, #20]
 8012be0:	2a20      	cmp	r2, #32
 8012be2:	d818      	bhi.n	8012c16 <__hexnan+0x7e>
 8012be4:	9b02      	ldr	r3, [sp, #8]
 8012be6:	459b      	cmp	fp, r3
 8012be8:	dd13      	ble.n	8012c12 <__hexnan+0x7a>
 8012bea:	454c      	cmp	r4, r9
 8012bec:	d206      	bcs.n	8012bfc <__hexnan+0x64>
 8012bee:	2d07      	cmp	r5, #7
 8012bf0:	dc04      	bgt.n	8012bfc <__hexnan+0x64>
 8012bf2:	462a      	mov	r2, r5
 8012bf4:	4649      	mov	r1, r9
 8012bf6:	4620      	mov	r0, r4
 8012bf8:	f7ff ffa8 	bl	8012b4c <L_shift>
 8012bfc:	4544      	cmp	r4, r8
 8012bfe:	d952      	bls.n	8012ca6 <__hexnan+0x10e>
 8012c00:	2300      	movs	r3, #0
 8012c02:	f1a4 0904 	sub.w	r9, r4, #4
 8012c06:	f844 3c04 	str.w	r3, [r4, #-4]
 8012c0a:	f8cd b008 	str.w	fp, [sp, #8]
 8012c0e:	464c      	mov	r4, r9
 8012c10:	461d      	mov	r5, r3
 8012c12:	9903      	ldr	r1, [sp, #12]
 8012c14:	e7d7      	b.n	8012bc6 <__hexnan+0x2e>
 8012c16:	2a29      	cmp	r2, #41	@ 0x29
 8012c18:	d157      	bne.n	8012cca <__hexnan+0x132>
 8012c1a:	3102      	adds	r1, #2
 8012c1c:	f8ca 1000 	str.w	r1, [sl]
 8012c20:	f1bb 0f00 	cmp.w	fp, #0
 8012c24:	d051      	beq.n	8012cca <__hexnan+0x132>
 8012c26:	454c      	cmp	r4, r9
 8012c28:	d206      	bcs.n	8012c38 <__hexnan+0xa0>
 8012c2a:	2d07      	cmp	r5, #7
 8012c2c:	dc04      	bgt.n	8012c38 <__hexnan+0xa0>
 8012c2e:	462a      	mov	r2, r5
 8012c30:	4649      	mov	r1, r9
 8012c32:	4620      	mov	r0, r4
 8012c34:	f7ff ff8a 	bl	8012b4c <L_shift>
 8012c38:	4544      	cmp	r4, r8
 8012c3a:	d936      	bls.n	8012caa <__hexnan+0x112>
 8012c3c:	f1a8 0204 	sub.w	r2, r8, #4
 8012c40:	4623      	mov	r3, r4
 8012c42:	f853 1b04 	ldr.w	r1, [r3], #4
 8012c46:	f842 1f04 	str.w	r1, [r2, #4]!
 8012c4a:	429f      	cmp	r7, r3
 8012c4c:	d2f9      	bcs.n	8012c42 <__hexnan+0xaa>
 8012c4e:	1b3b      	subs	r3, r7, r4
 8012c50:	f023 0303 	bic.w	r3, r3, #3
 8012c54:	3304      	adds	r3, #4
 8012c56:	3401      	adds	r4, #1
 8012c58:	3e03      	subs	r6, #3
 8012c5a:	42b4      	cmp	r4, r6
 8012c5c:	bf88      	it	hi
 8012c5e:	2304      	movhi	r3, #4
 8012c60:	4443      	add	r3, r8
 8012c62:	2200      	movs	r2, #0
 8012c64:	f843 2b04 	str.w	r2, [r3], #4
 8012c68:	429f      	cmp	r7, r3
 8012c6a:	d2fb      	bcs.n	8012c64 <__hexnan+0xcc>
 8012c6c:	683b      	ldr	r3, [r7, #0]
 8012c6e:	b91b      	cbnz	r3, 8012c78 <__hexnan+0xe0>
 8012c70:	4547      	cmp	r7, r8
 8012c72:	d128      	bne.n	8012cc6 <__hexnan+0x12e>
 8012c74:	2301      	movs	r3, #1
 8012c76:	603b      	str	r3, [r7, #0]
 8012c78:	2005      	movs	r0, #5
 8012c7a:	b007      	add	sp, #28
 8012c7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012c80:	3501      	adds	r5, #1
 8012c82:	2d08      	cmp	r5, #8
 8012c84:	f10b 0b01 	add.w	fp, fp, #1
 8012c88:	dd06      	ble.n	8012c98 <__hexnan+0x100>
 8012c8a:	4544      	cmp	r4, r8
 8012c8c:	d9c1      	bls.n	8012c12 <__hexnan+0x7a>
 8012c8e:	2300      	movs	r3, #0
 8012c90:	f844 3c04 	str.w	r3, [r4, #-4]
 8012c94:	2501      	movs	r5, #1
 8012c96:	3c04      	subs	r4, #4
 8012c98:	6822      	ldr	r2, [r4, #0]
 8012c9a:	f000 000f 	and.w	r0, r0, #15
 8012c9e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8012ca2:	6020      	str	r0, [r4, #0]
 8012ca4:	e7b5      	b.n	8012c12 <__hexnan+0x7a>
 8012ca6:	2508      	movs	r5, #8
 8012ca8:	e7b3      	b.n	8012c12 <__hexnan+0x7a>
 8012caa:	9b01      	ldr	r3, [sp, #4]
 8012cac:	2b00      	cmp	r3, #0
 8012cae:	d0dd      	beq.n	8012c6c <__hexnan+0xd4>
 8012cb0:	f1c3 0320 	rsb	r3, r3, #32
 8012cb4:	f04f 32ff 	mov.w	r2, #4294967295
 8012cb8:	40da      	lsrs	r2, r3
 8012cba:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8012cbe:	4013      	ands	r3, r2
 8012cc0:	f846 3c04 	str.w	r3, [r6, #-4]
 8012cc4:	e7d2      	b.n	8012c6c <__hexnan+0xd4>
 8012cc6:	3f04      	subs	r7, #4
 8012cc8:	e7d0      	b.n	8012c6c <__hexnan+0xd4>
 8012cca:	2004      	movs	r0, #4
 8012ccc:	e7d5      	b.n	8012c7a <__hexnan+0xe2>

08012cce <__ascii_mbtowc>:
 8012cce:	b082      	sub	sp, #8
 8012cd0:	b901      	cbnz	r1, 8012cd4 <__ascii_mbtowc+0x6>
 8012cd2:	a901      	add	r1, sp, #4
 8012cd4:	b142      	cbz	r2, 8012ce8 <__ascii_mbtowc+0x1a>
 8012cd6:	b14b      	cbz	r3, 8012cec <__ascii_mbtowc+0x1e>
 8012cd8:	7813      	ldrb	r3, [r2, #0]
 8012cda:	600b      	str	r3, [r1, #0]
 8012cdc:	7812      	ldrb	r2, [r2, #0]
 8012cde:	1e10      	subs	r0, r2, #0
 8012ce0:	bf18      	it	ne
 8012ce2:	2001      	movne	r0, #1
 8012ce4:	b002      	add	sp, #8
 8012ce6:	4770      	bx	lr
 8012ce8:	4610      	mov	r0, r2
 8012cea:	e7fb      	b.n	8012ce4 <__ascii_mbtowc+0x16>
 8012cec:	f06f 0001 	mvn.w	r0, #1
 8012cf0:	e7f8      	b.n	8012ce4 <__ascii_mbtowc+0x16>

08012cf2 <_realloc_r>:
 8012cf2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012cf6:	4680      	mov	r8, r0
 8012cf8:	4615      	mov	r5, r2
 8012cfa:	460c      	mov	r4, r1
 8012cfc:	b921      	cbnz	r1, 8012d08 <_realloc_r+0x16>
 8012cfe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012d02:	4611      	mov	r1, r2
 8012d04:	f7fd bf4e 	b.w	8010ba4 <_malloc_r>
 8012d08:	b92a      	cbnz	r2, 8012d16 <_realloc_r+0x24>
 8012d0a:	f7fd fed7 	bl	8010abc <_free_r>
 8012d0e:	2400      	movs	r4, #0
 8012d10:	4620      	mov	r0, r4
 8012d12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012d16:	f000 f840 	bl	8012d9a <_malloc_usable_size_r>
 8012d1a:	4285      	cmp	r5, r0
 8012d1c:	4606      	mov	r6, r0
 8012d1e:	d802      	bhi.n	8012d26 <_realloc_r+0x34>
 8012d20:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8012d24:	d8f4      	bhi.n	8012d10 <_realloc_r+0x1e>
 8012d26:	4629      	mov	r1, r5
 8012d28:	4640      	mov	r0, r8
 8012d2a:	f7fd ff3b 	bl	8010ba4 <_malloc_r>
 8012d2e:	4607      	mov	r7, r0
 8012d30:	2800      	cmp	r0, #0
 8012d32:	d0ec      	beq.n	8012d0e <_realloc_r+0x1c>
 8012d34:	42b5      	cmp	r5, r6
 8012d36:	462a      	mov	r2, r5
 8012d38:	4621      	mov	r1, r4
 8012d3a:	bf28      	it	cs
 8012d3c:	4632      	movcs	r2, r6
 8012d3e:	f7fd f8ca 	bl	800fed6 <memcpy>
 8012d42:	4621      	mov	r1, r4
 8012d44:	4640      	mov	r0, r8
 8012d46:	f7fd feb9 	bl	8010abc <_free_r>
 8012d4a:	463c      	mov	r4, r7
 8012d4c:	e7e0      	b.n	8012d10 <_realloc_r+0x1e>

08012d4e <__ascii_wctomb>:
 8012d4e:	4603      	mov	r3, r0
 8012d50:	4608      	mov	r0, r1
 8012d52:	b141      	cbz	r1, 8012d66 <__ascii_wctomb+0x18>
 8012d54:	2aff      	cmp	r2, #255	@ 0xff
 8012d56:	d904      	bls.n	8012d62 <__ascii_wctomb+0x14>
 8012d58:	228a      	movs	r2, #138	@ 0x8a
 8012d5a:	601a      	str	r2, [r3, #0]
 8012d5c:	f04f 30ff 	mov.w	r0, #4294967295
 8012d60:	4770      	bx	lr
 8012d62:	700a      	strb	r2, [r1, #0]
 8012d64:	2001      	movs	r0, #1
 8012d66:	4770      	bx	lr

08012d68 <fiprintf>:
 8012d68:	b40e      	push	{r1, r2, r3}
 8012d6a:	b503      	push	{r0, r1, lr}
 8012d6c:	4601      	mov	r1, r0
 8012d6e:	ab03      	add	r3, sp, #12
 8012d70:	4805      	ldr	r0, [pc, #20]	@ (8012d88 <fiprintf+0x20>)
 8012d72:	f853 2b04 	ldr.w	r2, [r3], #4
 8012d76:	6800      	ldr	r0, [r0, #0]
 8012d78:	9301      	str	r3, [sp, #4]
 8012d7a:	f000 f83f 	bl	8012dfc <_vfiprintf_r>
 8012d7e:	b002      	add	sp, #8
 8012d80:	f85d eb04 	ldr.w	lr, [sp], #4
 8012d84:	b003      	add	sp, #12
 8012d86:	4770      	bx	lr
 8012d88:	2400002c 	.word	0x2400002c

08012d8c <abort>:
 8012d8c:	b508      	push	{r3, lr}
 8012d8e:	2006      	movs	r0, #6
 8012d90:	f000 fa08 	bl	80131a4 <raise>
 8012d94:	2001      	movs	r0, #1
 8012d96:	f7ef fbf5 	bl	8002584 <_exit>

08012d9a <_malloc_usable_size_r>:
 8012d9a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012d9e:	1f18      	subs	r0, r3, #4
 8012da0:	2b00      	cmp	r3, #0
 8012da2:	bfbc      	itt	lt
 8012da4:	580b      	ldrlt	r3, [r1, r0]
 8012da6:	18c0      	addlt	r0, r0, r3
 8012da8:	4770      	bx	lr

08012daa <__sfputc_r>:
 8012daa:	6893      	ldr	r3, [r2, #8]
 8012dac:	3b01      	subs	r3, #1
 8012dae:	2b00      	cmp	r3, #0
 8012db0:	b410      	push	{r4}
 8012db2:	6093      	str	r3, [r2, #8]
 8012db4:	da08      	bge.n	8012dc8 <__sfputc_r+0x1e>
 8012db6:	6994      	ldr	r4, [r2, #24]
 8012db8:	42a3      	cmp	r3, r4
 8012dba:	db01      	blt.n	8012dc0 <__sfputc_r+0x16>
 8012dbc:	290a      	cmp	r1, #10
 8012dbe:	d103      	bne.n	8012dc8 <__sfputc_r+0x1e>
 8012dc0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012dc4:	f000 b932 	b.w	801302c <__swbuf_r>
 8012dc8:	6813      	ldr	r3, [r2, #0]
 8012dca:	1c58      	adds	r0, r3, #1
 8012dcc:	6010      	str	r0, [r2, #0]
 8012dce:	7019      	strb	r1, [r3, #0]
 8012dd0:	4608      	mov	r0, r1
 8012dd2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012dd6:	4770      	bx	lr

08012dd8 <__sfputs_r>:
 8012dd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012dda:	4606      	mov	r6, r0
 8012ddc:	460f      	mov	r7, r1
 8012dde:	4614      	mov	r4, r2
 8012de0:	18d5      	adds	r5, r2, r3
 8012de2:	42ac      	cmp	r4, r5
 8012de4:	d101      	bne.n	8012dea <__sfputs_r+0x12>
 8012de6:	2000      	movs	r0, #0
 8012de8:	e007      	b.n	8012dfa <__sfputs_r+0x22>
 8012dea:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012dee:	463a      	mov	r2, r7
 8012df0:	4630      	mov	r0, r6
 8012df2:	f7ff ffda 	bl	8012daa <__sfputc_r>
 8012df6:	1c43      	adds	r3, r0, #1
 8012df8:	d1f3      	bne.n	8012de2 <__sfputs_r+0xa>
 8012dfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08012dfc <_vfiprintf_r>:
 8012dfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012e00:	460d      	mov	r5, r1
 8012e02:	b09d      	sub	sp, #116	@ 0x74
 8012e04:	4614      	mov	r4, r2
 8012e06:	4698      	mov	r8, r3
 8012e08:	4606      	mov	r6, r0
 8012e0a:	b118      	cbz	r0, 8012e14 <_vfiprintf_r+0x18>
 8012e0c:	6a03      	ldr	r3, [r0, #32]
 8012e0e:	b90b      	cbnz	r3, 8012e14 <_vfiprintf_r+0x18>
 8012e10:	f7fc ff02 	bl	800fc18 <__sinit>
 8012e14:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012e16:	07d9      	lsls	r1, r3, #31
 8012e18:	d405      	bmi.n	8012e26 <_vfiprintf_r+0x2a>
 8012e1a:	89ab      	ldrh	r3, [r5, #12]
 8012e1c:	059a      	lsls	r2, r3, #22
 8012e1e:	d402      	bmi.n	8012e26 <_vfiprintf_r+0x2a>
 8012e20:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012e22:	f7fd f856 	bl	800fed2 <__retarget_lock_acquire_recursive>
 8012e26:	89ab      	ldrh	r3, [r5, #12]
 8012e28:	071b      	lsls	r3, r3, #28
 8012e2a:	d501      	bpl.n	8012e30 <_vfiprintf_r+0x34>
 8012e2c:	692b      	ldr	r3, [r5, #16]
 8012e2e:	b99b      	cbnz	r3, 8012e58 <_vfiprintf_r+0x5c>
 8012e30:	4629      	mov	r1, r5
 8012e32:	4630      	mov	r0, r6
 8012e34:	f000 f938 	bl	80130a8 <__swsetup_r>
 8012e38:	b170      	cbz	r0, 8012e58 <_vfiprintf_r+0x5c>
 8012e3a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012e3c:	07dc      	lsls	r4, r3, #31
 8012e3e:	d504      	bpl.n	8012e4a <_vfiprintf_r+0x4e>
 8012e40:	f04f 30ff 	mov.w	r0, #4294967295
 8012e44:	b01d      	add	sp, #116	@ 0x74
 8012e46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012e4a:	89ab      	ldrh	r3, [r5, #12]
 8012e4c:	0598      	lsls	r0, r3, #22
 8012e4e:	d4f7      	bmi.n	8012e40 <_vfiprintf_r+0x44>
 8012e50:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012e52:	f7fd f83f 	bl	800fed4 <__retarget_lock_release_recursive>
 8012e56:	e7f3      	b.n	8012e40 <_vfiprintf_r+0x44>
 8012e58:	2300      	movs	r3, #0
 8012e5a:	9309      	str	r3, [sp, #36]	@ 0x24
 8012e5c:	2320      	movs	r3, #32
 8012e5e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8012e62:	f8cd 800c 	str.w	r8, [sp, #12]
 8012e66:	2330      	movs	r3, #48	@ 0x30
 8012e68:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8013018 <_vfiprintf_r+0x21c>
 8012e6c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8012e70:	f04f 0901 	mov.w	r9, #1
 8012e74:	4623      	mov	r3, r4
 8012e76:	469a      	mov	sl, r3
 8012e78:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012e7c:	b10a      	cbz	r2, 8012e82 <_vfiprintf_r+0x86>
 8012e7e:	2a25      	cmp	r2, #37	@ 0x25
 8012e80:	d1f9      	bne.n	8012e76 <_vfiprintf_r+0x7a>
 8012e82:	ebba 0b04 	subs.w	fp, sl, r4
 8012e86:	d00b      	beq.n	8012ea0 <_vfiprintf_r+0xa4>
 8012e88:	465b      	mov	r3, fp
 8012e8a:	4622      	mov	r2, r4
 8012e8c:	4629      	mov	r1, r5
 8012e8e:	4630      	mov	r0, r6
 8012e90:	f7ff ffa2 	bl	8012dd8 <__sfputs_r>
 8012e94:	3001      	adds	r0, #1
 8012e96:	f000 80a7 	beq.w	8012fe8 <_vfiprintf_r+0x1ec>
 8012e9a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012e9c:	445a      	add	r2, fp
 8012e9e:	9209      	str	r2, [sp, #36]	@ 0x24
 8012ea0:	f89a 3000 	ldrb.w	r3, [sl]
 8012ea4:	2b00      	cmp	r3, #0
 8012ea6:	f000 809f 	beq.w	8012fe8 <_vfiprintf_r+0x1ec>
 8012eaa:	2300      	movs	r3, #0
 8012eac:	f04f 32ff 	mov.w	r2, #4294967295
 8012eb0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012eb4:	f10a 0a01 	add.w	sl, sl, #1
 8012eb8:	9304      	str	r3, [sp, #16]
 8012eba:	9307      	str	r3, [sp, #28]
 8012ebc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8012ec0:	931a      	str	r3, [sp, #104]	@ 0x68
 8012ec2:	4654      	mov	r4, sl
 8012ec4:	2205      	movs	r2, #5
 8012ec6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012eca:	4853      	ldr	r0, [pc, #332]	@ (8013018 <_vfiprintf_r+0x21c>)
 8012ecc:	f7ed fa18 	bl	8000300 <memchr>
 8012ed0:	9a04      	ldr	r2, [sp, #16]
 8012ed2:	b9d8      	cbnz	r0, 8012f0c <_vfiprintf_r+0x110>
 8012ed4:	06d1      	lsls	r1, r2, #27
 8012ed6:	bf44      	itt	mi
 8012ed8:	2320      	movmi	r3, #32
 8012eda:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012ede:	0713      	lsls	r3, r2, #28
 8012ee0:	bf44      	itt	mi
 8012ee2:	232b      	movmi	r3, #43	@ 0x2b
 8012ee4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012ee8:	f89a 3000 	ldrb.w	r3, [sl]
 8012eec:	2b2a      	cmp	r3, #42	@ 0x2a
 8012eee:	d015      	beq.n	8012f1c <_vfiprintf_r+0x120>
 8012ef0:	9a07      	ldr	r2, [sp, #28]
 8012ef2:	4654      	mov	r4, sl
 8012ef4:	2000      	movs	r0, #0
 8012ef6:	f04f 0c0a 	mov.w	ip, #10
 8012efa:	4621      	mov	r1, r4
 8012efc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012f00:	3b30      	subs	r3, #48	@ 0x30
 8012f02:	2b09      	cmp	r3, #9
 8012f04:	d94b      	bls.n	8012f9e <_vfiprintf_r+0x1a2>
 8012f06:	b1b0      	cbz	r0, 8012f36 <_vfiprintf_r+0x13a>
 8012f08:	9207      	str	r2, [sp, #28]
 8012f0a:	e014      	b.n	8012f36 <_vfiprintf_r+0x13a>
 8012f0c:	eba0 0308 	sub.w	r3, r0, r8
 8012f10:	fa09 f303 	lsl.w	r3, r9, r3
 8012f14:	4313      	orrs	r3, r2
 8012f16:	9304      	str	r3, [sp, #16]
 8012f18:	46a2      	mov	sl, r4
 8012f1a:	e7d2      	b.n	8012ec2 <_vfiprintf_r+0xc6>
 8012f1c:	9b03      	ldr	r3, [sp, #12]
 8012f1e:	1d19      	adds	r1, r3, #4
 8012f20:	681b      	ldr	r3, [r3, #0]
 8012f22:	9103      	str	r1, [sp, #12]
 8012f24:	2b00      	cmp	r3, #0
 8012f26:	bfbb      	ittet	lt
 8012f28:	425b      	neglt	r3, r3
 8012f2a:	f042 0202 	orrlt.w	r2, r2, #2
 8012f2e:	9307      	strge	r3, [sp, #28]
 8012f30:	9307      	strlt	r3, [sp, #28]
 8012f32:	bfb8      	it	lt
 8012f34:	9204      	strlt	r2, [sp, #16]
 8012f36:	7823      	ldrb	r3, [r4, #0]
 8012f38:	2b2e      	cmp	r3, #46	@ 0x2e
 8012f3a:	d10a      	bne.n	8012f52 <_vfiprintf_r+0x156>
 8012f3c:	7863      	ldrb	r3, [r4, #1]
 8012f3e:	2b2a      	cmp	r3, #42	@ 0x2a
 8012f40:	d132      	bne.n	8012fa8 <_vfiprintf_r+0x1ac>
 8012f42:	9b03      	ldr	r3, [sp, #12]
 8012f44:	1d1a      	adds	r2, r3, #4
 8012f46:	681b      	ldr	r3, [r3, #0]
 8012f48:	9203      	str	r2, [sp, #12]
 8012f4a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8012f4e:	3402      	adds	r4, #2
 8012f50:	9305      	str	r3, [sp, #20]
 8012f52:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8013028 <_vfiprintf_r+0x22c>
 8012f56:	7821      	ldrb	r1, [r4, #0]
 8012f58:	2203      	movs	r2, #3
 8012f5a:	4650      	mov	r0, sl
 8012f5c:	f7ed f9d0 	bl	8000300 <memchr>
 8012f60:	b138      	cbz	r0, 8012f72 <_vfiprintf_r+0x176>
 8012f62:	9b04      	ldr	r3, [sp, #16]
 8012f64:	eba0 000a 	sub.w	r0, r0, sl
 8012f68:	2240      	movs	r2, #64	@ 0x40
 8012f6a:	4082      	lsls	r2, r0
 8012f6c:	4313      	orrs	r3, r2
 8012f6e:	3401      	adds	r4, #1
 8012f70:	9304      	str	r3, [sp, #16]
 8012f72:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012f76:	4829      	ldr	r0, [pc, #164]	@ (801301c <_vfiprintf_r+0x220>)
 8012f78:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8012f7c:	2206      	movs	r2, #6
 8012f7e:	f7ed f9bf 	bl	8000300 <memchr>
 8012f82:	2800      	cmp	r0, #0
 8012f84:	d03f      	beq.n	8013006 <_vfiprintf_r+0x20a>
 8012f86:	4b26      	ldr	r3, [pc, #152]	@ (8013020 <_vfiprintf_r+0x224>)
 8012f88:	bb1b      	cbnz	r3, 8012fd2 <_vfiprintf_r+0x1d6>
 8012f8a:	9b03      	ldr	r3, [sp, #12]
 8012f8c:	3307      	adds	r3, #7
 8012f8e:	f023 0307 	bic.w	r3, r3, #7
 8012f92:	3308      	adds	r3, #8
 8012f94:	9303      	str	r3, [sp, #12]
 8012f96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012f98:	443b      	add	r3, r7
 8012f9a:	9309      	str	r3, [sp, #36]	@ 0x24
 8012f9c:	e76a      	b.n	8012e74 <_vfiprintf_r+0x78>
 8012f9e:	fb0c 3202 	mla	r2, ip, r2, r3
 8012fa2:	460c      	mov	r4, r1
 8012fa4:	2001      	movs	r0, #1
 8012fa6:	e7a8      	b.n	8012efa <_vfiprintf_r+0xfe>
 8012fa8:	2300      	movs	r3, #0
 8012faa:	3401      	adds	r4, #1
 8012fac:	9305      	str	r3, [sp, #20]
 8012fae:	4619      	mov	r1, r3
 8012fb0:	f04f 0c0a 	mov.w	ip, #10
 8012fb4:	4620      	mov	r0, r4
 8012fb6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012fba:	3a30      	subs	r2, #48	@ 0x30
 8012fbc:	2a09      	cmp	r2, #9
 8012fbe:	d903      	bls.n	8012fc8 <_vfiprintf_r+0x1cc>
 8012fc0:	2b00      	cmp	r3, #0
 8012fc2:	d0c6      	beq.n	8012f52 <_vfiprintf_r+0x156>
 8012fc4:	9105      	str	r1, [sp, #20]
 8012fc6:	e7c4      	b.n	8012f52 <_vfiprintf_r+0x156>
 8012fc8:	fb0c 2101 	mla	r1, ip, r1, r2
 8012fcc:	4604      	mov	r4, r0
 8012fce:	2301      	movs	r3, #1
 8012fd0:	e7f0      	b.n	8012fb4 <_vfiprintf_r+0x1b8>
 8012fd2:	ab03      	add	r3, sp, #12
 8012fd4:	9300      	str	r3, [sp, #0]
 8012fd6:	462a      	mov	r2, r5
 8012fd8:	4b12      	ldr	r3, [pc, #72]	@ (8013024 <_vfiprintf_r+0x228>)
 8012fda:	a904      	add	r1, sp, #16
 8012fdc:	4630      	mov	r0, r6
 8012fde:	f7fb ffdb 	bl	800ef98 <_printf_float>
 8012fe2:	4607      	mov	r7, r0
 8012fe4:	1c78      	adds	r0, r7, #1
 8012fe6:	d1d6      	bne.n	8012f96 <_vfiprintf_r+0x19a>
 8012fe8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012fea:	07d9      	lsls	r1, r3, #31
 8012fec:	d405      	bmi.n	8012ffa <_vfiprintf_r+0x1fe>
 8012fee:	89ab      	ldrh	r3, [r5, #12]
 8012ff0:	059a      	lsls	r2, r3, #22
 8012ff2:	d402      	bmi.n	8012ffa <_vfiprintf_r+0x1fe>
 8012ff4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012ff6:	f7fc ff6d 	bl	800fed4 <__retarget_lock_release_recursive>
 8012ffa:	89ab      	ldrh	r3, [r5, #12]
 8012ffc:	065b      	lsls	r3, r3, #25
 8012ffe:	f53f af1f 	bmi.w	8012e40 <_vfiprintf_r+0x44>
 8013002:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8013004:	e71e      	b.n	8012e44 <_vfiprintf_r+0x48>
 8013006:	ab03      	add	r3, sp, #12
 8013008:	9300      	str	r3, [sp, #0]
 801300a:	462a      	mov	r2, r5
 801300c:	4b05      	ldr	r3, [pc, #20]	@ (8013024 <_vfiprintf_r+0x228>)
 801300e:	a904      	add	r1, sp, #16
 8013010:	4630      	mov	r0, r6
 8013012:	f7fc fa49 	bl	800f4a8 <_printf_i>
 8013016:	e7e4      	b.n	8012fe2 <_vfiprintf_r+0x1e6>
 8013018:	08013e78 	.word	0x08013e78
 801301c:	08013e82 	.word	0x08013e82
 8013020:	0800ef99 	.word	0x0800ef99
 8013024:	08012dd9 	.word	0x08012dd9
 8013028:	08013e7e 	.word	0x08013e7e

0801302c <__swbuf_r>:
 801302c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801302e:	460e      	mov	r6, r1
 8013030:	4614      	mov	r4, r2
 8013032:	4605      	mov	r5, r0
 8013034:	b118      	cbz	r0, 801303e <__swbuf_r+0x12>
 8013036:	6a03      	ldr	r3, [r0, #32]
 8013038:	b90b      	cbnz	r3, 801303e <__swbuf_r+0x12>
 801303a:	f7fc fded 	bl	800fc18 <__sinit>
 801303e:	69a3      	ldr	r3, [r4, #24]
 8013040:	60a3      	str	r3, [r4, #8]
 8013042:	89a3      	ldrh	r3, [r4, #12]
 8013044:	071a      	lsls	r2, r3, #28
 8013046:	d501      	bpl.n	801304c <__swbuf_r+0x20>
 8013048:	6923      	ldr	r3, [r4, #16]
 801304a:	b943      	cbnz	r3, 801305e <__swbuf_r+0x32>
 801304c:	4621      	mov	r1, r4
 801304e:	4628      	mov	r0, r5
 8013050:	f000 f82a 	bl	80130a8 <__swsetup_r>
 8013054:	b118      	cbz	r0, 801305e <__swbuf_r+0x32>
 8013056:	f04f 37ff 	mov.w	r7, #4294967295
 801305a:	4638      	mov	r0, r7
 801305c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801305e:	6823      	ldr	r3, [r4, #0]
 8013060:	6922      	ldr	r2, [r4, #16]
 8013062:	1a98      	subs	r0, r3, r2
 8013064:	6963      	ldr	r3, [r4, #20]
 8013066:	b2f6      	uxtb	r6, r6
 8013068:	4283      	cmp	r3, r0
 801306a:	4637      	mov	r7, r6
 801306c:	dc05      	bgt.n	801307a <__swbuf_r+0x4e>
 801306e:	4621      	mov	r1, r4
 8013070:	4628      	mov	r0, r5
 8013072:	f7ff fa65 	bl	8012540 <_fflush_r>
 8013076:	2800      	cmp	r0, #0
 8013078:	d1ed      	bne.n	8013056 <__swbuf_r+0x2a>
 801307a:	68a3      	ldr	r3, [r4, #8]
 801307c:	3b01      	subs	r3, #1
 801307e:	60a3      	str	r3, [r4, #8]
 8013080:	6823      	ldr	r3, [r4, #0]
 8013082:	1c5a      	adds	r2, r3, #1
 8013084:	6022      	str	r2, [r4, #0]
 8013086:	701e      	strb	r6, [r3, #0]
 8013088:	6962      	ldr	r2, [r4, #20]
 801308a:	1c43      	adds	r3, r0, #1
 801308c:	429a      	cmp	r2, r3
 801308e:	d004      	beq.n	801309a <__swbuf_r+0x6e>
 8013090:	89a3      	ldrh	r3, [r4, #12]
 8013092:	07db      	lsls	r3, r3, #31
 8013094:	d5e1      	bpl.n	801305a <__swbuf_r+0x2e>
 8013096:	2e0a      	cmp	r6, #10
 8013098:	d1df      	bne.n	801305a <__swbuf_r+0x2e>
 801309a:	4621      	mov	r1, r4
 801309c:	4628      	mov	r0, r5
 801309e:	f7ff fa4f 	bl	8012540 <_fflush_r>
 80130a2:	2800      	cmp	r0, #0
 80130a4:	d0d9      	beq.n	801305a <__swbuf_r+0x2e>
 80130a6:	e7d6      	b.n	8013056 <__swbuf_r+0x2a>

080130a8 <__swsetup_r>:
 80130a8:	b538      	push	{r3, r4, r5, lr}
 80130aa:	4b29      	ldr	r3, [pc, #164]	@ (8013150 <__swsetup_r+0xa8>)
 80130ac:	4605      	mov	r5, r0
 80130ae:	6818      	ldr	r0, [r3, #0]
 80130b0:	460c      	mov	r4, r1
 80130b2:	b118      	cbz	r0, 80130bc <__swsetup_r+0x14>
 80130b4:	6a03      	ldr	r3, [r0, #32]
 80130b6:	b90b      	cbnz	r3, 80130bc <__swsetup_r+0x14>
 80130b8:	f7fc fdae 	bl	800fc18 <__sinit>
 80130bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80130c0:	0719      	lsls	r1, r3, #28
 80130c2:	d422      	bmi.n	801310a <__swsetup_r+0x62>
 80130c4:	06da      	lsls	r2, r3, #27
 80130c6:	d407      	bmi.n	80130d8 <__swsetup_r+0x30>
 80130c8:	2209      	movs	r2, #9
 80130ca:	602a      	str	r2, [r5, #0]
 80130cc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80130d0:	81a3      	strh	r3, [r4, #12]
 80130d2:	f04f 30ff 	mov.w	r0, #4294967295
 80130d6:	e033      	b.n	8013140 <__swsetup_r+0x98>
 80130d8:	0758      	lsls	r0, r3, #29
 80130da:	d512      	bpl.n	8013102 <__swsetup_r+0x5a>
 80130dc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80130de:	b141      	cbz	r1, 80130f2 <__swsetup_r+0x4a>
 80130e0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80130e4:	4299      	cmp	r1, r3
 80130e6:	d002      	beq.n	80130ee <__swsetup_r+0x46>
 80130e8:	4628      	mov	r0, r5
 80130ea:	f7fd fce7 	bl	8010abc <_free_r>
 80130ee:	2300      	movs	r3, #0
 80130f0:	6363      	str	r3, [r4, #52]	@ 0x34
 80130f2:	89a3      	ldrh	r3, [r4, #12]
 80130f4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80130f8:	81a3      	strh	r3, [r4, #12]
 80130fa:	2300      	movs	r3, #0
 80130fc:	6063      	str	r3, [r4, #4]
 80130fe:	6923      	ldr	r3, [r4, #16]
 8013100:	6023      	str	r3, [r4, #0]
 8013102:	89a3      	ldrh	r3, [r4, #12]
 8013104:	f043 0308 	orr.w	r3, r3, #8
 8013108:	81a3      	strh	r3, [r4, #12]
 801310a:	6923      	ldr	r3, [r4, #16]
 801310c:	b94b      	cbnz	r3, 8013122 <__swsetup_r+0x7a>
 801310e:	89a3      	ldrh	r3, [r4, #12]
 8013110:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8013114:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8013118:	d003      	beq.n	8013122 <__swsetup_r+0x7a>
 801311a:	4621      	mov	r1, r4
 801311c:	4628      	mov	r0, r5
 801311e:	f000 f883 	bl	8013228 <__smakebuf_r>
 8013122:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013126:	f013 0201 	ands.w	r2, r3, #1
 801312a:	d00a      	beq.n	8013142 <__swsetup_r+0x9a>
 801312c:	2200      	movs	r2, #0
 801312e:	60a2      	str	r2, [r4, #8]
 8013130:	6962      	ldr	r2, [r4, #20]
 8013132:	4252      	negs	r2, r2
 8013134:	61a2      	str	r2, [r4, #24]
 8013136:	6922      	ldr	r2, [r4, #16]
 8013138:	b942      	cbnz	r2, 801314c <__swsetup_r+0xa4>
 801313a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801313e:	d1c5      	bne.n	80130cc <__swsetup_r+0x24>
 8013140:	bd38      	pop	{r3, r4, r5, pc}
 8013142:	0799      	lsls	r1, r3, #30
 8013144:	bf58      	it	pl
 8013146:	6962      	ldrpl	r2, [r4, #20]
 8013148:	60a2      	str	r2, [r4, #8]
 801314a:	e7f4      	b.n	8013136 <__swsetup_r+0x8e>
 801314c:	2000      	movs	r0, #0
 801314e:	e7f7      	b.n	8013140 <__swsetup_r+0x98>
 8013150:	2400002c 	.word	0x2400002c

08013154 <_raise_r>:
 8013154:	291f      	cmp	r1, #31
 8013156:	b538      	push	{r3, r4, r5, lr}
 8013158:	4605      	mov	r5, r0
 801315a:	460c      	mov	r4, r1
 801315c:	d904      	bls.n	8013168 <_raise_r+0x14>
 801315e:	2316      	movs	r3, #22
 8013160:	6003      	str	r3, [r0, #0]
 8013162:	f04f 30ff 	mov.w	r0, #4294967295
 8013166:	bd38      	pop	{r3, r4, r5, pc}
 8013168:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801316a:	b112      	cbz	r2, 8013172 <_raise_r+0x1e>
 801316c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8013170:	b94b      	cbnz	r3, 8013186 <_raise_r+0x32>
 8013172:	4628      	mov	r0, r5
 8013174:	f000 f830 	bl	80131d8 <_getpid_r>
 8013178:	4622      	mov	r2, r4
 801317a:	4601      	mov	r1, r0
 801317c:	4628      	mov	r0, r5
 801317e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013182:	f000 b817 	b.w	80131b4 <_kill_r>
 8013186:	2b01      	cmp	r3, #1
 8013188:	d00a      	beq.n	80131a0 <_raise_r+0x4c>
 801318a:	1c59      	adds	r1, r3, #1
 801318c:	d103      	bne.n	8013196 <_raise_r+0x42>
 801318e:	2316      	movs	r3, #22
 8013190:	6003      	str	r3, [r0, #0]
 8013192:	2001      	movs	r0, #1
 8013194:	e7e7      	b.n	8013166 <_raise_r+0x12>
 8013196:	2100      	movs	r1, #0
 8013198:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801319c:	4620      	mov	r0, r4
 801319e:	4798      	blx	r3
 80131a0:	2000      	movs	r0, #0
 80131a2:	e7e0      	b.n	8013166 <_raise_r+0x12>

080131a4 <raise>:
 80131a4:	4b02      	ldr	r3, [pc, #8]	@ (80131b0 <raise+0xc>)
 80131a6:	4601      	mov	r1, r0
 80131a8:	6818      	ldr	r0, [r3, #0]
 80131aa:	f7ff bfd3 	b.w	8013154 <_raise_r>
 80131ae:	bf00      	nop
 80131b0:	2400002c 	.word	0x2400002c

080131b4 <_kill_r>:
 80131b4:	b538      	push	{r3, r4, r5, lr}
 80131b6:	4d07      	ldr	r5, [pc, #28]	@ (80131d4 <_kill_r+0x20>)
 80131b8:	2300      	movs	r3, #0
 80131ba:	4604      	mov	r4, r0
 80131bc:	4608      	mov	r0, r1
 80131be:	4611      	mov	r1, r2
 80131c0:	602b      	str	r3, [r5, #0]
 80131c2:	f7ef f9cf 	bl	8002564 <_kill>
 80131c6:	1c43      	adds	r3, r0, #1
 80131c8:	d102      	bne.n	80131d0 <_kill_r+0x1c>
 80131ca:	682b      	ldr	r3, [r5, #0]
 80131cc:	b103      	cbz	r3, 80131d0 <_kill_r+0x1c>
 80131ce:	6023      	str	r3, [r4, #0]
 80131d0:	bd38      	pop	{r3, r4, r5, pc}
 80131d2:	bf00      	nop
 80131d4:	240005c0 	.word	0x240005c0

080131d8 <_getpid_r>:
 80131d8:	f7ef b9bc 	b.w	8002554 <_getpid>

080131dc <__swhatbuf_r>:
 80131dc:	b570      	push	{r4, r5, r6, lr}
 80131de:	460c      	mov	r4, r1
 80131e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80131e4:	2900      	cmp	r1, #0
 80131e6:	b096      	sub	sp, #88	@ 0x58
 80131e8:	4615      	mov	r5, r2
 80131ea:	461e      	mov	r6, r3
 80131ec:	da0d      	bge.n	801320a <__swhatbuf_r+0x2e>
 80131ee:	89a3      	ldrh	r3, [r4, #12]
 80131f0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80131f4:	f04f 0100 	mov.w	r1, #0
 80131f8:	bf14      	ite	ne
 80131fa:	2340      	movne	r3, #64	@ 0x40
 80131fc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8013200:	2000      	movs	r0, #0
 8013202:	6031      	str	r1, [r6, #0]
 8013204:	602b      	str	r3, [r5, #0]
 8013206:	b016      	add	sp, #88	@ 0x58
 8013208:	bd70      	pop	{r4, r5, r6, pc}
 801320a:	466a      	mov	r2, sp
 801320c:	f000 f848 	bl	80132a0 <_fstat_r>
 8013210:	2800      	cmp	r0, #0
 8013212:	dbec      	blt.n	80131ee <__swhatbuf_r+0x12>
 8013214:	9901      	ldr	r1, [sp, #4]
 8013216:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801321a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801321e:	4259      	negs	r1, r3
 8013220:	4159      	adcs	r1, r3
 8013222:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8013226:	e7eb      	b.n	8013200 <__swhatbuf_r+0x24>

08013228 <__smakebuf_r>:
 8013228:	898b      	ldrh	r3, [r1, #12]
 801322a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801322c:	079d      	lsls	r5, r3, #30
 801322e:	4606      	mov	r6, r0
 8013230:	460c      	mov	r4, r1
 8013232:	d507      	bpl.n	8013244 <__smakebuf_r+0x1c>
 8013234:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8013238:	6023      	str	r3, [r4, #0]
 801323a:	6123      	str	r3, [r4, #16]
 801323c:	2301      	movs	r3, #1
 801323e:	6163      	str	r3, [r4, #20]
 8013240:	b003      	add	sp, #12
 8013242:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013244:	ab01      	add	r3, sp, #4
 8013246:	466a      	mov	r2, sp
 8013248:	f7ff ffc8 	bl	80131dc <__swhatbuf_r>
 801324c:	9f00      	ldr	r7, [sp, #0]
 801324e:	4605      	mov	r5, r0
 8013250:	4639      	mov	r1, r7
 8013252:	4630      	mov	r0, r6
 8013254:	f7fd fca6 	bl	8010ba4 <_malloc_r>
 8013258:	b948      	cbnz	r0, 801326e <__smakebuf_r+0x46>
 801325a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801325e:	059a      	lsls	r2, r3, #22
 8013260:	d4ee      	bmi.n	8013240 <__smakebuf_r+0x18>
 8013262:	f023 0303 	bic.w	r3, r3, #3
 8013266:	f043 0302 	orr.w	r3, r3, #2
 801326a:	81a3      	strh	r3, [r4, #12]
 801326c:	e7e2      	b.n	8013234 <__smakebuf_r+0xc>
 801326e:	89a3      	ldrh	r3, [r4, #12]
 8013270:	6020      	str	r0, [r4, #0]
 8013272:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8013276:	81a3      	strh	r3, [r4, #12]
 8013278:	9b01      	ldr	r3, [sp, #4]
 801327a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801327e:	b15b      	cbz	r3, 8013298 <__smakebuf_r+0x70>
 8013280:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013284:	4630      	mov	r0, r6
 8013286:	f000 f81d 	bl	80132c4 <_isatty_r>
 801328a:	b128      	cbz	r0, 8013298 <__smakebuf_r+0x70>
 801328c:	89a3      	ldrh	r3, [r4, #12]
 801328e:	f023 0303 	bic.w	r3, r3, #3
 8013292:	f043 0301 	orr.w	r3, r3, #1
 8013296:	81a3      	strh	r3, [r4, #12]
 8013298:	89a3      	ldrh	r3, [r4, #12]
 801329a:	431d      	orrs	r5, r3
 801329c:	81a5      	strh	r5, [r4, #12]
 801329e:	e7cf      	b.n	8013240 <__smakebuf_r+0x18>

080132a0 <_fstat_r>:
 80132a0:	b538      	push	{r3, r4, r5, lr}
 80132a2:	4d07      	ldr	r5, [pc, #28]	@ (80132c0 <_fstat_r+0x20>)
 80132a4:	2300      	movs	r3, #0
 80132a6:	4604      	mov	r4, r0
 80132a8:	4608      	mov	r0, r1
 80132aa:	4611      	mov	r1, r2
 80132ac:	602b      	str	r3, [r5, #0]
 80132ae:	f7ef f9b9 	bl	8002624 <_fstat>
 80132b2:	1c43      	adds	r3, r0, #1
 80132b4:	d102      	bne.n	80132bc <_fstat_r+0x1c>
 80132b6:	682b      	ldr	r3, [r5, #0]
 80132b8:	b103      	cbz	r3, 80132bc <_fstat_r+0x1c>
 80132ba:	6023      	str	r3, [r4, #0]
 80132bc:	bd38      	pop	{r3, r4, r5, pc}
 80132be:	bf00      	nop
 80132c0:	240005c0 	.word	0x240005c0

080132c4 <_isatty_r>:
 80132c4:	b538      	push	{r3, r4, r5, lr}
 80132c6:	4d06      	ldr	r5, [pc, #24]	@ (80132e0 <_isatty_r+0x1c>)
 80132c8:	2300      	movs	r3, #0
 80132ca:	4604      	mov	r4, r0
 80132cc:	4608      	mov	r0, r1
 80132ce:	602b      	str	r3, [r5, #0]
 80132d0:	f7ef f9b8 	bl	8002644 <_isatty>
 80132d4:	1c43      	adds	r3, r0, #1
 80132d6:	d102      	bne.n	80132de <_isatty_r+0x1a>
 80132d8:	682b      	ldr	r3, [r5, #0]
 80132da:	b103      	cbz	r3, 80132de <_isatty_r+0x1a>
 80132dc:	6023      	str	r3, [r4, #0]
 80132de:	bd38      	pop	{r3, r4, r5, pc}
 80132e0:	240005c0 	.word	0x240005c0

080132e4 <checkint>:
 80132e4:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80132e8:	f240 33fe 	movw	r3, #1022	@ 0x3fe
 80132ec:	429a      	cmp	r2, r3
 80132ee:	b570      	push	{r4, r5, r6, lr}
 80132f0:	dd2a      	ble.n	8013348 <checkint+0x64>
 80132f2:	f240 4333 	movw	r3, #1075	@ 0x433
 80132f6:	429a      	cmp	r2, r3
 80132f8:	dc24      	bgt.n	8013344 <checkint+0x60>
 80132fa:	1a9b      	subs	r3, r3, r2
 80132fc:	f1a3 0620 	sub.w	r6, r3, #32
 8013300:	f04f 32ff 	mov.w	r2, #4294967295
 8013304:	fa02 f403 	lsl.w	r4, r2, r3
 8013308:	fa02 f606 	lsl.w	r6, r2, r6
 801330c:	f1c3 0520 	rsb	r5, r3, #32
 8013310:	fa22 f505 	lsr.w	r5, r2, r5
 8013314:	4334      	orrs	r4, r6
 8013316:	432c      	orrs	r4, r5
 8013318:	409a      	lsls	r2, r3
 801331a:	ea20 0202 	bic.w	r2, r0, r2
 801331e:	ea21 0404 	bic.w	r4, r1, r4
 8013322:	4322      	orrs	r2, r4
 8013324:	f1a3 0420 	sub.w	r4, r3, #32
 8013328:	f1c3 0220 	rsb	r2, r3, #32
 801332c:	d10c      	bne.n	8013348 <checkint+0x64>
 801332e:	40d8      	lsrs	r0, r3
 8013330:	fa01 f302 	lsl.w	r3, r1, r2
 8013334:	4318      	orrs	r0, r3
 8013336:	40e1      	lsrs	r1, r4
 8013338:	4308      	orrs	r0, r1
 801333a:	f000 0001 	and.w	r0, r0, #1
 801333e:	f1d0 0002 	rsbs	r0, r0, #2
 8013342:	bd70      	pop	{r4, r5, r6, pc}
 8013344:	2002      	movs	r0, #2
 8013346:	e7fc      	b.n	8013342 <checkint+0x5e>
 8013348:	2000      	movs	r0, #0
 801334a:	e7fa      	b.n	8013342 <checkint+0x5e>
 801334c:	0000      	movs	r0, r0
	...

08013350 <pow>:
 8013350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013354:	ee10 4a90 	vmov	r4, s1
 8013358:	ed2d 8b0a 	vpush	{d8-d12}
 801335c:	ea4f 5814 	mov.w	r8, r4, lsr #20
 8013360:	ee11 aa90 	vmov	sl, s3
 8013364:	f108 32ff 	add.w	r2, r8, #4294967295
 8013368:	f240 73fd 	movw	r3, #2045	@ 0x7fd
 801336c:	429a      	cmp	r2, r3
 801336e:	ee10 5a10 	vmov	r5, s0
 8013372:	ee11 0a10 	vmov	r0, s2
 8013376:	b087      	sub	sp, #28
 8013378:	46c4      	mov	ip, r8
 801337a:	ea4f 561a 	mov.w	r6, sl, lsr #20
 801337e:	d806      	bhi.n	801338e <pow+0x3e>
 8013380:	f3c6 030a 	ubfx	r3, r6, #0, #11
 8013384:	f2a3 33be 	subw	r3, r3, #958	@ 0x3be
 8013388:	2b7f      	cmp	r3, #127	@ 0x7f
 801338a:	f240 8157 	bls.w	801363c <pow+0x2ec>
 801338e:	1802      	adds	r2, r0, r0
 8013390:	eb4a 010a 	adc.w	r1, sl, sl
 8013394:	f06f 0b01 	mvn.w	fp, #1
 8013398:	1e57      	subs	r7, r2, #1
 801339a:	f141 33ff 	adc.w	r3, r1, #4294967295
 801339e:	f46f 1e00 	mvn.w	lr, #2097152	@ 0x200000
 80133a2:	45bb      	cmp	fp, r7
 80133a4:	eb7e 0303 	sbcs.w	r3, lr, r3
 80133a8:	d242      	bcs.n	8013430 <pow+0xe0>
 80133aa:	ea52 0301 	orrs.w	r3, r2, r1
 80133ae:	f04f 0300 	mov.w	r3, #0
 80133b2:	d10c      	bne.n	80133ce <pow+0x7e>
 80133b4:	196d      	adds	r5, r5, r5
 80133b6:	f484 2400 	eor.w	r4, r4, #524288	@ 0x80000
 80133ba:	4164      	adcs	r4, r4
 80133bc:	42ab      	cmp	r3, r5
 80133be:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80133c2:	41a3      	sbcs	r3, r4
 80133c4:	f0c0 808f 	bcc.w	80134e6 <pow+0x196>
 80133c8:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 80133cc:	e02b      	b.n	8013426 <pow+0xd6>
 80133ce:	4ed4      	ldr	r6, [pc, #848]	@ (8013720 <pow+0x3d0>)
 80133d0:	42b4      	cmp	r4, r6
 80133d2:	bf08      	it	eq
 80133d4:	429d      	cmpeq	r5, r3
 80133d6:	d109      	bne.n	80133ec <pow+0x9c>
 80133d8:	1800      	adds	r0, r0, r0
 80133da:	f48a 2a00 	eor.w	sl, sl, #524288	@ 0x80000
 80133de:	eb4a 0a0a 	adc.w	sl, sl, sl
 80133e2:	4283      	cmp	r3, r0
 80133e4:	4bcf      	ldr	r3, [pc, #828]	@ (8013724 <pow+0x3d4>)
 80133e6:	eb73 030a 	sbcs.w	r3, r3, sl
 80133ea:	e7eb      	b.n	80133c4 <pow+0x74>
 80133ec:	196d      	adds	r5, r5, r5
 80133ee:	48ce      	ldr	r0, [pc, #824]	@ (8013728 <pow+0x3d8>)
 80133f0:	4164      	adcs	r4, r4
 80133f2:	42ab      	cmp	r3, r5
 80133f4:	eb70 0604 	sbcs.w	r6, r0, r4
 80133f8:	d375      	bcc.n	80134e6 <pow+0x196>
 80133fa:	4281      	cmp	r1, r0
 80133fc:	bf08      	it	eq
 80133fe:	429a      	cmpeq	r2, r3
 8013400:	d171      	bne.n	80134e6 <pow+0x196>
 8013402:	4aca      	ldr	r2, [pc, #808]	@ (801372c <pow+0x3dc>)
 8013404:	4294      	cmp	r4, r2
 8013406:	bf08      	it	eq
 8013408:	429d      	cmpeq	r5, r3
 801340a:	d0dd      	beq.n	80133c8 <pow+0x78>
 801340c:	4294      	cmp	r4, r2
 801340e:	ea6f 0a0a 	mvn.w	sl, sl
 8013412:	bf34      	ite	cc
 8013414:	2400      	movcc	r4, #0
 8013416:	2401      	movcs	r4, #1
 8013418:	ea4f 7ada 	mov.w	sl, sl, lsr #31
 801341c:	4554      	cmp	r4, sl
 801341e:	f040 81dc 	bne.w	80137da <pow+0x48a>
 8013422:	ee21 0b01 	vmul.f64	d0, d1, d1
 8013426:	b007      	add	sp, #28
 8013428:	ecbd 8b0a 	vpop	{d8-d12}
 801342c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013430:	196f      	adds	r7, r5, r5
 8013432:	eb44 0904 	adc.w	r9, r4, r4
 8013436:	1e7a      	subs	r2, r7, #1
 8013438:	f169 0300 	sbc.w	r3, r9, #0
 801343c:	4593      	cmp	fp, r2
 801343e:	eb7e 0303 	sbcs.w	r3, lr, r3
 8013442:	d225      	bcs.n	8013490 <pow+0x140>
 8013444:	ee20 0b00 	vmul.f64	d0, d0, d0
 8013448:	2c00      	cmp	r4, #0
 801344a:	da13      	bge.n	8013474 <pow+0x124>
 801344c:	4651      	mov	r1, sl
 801344e:	f7ff ff49 	bl	80132e4 <checkint>
 8013452:	2801      	cmp	r0, #1
 8013454:	d10e      	bne.n	8013474 <pow+0x124>
 8013456:	eeb1 0b40 	vneg.f64	d0, d0
 801345a:	ea57 0909 	orrs.w	r9, r7, r9
 801345e:	d10b      	bne.n	8013478 <pow+0x128>
 8013460:	f1ba 0f00 	cmp.w	sl, #0
 8013464:	dadf      	bge.n	8013426 <pow+0xd6>
 8013466:	b007      	add	sp, #28
 8013468:	ecbd 8b0a 	vpop	{d8-d12}
 801346c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013470:	f000 b9ee 	b.w	8013850 <__math_divzero>
 8013474:	2000      	movs	r0, #0
 8013476:	e7f0      	b.n	801345a <pow+0x10a>
 8013478:	f1ba 0f00 	cmp.w	sl, #0
 801347c:	dad3      	bge.n	8013426 <pow+0xd6>
 801347e:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8013482:	ee86 7b00 	vdiv.f64	d7, d6, d0
 8013486:	ed8d 7b00 	vstr	d7, [sp]
 801348a:	ed9d 0b00 	vldr	d0, [sp]
 801348e:	e7ca      	b.n	8013426 <pow+0xd6>
 8013490:	2c00      	cmp	r4, #0
 8013492:	da2b      	bge.n	80134ec <pow+0x19c>
 8013494:	4651      	mov	r1, sl
 8013496:	f7ff ff25 	bl	80132e4 <checkint>
 801349a:	b930      	cbnz	r0, 80134aa <pow+0x15a>
 801349c:	b007      	add	sp, #28
 801349e:	ecbd 8b0a 	vpop	{d8-d12}
 80134a2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80134a6:	f000 b9eb 	b.w	8013880 <__math_invalid>
 80134aa:	1e41      	subs	r1, r0, #1
 80134ac:	4248      	negs	r0, r1
 80134ae:	4148      	adcs	r0, r1
 80134b0:	0480      	lsls	r0, r0, #18
 80134b2:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 80134b6:	f3c8 0c0a 	ubfx	ip, r8, #0, #11
 80134ba:	f3c6 020a 	ubfx	r2, r6, #0, #11
 80134be:	f2a2 33be 	subw	r3, r2, #958	@ 0x3be
 80134c2:	2b7f      	cmp	r3, #127	@ 0x7f
 80134c4:	d92d      	bls.n	8013522 <pow+0x1d2>
 80134c6:	4b96      	ldr	r3, [pc, #600]	@ (8013720 <pow+0x3d0>)
 80134c8:	2000      	movs	r0, #0
 80134ca:	429c      	cmp	r4, r3
 80134cc:	bf08      	it	eq
 80134ce:	4285      	cmpeq	r5, r0
 80134d0:	f43f af7a 	beq.w	80133c8 <pow+0x78>
 80134d4:	f240 31bd 	movw	r1, #957	@ 0x3bd
 80134d8:	428a      	cmp	r2, r1
 80134da:	d80c      	bhi.n	80134f6 <pow+0x1a6>
 80134dc:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 80134e0:	42a8      	cmp	r0, r5
 80134e2:	41a3      	sbcs	r3, r4
 80134e4:	d204      	bcs.n	80134f0 <pow+0x1a0>
 80134e6:	ee31 0b00 	vadd.f64	d0, d1, d0
 80134ea:	e79c      	b.n	8013426 <pow+0xd6>
 80134ec:	2000      	movs	r0, #0
 80134ee:	e7e4      	b.n	80134ba <pow+0x16a>
 80134f0:	ee30 0b41 	vsub.f64	d0, d0, d1
 80134f4:	e797      	b.n	8013426 <pow+0xd6>
 80134f6:	2d01      	cmp	r5, #1
 80134f8:	eb74 0303 	sbcs.w	r3, r4, r3
 80134fc:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8013500:	bf34      	ite	cc
 8013502:	2301      	movcc	r3, #1
 8013504:	2300      	movcs	r3, #0
 8013506:	4296      	cmp	r6, r2
 8013508:	bf8c      	ite	hi
 801350a:	2600      	movhi	r6, #0
 801350c:	2601      	movls	r6, #1
 801350e:	42b3      	cmp	r3, r6
 8013510:	f000 809c 	beq.w	801364c <pow+0x2fc>
 8013514:	b007      	add	sp, #28
 8013516:	ecbd 8b0a 	vpop	{d8-d12}
 801351a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801351e:	f000 b98f 	b.w	8013840 <__math_oflow>
 8013522:	f1bc 0f00 	cmp.w	ip, #0
 8013526:	d10a      	bne.n	801353e <pow+0x1ee>
 8013528:	ed9f 7b79 	vldr	d7, [pc, #484]	@ 8013710 <pow+0x3c0>
 801352c:	ee20 7b07 	vmul.f64	d7, d0, d7
 8013530:	ec53 2b17 	vmov	r2, r3, d7
 8013534:	f023 4400 	bic.w	r4, r3, #2147483648	@ 0x80000000
 8013538:	4615      	mov	r5, r2
 801353a:	f1a4 7450 	sub.w	r4, r4, #54525952	@ 0x3400000
 801353e:	4a7c      	ldr	r2, [pc, #496]	@ (8013730 <pow+0x3e0>)
 8013540:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 8013544:	4422      	add	r2, r4
 8013546:	1513      	asrs	r3, r2, #20
 8013548:	f3c2 3146 	ubfx	r1, r2, #13, #7
 801354c:	ee03 3a10 	vmov	s6, r3
 8013550:	0d12      	lsrs	r2, r2, #20
 8013552:	4b78      	ldr	r3, [pc, #480]	@ (8013734 <pow+0x3e4>)
 8013554:	0512      	lsls	r2, r2, #20
 8013556:	eb03 1641 	add.w	r6, r3, r1, lsl #5
 801355a:	1aa7      	subs	r7, r4, r2
 801355c:	eb03 1241 	add.w	r2, r3, r1, lsl #5
 8013560:	ed92 5b12 	vldr	d5, [r2, #72]	@ 0x48
 8013564:	ed96 7b18 	vldr	d7, [r6, #96]	@ 0x60
 8013568:	1e2e      	subs	r6, r5, #0
 801356a:	ec47 6b14 	vmov	d4, r6, r7
 801356e:	ed92 2b16 	vldr	d2, [r2, #88]	@ 0x58
 8013572:	eea4 6b05 	vfma.f64	d6, d4, d5
 8013576:	ed93 5b00 	vldr	d5, [r3]
 801357a:	eeb8 3bc3 	vcvt.f64.s32	d3, s6
 801357e:	eea3 2b05 	vfma.f64	d2, d3, d5
 8013582:	ed93 5b02 	vldr	d5, [r3, #8]
 8013586:	ee36 4b02 	vadd.f64	d4, d6, d2
 801358a:	ee32 2b44 	vsub.f64	d2, d2, d4
 801358e:	eea3 7b05 	vfma.f64	d7, d3, d5
 8013592:	ed93 5b04 	vldr	d5, [r3, #16]
 8013596:	ee32 2b06 	vadd.f64	d2, d2, d6
 801359a:	ee37 7b02 	vadd.f64	d7, d7, d2
 801359e:	ee26 5b05 	vmul.f64	d5, d6, d5
 80135a2:	ee26 0b05 	vmul.f64	d0, d6, d5
 80135a6:	ee34 8b00 	vadd.f64	d8, d4, d0
 80135aa:	eeb0 9b40 	vmov.f64	d9, d0
 80135ae:	ee34 4b48 	vsub.f64	d4, d4, d8
 80135b2:	ee96 9b05 	vfnms.f64	d9, d6, d5
 80135b6:	ee34 ab00 	vadd.f64	d10, d4, d0
 80135ba:	ed93 5b06 	vldr	d5, [r3, #24]
 80135be:	ee26 bb00 	vmul.f64	d11, d6, d0
 80135c2:	ee37 7b09 	vadd.f64	d7, d7, d9
 80135c6:	ed93 4b08 	vldr	d4, [r3, #32]
 80135ca:	ee37 7b0a 	vadd.f64	d7, d7, d10
 80135ce:	ed93 3b0c 	vldr	d3, [r3, #48]	@ 0x30
 80135d2:	eea6 5b04 	vfma.f64	d5, d6, d4
 80135d6:	ed93 4b0a 	vldr	d4, [r3, #40]	@ 0x28
 80135da:	ed93 cb10 	vldr	d12, [r3, #64]	@ 0x40
 80135de:	eea6 4b03 	vfma.f64	d4, d6, d3
 80135e2:	ed93 3b0e 	vldr	d3, [r3, #56]	@ 0x38
 80135e6:	eea6 3b0c 	vfma.f64	d3, d6, d12
 80135ea:	eea0 4b03 	vfma.f64	d4, d0, d3
 80135ee:	eea0 5b04 	vfma.f64	d5, d0, d4
 80135f2:	eeab 7b05 	vfma.f64	d7, d11, d5
 80135f6:	ee38 4b07 	vadd.f64	d4, d8, d7
 80135fa:	ee21 6b04 	vmul.f64	d6, d1, d4
 80135fe:	ee16 3a90 	vmov	r3, s13
 8013602:	eeb0 5b46 	vmov.f64	d5, d6
 8013606:	f3c3 560a 	ubfx	r6, r3, #20, #11
 801360a:	f46f 7272 	mvn.w	r2, #968	@ 0x3c8
 801360e:	18b2      	adds	r2, r6, r2
 8013610:	2a3e      	cmp	r2, #62	@ 0x3e
 8013612:	ee91 5b04 	vfnms.f64	d5, d1, d4
 8013616:	ee38 8b44 	vsub.f64	d8, d8, d4
 801361a:	ee38 8b07 	vadd.f64	d8, d8, d7
 801361e:	eea1 5b08 	vfma.f64	d5, d1, d8
 8013622:	d91b      	bls.n	801365c <pow+0x30c>
 8013624:	2a00      	cmp	r2, #0
 8013626:	da0b      	bge.n	8013640 <pow+0x2f0>
 8013628:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 801362c:	ee36 0b00 	vadd.f64	d0, d6, d0
 8013630:	2800      	cmp	r0, #0
 8013632:	f43f aef8 	beq.w	8013426 <pow+0xd6>
 8013636:	eeb1 0b40 	vneg.f64	d0, d0
 801363a:	e6f4      	b.n	8013426 <pow+0xd6>
 801363c:	2000      	movs	r0, #0
 801363e:	e77e      	b.n	801353e <pow+0x1ee>
 8013640:	f5b6 6f81 	cmp.w	r6, #1032	@ 0x408
 8013644:	d909      	bls.n	801365a <pow+0x30a>
 8013646:	2b00      	cmp	r3, #0
 8013648:	f6bf af64 	bge.w	8013514 <pow+0x1c4>
 801364c:	b007      	add	sp, #28
 801364e:	ecbd 8b0a 	vpop	{d8-d12}
 8013652:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013656:	f000 b8eb 	b.w	8013830 <__math_uflow>
 801365a:	2600      	movs	r6, #0
 801365c:	4936      	ldr	r1, [pc, #216]	@ (8013738 <pow+0x3e8>)
 801365e:	ed91 4b02 	vldr	d4, [r1, #8]
 8013662:	ed91 3b00 	vldr	d3, [r1]
 8013666:	eeb0 7b44 	vmov.f64	d7, d4
 801366a:	eea6 7b03 	vfma.f64	d7, d6, d3
 801366e:	ee17 5a10 	vmov	r5, s14
 8013672:	ee37 7b44 	vsub.f64	d7, d7, d4
 8013676:	ed91 4b04 	vldr	d4, [r1, #16]
 801367a:	f005 037f 	and.w	r3, r5, #127	@ 0x7f
 801367e:	eea7 6b04 	vfma.f64	d6, d7, d4
 8013682:	ed91 4b06 	vldr	d4, [r1, #24]
 8013686:	18dc      	adds	r4, r3, r3
 8013688:	f104 030f 	add.w	r3, r4, #15
 801368c:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 8013690:	eea7 6b04 	vfma.f64	d6, d7, d4
 8013694:	ed91 3b0a 	vldr	d3, [r1, #40]	@ 0x28
 8013698:	ee35 5b06 	vadd.f64	d5, d5, d6
 801369c:	ee25 6b05 	vmul.f64	d6, d5, d5
 80136a0:	ed94 7b1c 	vldr	d7, [r4, #112]	@ 0x70
 80136a4:	ed91 4b08 	vldr	d4, [r1, #32]
 80136a8:	ee35 7b07 	vadd.f64	d7, d5, d7
 80136ac:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 80136b0:	eea5 4b03 	vfma.f64	d4, d5, d3
 80136b4:	ed91 3b0e 	vldr	d3, [r1, #56]	@ 0x38
 80136b8:	eea6 7b04 	vfma.f64	d7, d6, d4
 80136bc:	ee26 6b06 	vmul.f64	d6, d6, d6
 80136c0:	ed91 4b0c 	vldr	d4, [r1, #48]	@ 0x30
 80136c4:	f851 c033 	ldr.w	ip, [r1, r3, lsl #3]
 80136c8:	f8d2 e004 	ldr.w	lr, [r2, #4]
 80136cc:	eea5 4b03 	vfma.f64	d4, d5, d3
 80136d0:	1940      	adds	r0, r0, r5
 80136d2:	2700      	movs	r7, #0
 80136d4:	eb17 020c 	adds.w	r2, r7, ip
 80136d8:	eb0e 3340 	add.w	r3, lr, r0, lsl #13
 80136dc:	eea6 7b04 	vfma.f64	d7, d6, d4
 80136e0:	2e00      	cmp	r6, #0
 80136e2:	d175      	bne.n	80137d0 <pow+0x480>
 80136e4:	42bd      	cmp	r5, r7
 80136e6:	db29      	blt.n	801373c <pow+0x3ec>
 80136e8:	f103 4140 	add.w	r1, r3, #3221225472	@ 0xc0000000
 80136ec:	f501 0170 	add.w	r1, r1, #15728640	@ 0xf00000
 80136f0:	4610      	mov	r0, r2
 80136f2:	ec41 0b10 	vmov	d0, r0, r1
 80136f6:	eea7 0b00 	vfma.f64	d0, d7, d0
 80136fa:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 8013718 <pow+0x3c8>
 80136fe:	ee20 0b07 	vmul.f64	d0, d0, d7
 8013702:	b007      	add	sp, #28
 8013704:	ecbd 8b0a 	vpop	{d8-d12}
 8013708:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801370c:	f000 b8d0 	b.w	80138b0 <__math_check_oflow>
 8013710:	00000000 	.word	0x00000000
 8013714:	43300000 	.word	0x43300000
 8013718:	00000000 	.word	0x00000000
 801371c:	7f000000 	.word	0x7f000000
 8013720:	3ff00000 	.word	0x3ff00000
 8013724:	fff00000 	.word	0xfff00000
 8013728:	ffe00000 	.word	0xffe00000
 801372c:	7fe00000 	.word	0x7fe00000
 8013730:	c0196aab 	.word	0xc0196aab
 8013734:	08013f30 	.word	0x08013f30
 8013738:	08014f78 	.word	0x08014f78
 801373c:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 8013740:	f501 1100 	add.w	r1, r1, #2097152	@ 0x200000
 8013744:	4610      	mov	r0, r2
 8013746:	ec41 0b15 	vmov	d5, r0, r1
 801374a:	eeb7 3b00 	vmov.f64	d3, #112	@ 0x3f800000  1.0
 801374e:	ee27 6b05 	vmul.f64	d6, d7, d5
 8013752:	ee35 7b06 	vadd.f64	d7, d5, d6
 8013756:	eeb0 4bc7 	vabs.f64	d4, d7
 801375a:	eeb4 4bc3 	vcmpe.f64	d4, d3
 801375e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013762:	ed9f 0b1f 	vldr	d0, [pc, #124]	@ 80137e0 <pow+0x490>
 8013766:	d52a      	bpl.n	80137be <pow+0x46e>
 8013768:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 801376c:	ee35 5b47 	vsub.f64	d5, d5, d7
 8013770:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013774:	ee35 5b06 	vadd.f64	d5, d5, d6
 8013778:	eebf 4b00 	vmov.f64	d4, #240	@ 0xbf800000 -1.0
 801377c:	bf58      	it	pl
 801377e:	eeb0 4b43 	vmovpl.f64	d4, d3
 8013782:	ee37 3b04 	vadd.f64	d3, d7, d4
 8013786:	ee34 6b43 	vsub.f64	d6, d4, d3
 801378a:	ee36 6b07 	vadd.f64	d6, d6, d7
 801378e:	ee36 6b05 	vadd.f64	d6, d6, d5
 8013792:	ee36 6b03 	vadd.f64	d6, d6, d3
 8013796:	ee36 7b44 	vsub.f64	d7, d6, d4
 801379a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801379e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80137a2:	d104      	bne.n	80137ae <pow+0x45e>
 80137a4:	4632      	mov	r2, r6
 80137a6:	f001 4300 	and.w	r3, r1, #2147483648	@ 0x80000000
 80137aa:	ec43 2b17 	vmov	d7, r2, r3
 80137ae:	ed8d 0b02 	vstr	d0, [sp, #8]
 80137b2:	ed9d 6b02 	vldr	d6, [sp, #8]
 80137b6:	ee26 6b00 	vmul.f64	d6, d6, d0
 80137ba:	ed8d 6b04 	vstr	d6, [sp, #16]
 80137be:	ee27 0b00 	vmul.f64	d0, d7, d0
 80137c2:	b007      	add	sp, #28
 80137c4:	ecbd 8b0a 	vpop	{d8-d12}
 80137c8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80137cc:	f000 b867 	b.w	801389e <__math_check_uflow>
 80137d0:	ec43 2b10 	vmov	d0, r2, r3
 80137d4:	eea7 0b00 	vfma.f64	d0, d7, d0
 80137d8:	e625      	b.n	8013426 <pow+0xd6>
 80137da:	ed9f 0b03 	vldr	d0, [pc, #12]	@ 80137e8 <pow+0x498>
 80137de:	e622      	b.n	8013426 <pow+0xd6>
 80137e0:	00000000 	.word	0x00000000
 80137e4:	00100000 	.word	0x00100000
	...

080137f0 <with_errno>:
 80137f0:	b510      	push	{r4, lr}
 80137f2:	ed2d 8b02 	vpush	{d8}
 80137f6:	eeb0 8b40 	vmov.f64	d8, d0
 80137fa:	4604      	mov	r4, r0
 80137fc:	f7fc fb3e 	bl	800fe7c <__errno>
 8013800:	eeb0 0b48 	vmov.f64	d0, d8
 8013804:	ecbd 8b02 	vpop	{d8}
 8013808:	6004      	str	r4, [r0, #0]
 801380a:	bd10      	pop	{r4, pc}

0801380c <xflow>:
 801380c:	b082      	sub	sp, #8
 801380e:	b158      	cbz	r0, 8013828 <xflow+0x1c>
 8013810:	eeb1 7b40 	vneg.f64	d7, d0
 8013814:	ed8d 7b00 	vstr	d7, [sp]
 8013818:	ed9d 7b00 	vldr	d7, [sp]
 801381c:	2022      	movs	r0, #34	@ 0x22
 801381e:	ee20 0b07 	vmul.f64	d0, d0, d7
 8013822:	b002      	add	sp, #8
 8013824:	f7ff bfe4 	b.w	80137f0 <with_errno>
 8013828:	eeb0 7b40 	vmov.f64	d7, d0
 801382c:	e7f2      	b.n	8013814 <xflow+0x8>
	...

08013830 <__math_uflow>:
 8013830:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8013838 <__math_uflow+0x8>
 8013834:	f7ff bfea 	b.w	801380c <xflow>
 8013838:	00000000 	.word	0x00000000
 801383c:	10000000 	.word	0x10000000

08013840 <__math_oflow>:
 8013840:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8013848 <__math_oflow+0x8>
 8013844:	f7ff bfe2 	b.w	801380c <xflow>
 8013848:	00000000 	.word	0x00000000
 801384c:	70000000 	.word	0x70000000

08013850 <__math_divzero>:
 8013850:	b082      	sub	sp, #8
 8013852:	2800      	cmp	r0, #0
 8013854:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 8013858:	eeb7 7b00 	vmov.f64	d7, #112	@ 0x3f800000  1.0
 801385c:	fe07 7b06 	vseleq.f64	d7, d7, d6
 8013860:	ed8d 7b00 	vstr	d7, [sp]
 8013864:	ed9d 0b00 	vldr	d0, [sp]
 8013868:	ed9f 7b03 	vldr	d7, [pc, #12]	@ 8013878 <__math_divzero+0x28>
 801386c:	2022      	movs	r0, #34	@ 0x22
 801386e:	ee80 0b07 	vdiv.f64	d0, d0, d7
 8013872:	b002      	add	sp, #8
 8013874:	f7ff bfbc 	b.w	80137f0 <with_errno>
	...

08013880 <__math_invalid>:
 8013880:	eeb0 7b40 	vmov.f64	d7, d0
 8013884:	eeb4 7b47 	vcmp.f64	d7, d7
 8013888:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801388c:	ee30 6b40 	vsub.f64	d6, d0, d0
 8013890:	ee86 0b06 	vdiv.f64	d0, d6, d6
 8013894:	d602      	bvs.n	801389c <__math_invalid+0x1c>
 8013896:	2021      	movs	r0, #33	@ 0x21
 8013898:	f7ff bfaa 	b.w	80137f0 <with_errno>
 801389c:	4770      	bx	lr

0801389e <__math_check_uflow>:
 801389e:	eeb5 0b40 	vcmp.f64	d0, #0.0
 80138a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80138a6:	d102      	bne.n	80138ae <__math_check_uflow+0x10>
 80138a8:	2022      	movs	r0, #34	@ 0x22
 80138aa:	f7ff bfa1 	b.w	80137f0 <with_errno>
 80138ae:	4770      	bx	lr

080138b0 <__math_check_oflow>:
 80138b0:	ed9f 6b07 	vldr	d6, [pc, #28]	@ 80138d0 <__math_check_oflow+0x20>
 80138b4:	eeb0 7bc0 	vabs.f64	d7, d0
 80138b8:	eeb4 7b46 	vcmp.f64	d7, d6
 80138bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80138c0:	dd02      	ble.n	80138c8 <__math_check_oflow+0x18>
 80138c2:	2022      	movs	r0, #34	@ 0x22
 80138c4:	f7ff bf94 	b.w	80137f0 <with_errno>
 80138c8:	4770      	bx	lr
 80138ca:	bf00      	nop
 80138cc:	f3af 8000 	nop.w
 80138d0:	ffffffff 	.word	0xffffffff
 80138d4:	7fefffff 	.word	0x7fefffff

080138d8 <_init>:
 80138d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80138da:	bf00      	nop
 80138dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80138de:	bc08      	pop	{r3}
 80138e0:	469e      	mov	lr, r3
 80138e2:	4770      	bx	lr

080138e4 <_fini>:
 80138e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80138e6:	bf00      	nop
 80138e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80138ea:	bc08      	pop	{r3}
 80138ec:	469e      	mov	lr, r3
 80138ee:	4770      	bx	lr
